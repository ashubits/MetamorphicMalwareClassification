import java.util.Random;
import java.io.BufferedWriter;
import java.io.FileWriter;

import weka.core.converters.ConverterUtils.DataSource;
import weka.core.Instances;
import weka.classifiers.trees.*;
import weka.classifiers.Evaluation;
import weka.classifiers.bayes.NaiveBayes;
//import weka.classifiers.AbstractClassifier;




public class Classifier5_testing{
    
    
    static double[][] accuracy= new double[10][14];
    static double[][] tprate= new double[10][42];
    static double[][] fprate= new double[10][42];
    static double[][] precision= new double[10][42];
    static double[][] recall= new double[10][42];
    static double[][] fmeasure= new double[10][42];
    static double[][] rocarea= new double[10][42];
    static double[][] tnrate=new double[10][42];
    static double[][] fnrate=new double[10][42];
    static double[][] confmat=new double[28][28];
    
    
    public static void main(String args[]){
        
        String folder= args[0];//+m+"m"+n;
        System.out.println(folder);

        try{
            //for(int m=1;m<5;m++){
            //	for(int n=1;n<5;n++){
            
            
            
            System.out.println("first clesr"+"\n");
           
            for (int i = 20,j=0,k=0; i <= 200; i+=20,j++,k+=2) {//change
                String file_path="../wekadata/" + folder;
                
                System.out.println(file_path);
                
                System.out.println(file_path+"/train_"+i+".csv");
                DataSource train = new DataSource(file_path+"/train_"+i+".csv");
                DataSource test = new DataSource(file_path+"/test_"+i+".csv");
                
                
                System.out.println("second clesr"+"\n");
                
                
                Instances train_data = train.getDataSet();
                if (train_data.classIndex() == -1)
                    train_data.setClassIndex(train_data.numAttributes() - 1);
                
                Instances test_data = test.getDataSet();
                if (test_data.classIndex() == -1)
                    test_data.setClassIndex(test_data.numAttributes() - 1);
                
                
                
                
                J48 cls0 = new J48();
                cls0.buildClassifier(train_data);
                Evaluation eval0 = new Evaluation(train_data);
                
                eval0.evaluateModel(cls0, test_data);
                
                int xx=0;
                accuracy[j][xx]=eval0.pctCorrect();
                
                tprate[j][xx]=eval0.weightedTruePositiveRate();
                tprate[j][xx+5]=eval0.truePositiveRate(0);
                tprate[j][xx+10]=eval0.truePositiveRate(1);
                
                fprate[j][xx]=eval0.weightedFalsePositiveRate();
                fprate[j][xx+5]=eval0.falsePositiveRate(0);
                fprate[j][xx+10]=eval0.falsePositiveRate(1);
                
                precision[j][xx]=eval0.weightedPrecision();
                precision[j][xx+5]=eval0.precision(0);
                precision[j][xx+10]=eval0.precision(1);
                
                recall[j][xx]=eval0.weightedRecall();
                recall[j][xx+5]=eval0.recall(0);
                recall[j][xx+10]=eval0.recall(1);
                
                fmeasure[j][xx]=eval0.weightedFMeasure();
                fmeasure[j][xx+5]=eval0.fMeasure(0);
                fmeasure[j][xx+10]=eval0.fMeasure(1);
                
                rocarea[j][xx]=eval0.weightedAreaUnderROC();
                rocarea[j][xx+5]=eval0.areaUnderROC(0);
                rocarea[j][xx+10]=eval0.areaUnderROC(1);
                
                tnrate[j][xx]=eval0.weightedTrueNegativeRate();
                tnrate[j][xx+5]=eval0.trueNegativeRate(0);
                tnrate[j][xx+10]=eval0.trueNegativeRate(1);
                
                fnrate[j][xx]=eval0.weightedFalseNegativeRate();
                fnrate[j][xx+5]=eval0.falseNegativeRate(0);
                fnrate[j][xx+10]=eval0.falseNegativeRate(1);
                
                confmat[k][0]=eval0.confusionMatrix()[0][0];
                confmat[k][1]=eval0.confusionMatrix()[0][1];
                confmat[k+1][0]=eval0.confusionMatrix()[1][0];
                confmat[k+1][1]=eval0.confusionMatrix()[1][1];
                xx++;
                
                
                
                RandomForest cls1 = new RandomForest();
                cls1.buildClassifier(train_data);
                Evaluation eval1 = new Evaluation(train_data);
                eval1.evaluateModel(cls1, test_data);
                
                accuracy[j][xx]=eval1.pctCorrect();
                
                tprate[j][xx]=eval1.weightedTruePositiveRate();
                tprate[j][xx+5]=eval1.truePositiveRate(0);
                tprate[j][xx+10]=eval1.truePositiveRate(1);
                
                fprate[j][xx]=eval1.weightedFalsePositiveRate();
                fprate[j][xx+5]=eval1.falsePositiveRate(0);
                fprate[j][xx+10]=eval1.falsePositiveRate(1);
                
                precision[j][xx]=eval1.weightedPrecision();
                precision[j][xx+5]=eval1.precision(0);
                precision[j][xx+10]=eval1.precision(1);
                
                recall[j][xx]=eval1.weightedRecall();
                recall[j][xx+5]=eval1.recall(0);
                recall[j][xx+10]=eval1.recall(1);
                
                fmeasure[j][xx]=eval1.weightedFMeasure();
                fmeasure[j][xx+5]=eval1.fMeasure(0);
                fmeasure[j][xx+10]=eval1.fMeasure(1);
                
                rocarea[j][xx]=eval1.weightedAreaUnderROC();
                rocarea[j][xx+5]=eval1.areaUnderROC(0);
                rocarea[j][xx+10]=eval1.areaUnderROC(1);
                
                tnrate[j][xx]=eval1.weightedTrueNegativeRate();
                tnrate[j][xx+5]=eval1.trueNegativeRate(0);
                tnrate[j][xx+10]=eval1.trueNegativeRate(1);
                
                fnrate[j][xx]=eval1.weightedFalseNegativeRate();
                fnrate[j][xx+5]=eval1.falseNegativeRate(0);
                fnrate[j][xx+10]=eval1.falseNegativeRate(1);
                
                confmat[k][2]=eval1.confusionMatrix()[0][0];
                confmat[k][3]=eval1.confusionMatrix()[0][1];
                confmat[k+1][2]=eval1.confusionMatrix()[1][0];
                confmat[k+1][3]=eval1.confusionMatrix()[1][1];
                xx++;
                
                NBTree cls2 = new NBTree();
                cls2.buildClassifier(train_data);
                Evaluation eval2 = new Evaluation(train_data);
                eval2.evaluateModel(cls2, test_data);
                
                
                accuracy[j][xx]=eval2.pctCorrect();
                
                tprate[j][xx]=eval2.weightedTruePositiveRate();
                tprate[j][xx+5]=eval2.truePositiveRate(0);
                tprate[j][xx+10]=eval2.truePositiveRate(1);
                
                fprate[j][xx]=eval2.weightedFalsePositiveRate();
                fprate[j][xx+5]=eval2.falsePositiveRate(0);
                fprate[j][xx+10]=eval2.falsePositiveRate(1);
                
                precision[j][xx]=eval2.weightedPrecision();
                precision[j][xx+5]=eval2.precision(0);
                precision[j][xx+10]=eval2.precision(1);
                
                recall[j][xx]=eval2.weightedRecall();
                recall[j][xx+5]=eval2.recall(0);
                recall[j][xx+10]=eval2.recall(1);
                
                fmeasure[j][xx]=eval2.weightedFMeasure();
                fmeasure[j][xx+5]=eval2.fMeasure(0);
                fmeasure[j][xx+10]=eval2.fMeasure(1);
                
                rocarea[j][xx]=eval2.weightedAreaUnderROC();
                rocarea[j][xx+5]=eval2.areaUnderROC(0);
                rocarea[j][xx+10]=eval2.areaUnderROC(1);
                
                tnrate[j][xx]=eval2.weightedTrueNegativeRate();
                tnrate[j][xx+5]=eval2.trueNegativeRate(0);
                tnrate[j][xx+10]=eval2.trueNegativeRate(1);
                
                fnrate[j][xx]=eval2.weightedFalseNegativeRate();
                fnrate[j][xx+5]=eval2.falseNegativeRate(0);
                fnrate[j][xx+10]=eval2.falseNegativeRate(1);
                
                confmat[k][4]=eval2.confusionMatrix()[0][0];
                confmat[k][5]=eval2.confusionMatrix()[0][1];
                confmat[k+1][4]=eval2.confusionMatrix()[1][0];
                confmat[k+1][5]=eval2.confusionMatrix()[1][1];
                xx++;
                
                FT cls3 = new FT();
                cls3.buildClassifier(train_data);
                Evaluation eval3 = new Evaluation(train_data);
                eval3.evaluateModel(cls3, test_data);
                accuracy[j][xx]=eval3.pctCorrect();
                
                tprate[j][xx]=eval3.weightedTruePositiveRate();
                tprate[j][xx+5]=eval3.truePositiveRate(0);
                tprate[j][xx+10]=eval3.truePositiveRate(1);
                
                fprate[j][xx]=eval3.weightedFalsePositiveRate();
                fprate[j][xx+5]=eval3.falsePositiveRate(0);
                fprate[j][xx+10]=eval3.falsePositiveRate(1);
                
                precision[j][xx]=eval3.weightedPrecision();
                precision[j][xx+5]=eval3.precision(0);
                precision[j][xx+10]=eval3.precision(1);
                
                recall[j][xx]=eval3.weightedRecall();
                recall[j][xx+5]=eval3.recall(0);
                recall[j][xx+10]=eval3.recall(1);
                
                fmeasure[j][xx]=eval3.weightedFMeasure();
                fmeasure[j][xx+5]=eval3.fMeasure(0);
                fmeasure[j][xx+10]=eval3.fMeasure(1);
                
                rocarea[j][xx]=eval3.weightedAreaUnderROC();
                rocarea[j][xx+5]=eval3.areaUnderROC(0);
                rocarea[j][xx+10]=eval3.areaUnderROC(1);
                
                tnrate[j][xx]=eval3.weightedTrueNegativeRate();
                tnrate[j][xx+5]=eval3.trueNegativeRate(0);
                tnrate[j][xx+10]=eval3.trueNegativeRate(1);
                
                fnrate[j][xx]=eval3.weightedFalseNegativeRate();
                fnrate[j][xx+5]=eval3.falseNegativeRate(0);
                fnrate[j][xx+10]=eval3.falseNegativeRate(1);
                
                confmat[k][6]=eval3.confusionMatrix()[0][0];
                confmat[k][7]=eval3.confusionMatrix()[0][1];
                confmat[k+1][6]=eval3.confusionMatrix()[1][0];
                confmat[k+1][7]=eval3.confusionMatrix()[1][1];
                xx++;
                
                
                LMT cls4 = new LMT();
                cls4.buildClassifier(train_data);
                Evaluation eval4 = new Evaluation(train_data);
                eval4.evaluateModel(cls4, test_data);
                
                accuracy[j][xx]=eval4.pctCorrect();
                
                tprate[j][xx]=eval4.weightedTruePositiveRate();
                tprate[j][xx+5]=eval4.truePositiveRate(0);
                tprate[j][xx+10]=eval4.truePositiveRate(1);
                
                fprate[j][xx]=eval4.weightedFalsePositiveRate();
                fprate[j][xx+5]=eval4.falsePositiveRate(0);
                fprate[j][xx+10]=eval4.falsePositiveRate(1);
                
                precision[j][xx]=eval4.weightedPrecision();
                precision[j][xx+5]=eval4.precision(0);
                precision[j][xx+10]=eval4.precision(1);
                
                recall[j][xx]=eval4.weightedRecall();
                recall[j][xx+5]=eval4.recall(0);
                recall[j][xx+10]=eval4.recall(1);
                
                fmeasure[j][xx]=eval4.weightedFMeasure();
                fmeasure[j][xx+5]=eval4.fMeasure(0);
                fmeasure[j][xx+10]=eval4.fMeasure(1);
                
                rocarea[j][xx]=eval4.weightedAreaUnderROC();
                rocarea[j][xx+5]=eval4.areaUnderROC(0);
                rocarea[j][xx+10]=eval4.areaUnderROC(1);
                
                tnrate[j][xx]=eval4.weightedTrueNegativeRate();
                tnrate[j][xx+5]=eval4.trueNegativeRate(0);
                tnrate[j][xx+10]=eval4.trueNegativeRate(1);
                
                fnrate[j][xx]=eval4.weightedFalseNegativeRate();
                fnrate[j][xx+5]=eval4.falseNegativeRate(0);
                fnrate[j][xx+10]=eval4.falseNegativeRate(1);
                
                confmat[k][8]=eval4.confusionMatrix()[0][0];
                confmat[k][9]=eval4.confusionMatrix()[0][1];
                confmat[k+1][8]=eval4.confusionMatrix()[1][0];
                confmat[k+1][9]=eval4.confusionMatrix()[1][1];
                xx++;
                
                
                
                
                for (int kk = 0; kk < 5; kk++) {
                    System.out.print(accuracy[j][kk]+"\t");
                }
                System.out.print("\n");
                //System.out.println(cls);
                //System.out.println(eval.toMatrixString());
                //System.out.println(eval4.toClassDetailsString());
                //System.out.println(eval.toSummaryString("\nResults\n======\n", false));
               //System.out.println(eval.pctCorrect());
            
            }
            
            
        }
        catch(Exception e){
            System.out.println(e);
            System.out.println("exception in evaluation");
        }
        
        
        
        
        
        
        
        try{
            
            //writing accuracy to file
            String out_path="../wekadata/results/";
            
            BufferedWriter br = new BufferedWriter(new FileWriter(out_path+ folder + "_accuracy.csv"));
            br.write(",J48,RandomForest,NBT,FT,LMT\n");
            for(int k=0,o=20;k<10;k++,o+=20){
                br.write("dom_"+o+",");
                StringBuilder sb = new StringBuilder();
                for(int l=0;l<5;l++) {
                    sb.append(accuracy[k][l]);
                    if(l==4)
                        sb.append("\n");
                    else
                        sb.append(",");
                }
                
                br.write(sb.toString());
            }
            br.close();
            
            
            // writing tp rate in file
            String out_path1="../wekadata/results/";
            
            BufferedWriter br1 = new BufferedWriter(new FileWriter(out_path + folder + "_tprate.csv"));
            br1.write(",,,,Weighted,,,,Benign,,,,Malware,,,\n");
            br1.write(",J48,RandomForest,NBT,FT,LMT,J48,RandomForest,NBT,FT,LMT,J48,RandomForest,NBT,FT,LMT\n");
            for(int k=0,o=20;k<10;k++,o+=20){
                br1.write("dom_"+o+",");
                StringBuilder sb = new StringBuilder();
                for(int l=0;l<15;l++) {
                    sb.append(tprate[k][l]);
                    if(l==14)
                        sb.append("\n");
                    else
                        sb.append(",");
                }
                
                br1.write(sb.toString());
            }
            br1.close();
            
            //writing fprate to file
            String out_path2="../wekadata/results/";
            
            BufferedWriter br2 = new BufferedWriter(new FileWriter(out_path + folder + "_fprate.csv"));
            br2.write(",,,,Weighted,,,,Benign,,,,Malware,,,\n");
            br2.write(",J48,RandomForest,NBT,FT,LMT,J48,RandomForest,NBT,FT,LMT,J48,RandomForest,NBT,FT,LMT\n");
            for(int k=0,o=20;k<10;k++,o+=20){
                br2.write("dom_"+o+",");
                StringBuilder sb = new StringBuilder();
                for(int l=0;l<15;l++) {
                    sb.append(fprate[k][l]);
                    if(l==14)
                        sb.append("\n");
                    else
                        sb.append(",");
                }
                
                br2.write(sb.toString());
            }
            br2.close();
            
            //writing precision to file
            String out_path3="../wekadata/results/";
            
            BufferedWriter br3 = new BufferedWriter(new FileWriter(out_path + folder + "_precision.csv"));
            br3.write(",,,,Weighted,,,,Benign,,,,Malware,,,\n");
            br3.write(",J48,RandomForest,NBT,FT,LMT,J48,RandomForest,NBT,FT,LMT,J48,RandomForest,NBT,FT,LMT\n");
            for(int k=0,o=20;k<10;k++,o+=20){
                br3.write("dom_"+o+",");
                StringBuilder sb = new StringBuilder();
                for(int l=0;l<15;l++) {
                    sb.append(precision[k][l]);
                    if(l==14)
                        sb.append("\n");
                    else
                        sb.append(",");
                }
                
                br3.write(sb.toString());
            }
            br3.close();
            
            
            //writing recall to file
            String out_path4="../wekadata/results/";
            
            BufferedWriter br4 = new BufferedWriter(new FileWriter(out_path + folder + "_recall.csv"));
            br4.write(",,,,Weighted,,,,Benign,,,,Malware,,,\n");
            br4.write(",J48,RandomForest,NBT,FT,LMT,J48,RandomForest,NBT,FT,LMT,J48,RandomForest,NBT,FT,LMT\n");
            for(int k=0,o=20;k<10;k++,o+=20){
                br4.write("dom_"+o+",");
                StringBuilder sb = new StringBuilder();
                for(int l=0;l<15;l++) {
                    sb.append(recall[k][l]);
                    if(l==14)
                        sb.append("\n");
                    else
                        sb.append(",");
                }
                
                br4.write(sb.toString());
            }
            br4.close();
            
            //writing fmeasure to file
            String out_path5="../wekadata/results/";
            
            BufferedWriter br5 = new BufferedWriter(new FileWriter(out_path + folder + "_fmeasure.csv"));
            br5.write(",,,,Weighted,,,,Benign,,,,Malware,,,\n");
            br5.write(",J48,RandomForest,NBT,FT,LMT,J48,RandomForest,NBT,FT,LMT,J48,RandomForest,NBT,FT,LMT\n");
            for(int k=0,o=20;k<10;k++,o+=20){
                br5.write("dom_"+o+",");
                StringBuilder sb = new StringBuilder();
                for(int l=0;l<15;l++) {
                    sb.append(fmeasure[k][l]);
                    if(l==14)
                        sb.append("\n");
                    else
                        sb.append(",");
                }
                
                br5.write(sb.toString());
            }
            br5.close();
            
            
            //writing rocarea to file
            String out_path6="../wekadata/results/";
            
            BufferedWriter br6 = new BufferedWriter(new FileWriter(out_path + folder + "_rocarea.csv"));
            br6.write(",,,,Weighted,,,,Benign,,,,Malware,,,\n");
            br6.write(",J48,RandomForest,NBT,FT,LMT,J48,RandomForest,NBT,FT,LMT,J48,RandomForest,NBT,FT,LMT\n");
            for(int k=0,o=20;k<10;k++,o+=20){
                br6.write("dom_"+o+",");
                StringBuilder sb = new StringBuilder();
                for(int l=0;l<15;l++) {
                    sb.append(rocarea[k][l]);
                    if(l==14)
                        sb.append("\n");
                    else
                        sb.append(",");
                }
                
                br6.write(sb.toString());
            }
            br6.close();
            
            
            // writing tn rate in file
            String out_path7="../wekadata/results/";
            
            BufferedWriter br7 = new BufferedWriter(new FileWriter(out_path + folder + "_tnrate.csv"));
            br7.write(",,,,Weighted,,,,Benign,,,,Malware,,,\n");
            br7.write(",J48,RandomForest,NBT,FT,LMT,J48,RandomForest,NBT,FT,LMT,J48,RandomForest,NBT,FT,LMT\n");
            for(int k=0,o=20;k<10;k++,o+=20){
                br7.write("dom_"+o+",");
                StringBuilder sb = new StringBuilder();
                for(int l=0;l<15;l++) {
                    sb.append(tnrate[k][l]);
                    if(l==14)
                        sb.append("\n");
                    else
                        sb.append(",");
                }
                
                br7.write(sb.toString());
            }
            br7.close();
            
            //writing fnrate to file
            String out_path8="../wekadata/results/";
            
            BufferedWriter br8 = new BufferedWriter(new FileWriter(out_path + folder + "_fnrate.csv"));
            br8.write(", ,,,Weighted,,,,Benign,,,,Malware,,,\n");
            br8.write(",J48,RandomForest,NBT,FT,LMT,J48,RandomForest,NBT,FT,LMT,J48,RandomForest,NBT,FT,LMT\n");
            for(int k=0,o=20;k<10;k++,o+=20){
                br8.write("dom_"+o+",");
                StringBuilder sb = new StringBuilder();
                for(int l=0;l<15;l++) {
                    sb.append(fnrate[k][l]);
                    if(l==14)
                        sb.append("\n");
                    else
                        sb.append(",");
                }
                
                br8.write(sb.toString());
            }
            br8.close();
            
            //writing confusion matrix to file
            String out_path9="../wekadata/results/";
            
            BufferedWriter br9 = new BufferedWriter(new FileWriter(out_path + folder + "_confmat.csv"));
            br9.write(",J48_a,J48_b,RandomForest_a,RandomForest_b,NBT_a,NBT_b,FT_a,FT_b,LMT_a,LMT_b\n");
            for(int k=0,o=20;k<10;k++){
                if(k%2==0)
                    br9.write("dom_"+o+"_a,");
                else{
                    br9.write("dom_"+o+"_b,");
                    o+=20;
                }
                StringBuilder sb = new StringBuilder();
                for(int l=0;l<10;l++) {
                    sb.append(confmat[k][l]);
                    if(l==9)
                        sb.append("\n");
                    else
                        sb.append(",");
                }
                
                br9.write(sb.toString());
            }
            br9.close(); 
            
            
        }
        catch(Exception e){
            System.out.println(e);
            System.out.println("exception in csv writing");
        }
        
        
    }

}